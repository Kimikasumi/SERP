import { CommonModule, DOCUMENT, isPlatformBrowser, ÉµparseCookieValue } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Compiler, Component, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Host, HostBinding, HostListener, Inject, Injectable, InjectionToken, Injector, Input, IterableDiffers, NgModule, NgModuleRef, NgZone, Output, PLATFORM_ID, Pipe, Renderer2, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation, defineInjectable, forwardRef } from '@angular/core';
import { FormBuilder, FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgForm, NgModel, ReactiveFormsModule } from '@angular/forms';
import { DomSanitizer, Meta } from '@angular/platform-browser';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}



















function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isFunction(x) {
    return typeof x === 'function';
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var _enable_super_gross_mode_that_will_cause_bad_things = false;
/**
 * The global configuration object for RxJS, used to configure things
 * like what Promise contructor should used to create Promises
 */
var config = {
    /**
     * The promise constructor used by default for methods such as
     * {@link toPromise} and {@link forEach}
     */
    Promise: undefined,
    /**
     * If true, turns on synchronous error rethrowing, which is a deprecated behavior
     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
     * call in a try/catch block. It also enables producer interference, a nasty bug
     * where a multicast can be broken for all observers by a downstream consumer with
     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME
     * FOR MIGRATION REASONS.
     */
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = /*@__PURE__*/ new Error();
            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};

/**
 * Throws an error on another job so that it's picked up by the runtime's
 * uncaught error handling mechanism.
 * @param err the error to throw
 */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}

/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError(err);
        }
    },
    complete: function () { }
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isObject(x) {
    return x != null && typeof x === 'object';
}

// typeof any so that it we don't have to cast when comparing a result to the error object
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var errorObject = { e: {} };

/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */
var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.e = e;
        return errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = /*@__PURE__*/ (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        var _this = _super.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '') || this;
        _this.errors = errors;
        _this.name = 'UnsubscriptionError';
        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);
        return _this;
    }
    return UnsubscriptionError;
}(Error));

/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */
/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = /*@__PURE__*/ (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        /** @internal */
        this._parent = null;
        /** @internal */
        this._parents = null;
        /** @internal */
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction(_unsubscribe)) {
            var trial = tryCatch(_unsubscribe).call(this);
            if (trial === errorObject) {
                hasErrors = true;
                errors = errors || (errorObject.e instanceof UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);
            }
        }
        if (isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject(sub)) {
                    var trial = tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject.e;
                        if (err instanceof UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    /** @internal */
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    /** @nocollapse */
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? /*@__PURE__*/ Symbol.for('rxSubscriber')
    : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */

/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = /*@__PURE__*/ (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        /** @internal */ _this.syncErrorValue = null;
        /** @internal */ _this.syncErrorThrown = false;
        /** @internal */ _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in
                    // node_modules, we cannot rely on `instanceof` checks
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber]();
                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        _this.destination = trustedSubscriber;
                        trustedSubscriber.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     * @nocollapse
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== empty) {
                context = Object.create(observerOrNext);
                if (isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError(err);
                return true;
            }
        }
        return false;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber]);
}

/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber]) {
            return nextOrObserver[rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber(empty);
    }
    return new Subscriber(nextOrObserver, error, complete);
}

/** Symbol.observable or a string "@@observable". Used for interop */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

/* tslint:disable:no-empty */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function noop() { }

/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
/* tslint:enable:max-line-length */

/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}

/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = /*@__PURE__*/ (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        /** Internal implementation detail, do not use directly. */
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable$$1 = new Observable();
        observable$$1.source = this;
        observable$$1.operator = operator;
        return observable$$1;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     * @nocollapse
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
/**
 * Decides between a passed promise constructor from consuming code,
 * A default configured promise constructor, and the native promise
 * constructor and returns it. If nothing can be found, it will throw
 * an error.
 * @param promiseCtor The optional promise constructor to passed by consuming code
 */
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}

/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var _this = _super.call(this, 'object unsubscribed') || this;
        _this.name = 'ObjectUnsubscribedError';
        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);
        return _this;
    }
    return ObjectUnsubscribedError;
}(Error));

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber));
/**
 * @class Subject<T>
 */
var Subject = /*@__PURE__*/ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable();
        observable.source = this;
        return observable;
    };
    /**@nocollapse */
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable));
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = /*@__PURE__*/ (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator$1(source));
    };
}
var RefCountOperator$1 = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber$1(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber$1 = /*@__PURE__*/ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = /*@__PURE__*/ (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        /** @internal */
        _this._isComplete = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount()(this);
    };
    return ConnectableObservable;
}(Observable));

var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(SubjectSubscriber));
var RefCountOperator = /*@__PURE__*/ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount$$1 = connectable._refCount;
        if (refCount$$1 <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount$$1 - 1;
        if (refCount$$1 > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */

var GroupByOperator = /*@__PURE__*/ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new Subject());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = /*@__PURE__*/ (function (_super) {
    __extends(GroupedObservable, _super);
    /** @deprecated Do not construct this type. Internal use only */
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */
/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = /*@__PURE__*/ (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated This is an internal implementation detail, do not use. */
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject));

/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = /*@__PURE__*/ (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this;
    };
    return Action;
}(Subscription));

/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = /*@__PURE__*/ (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action));

/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = /*@__PURE__*/ (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction));

/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 * @deprecated Scheduler is an internal implementation detail of RxJS, and
 * should not be used directly. Rather, create your own class and implement
 * {@link SchedulerLike}
 */
var Scheduler = /*@__PURE__*/ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    /** @nocollapse */
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());

/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
var AsyncScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) {
            now = Scheduler.now;
        }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         * @deprecated internal use only
         */
        _this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         * @deprecated internal use only
         */
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) {
            delay = 0;
        }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
var QueueScheduler = /*@__PURE__*/ (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler));

/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */
/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
/**
 * The same Observable instance returned by any call to {@link empty} without a
 * {@link Scheduler}. It is preferrable to use this over `empty()`.
 */
var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits a complete notification.
 *
 * <span class="informal">Just emits 'complete', and nothing else.
 * </span>
 *
 * <img src="./img/empty.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the complete notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then complete.</caption>
 * var result = Rx.Observable.empty().startWith(7);
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
 * var interval = Rx.Observable.interval(1000);
 * var result = interval.mergeMap(x =>
 *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following to the console:
 * // x is equal to the count on the interval eg(0,1,2,3,...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1 print abc
 * // if x % 2 is not equal to 1 nothing will be output
 *
 * @see {@link create}
 * @see {@link never}
 * @see {@link of}
 * @see {@link throw}
 *
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the complete notification.
 * @return {Observable} An "empty" Observable: emits only the complete
 * notification.
 * @static true
 * @name empty
 * @owner Observable
 * @deprecated Deprecated in favor of using EMPTY constant.
 */
function empty$1(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}

/**
 * Subscribes to an ArrayLike with a subscriber
 * @param array The array or array-like to subscribe to
 */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var subscribeToArray = function (array) {
    return function (subscriber) {
        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        if (!subscriber.closed) {
            subscriber.complete();
        }
    };
};

/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */
function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToArray(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
function scalar(value) {
    var result = new Observable(function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}

/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */
function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (isScheduler(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return empty$1(scheduler);
        case 1:
            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);
        default:
            return fromArray(args, scheduler);
    }
}

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits an error notification.
 *
 * <span class="informal">Just emits 'error', and nothing else.
 * </span>
 *
 * <img src="./img/throw.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the error notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then emit an error.</caption>
 * import { throwError, concat, of } from 'rxjs/create';
 *
 * const result = concat(of(7), throwError(new Error('oops!')));
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
 * import { throwError, interval, of } from 'rxjs/create';
 * import { mergeMap } from 'rxjs/operators';
 *
 * interval(1000).pipe(
 *   mergeMap(x => x === 13 ?
 *     throwError('Thirteens are bad') :
 *     of('a', 'b', 'c')
 *   )
 * ).subscribe(x => console.log(x), e => console.error(e));
 *
 * @see {@link create}
 * @see {@link empty}
 * @see {@link never}
 * @see {@link of}
 *
 * @param {any} error The particular Error to pass to the error notification.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the error notification.
 * @return {Observable} An error Observable: emits only the error notification
 * using the given error argument.
 * @static true
 * @name throw
 * @owner Observable
 */
function throwError(error, scheduler) {
    if (!scheduler) {
        return new Observable(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}

/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */
/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = /*@__PURE__*/ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return of(this.value);
            case 'E':
                return throwError(this.error);
            case 'C':
                return empty$1();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     * @nocollapse
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());

/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */

var ObserveOnOperator = /*@__PURE__*/ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    /** @nocollapse */
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber));
var ObserveOnMessage = /*@__PURE__*/ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());

/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */
/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = /*@__PURE__*/ (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) {
            bufferSize = Number.POSITIVE_INFINITY;
        }
        if (windowTime === void 0) {
            windowTime = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        // Since this method is invoked in every next() call than the buffer
        // can overgrow the max size only by one item
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    ReplaySubject.prototype._subscribe = function (subscriber) {
        // When `_infiniteTimeWindow === true` then the buffer is already trimmed
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject));
var ReplayEvent = /*@__PURE__*/ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());

/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */
/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = /*@__PURE__*/ (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};

/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = /*@__PURE__*/ (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(AsyncAction));

/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
var AsapScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler));

/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */
/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => console.log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);

/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = /*@__PURE__*/ (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction));

/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */
var AnimationFrameScheduler = /*@__PURE__*/ (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler));

/** PURE_IMPORTS_START _AnimationFrameAction,_AnimationFrameScheduler PURE_IMPORTS_END */
/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.animationFrame.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
var animationFrame = /*@__PURE__*/ new AnimationFrameScheduler(AnimationFrameAction);

/** PURE_IMPORTS_START tslib,_AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
var VirtualTimeScheduler = /*@__PURE__*/ (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) {
            SchedulerAction = VirtualAction;
        }
        if (maxFrames === void 0) {
            maxFrames = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = /*@__PURE__*/ (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) {
            index = scheduler.index += 1;
        }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        // If an action is rescheduled, we save allocations by mutating its state,
        // pushing it to the end of the scheduler queue, and recycling the action.
        // But since the VirtualTimeScheduler is used for testing, VirtualActions
        // must be immutable so they can be inspected later.
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
/**
 * Tests to see if the object is an RxJS {@link Observable}
 * @param obj the object to test
 */

/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {
    __extends(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var _this = _super.call(this, 'argument out of range') || this;
        _this.name = 'ArgumentOutOfRangeError';
        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);
        return _this;
    }
    return ArgumentOutOfRangeError;
}(Error));

/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = /*@__PURE__*/ (function (_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
        var _this = _super.call(this, 'no elements in sequence') || this;
        _this.name = 'EmptyError';
        Object.setPrototypeOf(_this, EmptyError.prototype);
        return _this;
    }
    return EmptyError;
}(Error));

/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = /*@__PURE__*/ (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var _this = _super.call(this, 'Timeout has occurred') || this;
        _this.name = 'TimeoutError';
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        return _this;
    }
    return TimeoutError;
}(Error));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
var MapOperator = /*@__PURE__*/ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isArray,_util_isScheduler PURE_IMPORTS_END */
// tslint:enable:max-line-length
/**
 * Converts a callback API to a function that returns an Observable.
 *
 * <span class="informal">Give it a function `f` of type `f(x, callback)` and
 * it will return a function `g` that when called as `g(x)` will output an
 * Observable.</span>
 *
 * `bindCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, the
 * last parameter must be a callback function that `func` calls when it is
 * done.
 *
 * The output of `bindCallback` is a function that takes the same parameters
 * as `func`, except the last one (the callback). When the output function
 * is called with arguments it will return an Observable. If function `func`
 * calls its callback with one argument the Observable will emit that value.
 * If on the other hand the callback is called with multiple values the resulting
 * Observable will emit an array with said values as arguments.
 *
 * It is very important to remember that input function `func` is not called
 * when the output function is, but rather when the Observable returned by the output
 * function is subscribed. This means if `func` makes an AJAX request, that request
 * will be made every time someone subscribes to the resulting Observable, but not before.
 *
 * The last optional parameter - {@link Scheduler} - can be used to control when the call
 * to `func` happens after someone subscribes to Observable, as well as when results
 * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`
 * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,
 * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler
 * and call `subscribe` on the output Observable all function calls that are currently executing
 * will end before `func` is invoked.
 *
 * By default results passed to the callback are emitted immediately after `func` invokes the callback.
 * In particular, if the callback is called synchronously the subscription of the resulting Observable
 * will call the `next` function synchronously as well.  If you want to defer that call,
 * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can
 * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.
 *
 * Note that the Observable created by the output function will always emit a single value
 * and then complete immediately. If `func` calls the callback multiple times, values from subsequent
 * calls will not appear in the stream. If you need to listen for multiple calls,
 *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.
 *
 * If `func` depends on some context (`this` property) and is not already bound the context of `func`
 * will be the context that the output function has at call time. In particular, if `func`
 * is called as a method of some objec and if `func` is not already bound, in order to preserve the context
 * it is recommended that the context of the output function is set to that object as well.
 *
 * If the input function calls its callback in the "node style" (i.e. first argument to callback is
 * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}
 * provides convenient error handling and probably is a better choice.
 * `bindCallback` will treat such functions the same as any other and error parameters
 * (whether passed or not) will always be interpreted as regular callback argument.
 *
 *
 * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
 * // Suppose we have jQuery.getJSON('/my/url', callback)
 * var getJSONAsObservable = bindCallback(jQuery.getJSON);
 * var result = getJSONAsObservable('/my/url');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Receive an array of arguments passed to a callback</caption>
 * someFunction((a, b, c) => {
 *   console.log(a); // 5
 *   console.log(b); // 'some string'
 *   console.log(c); // {someProperty: 'someValue'}
 * });
 *
 * const boundSomeFunction = bindCallback(someFunction);
 * boundSomeFunction().subscribe(values => {
 *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]
 * });
 *
 *
 * @example <caption>Compare behaviour with and without async Scheduler</caption>
 * function iCallMyCallbackSynchronously(cb) {
 *   cb();
 * }
 *
 * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);
 * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
 *
 * boundSyncFn().subscribe(() => console.log('I was sync!'));
 * boundAsyncFn().subscribe(() => console.log('I was async!'));
 * console.log('This happened...');
 *
 * // Logs:
 * // I was sync!
 * // This happened...
 * // I was async!
 *
 *
 * @example <caption>Use bindCallback on an object method</caption>
 * const boundMethod = bindCallback(someObject.methodWithCallback);
 * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
 * .subscribe(subscriber);
 *
 *
 * @see {@link bindNodeCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func A function with a callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the callback would deliver.
 * @name bindCallback
 */

/** PURE_IMPORTS_START _Observable,_AsyncSubject,_operators_map,_util_isScheduler,_util_isArray PURE_IMPORTS_END */
/**
 * Converts a Node.js-style callback API to a function that returns an
 * Observable.
 *
 * <span class="informal">It's just like {@link bindCallback}, but the
 * callback is expected to be of type `callback(error, result)`.</span>
 *
 * `bindNodeCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, but the
 * last parameter must be a callback function that `func` calls when it is
 * done. The callback function is expected to follow Node.js conventions,
 * where the first argument to the callback is an error object, signaling
 * whether call was successful. If that object is passed to callback, it means
 * something went wrong.
 *
 * The output of `bindNodeCallback` is a function that takes the same
 * parameters as `func`, except the last one (the callback). When the output
 * function is called with arguments, it will return an Observable.
 * If `func` calls its callback with error parameter present, Observable will
 * error with that value as well. If error parameter is not passed, Observable will emit
 * second parameter. If there are more parameters (third and so on),
 * Observable will emit an array with all arguments, except first error argument.
 *
 * Note that `func` will not be called at the same time output function is,
 * but rather whenever resulting Observable is subscribed. By default call to
 * `func` will happen synchronously after subscription, but that can be changed
 * with proper {@link Scheduler} provided as optional third parameter. Scheduler
 * can also control when values from callback will be emitted by Observable.
 * To find out more, check out documentation for {@link bindCallback}, where
 * Scheduler works exactly the same.
 *
 * As in {@link bindCallback}, context (`this` property) of input function will be set to context
 * of returned function, when it is called.
 *
 * After Observable emits value, it will complete immediately. This means
 * even if `func` calls callback again, values from second and consecutive
 * calls will never appear on the stream. If you need to handle functions
 * that call callbacks multiple times, check out {@link fromEvent} or
 * {@link fromEventPattern} instead.
 *
 * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
 * "Node.js-style" callbacks are just a convention, so if you write for
 * browsers or any other environment and API you use implements that callback style,
 * `bindNodeCallback` can be safely used on that API functions as well.
 *
 * Remember that Error object passed to callback does not have to be an instance
 * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
 * Error parameter of callback function is interpreted as "present", when value
 * of that parameter is truthy. It could be, for example, non-zero number, non-empty
 * string or boolean `true`. In all of these cases resulting Observable would error
 * with that value. This means usually regular style callbacks will fail very often when
 * `bindNodeCallback` is used. If your Observable errors much more often then you
 * would expect, check if callback really is called in Node.js-style and, if not,
 * switch to {@link bindCallback} instead.
 *
 * Note that even if error parameter is technically present in callback, but its value
 * is falsy, it still won't appear in array emitted by Observable.
 *
 *
 * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
 * import * as fs from 'fs';
 * var readFileAsObservable = bindNodeCallback(fs.readFile);
 * var result = readFileAsObservable('./roadNames.txt', 'utf8');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Use on function calling callback with multiple arguments</caption>
 * someFunction((err, a, b) => {
 *   console.log(err); // null
 *   console.log(a); // 5
 *   console.log(b); // "some string"
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(value => {
 *   console.log(value); // [5, "some string"]
 * });
 *
 * @example <caption>Use on function calling callback in regular style</caption>
 * someFunction(a => {
 *   console.log(a); // 5
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(
 *   value => {}             // never gets called
 *   err => console.log(err) // 5
 * );
 *
 *
 * @see {@link bindCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func Function with a Node.js-style callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the Node.js callback would
 * deliver.
 * @name bindNodeCallback
 */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
var subscribeToPromise = function (promise) {
    return function (subscriber) {
        promise.then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, hostReportError);
        return subscriber;
    };
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator = /*@__PURE__*/ getSymbolIterator();
/**
 * @deprecated use {@link iterator} instead
 */

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
var subscribeToIterable = function (iterable) {
    return function (subscriber) {
        var iterator$$1 = iterable[iterator]();
        do {
            var item = iterator$$1.next();
            if (item.done) {
                subscriber.complete();
                break;
            }
            subscriber.next(item.value);
            if (subscriber.closed) {
                break;
            }
        } while (true);
        // Finalize the iterator if it happens to be a Generator
        if (typeof iterator$$1.return === 'function') {
            subscriber.add(function () {
                if (iterator$$1.return) {
                    iterator$$1.return();
                }
            });
        }
        return subscriber;
    };
};

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
/**
 * Subscribes to an object that implements Symbol.observable with the given
 * Subscriber.
 * @param obj An object that implements Symbol.observable
 */
var subscribeToObservable = function (obj) {
    return function (subscriber) {
        var obs = obj[observable]();
        if (typeof obs.subscribe !== 'function') {
            // Should be caught by observable subscribe function error handling.
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        }
        else {
            return obs.subscribe(subscriber);
        }
    };
};

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

/** PURE_IMPORTS_START  PURE_IMPORTS_END */
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}

/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
var subscribeTo = function (result) {
    if (result instanceof Observable) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (isArrayLike(result)) {
        return subscribeToArray(result);
    }
    else if (isPromise(result)) {
        return subscribeToPromise(result);
    }
    else if (result && typeof result[iterator] === 'function') {
        return subscribeToIterable(result);
    }
    else if (result && typeof result[observable] === 'function') {
        return subscribeToObservable(result);
    }
    else {
        var value = isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};

/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */
function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    return subscribeTo(result)(destination);
}

/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */
var NONE = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 */

var CombineLatestOperator = /*@__PURE__*/ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
/** Identifies an input as being Observable (but not necessary an Rx Observable) */
function isInteropObservable(input) {
    return input && typeof input[observable] === 'function';
}

/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
/** Identifies an input as being an Iterable */
function isIterable(input) {
    return input && typeof input[iterator] === 'function';
}

/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToPromise PURE_IMPORTS_END */
function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToPromise(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                return input.then(function (value) {
                    sub.add(scheduler.schedule(function () {
                        subscriber.next(value);
                        sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                    }));
                }, function (err) {
                    sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
                });
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */
function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new Observable(subscribeToIterable(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            var iterator$$1;
            sub.add(function () {
                // Finalize generators
                if (iterator$$1 && typeof iterator$$1.return === 'function') {
                    iterator$$1.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator$$1 = input[iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator$$1.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable,_util_subscribeToObservable PURE_IMPORTS_END */
function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new Observable(subscribeToObservable(input));
    }
    else {
        return new Observable(function (subscriber) {
            var sub = new Subscription();
            sub.add(scheduler.schedule(function () {
                var observable$$1 = input[observable]();
                sub.add(observable$$1.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}

/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */
function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable) {
            return input;
        }
        return new Observable(subscribeTo(input));
    }
    if (input != null) {
        if (isInteropObservable(input)) {
            return fromObservable(input, scheduler);
        }
        else if (isPromise(input)) {
            return fromPromise(input, scheduler);
        }
        else if (isArrayLike(input)) {
            return fromArray(input, scheduler);
        }
        else if (isIterable(input) || typeof input === 'string') {
            return fromIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}

/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
        concurrent = Number.POSITIVE_INFINITY;
    }
    if (typeof resultSelector === 'function') {
        // DEPRECATED PATH
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
var MergeMapOperator = /*@__PURE__*/ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */

/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */

/** PURE_IMPORTS_START _util_isScheduler,_of,_from,_operators_concatAll PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */

/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
/**
 * Creates an Observable that, on subscribe, calls an Observable factory to
 * make an Observable for each new Observer.
 *
 * <span class="informal">Creates the Observable lazily, that is, only when it
 * is subscribed.
 * </span>
 *
 * <img src="./img/defer.png" width="100%">
 *
 * `defer` allows you to create the Observable only when the Observer
 * subscribes, and create a fresh Observable for each Observer. It waits until
 * an Observer subscribes to it, and then it generates an Observable,
 * typically with an Observable factory function. It does this afresh for each
 * subscriber, so although each subscriber may think it is subscribing to the
 * same Observable, in fact each subscriber gets its own individual
 * Observable.
 *
 * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
 * var clicksOrInterval = Rx.Observable.defer(function () {
 *   if (Math.random() > 0.5) {
 *     return Rx.Observable.fromEvent(document, 'click');
 *   } else {
 *     return Rx.Observable.interval(1000);
 *   }
 * });
 * clicksOrInterval.subscribe(x => console.log(x));
 *
 * // Results in the following behavior:
 * // If the result of Math.random() is greater than 0.5 it will listen
 * // for clicks anywhere on the "document"; when document is clicked it
 * // will log a MouseEvent object to the console. If the result is less
 * // than 0.5 it will emit ascending numbers, one every second(1000ms).
 *
 * @see {@link create}
 *
 * @param {function(): SubscribableOrPromise} observableFactory The Observable
 * factory function to invoke for each Observer that subscribes to the output
 * Observable. May also return a Promise, which will be converted on the fly
 * to an Observable.
 * @return {Observable} An Observable whose Observers' subscriptions trigger
 * an invocation of the given Observable factory function.
 * @static true
 * @name defer
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Observable,_util_isArray,_empty,_util_subscribeToResult,_OuterSubscriber,_operators_map PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Joins last values emitted by passed Observables.
 *
 * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
 *
 * <img src="./img/forkJoin.png" width="100%">
 *
 * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
 * or directly as arguments. If no input Observables are provided, resulting stream will complete
 * immediately.
 *
 * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
 * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
 * array will have `n` values, where first value is the last thing emitted by the first Observable,
 * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
 * not emit more than once and it will complete after that. If you need to emit combined values not only
 * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
 * or {@link zip} instead.
 *
 * In order for resulting array to have the same length as the number of input Observables, whenever any of
 * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
 * and it will not emit anything either, even if it already has some last values from other Observables.
 * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
 * unless at any point some other Observable completes without emitting value, which brings us back to
 * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
 * have to emit something at least once and complete.
 *
 * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
 * will be immediately unsubscribed.
 *
 * Optionally `forkJoin` accepts project function, that will be called with values which normally
 * would land in emitted array. Whatever is returned by project function, will appear in output
 * Observable instead. This means that default project can be thought of as a function that takes
 * all its arguments and puts them into an array. Note that project function will be called only
 * when output Observable is supposed to emit a result.
 *
 * @example <caption>Use forkJoin with operator emitting immediately</caption>
 * import { forkJoin, of } from 'rxjs';
 *
 * const observable = forkJoin(
 *   of(1, 2, 3, 4),
 *   of(5, 6, 7, 8)
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [4, 8]
 * // "This is how it ends!"
 *
 *
 * @example <caption>Use forkJoin with operator emitting after some time</caption>
 * import { forkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [2, 3] after 3 seconds
 * // "This is how it ends!" immediately after
 *
 *
 * @example <caption>Use forkJoin with project function</caption>
 * import { jorkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete
 *   (n, m) => n + m
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // 5 after 3 seconds
 * // "This is how it ends!" immediately after
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 *
 * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments
 * passed directly to the operator.
 * @param {function} [project] Function that takes values emitted by input Observables and returns value
 * that will appear in resulting Observable instead of default array.
 * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
 * or value from project function.
 */

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Creates an Observable that emits events of a specific type coming from the
 * given event target.
 *
 * <span class="informal">Creates an Observable from DOM events, or Node.js
 * EventEmitter events or others.</span>
 *
 * <img src="./img/fromEvent.png" width="100%">
 *
 * `fromEvent` accepts as a first argument event target, which is an object with methods
 * for registering event handler functions. As a second argument it takes string that indicates
 * type of event we want to listen for. `fromEvent` supports selected types of event targets,
 * which are described in detail below. If your event target does not match any of the ones listed,
 * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.
 * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event
 * handler functions have different names, but they all accept a string describing event type
 * and function itself, which will be called whenever said event happens.
 *
 * Every time resulting Observable is subscribed, event handler function will be registered
 * to event target on given event type. When that event fires, value
 * passed as a first argument to registered function will be emitted by output Observable.
 * When Observable is unsubscribed, function will be unregistered from event target.
 *
 * Note that if event target calls registered function with more than one argument, second
 * and following arguments will not appear in resulting stream. In order to get access to them,
 * you can pass to `fromEvent` optional project function, which will be called with all arguments
 * passed to event handler. Output Observable will then emit value returned by project function,
 * instead of the usual value.
 *
 * Remember that event targets listed below are checked via duck typing. It means that
 * no matter what kind of object you have and no matter what environment you work in,
 * you can safely use `fromEvent` on that object if it exposes described methods (provided
 * of course they behave as was described above). So for example if Node.js library exposes
 * event target which has the same method names as DOM EventTarget, `fromEvent` is still
 * a good choice.
 *
 * If the API you use is more callback then event handler oriented (subscribed
 * callback function fires only once and thus there is no need to manually
 * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}
 * instead.
 *
 * `fromEvent` supports following types of event targets:
 *
 * **DOM EventTarget**
 *
 * This is an object with `addEventListener` and `removeEventListener` methods.
 *
 * In the browser, `addEventListener` accepts - apart from event type string and event
 * handler function arguments - optional third parameter, which is either an object or boolean,
 * both used for additional configuration how and when passed function will be called. When
 * `fromEvent` is used with event target of that type, you can provide this values
 * as third parameter as well.
 *
 * **Node.js EventEmitter**
 *
 * An object with `addListener` and `removeListener` methods.
 *
 * **JQuery-style event target**
 *
 * An object with `on` and `off` methods
 *
 * **DOM NodeList**
 *
 * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.
 *
 * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes
 * it contains and install event handler function in every of them. When returned Observable
 * is unsubscribed, function will be removed from all Nodes.
 *
 * **DOM HtmlCollection**
 *
 * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is
 * installed and removed in each of elements.
 *
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * var clicks = fromEvent(document, 'click');
 * clicks.subscribe(x => console.log(x));
 *
 * // Results in:
 * // MouseEvent object logged to console every time a click
 * // occurs on the document.
 *
 *
 * @example <caption>Use addEventListener with capture option</caption>
 * var clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter
 *                                                                          // which will be passed to addEventListener
 * var clicksInDiv = fromEvent(someDivInDocument, 'click');
 *
 * clicksInDocument.subscribe(() => console.log('document'));
 * clicksInDiv.subscribe(() => console.log('div'));
 *
 * // By default events bubble UP in DOM tree, so normally
 * // when we would click on div in document
 * // "div" would be logged first and then "document".
 * // Since we specified optional `capture` option, document
 * // will catch event when it goes DOWN DOM tree, so console
 * // will log "document" and then "div".
 *
 * @see {@link bindCallback}
 * @see {@link bindNodeCallback}
 * @see {@link fromEventPattern}
 *
 * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js
 * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.
 * @param {string} eventName The event name of interest, being emitted by the
 * `target`.
 * @param {EventListenerOptions} [options] Options to pass through to addEventListener
 * @return {Observable<T>}
 * @name fromEvent
 */

/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Creates an Observable from an API based on addHandler/removeHandler
 * functions.
 *
 * <span class="informal">Converts any addHandler/removeHandler API to an
 * Observable.</span>
 *
 * <img src="./img/fromEventPattern.png" width="100%">
 *
 * Creates an Observable by using the `addHandler` and `removeHandler`
 * functions to add and remove the handlers. The `addHandler` is
 * called when the output Observable is subscribed, and `removeHandler` is
 * called when the Subscription is unsubscribed.
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * function addClickHandler(handler) {
 *   document.addEventListener('click', handler);
 * }
 *
 * function removeClickHandler(handler) {
 *   document.removeEventListener('click', handler);
 * }
 *
 * var clicks = fromEventPattern(
 *   addClickHandler,
 *   removeClickHandler
 * );
 * clicks.subscribe(x => console.log(x));
 *
 * @see {@link from}
 * @see {@link fromEvent}
 *
 * @param {function(handler: Function): any} addHandler A function that takes
 * a `handler` function as argument and attaches it somehow to the actual
 * source of events.
 * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
 * takes a `handler` function as argument and removes it in case it was
 * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
 * removeHandler function will forward it.
 * @return {Observable<T>}
 * @name fromEventPattern
 */

/** PURE_IMPORTS_START _Observable,_util_identity,_util_isScheduler PURE_IMPORTS_END */

/** PURE_IMPORTS_START _defer,_empty PURE_IMPORTS_END */
/**
 * Decides at subscription time which Observable will actually be subscribed.
 *
 * <span class="informal">`If` statement for Observables.</span>
 *
 * `if` accepts a condition function and two Observables. When
 * an Observable returned by the operator is subscribed, condition function will be called.
 * Based on what boolean it returns at that moment, consumer will subscribe either to
 * the first Observable (if condition was true) or to the second (if condition was false). Condition
 * function may also not return anything - in that case condition will be evaluated as false and
 * second Observable will be subscribed.
 *
 * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that
 * was left undefined, resulting stream will simply complete immediately. That allows you to, rather
 * then controlling which Observable will be subscribed, decide at runtime if consumer should have access
 * to given Observable or not.
 *
 * If you have more complex logic that requires decision between more than two Observables, {@link defer}
 * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}
 * and exists only for convenience and readability reasons.
 *
 *
 * @example <caption>Change at runtime which Observable will be subscribed</caption>
 * let subscribeToFirst;
 * const firstOrSecond = Rx.Observable.if(
 *   () => subscribeToFirst,
 *   Rx.Observable.of('first'),
 *   Rx.Observable.of('second')
 * );
 *
 * subscribeToFirst = true;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "first"
 *
 * subscribeToFirst = false;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "second"
 *
 *
 * @example <caption>Control an access to an Observable</caption>
 * let accessGranted;
 * const observableIfYouHaveAccess = Rx.Observable.if(
 *   () => accessGranted,
 *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.
 * );
 *
 * accessGranted = true;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "It seems you have an access..."
 * // "The end"
 *
 * accessGranted = false;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "The end"
 *
 * @see {@link defer}
 *
 * @param {function(): boolean} condition Condition which Observable should be chosen.
 * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.
 * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.
 * @return {Observable} Either first or second Observable, depending on condition.
 * @static true
 * @name iif
 * @owner Observable
 */

/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */
function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;
}

/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */
/**
 * Creates an Observable that emits sequential numbers every specified
 * interval of time, on a specified IScheduler.
 *
 * <span class="informal">Emits incremental numbers periodically in time.
 * </span>
 *
 * <img src="./img/interval.png" width="100%">
 *
 * `interval` returns an Observable that emits an infinite sequence of
 * ascending integers, with a constant interval of time of your choosing
 * between those emissions. The first emission is not sent immediately, but
 * only after the first period has passed. By default, this operator uses the
 * `async` IScheduler to provide a notion of time, but you may pass any
 * IScheduler to it.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
 * var numbers = Rx.Observable.interval(1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link delay}
 *
 * @param {number} [period=0] The interval size in milliseconds (by default)
 * or the time unit determined by the scheduler's clock.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a sequential number each time
 * interval.
 * @static true
 * @name interval
 * @owner Observable
 */

/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */

/** PURE_IMPORTS_START _Observable,_util_noop PURE_IMPORTS_END */
/**
 * An Observable that emits no items to the Observer and never completes.
 *
 * <img src="./img/never.png" width="100%">
 *
 * A simple Observable that emits neither values nor errors nor the completion
 * notification. It can be used for testing purposes or for composing with other
 * Observables. Please note that by never emitting a complete notification, this
 * Observable keeps the subscription from being disposed automatically.
 * Subscriptions need to be manually disposed.
 *
 * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
 * function info() {
 *   console.log('Will not be called');
 * }
 * var result = NEVER.startWith(7);
 * result.subscribe(x => console.log(x), info, info);
 *
 * @see {@link create}
 * @see {@link EMPTY}
 * @see {@link of}
 * @see {@link throwError}
 */
var NEVER = /*@__PURE__*/ new Observable(noop);
/**
 * @deprecated Deprecated in favor of using NEVER constant.
 */

/** PURE_IMPORTS_START _Observable,_from,_util_isArray,_empty PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.
 * If the source it's subscribed to emits an error or completes, it will move to the next source
 * without error.
 *
 * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.
 *
 * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its
 * sources emits an error.
 *
 * Note that there is no way to handle any errors thrown by sources via the resuult of
 * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can
 * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * import { onErrorResumeNext, of } from 'rxjs/create';
 * import { map } from 'rxjs/operators';
 *
 * onErrorResumeNext(
 *  of(1, 2, 3, 0).pipe(
 *    map(x => {
 *      if (x === 0) throw Error();
 *      return 10 / x;
 *    })
 *  ),
 *  of(1, 2, 3),
 * )
 * .subscribe(
 *   val => console.log(val),
 *   err => console.log(err),          // Will never be called.
 *   () => console.log('done')
 * );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "done"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.
 * @return {Observable} An Observable that concatenates all sources, one after the other,
 * ignoring all errors, such that any error causes it to move on to the next source.
 */

/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
/**
 * Convert an object into an observable sequence of [key, value] pairs
 * using an optional IScheduler to enumerate the object.
 *
 * @example <caption>Converts a javascript object to an Observable</caption>
 * var obj = {
 *   foo: 42,
 *   bar: 56,
 *   baz: 78
 * };
 *
 * var source = Rx.Observable.pairs(obj);
 *
 * var subscription = source.subscribe(
 *   function (x) {
 *     console.log('Next: %s', x);
 *   },
 *   function (err) {
 *     console.log('Error: %s', err);
 *   },
 *   function () {
 *     console.log('Completed');
 *   });
 *
 * @param {Object} obj The object to inspect and turn into an
 * Observable sequence.
 * @param {Scheduler} [scheduler] An optional IScheduler to run the
 * enumeration of the input sequence on.
 * @returns {(Observable<[string, T]>)} An observable sequence of
 * [key, value] pairs from the object.
 */

/** @internal */

/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var RaceOperator = /*@__PURE__*/ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
/**
 * Creates an Observable that emits a sequence of numbers within a specified
 * range.
 *
 * <span class="informal">Emits a sequence of numbers in a range.</span>
 *
 * <img src="./img/range.png" width="100%">
 *
 * `range` operator emits a range of sequential integers, in order, where you
 * select the `start` of the range and its `length`. By default, uses no
 * IScheduler and just delivers the notifications synchronously, but may use
 * an optional IScheduler to regulate those deliveries.
 *
 * @example <caption>Emits the numbers 1 to 10</caption>
 * var numbers = Rx.Observable.range(1, 10);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link interval}
 *
 * @param {number} [start=0] The value of the first integer in the sequence.
 * @param {number} [count=0] The number of sequential integers to generate.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emissions of the notifications.
 * @return {Observable} An Observable of numbers that emits a finite range of
 * sequential integers.
 * @static true
 * @name range
 * @owner Observable
 */

/** @internal */

/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */
/**
 * Creates an Observable that starts emitting after an `initialDelay` and
 * emits ever increasing numbers after each `period` of time thereafter.
 *
 * <span class="informal">Its like {@link interval}, but you can specify when
 * should the emissions start.</span>
 *
 * <img src="./img/timer.png" width="100%">
 *
 * `timer` returns an Observable that emits an infinite sequence of ascending
 * integers, with a constant interval of time, `period` of your choosing
 * between those emissions. The first emission happens after the specified
 * `initialDelay`. The initial delay may be a {@link Date}. By default, this
 * operator uses the `async` IScheduler to provide a notion of time, but you
 * may pass any IScheduler to it. If `period` is not specified, the output
 * Observable emits only one value, `0`. Otherwise, it emits an infinite
 * sequence.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
 * var numbers = Rx.Observable.timer(3000, 1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @example <caption>Emits one number after five seconds</caption>
 * var numbers = Rx.Observable.timer(5000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link interval}
 * @see {@link delay}
 *
 * @param {number|Date} [dueTime] The initial delay time to wait before
 * emitting the first value of `0`.
 * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the
 * subsequent numbers.
 * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a `0` after the
 * `initialDelay` and ever increasing numbers after each `period` of time
 * thereafter.
 * @static true
 * @name timer
 * @owner Observable
 */

/** PURE_IMPORTS_START _Observable,_from,_empty PURE_IMPORTS_END */
/**
 * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.
 *
 * <span class="informal">Use it when you catch yourself cleaning up after an Observable.</span>
 *
 * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.
 * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with
 * that object and should return an Observable. That Observable can use resource object during its execution.
 * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor
 * resource object will be shared in any way between subscriptions.
 *
 * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed
 * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output
 * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,
 * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which
 * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone
 * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make
 * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.
 *
 * @see {@link defer}
 *
 * @param {function(): ISubscription} resourceFactory A function which creates any resource object
 * that implements `unsubscribe` method.
 * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which
 * creates an Observable, that can use injected resource object.
 * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but
 * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.
 */

/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => console.log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */

var ZipOperator = /*@__PURE__*/ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) {
            values = Object.create(null);
        }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator$$1 = iterators[i];
            if (iterator$$1.stillUnsubscribed) {
                this.add(iterator$$1.subscribe(iterator$$1, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator$$1 = iterators[i];
            if (typeof iterator$$1.hasValue === 'function' && !iterator$$1.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator$$1 = iterators[i];
            var result = iterator$$1.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator$$1.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber));
var StaticIterator = /*@__PURE__*/ (function () {
    function StaticIterator(iterator$$1) {
        this.iterator = iterator$$1;
        this.nextResult = iterator$$1.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /*@__PURE__*/ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = /*@__PURE__*/ (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[iterator] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber));

/* Observable */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Ignores source values for a duration determined by another Observable, then
 * emits the most recent value from the source Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link auditTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/audit.png" width="100%">
 *
 * `audit` is similar to `throttle`, but emits the last value from the silenced
 * time window, instead of the first value. `audit` emits the most recent value
 * from the source Observable on the output Observable as soon as its internal
 * timer becomes disabled, and ignores source values while the timer is enabled.
 * Initially, the timer is disabled. As soon as the first source value arrives,
 * the timer is enabled by calling the `durationSelector` function with the
 * source value, which returns the "duration" Observable. When the duration
 * Observable emits a value or completes, the timer is disabled, then the most
 * recent source value is emitted on the output Observable, and this process
 * repeats for the next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.audit(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration, returned as an Observable or a Promise.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method audit
 * @owner Observable
 */

var AuditOperator = /*@__PURE__*/ (function () {
    function AuditOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    AuditOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    };
    return AuditOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AuditSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(AuditSubscriber, _super);
    function AuditSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        return _this;
    }
    AuditSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            var duration = tryCatch(this.durationSelector)(value);
            if (duration === errorObject) {
                this.destination.error(errorObject.e);
            }
            else {
                var innerSubscription = subscribeToResult(this, duration);
                if (!innerSubscription || innerSubscription.closed) {
                    this.clearThrottle();
                }
                else {
                    this.add(this.throttled = innerSubscription);
                }
            }
        }
    };
    AuditSubscriber.prototype.clearThrottle = function () {
        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    };
    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    };
    AuditSubscriber.prototype.notifyComplete = function () {
        this.clearThrottle();
    };
    return AuditSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _scheduler_async,_audit,_observable_timer PURE_IMPORTS_END */
/**
 * Ignores source values for `duration` milliseconds, then emits the most recent
 * value from the source Observable, then repeats this process.
 *
 * <span class="informal">When it sees a source values, it ignores that plus
 * the next ones for `duration` milliseconds, and then it emits the most recent
 * value from the source.</span>
 *
 * <img src="./img/auditTime.png" width="100%">
 *
 * `auditTime` is similar to `throttleTime`, but emits the last value from the
 * silenced time window, instead of the first value. `auditTime` emits the most
 * recent value from the source Observable on the output Observable as soon as
 * its internal timer becomes disabled, and ignores source values while the
 * timer is enabled. Initially, the timer is disabled. As soon as the first
 * source value arrives, the timer is enabled. After `duration` milliseconds (or
 * the time unit determined internally by the optional `scheduler`) has passed,
 * the timer is disabled, then the most recent source value is emitted on the
 * output Observable, and this process repeats for the next source value.
 * Optionally takes a {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.auditTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} duration Time to wait before emitting the most recent source
 * value, measured in milliseconds or the time unit determined internally
 * by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the rate-limiting behavior.
 * @return {Observable<T>} An Observable that performs rate-limiting of
 * emissions from the source Observable.
 * @method auditTime
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Buffers the source Observable values until `closingNotifier` emits.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when another Observable emits.</span>
 *
 * <img src="./img/buffer.png" width="100%">
 *
 * Buffers the incoming Observable values until the given `closingNotifier`
 * Observable emits a value, at which point it emits the buffer on the output
 * Observable and starts a new buffer internally, awaiting the next time
 * `closingNotifier` emits.
 *
 * @example <caption>On every click, emit array of most recent interval events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var buffered = interval.buffer(clicks);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link window}
 *
 * @param {Observable<any>} closingNotifier An Observable that signals the
 * buffer to be emitted on the output Observable.
 * @return {Observable<T[]>} An Observable of buffers, which are arrays of
 * values.
 * @method buffer
 * @owner Observable
 */

var BufferOperator = /*@__PURE__*/ (function () {
    function BufferOperator(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    BufferOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    };
    return BufferOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferSubscriber, _super);
    function BufferSubscriber(destination, closingNotifier) {
        var _this = _super.call(this, destination) || this;
        _this.buffer = [];
        _this.add(subscribeToResult(_this, closingNotifier));
        return _this;
    }
    BufferSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    };
    return BufferSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Buffers the source Observable values until the size hits the maximum
 * `bufferSize` given.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * that array only when its size reaches `bufferSize`.</span>
 *
 * <img src="./img/bufferCount.png" width="100%">
 *
 * Buffers a number of values from the source Observable by `bufferSize` then
 * emits the buffer and clears it, and starts a new buffer each
 * `startBufferEvery` values. If `startBufferEvery` is not provided or is
 * `null`, then new buffers are started immediately at the start of the source
 * and when each buffer closes and is emitted.
 *
 * @example <caption>Emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>On every click, emit the last two click events as an array</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferCount(2, 1);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link pairwise}
 * @see {@link windowCount}
 *
 * @param {number} bufferSize The maximum size of the buffer emitted.
 * @param {number} [startBufferEvery] Interval at which to start a new buffer.
 * For example if `startBufferEvery` is `2`, then a new buffer will be started
 * on every other value from the source. A new buffer is started at the
 * beginning of the source by default.
 * @return {Observable<T[]>} An Observable of arrays of buffered values.
 * @method bufferCount
 * @owner Observable
 */

var BufferCountOperator = /*@__PURE__*/ (function () {
    function BufferCountOperator(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
        }
        else {
            this.subscriberClass = BufferSkipCountSubscriber;
        }
    }
    BufferCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    };
    return BufferCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferCountSubscriber, _super);
    function BufferCountSubscriber(destination, bufferSize) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.buffer = [];
        return _this;
    }
    BufferCountSubscriber.prototype._next = function (value) {
        var buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    };
    BufferCountSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    return BufferCountSubscriber;
}(Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferSkipCountSubscriber, _super);
    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {
        var _this = _super.call(this, destination) || this;
        _this.bufferSize = bufferSize;
        _this.startBufferEvery = startBufferEvery;
        _this.buffers = [];
        _this.count = 0;
        return _this;
    }
    BufferSkipCountSubscriber.prototype._next = function (value) {
        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (var i = buffers.length; i--;) {
            var buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    };
    BufferSkipCountSubscriber.prototype._complete = function () {
        var _a = this, buffers = _a.buffers, destination = _a.destination;
        while (buffers.length > 0) {
            var buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        _super.prototype._complete.call(this);
    };
    return BufferSkipCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Buffers the source Observable values for a specific time period.
 *
 * <span class="informal">Collects values from the past as an array, and emits
 * those arrays periodically in time.</span>
 *
 * <img src="./img/bufferTime.png" width="100%">
 *
 * Buffers values from the source for a specific time duration `bufferTimeSpan`.
 * Unless the optional argument `bufferCreationInterval` is given, it emits and
 * resets the buffer every `bufferTimeSpan` milliseconds. If
 * `bufferCreationInterval` is given, this operator opens the buffer every
 * `bufferCreationInterval` milliseconds and closes (emits and resets) the
 * buffer every `bufferTimeSpan` milliseconds. When the optional argument
 * `maxBufferSize` is specified, the buffer will be closed either after
 * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.
 *
 * @example <caption>Every second, emit an array of the recent click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(1000);
 * buffered.subscribe(x => console.log(x));
 *
 * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferTime(2000, 5000);
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferToggle}
 * @see {@link bufferWhen}
 * @see {@link windowTime}
 *
 * @param {number} bufferTimeSpan The amount of time to fill each buffer array.
 * @param {number} [bufferCreationInterval] The interval at which to start new
 * buffers.
 * @param {number} [maxBufferSize] The maximum buffer size.
 * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the
 * intervals that determine buffer boundaries.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferTime
 * @owner Observable
 */

var BufferTimeOperator = /*@__PURE__*/ (function () {
    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    BufferTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    };
    return BufferTimeOperator;
}());
var Context = /*@__PURE__*/ (function () {
    function Context() {
        this.buffer = [];
    }
    return Context;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferTimeSubscriber, _super);
    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.bufferTimeSpan = bufferTimeSpan;
        _this.bufferCreationInterval = bufferCreationInterval;
        _this.maxBufferSize = maxBufferSize;
        _this.scheduler = scheduler;
        _this.contexts = [];
        var context = _this.openContext();
        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (_this.timespanOnly) {
            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            var closeState = { subscriber: _this, context: context };
            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
        return _this;
    }
    BufferTimeSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        var filledBufferContext;
        for (var i = 0; i < len; i++) {
            var context_1 = contexts[i];
            var buffer = context_1.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context_1;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    };
    BufferTimeSubscriber.prototype._error = function (err) {
        this.contexts.length = 0;
        _super.prototype._error.call(this, err);
    };
    BufferTimeSubscriber.prototype._complete = function () {
        var _a = this, contexts = _a.contexts, destination = _a.destination;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            destination.next(context_2.buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    BufferTimeSubscriber.prototype._unsubscribe = function () {
        this.contexts = null;
    };
    BufferTimeSubscriber.prototype.onBufferFull = function (context) {
        this.closeContext(context);
        var closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            var bufferTimeSpan = this.bufferTimeSpan;
            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    };
    BufferTimeSubscriber.prototype.openContext = function () {
        var context = new Context();
        this.contexts.push(context);
        return context;
    };
    BufferTimeSubscriber.prototype.closeContext = function (context) {
        this.destination.next(context.buffer);
        var contexts = this.contexts;
        var spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    };
    return BufferTimeSubscriber;
}(Subscriber));
function dispatchBufferTimeSpanOnly(state) {
    var subscriber = state.subscriber;
    var prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
    var context = subscriber.openContext();
    var action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    var subscriber = arg.subscriber, context = arg.context;
    subscriber.closeContext(context);
}

/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
/**
 * Buffers the source Observable values starting from an emission from
 * `openings` and ending when the output of `closingSelector` emits.
 *
 * <span class="informal">Collects values from the past as an array. Starts
 * collecting only when `opening` emits, and calls the `closingSelector`
 * function to get an Observable that tells when to close the buffer.</span>
 *
 * <img src="./img/bufferToggle.png" width="100%">
 *
 * Buffers values from the source by opening the buffer via signals from an
 * Observable provided to `openings`, and closing and sending the buffers when
 * a Subscribable or Promise returned by the `closingSelector` function emits.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var buffered = clicks.bufferToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferWhen}
 * @see {@link windowToggle}
 *
 * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new
 * buffers.
 * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns a Subscribable or Promise,
 * which, when it emits, signals that the associated buffer should be emitted
 * and cleared.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferToggle
 * @owner Observable
 */

var BufferToggleOperator = /*@__PURE__*/ (function () {
    function BufferToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    BufferToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return BufferToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferToggleSubscriber, _super);
    function BufferToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(subscribeToResult(_this, openings));
        return _this;
    }
    BufferToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        var len = contexts.length;
        for (var i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    };
    BufferToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_1 = contexts.shift();
            context_1.subscription.unsubscribe();
            context_1.buffer = null;
            context_1.subscription = null;
        }
        this.contexts = null;
        _super.prototype._error.call(this, err);
    };
    BufferToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        while (contexts.length > 0) {
            var context_2 = contexts.shift();
            this.destination.next(context_2.buffer);
            context_2.subscription.unsubscribe();
            context_2.buffer = null;
            context_2.subscription = null;
        }
        this.contexts = null;
        _super.prototype._complete.call(this);
    };
    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    };
    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {
        this.closeBuffer(innerSub.context);
    };
    BufferToggleSubscriber.prototype.openBuffer = function (value) {
        try {
            var closingSelector = this.closingSelector;
            var closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    };
    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
        var contexts = this.contexts;
        if (contexts && context) {
            var buffer = context.buffer, subscription = context.subscription;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    };
    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {
        var contexts = this.contexts;
        var buffer = [];
        var subscription = new Subscription();
        var context = { buffer: buffer, subscription: subscription };
        contexts.push(context);
        var innerSubscription = subscribeToResult(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    };
    return BufferToggleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * <img src="./img/bufferWhen.png" width="100%">
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var buffered = clicks.bufferWhen(() =>
 *   Rx.Observable.interval(1000 + Math.random() * 4000)
 * );
 * buffered.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return {Observable<T[]>} An observable of arrays of buffered values.
 * @method bufferWhen
 * @owner Observable
 */

var BufferWhenOperator = /*@__PURE__*/ (function () {
    function BufferWhenOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    BufferWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    };
    return BufferWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(BufferWhenSubscriber, _super);
    function BufferWhenSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.closingSelector = closingSelector;
        _this.subscribing = false;
        _this.openBuffer();
        return _this;
    }
    BufferWhenSubscriber.prototype._next = function (value) {
        this.buffer.push(value);
    };
    BufferWhenSubscriber.prototype._complete = function () {
        var buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    BufferWhenSubscriber.prototype._unsubscribe = function () {
        this.buffer = null;
        this.subscribing = false;
    };
    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    };
    BufferWhenSubscriber.prototype.notifyComplete = function () {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    };
    BufferWhenSubscriber.prototype.openBuffer = function () {
        var closingSubscription = this.closingSubscription;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        var buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        var closingNotifier = tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject) {
            this.error(errorObject.e);
        }
        else {
            closingSubscription = new Subscription();
            this.closingSubscription = closingSubscription;
            this.add(closingSubscription);
            this.subscribing = true;
            closingSubscription.add(subscribeToResult(this, closingNotifier));
            this.subscribing = false;
        }
    };
    return BufferWhenSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

var CatchOperator = /*@__PURE__*/ (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        var _this = _super.call(this, destination) || this;
        _this.selector = selector;
        _this.caught = caught;
        return _this;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _observable_combineLatest PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static combineLatest.
 */

/** PURE_IMPORTS_START _observable_concat PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static concat.
 */

/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return mergeMap(project, resultSelector, 1);
}

/** PURE_IMPORTS_START _concatMap PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in a serialized fashion on the output Observable.
 *
 * <span class="informal">It's like {@link concatMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/concatMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. Each new `innerObservable`
 * instance emitted on the output Observable is concatenated with the previous
 * `innerObservable` instance.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter
 * set to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link mergeMapTo}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @return {Observable} An observable of values merged together by joining the
 * passed observable with itself, one after the other, for each value emitted
 * from the source.
 * @method concatMapTo
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Counts the number of emissions on the source and emits that number when the
 * source completes.
 *
 * <span class="informal">Tells how many values were emitted, when the source
 * completes.</span>
 *
 * <img src="./img/count.png" width="100%">
 *
 * `count` transforms an Observable that emits values into an Observable that
 * emits a single value that represents the number of values emitted by the
 * source Observable. If the source Observable terminates with an error, `count`
 * will pass this error notification along without emitting a value first. If
 * the source Observable does not terminate at all, `count` will neither emit
 * a value nor terminate. This operator takes an optional `predicate` function
 * as argument, in which case the output emission will represent the number of
 * source values that matched `true` with the `predicate`.
 *
 * @example <caption>Counts how many seconds have passed before the first click happened</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var secondsBeforeClick = seconds.takeUntil(clicks);
 * var result = secondsBeforeClick.count();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>
 * var numbers = Rx.Observable.range(1, 7);
 * var result = numbers.count(i => i % 2 === 1);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 4
 *
 * @see {@link max}
 * @see {@link min}
 * @see {@link reduce}
 *
 * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A
 * boolean function to select what values are to be counted. It is provided with
 * arguments of:
 * - `value`: the value from the source Observable.
 * - `index`: the (zero-based) "index" of the value from the source Observable.
 * - `source`: the source Observable instance itself.
 * @return {Observable} An Observable of one number that represents the count as
 * described above.
 * @method count
 * @owner Observable
 */

var CountOperator = /*@__PURE__*/ (function () {
    function CountOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    CountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    };
    return CountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(CountSubscriber, _super);
    function CountSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.count = 0;
        _this.index = 0;
        return _this;
    }
    CountSubscriber.prototype._next = function (value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    };
    CountSubscriber.prototype._tryPredicate = function (value) {
        var result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    };
    CountSubscriber.prototype._complete = function () {
        this.destination.next(this.count);
        this.destination.complete();
    };
    return CountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Emits a value from the source Observable only after a particular time span
 * determined by another Observable has passed without another source emission.
 *
 * <span class="informal">It's like {@link debounceTime}, but the time span of
 * emission silence is determined by a second Observable.</span>
 *
 * <img src="./img/debounce.png" width="100%">
 *
 * `debounce` delays values emitted by the source Observable, but drops previous
 * pending delayed emissions if a new value arrives on the source Observable.
 * This operator keeps track of the most recent value from the source
 * Observable, and spawns a duration Observable by calling the
 * `durationSelector` function. The value is emitted only when the duration
 * Observable emits a value or completes, and if no other value was emitted on
 * the source Observable since the duration Observable was spawned. If a new
 * value appears before the duration Observable emits, the previous value will
 * be dropped and will not be emitted on the output Observable.
 *
 * Like {@link debounceTime}, this is a rate-limiting operator, and also a
 * delay-like operator since output emissions do not necessarily occur at the
 * same time as they did on the source Observable.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounce(() => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 * @see {@link throttle}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the timeout
 * duration for each source value, returned as an Observable or a Promise.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified duration Observable returned by
 * `durationSelector`, and may drop some values if they occur too frequently.
 * @method debounce
 * @owner Observable
 */

var DebounceOperator = /*@__PURE__*/ (function () {
    function DebounceOperator(durationSelector) {
        this.durationSelector = durationSelector;
    }
    DebounceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    };
    return DebounceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DebounceSubscriber, _super);
    function DebounceSubscriber(destination, durationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.durationSelector = durationSelector;
        _this.hasValue = false;
        _this.durationSubscription = null;
        return _this;
    }
    DebounceSubscriber.prototype._next = function (value) {
        try {
            var result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DebounceSubscriber.prototype._complete = function () {
        this.emitValue();
        this.destination.complete();
    };
    DebounceSubscriber.prototype._tryNext = function (value, duration) {
        var subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = subscribeToResult(this, duration);
        if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    };
    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    DebounceSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    DebounceSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            var value = this.value;
            var subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            // This must be done *before* passing the value
            // along to the destination because it's possible for
            // the value to synchronously re-enter this operator
            // recursively if the duration selector Observable
            // emits synchronously
            this.value = null;
            this.hasValue = false;
            _super.prototype._next.call(this, value);
        }
    };
    return DebounceSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
/**
 * Emits a value from the source Observable only after a particular time span
 * has passed without another source emission.
 *
 * <span class="informal">It's like {@link delay}, but passes only the most
 * recent value from each burst of emissions.</span>
 *
 * <img src="./img/debounceTime.png" width="100%">
 *
 * `debounceTime` delays values emitted by the source Observable, but drops
 * previous pending delayed emissions if a new value arrives on the source
 * Observable. This operator keeps track of the most recent value from the
 * source Observable, and emits that only when `dueTime` enough time has passed
 * without any other value appearing on the source Observable. If a new value
 * appears before `dueTime` silence occurs, the previous value will be dropped
 * and will not be emitted on the output Observable.
 *
 * This is a rate-limiting operator, because it is impossible for more than one
 * value to be emitted in any time window of duration `dueTime`, but it is also
 * a delay-like operator since output emissions do not occur at the same time as
 * they did on the source Observable. Optionally takes a {@link IScheduler} for
 * managing timers.
 *
 * @example <caption>Emit the most recent click after a burst of clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.debounceTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounce}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttleTime}
 *
 * @param {number} dueTime The timeout duration in milliseconds (or the time
 * unit determined internally by the optional `scheduler`) for the window of
 * time required to wait for emission silence before emitting the most recent
 * source value.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the timeout for each value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified `dueTime`, and may drop some values if they occur
 * too frequently.
 * @method debounceTime
 * @owner Observable
 */

var DebounceTimeOperator = /*@__PURE__*/ (function () {
    function DebounceTimeOperator(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    DebounceTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    };
    return DebounceTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DebounceTimeSubscriber, _super);
    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.dueTime = dueTime;
        _this.scheduler = scheduler;
        _this.debouncedSubscription = null;
        _this.lastValue = null;
        _this.hasValue = false;
        return _this;
    }
    DebounceTimeSubscriber.prototype._next = function (value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext$2, this.dueTime, this));
    };
    DebounceTimeSubscriber.prototype._complete = function () {
        this.debouncedNext();
        this.destination.complete();
    };
    DebounceTimeSubscriber.prototype.debouncedNext = function () {
        this.clearDebounce();
        if (this.hasValue) {
            var lastValue = this.lastValue;
            // This must be done *before* passing the value
            // along to the destination because it's possible for
            // the value to synchronously re-enter this operator
            // recursively when scheduled with things like
            // VirtualScheduler/TestScheduler.
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        }
    };
    DebounceTimeSubscriber.prototype.clearDebounce = function () {
        var debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    };
    return DebounceTimeSubscriber;
}(Subscriber));
function dispatchNext$2(subscriber) {
    subscriber.debouncedNext();
}

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Emits a given value if the source Observable completes without emitting any
 * `next` value, otherwise mirrors the source Observable.
 *
 * <span class="informal">If the source Observable turns out to be empty, then
 * this operator will emit a default value.</span>
 *
 * <img src="./img/defaultIfEmpty.png" width="100%">
 *
 * `defaultIfEmpty` emits the values emitted by the source Observable or a
 * specified default value if the source Observable is empty (completes without
 * having emitted any `next` value).
 *
 * @example <caption>If no clicks happen in 5 seconds, then emit "no clicks"</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));
 * var result = clicksBeforeFive.defaultIfEmpty('no clicks');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link empty}
 * @see {@link last}
 *
 * @param {any} [defaultValue=null] The default value used if the source
 * Observable is empty.
 * @return {Observable} An Observable that emits either the specified
 * `defaultValue` if the source Observable emits no items, or the values emitted
 * by the source Observable.
 * @method defaultIfEmpty
 * @owner Observable
 */

var DefaultIfEmptyOperator = /*@__PURE__*/ (function () {
    function DefaultIfEmptyOperator(defaultValue) {
        this.defaultValue = defaultValue;
    }
    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    };
    return DefaultIfEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DefaultIfEmptySubscriber, _super);
    function DefaultIfEmptySubscriber(destination, defaultValue) {
        var _this = _super.call(this, destination) || this;
        _this.defaultValue = defaultValue;
        _this.isEmpty = true;
        return _this;
    }
    DefaultIfEmptySubscriber.prototype._next = function (value) {
        this.isEmpty = false;
        this.destination.next(value);
    };
    DefaultIfEmptySubscriber.prototype._complete = function () {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    };
    return DefaultIfEmptySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */
/**
 * Delays the emission of items from the source Observable by a given timeout or
 * until a given Date.
 *
 * <span class="informal">Time shifts each item by some specified amount of
 * milliseconds.</span>
 *
 * <img src="./img/delay.png" width="100%">
 *
 * If the delay argument is a Number, this operator time shifts the source
 * Observable by that amount of time expressed in milliseconds. The relative
 * time intervals between the values are preserved.
 *
 * If the delay argument is a Date, this operator time shifts the start of the
 * Observable execution until the given date occurs.
 *
 * @example <caption>Delay each click by one second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @example <caption>Delay all clicks until a future date happens</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var date = new Date('March 15, 2050 12:00:00'); // in the future
 * var delayedClicks = clicks.delay(date); // click emitted only after that date
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounceTime}
 * @see {@link delayWhen}
 *
 * @param {number|Date} delay The delay duration in milliseconds (a `number`) or
 * a `Date` until which the emission of the source items is delayed.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for
 * managing the timers that handle the time-shift for each item.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by the specified timeout or Date.
 * @method delay
 * @owner Observable
 */

var DelayOperator = /*@__PURE__*/ (function () {
    function DelayOperator(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    DelayOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    };
    return DelayOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelaySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DelaySubscriber, _super);
    function DelaySubscriber(destination, delay, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.delay = delay;
        _this.scheduler = scheduler;
        _this.queue = [];
        _this.active = false;
        _this.errored = false;
        return _this;
    }
    DelaySubscriber.dispatch = function (state) {
        var source = state.source;
        var queue = source.queue;
        var scheduler = state.scheduler;
        var destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay_1);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    };
    DelaySubscriber.prototype._schedule = function (scheduler) {
        this.active = true;
        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    };
    DelaySubscriber.prototype.scheduleNotification = function (notification) {
        if (this.errored === true) {
            return;
        }
        var scheduler = this.scheduler;
        var message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    };
    DelaySubscriber.prototype._next = function (value) {
        this.scheduleNotification(Notification.createNext(value));
    };
    DelaySubscriber.prototype._error = function (err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
    };
    DelaySubscriber.prototype._complete = function () {
        this.scheduleNotification(Notification.createComplete());
    };
    return DelaySubscriber;
}(Subscriber));
var DelayMessage = /*@__PURE__*/ (function () {
    function DelayMessage(time, notification) {
        this.time = time;
        this.notification = notification;
    }
    return DelayMessage;
}());

/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Delays the emission of items from the source Observable by a given time span
 * determined by the emissions of another Observable.
 *
 * <span class="informal">It's like {@link delay}, but the time span of the
 * delay duration is determined by a second Observable.</span>
 *
 * <img src="./img/delayWhen.png" width="100%">
 *
 * `delayWhen` time shifts each emitted value from the source Observable by a
 * time span determined by another Observable. When the source emits a value,
 * the `delayDurationSelector` function is called with the source value as
 * argument, and should return an Observable, called the "duration" Observable.
 * The source value is emitted on the output Observable only when the duration
 * Observable emits a value or completes.
 *
 * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which
 * is an Observable. When `subscriptionDelay` emits its first value or
 * completes, the source Observable is subscribed to and starts behaving like
 * described in the previous paragraph. If `subscriptionDelay` is not provided,
 * `delayWhen` will subscribe to the source Observable as soon as the output
 * Observable is subscribed.
 *
 * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var delayedClicks = clicks.delayWhen(event =>
 *   Rx.Observable.interval(Math.random() * 5000)
 * );
 * delayedClicks.subscribe(x => console.log(x));
 *
 * @see {@link debounce}
 * @see {@link delay}
 *
 * @param {function(value: T): Observable} delayDurationSelector A function that
 * returns an Observable for each value emitted by the source Observable, which
 * is then used to delay the emission of that item on the output Observable
 * until the Observable returned from this function emits a value.
 * @param {Observable} subscriptionDelay An Observable that triggers the
 * subscription to the source Observable once it emits any value.
 * @return {Observable} An Observable that delays the emissions of the source
 * Observable by an amount of time specified by the Observable returned by
 * `delayDurationSelector`.
 * @method delayWhen
 * @owner Observable
 */

var DelayWhenOperator = /*@__PURE__*/ (function () {
    function DelayWhenOperator(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    DelayWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    };
    return DelayWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DelayWhenSubscriber, _super);
    function DelayWhenSubscriber(destination, delayDurationSelector) {
        var _this = _super.call(this, destination) || this;
        _this.delayDurationSelector = delayDurationSelector;
        _this.completed = false;
        _this.delayNotifierSubscriptions = [];
        _this.values = [];
        return _this;
    }
    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        var value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype._next = function (value) {
        try {
            var delayNotifier = this.delayDurationSelector(value);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    DelayWhenSubscriber.prototype._complete = function () {
        this.completed = true;
        this.tryComplete();
    };
    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {
        subscription.unsubscribe();
        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        var value = null;
        if (subscriptionIdx !== -1) {
            value = this.values[subscriptionIdx];
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
            this.values.splice(subscriptionIdx, 1);
        }
        return value;
    };
    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {
        var notifierSubscription = subscribeToResult(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            this.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
        this.values.push(value);
    };
    DelayWhenSubscriber.prototype.tryComplete = function () {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    };
    return DelayWhenSubscriber;
}(OuterSubscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {
    __extends(SubscriptionDelayObservable, _super);
    function SubscriptionDelayObservable(source, subscriptionDelay) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subscriptionDelay = subscriptionDelay;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    };
    return SubscriptionDelayObservable;
}(Observable));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SubscriptionDelaySubscriber, _super);
    function SubscriptionDelaySubscriber(parent, source) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.source = source;
        _this.sourceSubscribed = false;
        return _this;
    }
    SubscriptionDelaySubscriber.prototype._next = function (unused) {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype._error = function (err) {
        this.unsubscribe();
        this.parent.error(err);
    };
    SubscriptionDelaySubscriber.prototype._complete = function () {
        this.subscribeToSource();
    };
    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    };
    return SubscriptionDelaySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Converts an Observable of {@link Notification} objects into the emissions
 * that they represent.
 *
 * <span class="informal">Unwraps {@link Notification} objects as actual `next`,
 * `error` and `complete` emissions. The opposite of {@link materialize}.</span>
 *
 * <img src="./img/dematerialize.png" width="100%">
 *
 * `dematerialize` is assumed to operate an Observable that only emits
 * {@link Notification} objects as `next` emissions, and does not emit any
 * `error`. Such Observable is the output of a `materialize` operation. Those
 * notifications are then unwrapped using the metadata they contain, and emitted
 * as `next`, `error`, and `complete` on the output Observable.
 *
 * Use this operator in conjunction with {@link materialize}.
 *
 * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>
 * var notifA = new Rx.Notification('N', 'A');
 * var notifB = new Rx.Notification('N', 'B');
 * var notifE = new Rx.Notification('E', void 0,
 *   new TypeError('x.toUpperCase is not a function')
 * );
 * var materialized = Rx.Observable.of(notifA, notifB, notifE);
 * var upperCase = materialized.dematerialize();
 * upperCase.subscribe(x => console.log(x), e => console.error(e));
 *
 * // Results in:
 * // A
 * // B
 * // TypeError: x.toUpperCase is not a function
 *
 * @see {@link Notification}
 * @see {@link materialize}
 *
 * @return {Observable} An Observable that emits items and notifications
 * embedded in Notification objects emitted by the source Observable.
 * @method dematerialize
 * @owner Observable
 */

var DeMaterializeOperator = /*@__PURE__*/ (function () {
    function DeMaterializeOperator() {
    }
    DeMaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    };
    return DeMaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DeMaterializeSubscriber, _super);
    function DeMaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    DeMaterializeSubscriber.prototype._next = function (value) {
        value.observe(this.destination);
    };
    return DeMaterializeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.
 *
 * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will
 * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the
 * source observable directly with an equality check against previous values.
 *
 * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.
 *
 * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the
 * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`
 * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so
 * that the internal `Set` can be "flushed", basically clearing it of values.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)
 *   .distinct()
 *   .subscribe(x => console.log(x)); // 1, 2, 3, 4
 *
 * @example <caption>An example using a keySelector function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     .distinct((p: Person) => p.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 *
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [keySelector] Optional function to select which value you want to check as distinct.
 * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinct
 * @owner Observable
 */

var DistinctOperator = /*@__PURE__*/ (function () {
    function DistinctOperator(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    DistinctOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    };
    return DistinctOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctSubscriber, _super);
    function DistinctSubscriber(destination, keySelector, flushes) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.values = new Set();
        if (flushes) {
            _this.add(subscribeToResult(_this, flushes));
        }
        return _this;
    }
    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    };
    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    DistinctSubscriber.prototype._next = function (value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    };
    DistinctSubscriber.prototype._useKeySelector = function (value) {
        var key;
        var destination = this.destination;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    };
    DistinctSubscriber.prototype._finalizeNext = function (key, value) {
        var values = this.values;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    };
    return DistinctSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>A simple example with numbers</caption>
 * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)
 *   .distinctUntilChanged()
 *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4
 *
 * @example <caption>An example using a compare function</caption>
 * interface Person {
 *    age: number,
 *    name: string
 * }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'})
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilKeyChanged}
 *
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values.
 * @method distinctUntilChanged
 * @owner Observable
 */

var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
    function DistinctUntilChangedOperator(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    };
    return DistinctUntilChangedOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(DistinctUntilChangedSubscriber, _super);
    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.hasKey = false;
        if (typeof compare === 'function') {
            _this.compare = compare;
        }
        return _this;
    }
    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
        return x === y;
    };
    DistinctUntilChangedSubscriber.prototype._next = function (value) {
        var keySelector = this.keySelector;
        var key = value;
        if (keySelector) {
            key = tryCatch(this.keySelector)(value);
            if (key === errorObject) {
                return this.destination.error(errorObject.e);
            }
        }
        var result = false;
        if (this.hasKey) {
            result = tryCatch(this.compare)(this.key, key);
            if (result === errorObject) {
                return this.destination.error(errorObject.e);
            }
        }
        else {
            this.hasKey = true;
        }
        if (Boolean(result) === false) {
            this.key = key;
            this.destination.next(value);
        }
    };
    return DistinctUntilChangedSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _distinctUntilChanged PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,
 * using a property accessed by using the key provided to check if the two items are distinct.
 *
 * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.
 *
 * If a comparator function is not provided, an equality check is used by default.
 *
 * @example <caption>An example comparing the name of persons</caption>
 *
 *  interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo'},
 *     { age: 6, name: 'Foo'})
 *     .distinctUntilKeyChanged('name')
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo' }
 *
 * @example <caption>An example comparing the first letters of the name</caption>
 *
 * interface Person {
 *     age: number,
 *     name: string
 *  }
 *
 * Observable.of<Person>(
 *     { age: 4, name: 'Foo1'},
 *     { age: 7, name: 'Bar'},
 *     { age: 5, name: 'Foo2'},
 *     { age: 6, name: 'Foo3'})
 *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))
 *     .subscribe(x => console.log(x));
 *
 * // displays:
 * // { age: 4, name: 'Foo1' }
 * // { age: 7, name: 'Bar' }
 * // { age: 5, name: 'Foo2' }
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 *
 * @param {string} key String key for object property lookup on each item.
 * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.
 * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.
 * @method distinctUntilKeyChanged
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
var FilterOperator = /*@__PURE__*/ (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.count = 0;
        return _this;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Perform a side effect for every emission on the source Observable, but return
 * an Observable that is identical to the source.
 *
 * <span class="informal">Intercepts each emission on the source and runs a
 * function, but returns an output which is identical to the source as long as errors don't occur.</span>
 *
 * <img src="./img/do.png" width="100%">
 *
 * Returns a mirrored Observable of the source Observable, but modified so that
 * the provided Observer is called to perform a side effect for every value,
 * error, and completion emitted by the source. Any errors that are thrown in
 * the aforementioned Observer or handlers are safely sent down the error path
 * of the output Observable.
 *
 * This operator is useful for debugging your Observables for the correct values
 * or performing other side effects.
 *
 * Note: this is different to a `subscribe` on the Observable. If the Observable
 * returned by `do` is not subscribed, the side effects specified by the
 * Observer will never happen. `do` therefore simply spies on existing
 * execution, it does not trigger an execution to happen like `subscribe` does.
 *
 * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks
 *   .do(ev => console.log(ev))
 *   .map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link map}
 * @see {@link subscribe}
 *
 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
 * callback for `next`.
 * @param {function} [error] Callback for errors in the source.
 * @param {function} [complete] Callback for the completion of the source.
 * @return {Observable} An Observable identical to the source, but runs the
 * specified Observer or callback(s) for each item.
 * @name tap
 */

var DoOperator = /*@__PURE__*/ (function () {
    function DoOperator(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    DoOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    };
    return DoOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TapSubscriber, _super);
    function TapSubscriber(destination, observerOrNext, error, complete) {
        var _this = _super.call(this, destination) || this;
        _this._tapNext = noop;
        _this._tapError = noop;
        _this._tapComplete = noop;
        _this._tapError = error || noop;
        _this._tapComplete = complete || noop;
        if (isFunction(observerOrNext)) {
            _this._context = _this;
            _this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            _this._context = observerOrNext;
            _this._tapNext = observerOrNext.next || noop;
            _this._tapError = observerOrNext.error || noop;
            _this._tapComplete = observerOrNext.complete || noop;
        }
        return _this;
    }
    TapSubscriber.prototype._next = function (value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    };
    TapSubscriber.prototype._error = function (err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    };
    TapSubscriber.prototype._complete = function () {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    };
    return TapSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _tap,_util_EmptyError PURE_IMPORTS_END */
/**
 * If the source observable completes without emitting a value, it will emit
 * an error. The error will be created at that time by the optional
 * `errorFactory` argument, otherwise, the error will be {@link ErrorEmpty}.
 *
 * @example
 *
 * const click$ = fromEvent(button, 'click');
 *
 * clicks$.pipe(
 *   takeUntil(timer(1000)),
 *   throwIfEmpty(
 *     () => new Error('the button was not clicked within 1 second')
 *   ),
 * )
 * .subscribe({
 *   next() { console.log('The button was clicked'); },
 *   error(err) { console.error(err); },
 * });
 * @param {Function} [errorFactory] A factory function called to produce the
 * error to be thrown when the source observable completes without emitting a
 * value.
 */

/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
/**
 * Emits only the first `count` values emitted by the source Observable.
 *
 * <span class="informal">Takes the first `count` values from the source, then
 * completes.</span>
 *
 * <img src="./img/take.png" width="100%">
 *
 * `take` returns an Observable that emits only the first `count` values emitted
 * by the source Observable. If the source emits fewer than `count` values then
 * all of its values are emitted. After that, it completes, regardless if the
 * source completes.
 *
 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
 * var interval = Rx.Observable.interval(1000);
 * var five = interval.take(5);
 * five.subscribe(x => console.log(x));
 *
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of `next` values to emit.
 * @return {Observable<T>} An Observable that emits only the first `count`
 * values emitted by the source Observable, or all of the values from the source
 * if the source emits fewer than `count` values.
 * @method take
 * @owner Observable
 */

var TakeOperator = /*@__PURE__*/ (function () {
    function TakeOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    TakeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    };
    return TakeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeSubscriber, _super);
    function TakeSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    TakeSubscriber.prototype._next = function (value) {
        var total = this.total;
        var count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    };
    return TakeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _util_ArgumentOutOfRangeError,_filter,_throwIfEmpty,_defaultIfEmpty,_take PURE_IMPORTS_END */
/**
 * Emits the single value at the specified `index` in a sequence of emissions
 * from the source Observable.
 *
 * <span class="informal">Emits only the i-th value, then completes.</span>
 *
 * <img src="./img/elementAt.png" width="100%">
 *
 * `elementAt` returns an Observable that emits the item at the specified
 * `index` in the source Observable, or a default value if that `index` is out
 * of range and the `default` argument is provided. If the `default` argument is
 * not given and the `index` is out of range, the output Observable will emit an
 * `ArgumentOutOfRangeError` error.
 *
 * @example <caption>Emit only the third click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.elementAt(2);
 * result.subscribe(x => console.log(x));
 *
 * // Results in:
 * // click 1 = nothing
 * // click 2 = nothing
 * // click 3 = MouseEvent object logged to console
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link skip}
 * @see {@link single}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the
 * Observable has completed before emitting the i-th `next` notification.
 *
 * @param {number} index Is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {T} [defaultValue] The default value returned for missing indices.
 * @return {Observable} An Observable that emits a single item, if it is found.
 * Otherwise, will emit the default value if given. If not, then emits an error.
 * @method elementAt
 * @owner Observable
 */

/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments after it finishes emitting
 * items emitted by the source Observable.
 *
 * @param {...T} values - Items you want the modified Observable to emit last.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items emitted by the source Observable
 *  and then emits the items in the specified Iterable.
 * @method endWith
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */

var EveryOperator = /*@__PURE__*/ (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.thisArg = thisArg;
        _this.source = source;
        _this.index = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Converts a higher-order Observable into a first-order Observable by dropping
 * inner Observables while the previous inner Observable has not yet completed.
 *
 * <span class="informal">Flattens an Observable-of-Observables by dropping the
 * next inner Observables while the current inner is still executing.</span>
 *
 * <img src="./img/exhaust.png" width="100%">
 *
 * `exhaust` subscribes to an Observable that emits Observables, also known as a
 * higher-order Observable. Each time it observes one of these emitted inner
 * Observables, the output Observable begins emitting the items emitted by that
 * inner Observable. So far, it behaves like {@link mergeAll}. However,
 * `exhaust` ignores every new inner Observable if the previous Observable has
 * not yet completed. Once that one completes, it will accept and flatten the
 * next inner Observable and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));
 * var result = higherOrder.exhaust();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link switch}
 * @see {@link mergeAll}
 * @see {@link exhaustMap}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable that takes a source of Observables and propagates the first observable
 * exclusively until it completes before subscribing to the next.
 * @method exhaust
 * @owner Observable
 */

var SwitchFirstOperator = /*@__PURE__*/ (function () {
    function SwitchFirstOperator() {
    }
    SwitchFirstOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    };
    return SwitchFirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SwitchFirstSubscriber, _super);
    function SwitchFirstSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasCompleted = false;
        _this.hasSubscription = false;
        return _this;
    }
    SwitchFirstSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(subscribeToResult(this, value));
        }
    };
    SwitchFirstSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return SwitchFirstSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable only if the previous projected Observable has completed.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link exhaust}.</span>
 *
 * <img src="./img/exhaustMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. When it projects a source value to
 * an Observable, the output Observable begins emitting the items emitted by
 * that projected Observable. However, `exhaustMap` ignores every new projected
 * Observable if the previous projected Observable has not yet completed. Once
 * that one completes, it will accept and flatten the next projected Observable
 * and repeat this process.
 *
 * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaust}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable containing projected Observables
 * of each item of the source, ignoring projected Observables that start before
 * their preceding Observable has completed.
 * @method exhaustMap
 * @owner Observable
 */

var ExhauseMapOperator = /*@__PURE__*/ (function () {
    function ExhauseMapOperator(project) {
        this.project = project;
    }
    ExhauseMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    };
    return ExhauseMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ExhaustMapSubscriber, _super);
    function ExhaustMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.hasSubscription = false;
        _this.hasCompleted = false;
        _this.index = 0;
        return _this;
    }
    ExhaustMapSubscriber.prototype._next = function (value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    };
    ExhaustMapSubscriber.prototype.tryNext = function (value) {
        var index = this.index++;
        var destination = this.destination;
        try {
            var result = this.project(value, index);
            this.hasSubscription = true;
            this.add(subscribeToResult(this, result, value, index));
        }
        catch (err) {
            destination.error(err);
        }
    };
    ExhaustMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    };
    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    ExhaustMapSubscriber.prototype.notifyError = function (err) {
        this.destination.error(err);
    };
    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    };
    return ExhaustMapSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Recursively projects each source value to an Observable which is merged in
 * the output Observable.
 *
 * <span class="informal">It's similar to {@link mergeMap}, but applies the
 * projection function to every source value as well as every output value.
 * It's recursive.</span>
 *
 * <img src="./img/expand.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger. *Expand* will re-emit on the output
 * Observable every source value. Then, each output value is given to the
 * `project` function which returns an inner Observable to be merged on the
 * output Observable. Those output values resulting from the projection are also
 * given to the `project` function to produce new output values. This is how
 * *expand* behaves recursively.
 *
 * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var powersOfTwo = clicks
 *   .mapTo(1)
 *   .expand(x => Rx.Observable.of(2 * x).delay(1000))
 *   .take(10);
 * powersOfTwo.subscribe(x => console.log(x));
 *
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 *
 * @param {function(value: T, index: number) => Observable} project A function
 * that, when applied to an item emitted by the source or the output Observable,
 * returns an Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each projected inner Observable.
 * @return {Observable} An Observable that emits the source values and also
 * result of applying the projection function to each value emitted on the
 * output Observable and and merging the results of the Observables obtained
 * from this transformation.
 * @method expand
 * @owner Observable
 */

var ExpandOperator = /*@__PURE__*/ (function () {
    function ExpandOperator(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    ExpandOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    };
    return ExpandOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ExpandSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ExpandSubscriber, _super);
    function ExpandSubscriber(destination, project, concurrent, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.scheduler = scheduler;
        _this.index = 0;
        _this.active = 0;
        _this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            _this.buffer = [];
        }
        return _this;
    }
    ExpandSubscriber.dispatch = function (arg) {
        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;
        subscriber.subscribeToProjection(result, value, index);
    };
    ExpandSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        var index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            var result = tryCatch(this.project)(value, index);
            if (result === errorObject) {
                destination.error(errorObject.e);
            }
            else if (!this.scheduler) {
                this.subscribeToProjection(result, value, index);
            }
            else {
                var state = { subscriber: this, result: result, value: value, index: index };
                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
        this.active++;
        this.add(subscribeToResult(this, result, value, index));
    };
    ExpandSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    };
    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    };
    return ExpandSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * @param {function} callback Function to be called when source terminates.
 * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.
 * @method finally
 * @owner Observable
 */

var FinallyOperator = /*@__PURE__*/ (function () {
    function FinallyOperator(callback) {
        this.callback = callback;
    }
    FinallyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    };
    return FinallyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FinallySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FinallySubscriber, _super);
    function FinallySubscriber(destination, callback) {
        var _this = _super.call(this, destination) || this;
        _this.add(new Subscription(callback));
        return _this;
    }
    return FinallySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Emits only the first value emitted by the source Observable that meets some
 * condition.
 *
 * <span class="informal">Finds the first value that passes some test and emits
 * that.</span>
 *
 * <img src="./img/find.png" width="100%">
 *
 * `find` searches for the first item in the source Observable that matches the
 * specified condition embodied by the `predicate`, and returns the first
 * occurrence in the source. Unlike {@link first}, the `predicate` is required
 * in `find`, and does not emit an error if a valid value is not found.
 *
 * @example <caption>Find and emit the first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.find(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link first}
 * @see {@link findIndex}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable<T>} An Observable of the first item that matches the
 * condition.
 * @method find
 * @owner Observable
 */

var FindValueOperator = /*@__PURE__*/ (function () {
    function FindValueOperator(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    FindValueOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    };
    return FindValueOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FindValueSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(FindValueSubscriber, _super);
    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.yieldIndex = yieldIndex;
        _this.thisArg = thisArg;
        _this.index = 0;
        return _this;
    }
    FindValueSubscriber.prototype.notifyComplete = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    FindValueSubscriber.prototype._next = function (value) {
        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;
        var index = this.index++;
        try {
            var result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    FindValueSubscriber.prototype._complete = function () {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    };
    return FindValueSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _operators_find PURE_IMPORTS_END */
/**
 * Emits only the index of the first value emitted by the source Observable that
 * meets some condition.
 *
 * <span class="informal">It's like {@link find}, but emits the index of the
 * found value, not the value itself.</span>
 *
 * <img src="./img/findIndex.png" width="100%">
 *
 * `findIndex` searches for the first item in the source Observable that matches
 * the specified condition embodied by the `predicate`, and returns the
 * (zero-based) index of the first occurrence in the source. Unlike
 * {@link first}, the `predicate` is required in `findIndex`, and does not emit
 * an error if a valid value is not found.
 *
 * @example <caption>Emit the index of first click that happens on a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link first}
 * @see {@link take}
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate
 * A function called with each item to test for condition matching.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of the index of the first item that
 * matches the condition.
 * @method find
 * @owner Observable
 */

/** PURE_IMPORTS_START _util_EmptyError,_filter,_take,_defaultIfEmpty,_throwIfEmpty,_util_identity PURE_IMPORTS_END */
/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.
 *
 * <img src="./img/ignoreElements.png" width="100%">
 *
 * @return {Observable} An empty Observable that only calls `complete`
 * or `error`, based on which one is called by the source Observable.
 * @method ignoreElements
 * @owner Observable
 */

var IgnoreElementsOperator = /*@__PURE__*/ (function () {
    function IgnoreElementsOperator() {
    }
    IgnoreElementsOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    };
    return IgnoreElementsOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(IgnoreElementsSubscriber, _super);
    function IgnoreElementsSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IgnoreElementsSubscriber.prototype._next = function (unused) {
        // Do nothing
    };
    return IgnoreElementsSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */

var IsEmptyOperator = /*@__PURE__*/ (function () {
    function IsEmptyOperator() {
    }
    IsEmptyOperator.prototype.call = function (observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    };
    return IsEmptyOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var IsEmptySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(IsEmptySubscriber, _super);
    function IsEmptySubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {
        var destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    };
    IsEmptySubscriber.prototype._next = function (value) {
        this.notifyComplete(false);
    };
    IsEmptySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return IsEmptySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
/**
 * Emits only the last `count` values emitted by the source Observable.
 *
 * <span class="informal">Remembers the latest `count` values, then emits those
 * only when the source completes.</span>
 *
 * <img src="./img/takeLast.png" width="100%">
 *
 * `takeLast` returns an Observable that emits at most the last `count` values
 * emitted by the source Observable. If the source emits fewer than `count`
 * values then all of its values are emitted. This operator must wait until the
 * `complete` notification emission from the source in order to emit the `next`
 * values on the output Observable, because otherwise it is impossible to know
 * whether or not more values will be emitted on the source. For this reason,
 * all values are emitted synchronously, followed by the complete notification.
 *
 * @example <caption>Take the last 3 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 100);
 * var lastThree = many.pipe(takeLast(3));
 * lastThree.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeUntil}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an
 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
 *
 * @param {number} count The maximum number of values to emit from the end of
 * the sequence of values emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits at most the last count
 * values emitted by the source Observable.
 * @method takeLast
 * @owner Observable
 */

var TakeLastOperator = /*@__PURE__*/ (function () {
    function TakeLastOperator(total) {
        this.total = total;
        if (this.total < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    TakeLastOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    };
    return TakeLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeLastSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeLastSubscriber, _super);
    function TakeLastSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.ring = new Array();
        _this.count = 0;
        return _this;
    }
    TakeLastSubscriber.prototype._next = function (value) {
        var ring = this.ring;
        var total = this.total;
        var count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            var index = count % total;
            ring[index] = value;
        }
    };
    TakeLastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        var count = this.count;
        if (count > 0) {
            var total = this.count >= this.total ? this.total : this.count;
            var ring = this.ring;
            for (var i = 0; i < total; i++) {
                var idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    };
    return TakeLastSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _util_EmptyError,_filter,_takeLast,_throwIfEmpty,_defaultIfEmpty,_util_identity PURE_IMPORTS_END */
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} [predicate] - The condition any source emitted item has to satisfy.
 * @param {any} [defaultValue] - An optional default value to provide if last
 * predicate isn't met or no values were emitted.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 */

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Emits the given constant value on the output Observable every time the source
 * Observable emits a value.
 *
 * <span class="informal">Like {@link map}, but it maps every source value to
 * the same output value every time.</span>
 *
 * <img src="./img/mapTo.png" width="100%">
 *
 * Takes a constant `value` as argument, and emits that whenever the source
 * Observable emits a value. In other words, ignores the actual source value,
 * and simply uses the emission moment to know when to emit the given `value`.
 *
 * @example <caption>Map every click to the string 'Hi'</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var greetings = clicks.mapTo('Hi');
 * greetings.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {any} value The value to map each source value to.
 * @return {Observable} An Observable that emits the given `value` every time
 * the source Observable emits something.
 * @method mapTo
 * @owner Observable
 */

var MapToOperator = /*@__PURE__*/ (function () {
    function MapToOperator(value) {
        this.value = value;
    }
    MapToOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    };
    return MapToOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MapToSubscriber, _super);
    function MapToSubscriber(destination, value) {
        var _this = _super.call(this, destination) || this;
        _this.value = value;
        return _this;
    }
    MapToSubscriber.prototype._next = function (x) {
        this.destination.next(this.value);
    };
    return MapToSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */
/**
 * Represents all of the notifications from the source Observable as `next`
 * emissions marked with their original types within {@link Notification}
 * objects.
 *
 * <span class="informal">Wraps `next`, `error` and `complete` emissions in
 * {@link Notification} objects, emitted as `next` on the output Observable.
 * </span>
 *
 * <img src="./img/materialize.png" width="100%">
 *
 * `materialize` returns an Observable that emits a `next` notification for each
 * `next`, `error`, or `complete` emission of the source Observable. When the
 * source Observable emits `complete`, the output Observable will emit `next` as
 * a Notification of type "complete", and then it will emit `complete` as well.
 * When the source Observable emits `error`, the output will emit `next` as a
 * Notification of type "error", and then `complete`.
 *
 * This operator is useful for producing metadata of the source Observable, to
 * be consumed as `next` emissions. Use it in conjunction with
 * {@link dematerialize}.
 *
 * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>
 * var letters = Rx.Observable.of('a', 'b', 13, 'd');
 * var upperCase = letters.map(x => x.toUpperCase());
 * var materialized = upperCase.materialize();
 * materialized.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - Notification {kind: "N", value: "A", error: undefined, hasValue: true}
 * // - Notification {kind: "N", value: "B", error: undefined, hasValue: true}
 * // - Notification {kind: "E", value: undefined, error: TypeError:
 * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x
 * //   [as project] (http://1â¦, hasValue: false}
 *
 * @see {@link Notification}
 * @see {@link dematerialize}
 *
 * @return {Observable<Notification<T>>} An Observable that emits
 * {@link Notification} objects that wrap the original emissions from the source
 * Observable with metadata.
 * @method materialize
 * @owner Observable
 */

var MaterializeOperator = /*@__PURE__*/ (function () {
    function MaterializeOperator() {
    }
    MaterializeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    };
    return MaterializeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MaterializeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MaterializeSubscriber, _super);
    function MaterializeSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    MaterializeSubscriber.prototype._next = function (value) {
        this.destination.next(Notification.createNext(value));
    };
    MaterializeSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        destination.next(Notification.createError(err));
        destination.complete();
    };
    MaterializeSubscriber.prototype._complete = function () {
        var destination = this.destination;
        destination.next(Notification.createComplete());
        destination.complete();
    };
    return MaterializeSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns each
 * intermediate result, with an optional seed value.
 *
 * <span class="informal">It's like {@link reduce}, but emits the current
 * accumulation whenever the source emits a value.</span>
 *
 * <img src="./img/scan.png" width="100%">
 *
 * Combines together all values emitted on the source, using an accumulator
 * function that knows how to join a new source value into the accumulation from
 * the past. Is similar to {@link reduce}, but emits the intermediate
 * accumulations.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var ones = clicks.mapTo(1);
 * var seed = 0;
 * var count = ones.scan((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link reduce}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator
 * The accumulator function called on each source value.
 * @param {T|R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method scan
 * @owner Observable
 */

var ScanOperator = /*@__PURE__*/ (function () {
    function ScanOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) {
            hasSeed = false;
        }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ScanSubscriber, _super);
    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this._seed = _seed;
        _this.hasSeed = hasSeed;
        _this.index = 0;
        return _this;
    }
    Object.defineProperty(ScanSubscriber.prototype, "seed", {
        get: function () {
            return this._seed;
        },
        set: function (value) {
            this.hasSeed = true;
            this._seed = value;
        },
        enumerable: true,
        configurable: true
    });
    ScanSubscriber.prototype._next = function (value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    };
    ScanSubscriber.prototype._tryNext = function (value) {
        var index = this.index++;
        var result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    };
    return ScanSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _scan,_takeLast,_defaultIfEmpty,_util_pipe PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */

/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
/**
 * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the largest value.
 *
 * <img src="./img/max.png" width="100%">
 *
 * @example <caption>Get the maximal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .max()
 *   .subscribe(x => console.log(x)); // -> 8
 *
 * @example <caption>Use a comparer function to get the maximal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'
 * }
 *
 * @see {@link min}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable} An Observable that emits item with the largest value.
 * @method max
 * @owner Observable
 */

/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static merge.
 */

/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is merged multiple
 * times in the output Observable.
 *
 * <span class="informal">It's like {@link mergeMap}, but maps each value always
 * to the same inner Observable.</span>
 *
 * <img src="./img/mergeMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then merges those resulting Observables into one
 * single Observable, which is the output Observable.
 *
 * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeScan}
 * @see {@link switchMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable`
 * @method mergeMapTo
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */
/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * @example <caption>Count the number of click events</caption>
 * const click$ = Rx.Observable.fromEvent(document, 'click');
 * const one$ = click$.mapTo(1);
 * const seed = 0;
 * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * 1
 * 2
 * 3
 * 4
 * // ...and so on for each click
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return {Observable<R>} An observable of the accumulated values.
 * @method mergeScan
 * @owner Observable
 */

var MergeScanOperator = /*@__PURE__*/ (function () {
    function MergeScanOperator(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    MergeScanOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    };
    return MergeScanOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeScanSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(MergeScanSubscriber, _super);
    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
        var _this = _super.call(this, destination) || this;
        _this.accumulator = accumulator;
        _this.acc = acc;
        _this.concurrent = concurrent;
        _this.hasValue = false;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeScanSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            var index = this.index++;
            var ish = tryCatch(this.accumulator)(this.acc, value);
            var destination = this.destination;
            if (ish === errorObject) {
                destination.error(errorObject.e);
            }
            else {
                this.active++;
                this._innerSub(ish, value, index);
            }
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult(this, ish, value, index));
    };
    MergeScanSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var destination = this.destination;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    };
    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    };
    return MergeScanSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */
/**
 * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),
 * and when source Observable completes it emits a single item: the item with the smallest value.
 *
 * <img src="./img/min.png" width="100%">
 *
 * @example <caption>Get the minimal value of a series of numbers</caption>
 * Rx.Observable.of(5, 4, 7, 2, 8)
 *   .min()
 *   .subscribe(x => console.log(x)); // -> 2
 *
 * @example <caption>Use a comparer function to get the minimal item</caption>
 * interface Person {
 *   age: number,
 *   name: string
 * }
 * Observable.of<Person>({age: 7, name: 'Foo'},
 *                       {age: 5, name: 'Bar'},
 *                       {age: 9, name: 'Beer'})
 *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)
 *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'
 * }
 *
 * @see {@link max}
 *
 * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the
 * value of two items.
 * @return {Observable<R>} An Observable that emits item with the smallest value.
 * @method min
 * @owner Observable
 */

/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */

var MulticastOperator = /*@__PURE__*/ (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());

/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as
 * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same
 * as the source.
 *
 * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.
 * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`
 * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting
 * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another
 * Observable in provided series, no matter if previous Observable completed or ended with an error. This will
 * be happening until there is no more Observables left in the series, at which point returned Observable will
 * complete - even if the last subscribed stream ended with an error.
 *
 * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive
 * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable
 * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with
 * an error.
 *
 * Note that you do not get any access to errors emitted by the Observables. In particular do not
 * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take
 * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.
 *
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * Rx.Observable.of(1, 2, 3, 0)
 *   .map(x => {
 *       if (x === 0) { throw Error(); }
         return 10 / x;
 *   })
 *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))
 *   .subscribe(
 *     val => console.log(val),
 *     err => console.log(err),          // Will never be called.
 *     () => console.log('that\'s it!')
 *   );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "that's it!"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} observables Observables passed either directly or as an array.
 * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes
 * to the next passed Observable and so on, until it completes or runs out of Observables.
 * @method onErrorResumeNext
 * @owner Observable
 */

/* tslint:enable:max-line-length */

var OnErrorResumeNextOperator = /*@__PURE__*/ (function () {
    function OnErrorResumeNextOperator(nextSources) {
        this.nextSources = nextSources;
    }
    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    };
    return OnErrorResumeNextOperator;
}());
var OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(OnErrorResumeNextSubscriber, _super);
    function OnErrorResumeNextSubscriber(destination, nextSources) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.nextSources = nextSources;
        return _this;
    }
    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._error = function (err) {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype._complete = function () {
        this.subscribeToNextSource();
    };
    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {
        var next = this.nextSources.shift();
        if (next) {
            this.add(subscribeToResult(this, next));
        }
        else {
            this.destination.complete();
        }
    };
    return OnErrorResumeNextSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Groups pairs of consecutive emissions together and emits them as an array of
 * two values.
 *
 * <span class="informal">Puts the current value and previous value together as
 * an array, and emits that.</span>
 *
 * <img src="./img/pairwise.png" width="100%">
 *
 * The Nth emission from the source Observable will cause the output Observable
 * to emit an array [(N-1)th, Nth] of the previous and the current value, as a
 * pair. For this reason, `pairwise` emits on the second and subsequent
 * emissions from the source Observable, but not on the first emission, because
 * there is no previous value in that case.
 *
 * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var pairs = clicks.pairwise();
 * var distance = pairs.map(pair => {
 *   var x0 = pair[0].clientX;
 *   var y0 = pair[0].clientY;
 *   var x1 = pair[1].clientX;
 *   var y1 = pair[1].clientY;
 *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));
 * });
 * distance.subscribe(x => console.log(x));
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 *
 * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of
 * consecutive values from the source Observable.
 * @method pairwise
 * @owner Observable
 */

var PairwiseOperator = /*@__PURE__*/ (function () {
    function PairwiseOperator() {
    }
    PairwiseOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    };
    return PairwiseOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var PairwiseSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(PairwiseSubscriber, _super);
    function PairwiseSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasPrev = false;
        return _this;
    }
    PairwiseSubscriber.prototype._next = function (value) {
        if (this.hasPrev) {
            this.destination.next([this.prev, value]);
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
    };
    return PairwiseSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/** PURE_IMPORTS_START _util_not,_filter PURE_IMPORTS_END */
/**
 * Splits the source Observable into two, one with values that satisfy a
 * predicate, and another with values that don't satisfy the predicate.
 *
 * <span class="informal">It's like {@link filter}, but returns two Observables:
 * one like the output of {@link filter}, and the other with values that did not
 * pass the condition.</span>
 *
 * <img src="./img/partition.png" width="100%">
 *
 * `partition` outputs an array with two Observables that partition the values
 * from the source Observable through the given `predicate` function. The first
 * Observable in that array emits source values for which the predicate argument
 * returns true. The second Observable emits source values for which the
 * predicate returns false. The first behaves like {@link filter} and the second
 * behaves like {@link filter} with the predicate negated.
 *
 * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');
 * var clicksOnDivs = parts[0];
 * var clicksElsewhere = parts[1];
 * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));
 * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));
 *
 * @see {@link filter}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted on the first Observable in the returned array, if
 * `false` the value is emitted on the second Observable in the array. The
 * `index` parameter is the number `i` for the i-th source emission that has
 * happened since the subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {[Observable<T>, Observable<T>]} An array with two Observables: one
 * with values that passed the predicate, and another with values that did not
 * pass the predicate.
 * @method partition
 * @owner Observable
 */

/** PURE_IMPORTS_START _map PURE_IMPORTS_END */
/**
 * Maps each source value (an object) to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted object.</span>
 *
 * <img src="./img/pluck.png" width="100%">
 *
 * Given a list of strings describing a path to an object property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * @example <caption>Map every click to the tagName of the clicked target element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var tagNames = clicks.pluck('target', 'tagName');
 * tagNames.subscribe(x => console.log(x));
 *
 * @see {@link map}
 *
 * @param {...string} properties The nested properties to pluck from each source
 * value (an object).
 * @return {Observable} A new Observable of property values from the source values.
 * @method pluck
 * @owner Observable
 */

/** PURE_IMPORTS_START _Subject,_multicast PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <img src="./img/publish.png" width="100%">
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.
 * @method publish
 * @owner Observable
 */

/** PURE_IMPORTS_START _BehaviorSubject,_multicast PURE_IMPORTS_END */
/**
 * @param value
 * @return {ConnectableObservable<T>}
 * @method publishBehavior
 * @owner Observable
 */

/** PURE_IMPORTS_START _AsyncSubject,_multicast PURE_IMPORTS_END */

/** PURE_IMPORTS_START _ReplaySubject,_multicast PURE_IMPORTS_END */
/* tslint:enable:max-line-length */

/** PURE_IMPORTS_START _util_isArray,_observable_race PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that mirrors the first source Observable to emit an item
 * from the combination of this Observable and supplied Observables.
 * @param {...Observables} ...observables Sources used to race for which Observable emits first.
 * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.
 * @method race
 * @owner Observable
 * @deprecated Deprecated in favor of static race.
 */

/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */
/**
 * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.
 *
 * <img src="./img/repeat.png" width="100%">
 *
 * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield
 * an empty Observable.
 * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most
 * count times.
 * @method repeat
 * @owner Observable
 */

var RepeatOperator = /*@__PURE__*/ (function () {
    function RepeatOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RepeatOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    };
    return RepeatOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RepeatSubscriber, _super);
    function RepeatSubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RepeatSubscriber.prototype.complete = function () {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.complete.call(this);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RepeatSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source
 * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable
 * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise
 * this method will resubscribe to the source Observable.
 *
 * <img src="./img/repeatWhen.png" width="100%">
 *
 * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with
 * which a user can `complete` or `error`, aborting the repetition.
 * @return {Observable} The source Observable modified with repeat logic.
 * @method repeatWhen
 * @owner Observable
 */

var RepeatWhenOperator = /*@__PURE__*/ (function () {
    function RepeatWhenOperator(notifier) {
        this.notifier = notifier;
    }
    RepeatWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    };
    return RepeatWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RepeatWhenSubscriber, _super);
    function RepeatWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        _this.sourceIsBeingSubscribedTo = true;
        return _this;
    }
    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    };
    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return _super.prototype.complete.call(this);
        }
    };
    RepeatWhenSubscriber.prototype.complete = function () {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return _super.prototype.complete.call(this);
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RepeatWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        _super.prototype._unsubscribeAndRecycle.call(this);
        this._unsubscribe = _unsubscribe;
        return this;
    };
    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {
        this.notifications = new Subject();
        var retries = tryCatch(this.notifier)(this.notifications);
        if (retries === errorObject) {
            return _super.prototype.complete.call(this);
        }
        this.retries = retries;
        this.retriesSubscription = subscribeToResult(this, retries);
    };
    return RepeatWhenSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given
 * as a number parameter) rather than propagating the `error` call.
 *
 * <img src="./img/retry.png" width="100%">
 *
 * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted
 * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second
 * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications
 * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].
 * @param {number} count - Number of retry attempts before failing.
 * @return {Observable} The source Observable modified with the retry logic.
 * @method retry
 * @owner Observable
 */

var RetryOperator = /*@__PURE__*/ (function () {
    function RetryOperator(count, source) {
        this.count = count;
        this.source = source;
    }
    RetryOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    };
    return RetryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetrySubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RetrySubscriber, _super);
    function RetrySubscriber(destination, count, source) {
        var _this = _super.call(this, destination) || this;
        _this.count = count;
        _this.source = source;
        return _this;
    }
    RetrySubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _a = this, source = _a.source, count = _a.count;
            if (count === 0) {
                return _super.prototype.error.call(this, err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    };
    return RetrySubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable
 * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.
 * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child
 * subscription. Otherwise this method will resubscribe to the source Observable.
 *
 * <img src="./img/retryWhen.png" width="100%">
 *
 * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a
 * user can `complete` or `error`, aborting the retry.
 * @return {Observable} The source Observable modified with retry logic.
 * @method retryWhen
 * @owner Observable
 */

var RetryWhenOperator = /*@__PURE__*/ (function () {
    function RetryWhenOperator(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    RetryWhenOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    };
    return RetryWhenOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(RetryWhenSubscriber, _super);
    function RetryWhenSubscriber(destination, notifier, source) {
        var _this = _super.call(this, destination) || this;
        _this.notifier = notifier;
        _this.source = source;
        return _this;
    }
    RetryWhenSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var errors = this.errors;
            var retries = this.retries;
            var retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new Subject();
                retries = tryCatch(this.notifier)(errors);
                if (retries === errorObject) {
                    return _super.prototype.error.call(this, errorObject.e);
                }
                retriesSubscription = subscribeToResult(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    RetryWhenSubscriber.prototype._unsubscribe = function () {
        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    };
    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var _unsubscribe = this._unsubscribe;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    };
    return RetryWhenSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Emits the most recently emitted value from the source Observable whenever
 * another Observable, the `notifier`, emits.
 *
 * <span class="informal">It's like {@link sampleTime}, but samples whenever
 * the `notifier` Observable emits something.</span>
 *
 * <img src="./img/sample.png" width="100%">
 *
 * Whenever the `notifier` Observable emits a value or completes, `sample`
 * looks at the source Observable and emits whichever value it has most recently
 * emitted since the previous sampling, unless the source has not emitted
 * anything since the previous sampling. The `notifier` is subscribed to as soon
 * as the output Observable is subscribed.
 *
 * @example <caption>On every click, sample the most recent "seconds" timer</caption>
 * var seconds = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = seconds.sample(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {Observable<any>} notifier The Observable to use for sampling the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable whenever the notifier Observable
 * emits value or completes.
 * @method sample
 * @owner Observable
 */

var SampleOperator = /*@__PURE__*/ (function () {
    function SampleOperator(notifier) {
        this.notifier = notifier;
    }
    SampleOperator.prototype.call = function (subscriber, source) {
        var sampleSubscriber = new SampleSubscriber(subscriber);
        var subscription = source.subscribe(sampleSubscriber);
        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));
        return subscription;
    };
    return SampleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SampleSubscriber, _super);
    function SampleSubscriber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasValue = false;
        return _this;
    }
    SampleSubscriber.prototype._next = function (value) {
        this.value = value;
        this.hasValue = true;
    };
    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    };
    SampleSubscriber.prototype.notifyComplete = function () {
        this.emitValue();
    };
    SampleSubscriber.prototype.emitValue = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    };
    return SampleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
/**
 * Emits the most recently emitted value from the source Observable within
 * periodic time intervals.
 *
 * <span class="informal">Samples the source Observable at periodic time
 * intervals, emitting what it samples.</span>
 *
 * <img src="./img/sampleTime.png" width="100%">
 *
 * `sampleTime` periodically looks at the source Observable and emits whichever
 * value it has most recently emitted since the previous sampling, unless the
 * source has not emitted anything since the previous sampling. The sampling
 * happens periodically in time every `period` milliseconds (or the time unit
 * defined by the optional `scheduler` argument). The sampling starts as soon as
 * the output Observable is subscribed.
 *
 * @example <caption>Every second, emit the most recent click at most once</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.sampleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {number} period The sampling period expressed in milliseconds or the
 * time unit determined internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the sampling.
 * @return {Observable<T>} An Observable that emits the results of sampling the
 * values emitted by the source Observable at the specified time interval.
 * @method sampleTime
 * @owner Observable
 */

var SampleTimeOperator = /*@__PURE__*/ (function () {
    function SampleTimeOperator(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    SampleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    };
    return SampleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SampleTimeSubscriber, _super);
    function SampleTimeSubscriber(destination, period, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.period = period;
        _this.scheduler = scheduler;
        _this.hasValue = false;
        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));
        return _this;
    }
    SampleTimeSubscriber.prototype._next = function (value) {
        this.lastValue = value;
        this.hasValue = true;
    };
    SampleTimeSubscriber.prototype.notifyNext = function () {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    };
    return SampleTimeSubscriber;
}(Subscriber));
function dispatchNotification(state) {
    var subscriber = state.subscriber, period = state.period;
    subscriber.notifyNext();
    this.schedule(state, period);
}

/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */
/**
 * Compares all values of two observables in sequence using an optional comparor function
 * and returns an observable of a single boolean value representing whether or not the two sequences
 * are equal.
 *
 * <span class="informal">Checks to see of all values emitted by both observables are equal, in order.</span>
 *
 * <img src="./img/sequenceEqual.png" width="100%">
 *
 * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either
 * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom
 * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the
 * observables completes, the operator will wait for the other observable to complete; If the other
 * observable emits before completing, the returned observable will emit `false` and complete. If one observable never
 * completes or emits after the other complets, the returned observable will never complete.
 *
 * @example <caption>figure out if the Konami code matches</caption>
 * var code = Rx.Observable.from([
 *  "ArrowUp",
 *  "ArrowUp",
 *  "ArrowDown",
 *  "ArrowDown",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "ArrowLeft",
 *  "ArrowRight",
 *  "KeyB",
 *  "KeyA",
 *  "Enter" // no start key, clearly.
 * ]);
 *
 * var keys = Rx.Observable.fromEvent(document, 'keyup')
 *  .map(e => e.code);
 * var matches = keys.bufferCount(11, 1)
 *  .mergeMap(
 *    last11 =>
 *      Rx.Observable.from(last11)
 *        .sequenceEqual(code)
 *   );
 * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 * @see {@link withLatestFrom}
 *
 * @param {Observable} compareTo The observable sequence to compare the source sequence to.
 * @param {function} [comparor] An optional function to compare each value pair
 * @return {Observable} An Observable of a single boolean value representing whether or not
 * the values emitted by both observables were equal in sequence.
 * @method sequenceEqual
 * @owner Observable
 */

var SequenceEqualOperator = /*@__PURE__*/ (function () {
    function SequenceEqualOperator(compareTo, comparor) {
        this.compareTo = compareTo;
        this.comparor = comparor;
    }
    SequenceEqualOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));
    };
    return SequenceEqualOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SequenceEqualSubscriber, _super);
    function SequenceEqualSubscriber(destination, compareTo, comparor) {
        var _this = _super.call(this, destination) || this;
        _this.compareTo = compareTo;
        _this.comparor = comparor;
        _this._a = [];
        _this._b = [];
        _this._oneComplete = false;
        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));
        return _this;
    }
    SequenceEqualSubscriber.prototype._next = function (value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    };
    SequenceEqualSubscriber.prototype._complete = function () {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    };
    SequenceEqualSubscriber.prototype.checkValues = function () {
        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;
        while (_a.length > 0 && _b.length > 0) {
            var a = _a.shift();
            var b = _b.shift();
            var areEqual = false;
            if (comparor) {
                areEqual = tryCatch(comparor)(a, b);
                if (areEqual === errorObject) {
                    this.destination.error(errorObject.e);
                }
            }
            else {
                areEqual = a === b;
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    };
    SequenceEqualSubscriber.prototype.emit = function (value) {
        var destination = this.destination;
        destination.next(value);
        destination.complete();
    };
    SequenceEqualSubscriber.prototype.nextB = function (value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    };
    return SequenceEqualSubscriber;
}(Subscriber));
var SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SequenceEqualCompareToSubscriber, _super);
    function SequenceEqualCompareToSubscriber(destination, parent) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        return _this;
    }
    SequenceEqualCompareToSubscriber.prototype._next = function (value) {
        this.parent.nextB(value);
    };
    SequenceEqualCompareToSubscriber.prototype._error = function (err) {
        this.parent.error(err);
    };
    SequenceEqualCompareToSubscriber.prototype._complete = function () {
        this.parent._complete();
    };
    return SequenceEqualCompareToSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .multicast(() => new Subject()).refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */

/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */
/**
 * @method shareReplay
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */
/**
 * Returns an Observable that emits the single item emitted by the source Observable that matches a specified
 * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no
 * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable
 * emits items but none match the specified predicate then `undefined` is emiited.
 *
 * <img src="./img/single.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.
 * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches
 * the predicate or `undefined` when no items match.
 *
 * @method single
 * @owner Observable
 */

var SingleOperator = /*@__PURE__*/ (function () {
    function SingleOperator(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    SingleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    };
    return SingleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SingleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SingleSubscriber, _super);
    function SingleSubscriber(destination, predicate, source) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.source = source;
        _this.seenValue = false;
        _this.index = 0;
        return _this;
    }
    SingleSubscriber.prototype.applySingleValue = function (value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    };
    SingleSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    };
    SingleSubscriber.prototype.tryNext = function (value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    SingleSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new EmptyError);
        }
    };
    return SingleSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Returns an Observable that skips the first `count` items emitted by the source Observable.
 *
 * <img src="./img/skip.png" width="100%">
 *
 * @param {Number} count - The number of times, items emitted by source Observable should be skipped.
 * @return {Observable} An Observable that skips values emitted by the source Observable.
 *
 * @method skip
 * @owner Observable
 */

var SkipOperator = /*@__PURE__*/ (function () {
    function SkipOperator(total) {
        this.total = total;
    }
    SkipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    };
    return SkipOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipSubscriber, _super);
    function SkipSubscriber(destination, total) {
        var _this = _super.call(this, destination) || this;
        _this.total = total;
        _this.count = 0;
        return _this;
    }
    SkipSubscriber.prototype._next = function (x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    };
    return SkipSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */
/**
 * Skip the last `count` values emitted by the source Observable.
 *
 * <img src="./img/skipLast.png" width="100%">
 *
 * `skipLast` returns an Observable that accumulates a queue with a length
 * enough to store the first `count` values. As more values are received,
 * values are taken from the front of the queue and produced on the result
 * sequence. This causes values to be delayed.
 *
 * @example <caption>Skip the last 2 values of an Observable with many values</caption>
 * var many = Rx.Observable.range(1, 5);
 * var skipLastTwo = many.skipLast(2);
 * skipLastTwo.subscribe(x => console.log(x));
 *
 * // Results in:
 * // 1 2 3
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipWhile}
 * @see {@link take}
 *
 * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws
 * ArgumentOutOrRangeError if `i < 0`.
 *
 * @param {number} count Number of elements to skip from the end of the source Observable.
 * @returns {Observable<T>} An Observable that skips the last count values
 * emitted by the source Observable.
 * @method skipLast
 * @owner Observable
 */

var SkipLastOperator = /*@__PURE__*/ (function () {
    function SkipLastOperator(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new ArgumentOutOfRangeError;
        }
    }
    SkipLastOperator.prototype.call = function (subscriber, source) {
        if (this._skipCount === 0) {
            // If we don't want to skip any values then just subscribe
            // to Subscriber without any further logic.
            return source.subscribe(new Subscriber(subscriber));
        }
        else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        }
    };
    return SkipLastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipLastSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipLastSubscriber, _super);
    function SkipLastSubscriber(destination, _skipCount) {
        var _this = _super.call(this, destination) || this;
        _this._skipCount = _skipCount;
        _this._count = 0;
        _this._ring = new Array(_skipCount);
        return _this;
    }
    SkipLastSubscriber.prototype._next = function (value) {
        var skipCount = this._skipCount;
        var count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            var currentIndex = count % skipCount;
            var ring = this._ring;
            var oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    };
    return SkipLastSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * <img src="./img/skipUntil.png" width="100%">
 *
 * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to
 * be mirrored by the resulting Observable.
 * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits
 * an item, then emits the remaining items.
 * @method skipUntil
 * @owner Observable
 */

var SkipUntilOperator = /*@__PURE__*/ (function () {
    function SkipUntilOperator(notifier) {
        this.notifier = notifier;
    }
    SkipUntilOperator.prototype.call = function (destination, source) {
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    };
    return SkipUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipUntilSubscriber, _super);
    function SkipUntilSubscriber(destination, notifier) {
        var _this = _super.call(this, destination) || this;
        _this.hasValue = false;
        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));
        return _this;
    }
    SkipUntilSubscriber.prototype._next = function (value) {
        if (this.hasValue) {
            _super.prototype._next.call(this, value);
        }
    };
    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
        if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
        }
    };
    SkipUntilSubscriber.prototype.notifyComplete = function () {
        /* do nothing */
    };
    return SkipUntilSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds
 * true, but emits all further source items as soon as the condition becomes false.
 *
 * <img src="./img/skipWhile.png" width="100%">
 *
 * @param {Function} predicate - A function to test each item emitted from the source Observable.
 * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the
 * specified predicate becomes false.
 * @method skipWhile
 * @owner Observable
 */

var SkipWhileOperator = /*@__PURE__*/ (function () {
    function SkipWhileOperator(predicate) {
        this.predicate = predicate;
    }
    SkipWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    };
    return SkipWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SkipWhileSubscriber, _super);
    function SkipWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.skipping = true;
        _this.index = 0;
        return _this;
    }
    SkipWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    };
    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
        try {
            var result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    };
    return SkipWhileSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START _observable_fromArray,_observable_scalar,_observable_empty,_observable_concat,_util_isScheduler PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the items you specify as arguments before it begins to emit
 * items emitted by the source Observable.
 *
 * <img src="./img/startWith.png" width="100%">
 *
 * @param {...T} values - Items you want the modified Observable to emit first.
 * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling
 * the emissions of the `next` notifications.
 * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items
 * emitted by the source Observable.
 * @method startWith
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var SubscribeOnObservable = /*@__PURE__*/ (function (_super) {
    __extends(SubscribeOnObservable, _super);
    function SubscribeOnObservable(source, delayTime, scheduler) {
        if (delayTime === void 0) {
            delayTime = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.delayTime = delayTime;
        _this.scheduler = scheduler;
        if (!isNumeric(delayTime) || delayTime < 0) {
            _this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            _this.scheduler = asap;
        }
        return _this;
    }
    /** @nocollapse */
    SubscribeOnObservable.create = function (source, delay, scheduler) {
        if (delay === void 0) {
            delay = 0;
        }
        if (scheduler === void 0) {
            scheduler = asap;
        }
        return new SubscribeOnObservable(source, delay, scheduler);
    };
    /** @nocollapse */
    SubscribeOnObservable.dispatch = function (arg) {
        var source = arg.source, subscriber = arg.subscriber;
        return this.add(source.subscribe(subscriber));
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
        var delay = this.delayTime;
        var source = this.source;
        var scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source: source, subscriber: subscriber
        });
    };
    return SubscribeOnObservable;
}(Observable));

/** PURE_IMPORTS_START _observable_SubscribeOnObservable PURE_IMPORTS_END */
/**
 * Asynchronously subscribes Observers to this Observable on the specified IScheduler.
 *
 * <img src="./img/subscribeOn.png" width="100%">
 *
 * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.
 * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.
 .
 * @method subscribeOn
 * @owner Observable
 */

var SubscribeOnOperator = /*@__PURE__*/ (function () {
    function SubscribeOnOperator(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    SubscribeOnOperator.prototype.call = function (subscriber, source) {
        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    };
    return SubscribeOnOperator;
}());

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, emitting values only from the most recently projected Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link switch}.</span>
 *
 * <img src="./img/switchMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each time it observes one of these
 * inner Observables, the output Observable begins emitting the items emitted by
 * that inner Observable. When a new inner Observable is emitted, `switchMap`
 * stops emitting items from the earlier-emitted inner Observable and begins
 * emitting items from the new one. It continues to behave like this for
 * subsequent inner Observables.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switch}
 * @see {@link switchMapTo}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking only the values from the most recently
 * projected inner Observable.
 * @method switchMap
 * @owner Observable
 */

var SwitchMapOperator = /*@__PURE__*/ (function () {
    function SwitchMapOperator(project) {
        this.project = project;
    }
    SwitchMapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    };
    return SwitchMapOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(SwitchMapSubscriber, _super);
    function SwitchMapSubscriber(destination, project) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.index = 0;
        return _this;
    }
    SwitchMapSubscriber.prototype._next = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    };
    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
        var innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));
    };
    SwitchMapSubscriber.prototype._complete = function () {
        var innerSubscription = this.innerSubscription;
        if (!innerSubscription || innerSubscription.closed) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype._unsubscribe = function () {
        this.innerSubscription = null;
    };
    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
        this.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            _super.prototype._complete.call(this);
        }
    };
    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    return SwitchMapSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _switchMap,_util_identity PURE_IMPORTS_END */

/** PURE_IMPORTS_START _switchMap PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Projects each source value to the same Observable which is flattened multiple
 * times with {@link switch} in the output Observable.
 *
 * <span class="informal">It's like {@link switchMap}, but maps each value
 * always to the same inner Observable.</span>
 *
 * <img src="./img/switchMapTo.png" width="100%">
 *
 * Maps each source value to the given Observable `innerObservable` regardless
 * of the source value, and then flattens those resulting Observables into one
 * single Observable, which is the output Observable. The output Observables
 * emits values only from the most recently emitted instance of
 * `innerObservable`.
 *
 * @example <caption>Rerun an interval Observable on every click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.switchMapTo(Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMapTo}
 * @see {@link switch}
 * @see {@link switchMap}
 * @see {@link mergeMapTo}
 *
 * @param {ObservableInput} innerObservable An Observable to replace each value from
 * the source Observable.
 * @return {Observable} An Observable that emits items from the given
 * `innerObservable` (and optionally transformed through `resultSelector`) every
 * time a value is emitted on the source Observable, and taking only the values
 * from the most recently projected inner Observable.
 * @method switchMapTo
 * @owner Observable
 */

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Emits the values emitted by the source Observable until a `notifier`
 * Observable emits a value.
 *
 * <span class="informal">Lets values pass until a second Observable,
 * `notifier`, emits a value. Then, it completes.</span>
 *
 * <img src="./img/takeUntil.png" width="100%">
 *
 * `takeUntil` subscribes and begins mirroring the source Observable. It also
 * monitors a second Observable, `notifier` that you provide. If the `notifier`
 * emits a value, the output Observable stops mirroring the source Observable
 * and completes. If the `notifier` doesn't emit any value and completes
 * then `takeUntil` will pass all values.
 *
 * @example <caption>Tick every second until the first click happens</caption>
 * var interval = Rx.Observable.interval(1000);
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = interval.takeUntil(clicks);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeWhile}
 * @see {@link skip}
 *
 * @param {Observable} notifier The Observable whose first emitted value will
 * cause the output Observable of `takeUntil` to stop emitting values from the
 * source Observable.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable until such time as `notifier` emits its first value.
 * @method takeUntil
 * @owner Observable
 */

var TakeUntilOperator = /*@__PURE__*/ (function () {
    function TakeUntilOperator(notifier) {
        this.notifier = notifier;
    }
    TakeUntilOperator.prototype.call = function (subscriber, source) {
        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !notifierSubscription.closed) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    };
    return TakeUntilOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeUntilSubscriber, _super);
    function TakeUntilSubscriber(destination) {
        return _super.call(this, destination) || this;
    }
    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.complete();
    };
    TakeUntilSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    return TakeUntilSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
/**
 * Emits values emitted by the source Observable so long as each value satisfies
 * the given `predicate`, and then completes as soon as this `predicate` is not
 * satisfied.
 *
 * <span class="informal">Takes values from the source only while they pass the
 * condition given. When the first value does not satisfy, it completes.</span>
 *
 * <img src="./img/takeWhile.png" width="100%">
 *
 * `takeWhile` subscribes and begins mirroring the source Observable. Each value
 * emitted on the source is given to the `predicate` function which returns a
 * boolean, representing a condition to be satisfied by the source values. The
 * output Observable emits the source values until such time as the `predicate`
 * returns false, at which point `takeWhile` stops mirroring the source
 * Observable and completes the output Observable.
 *
 * @example <caption>Emit click events only while the clientX property is greater than 200</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.takeWhile(ev => ev.clientX > 200);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link take}
 * @see {@link takeLast}
 * @see {@link takeUntil}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates a value emitted by the source Observable and returns a boolean.
 * Also takes the (zero-based) index as the second argument.
 * @return {Observable<T>} An Observable that emits the values from the source
 * Observable so long as each value satisfies the condition defined by the
 * `predicate`, then completes.
 * @method takeWhile
 * @owner Observable
 */

var TakeWhileOperator = /*@__PURE__*/ (function () {
    function TakeWhileOperator(predicate) {
        this.predicate = predicate;
    }
    TakeWhileOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));
    };
    return TakeWhileOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TakeWhileSubscriber, _super);
    function TakeWhileSubscriber(destination, predicate) {
        var _this = _super.call(this, destination) || this;
        _this.predicate = predicate;
        _this.index = 0;
        return _this;
    }
    TakeWhileSubscriber.prototype._next = function (value) {
        var destination = this.destination;
        var result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    };
    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
        var destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            destination.complete();
        }
    };
    return TakeWhileSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */

/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for a duration determined by another Observable, then repeats this
 * process.
 *
 * <span class="informal">It's like {@link throttleTime}, but the silencing
 * duration is determined by a second Observable.</span>
 *
 * <img src="./img/throttle.png" width="100%">
 *
 * `throttle` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled by calling the `durationSelector` function with the source value,
 * which returns the "duration" Observable. When the duration Observable emits a
 * value or completes, the timer is disabled, and this process repeats for the
 * next source value.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttle(ev => Rx.Observable.interval(1000));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link audit}
 * @see {@link debounce}
 * @see {@link delayWhen}
 * @see {@link sample}
 * @see {@link throttleTime}
 *
 * @param {function(value: T): SubscribableOrPromise} durationSelector A function
 * that receives a value from the source Observable, for computing the silencing
 * duration for each source value, returned as an Observable or a Promise.
 * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults
 * to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttle
 * @owner Observable
 */

var ThrottleOperator = /*@__PURE__*/ (function () {
    function ThrottleOperator(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    };
    return ThrottleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc
 * @ignore
 * @extends {Ignored}
 */
var ThrottleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleSubscriber, _super);
    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.durationSelector = durationSelector;
        _this._leading = _leading;
        _this._trailing = _trailing;
        _this._hasValue = false;
        return _this;
    }
    ThrottleSubscriber.prototype._next = function (value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    };
    ThrottleSubscriber.prototype.send = function () {
        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = null;
    };
    ThrottleSubscriber.prototype.throttle = function (value) {
        var duration = this.tryDurationSelector(value);
        if (duration) {
            this.add(this._throttled = subscribeToResult(this, duration));
        }
    };
    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    };
    ThrottleSubscriber.prototype.throttlingDone = function () {
        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = null;
        if (_trailing) {
            this.send();
        }
    };
    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.throttlingDone();
    };
    ThrottleSubscriber.prototype.notifyComplete = function () {
        this.throttlingDone();
    };
    return ThrottleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */
/**
 * Emits a value from the source Observable, then ignores subsequent source
 * values for `duration` milliseconds, then repeats this process.
 *
 * <span class="informal">Lets a value pass, then ignores source values for the
 * next `duration` milliseconds.</span>
 *
 * <img src="./img/throttleTime.png" width="100%">
 *
 * `throttleTime` emits the source Observable values on the output Observable
 * when its internal timer is disabled, and ignores source values when the timer
 * is enabled. Initially, the timer is disabled. As soon as the first source
 * value arrives, it is forwarded to the output Observable, and then the timer
 * is enabled. After `duration` milliseconds (or the time unit determined
 * internally by the optional `scheduler`) has passed, the timer is disabled,
 * and this process repeats for the next source value. Optionally takes a
 * {@link IScheduler} for managing timers.
 *
 * @example <caption>Emit clicks at a rate of at most one click per second</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.throttleTime(1000);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link auditTime}
 * @see {@link debounceTime}
 * @see {@link delay}
 * @see {@link sampleTime}
 * @see {@link throttle}
 *
 * @param {number} duration Time to wait before emitting another value after
 * emitting the last value, measured in milliseconds or the time unit determined
 * internally by the optional `scheduler`.
 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
 * managing the timers that handle the throttling.
 * @param {Object} config a configuration object to define `leading` and
 * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.
 * @return {Observable<T>} An Observable that performs the throttle operation to
 * limit the rate of emissions from the source.
 * @method throttleTime
 * @owner Observable
 */

var ThrottleTimeOperator = /*@__PURE__*/ (function () {
    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    ThrottleTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    };
    return ThrottleTimeOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(ThrottleTimeSubscriber, _super);
    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {
        var _this = _super.call(this, destination) || this;
        _this.duration = duration;
        _this.scheduler = scheduler;
        _this.leading = leading;
        _this.trailing = trailing;
        _this._hasTrailingValue = false;
        _this._trailingValue = null;
        return _this;
    }
    ThrottleTimeSubscriber.prototype._next = function (value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext$3, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
        }
    };
    ThrottleTimeSubscriber.prototype._complete = function () {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    };
    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
        var throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    };
    return ThrottleTimeSubscriber;
}(Subscriber));
function dispatchNext$3(arg) {
    var subscriber = arg.subscriber;
    subscriber.clearThrottle();
}

/** PURE_IMPORTS_START _scheduler_async,_scan,_observable_defer,_map PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 *
 * Errors if Observable does not emit a value in given time span, in case of which
 * subscribes to the second Observable.
 *
 * <span class="informal">It's a version of `timeout` operator that let's you specify fallback Observable.</span>
 *
 * <img src="./img/timeoutWith.png" width="100%">
 *
 * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,
 * still accepting as a first argument either a number or a Date, which control - respectively -
 * when values of source Observable should be emitted or when it should complete.
 *
 * The only difference is that it accepts a second, required parameter. This parameter
 * should be an Observable which will be subscribed when source Observable fails any timeout check.
 * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting
 * values from second Observable. Note that this fallback Observable is not checked for timeouts
 * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second
 * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that
 * stream completes, it completes as well.
 *
 * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided
 * here - as a third, optional parameter. It still is used to schedule timeout checks and -
 * as a consequence - when second Observable will be subscribed, since subscription happens
 * immediately after failing check.
 *
 * @example <caption>Add fallback observable</caption>
 * const seconds = Rx.Observable.interval(1000);
 * const minutes = Rx.Observable.interval(60 * 1000);
 *
 * seconds.timeoutWith(900, minutes)
 *     .subscribe(
 *         value => console.log(value), // After 900ms, will start emitting `minutes`,
 *                                      // since first value of `seconds` will not arrive fast enough.
 *         err => console.log(err) // Would be called after 900ms in case of `timeout`,
 *                                 // but here will never be called.
 *     );
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable
 *                          passed as a second parameter.
 * @method timeoutWith
 * @owner Observable
 */

var TimeoutWithOperator = /*@__PURE__*/ (function () {
    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    TimeoutWithOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    };
    return TimeoutWithOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(TimeoutWithSubscriber, _super);
    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.absoluteTimeout = absoluteTimeout;
        _this.waitFor = waitFor;
        _this.withObservable = withObservable;
        _this.scheduler = scheduler;
        _this.action = null;
        _this.scheduleTimeout();
        return _this;
    }
    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {
        var withObservable = subscriber.withObservable;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(subscribeToResult(subscriber, withObservable));
    };
    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
        var action = this.action;
        if (action) {
            // Recycle the action if we've already scheduled one. All the production
            // Scheduler Actions mutate their state/delay time and return themeselves.
            // VirtualActions are immutable, so they create and return a clone. In this
            // case, we need to set the action reference to the most recent VirtualAction,
            // to ensure that's the one we clone from next time.
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    };
    TimeoutWithSubscriber.prototype._next = function (value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        _super.prototype._next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    TimeoutWithSubscriber.prototype._unsubscribe = function () {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    };
    return TimeoutWithSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _scheduler_async,_util_TimeoutError,_timeoutWith,_observable_throwError PURE_IMPORTS_END */
/**
 *
 * Errors if Observable does not emit a value in given time span.
 *
 * <span class="informal">Timeouts on Observable that doesn't emit values fast enough.</span>
 *
 * <img src="./img/timeout.png" width="100%">
 *
 * `timeout` operator accepts as an argument either a number or a Date.
 *
 * If number was provided, it returns an Observable that behaves like a source
 * Observable, unless there is a period of time where there is no value emitted.
 * So if you provide `100` as argument and first value comes after 50ms from
 * the moment of subscription, this value will be simply re-emitted by the resulting
 * Observable. If however after that 100ms passes without a second value being emitted,
 * stream will end with an error and source Observable will be unsubscribed.
 * These checks are performed throughout whole lifecycle of Observable - from the moment
 * it was subscribed to, until it completes or errors itself. Thus every value must be
 * emitted within specified period since previous value.
 *
 * If provided argument was Date, returned Observable behaves differently. It throws
 * if Observable did not complete before provided Date. This means that periods between
 * emission of particular values do not matter in this case. If Observable did not complete
 * before provided Date, source Observable will be unsubscribed. Other than that, resulting
 * stream behaves just as source Observable.
 *
 * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)
 * when returned Observable will check if source stream emitted value or completed.
 *
 * @example <caption>Check if ticks are emitted within certain timespan</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(1100) // Let's use bigger timespan to be safe,
 *                       // since `interval` might fire a bit later then scheduled.
 * .subscribe(
 *     value => console.log(value), // Will emit numbers just as regular `interval` would.
 *     err => console.log(err) // Will never be called.
 * );
 *
 * seconds.timeout(900).subscribe(
 *     value => console.log(value), // Will never be called.
 *     err => console.log(err) // Will emit error before even first value is emitted,
 *                             // since it did not arrive within 900ms period.
 * );
 *
 * @example <caption>Use Date to check if Observable completed</caption>
 * const seconds = Rx.Observable.interval(1000);
 *
 * seconds.timeout(new Date("December 17, 2020 03:24:00"))
 * .subscribe(
 *     value => console.log(value), // Will emit values as regular `interval` would
 *                                  // until December 17, 2020 at 03:24:00.
 *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,
 *                             // since Observable did not complete by then.
 * );
 *
 * @see {@link timeoutWith}
 *
 * @param {number|Date} due Number specifying period within which Observable must emit values
 *                          or Date specifying before when Observable should complete
 * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.
 * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.
 * @method timeout
 * @owner Observable
 */

/** PURE_IMPORTS_START _scheduler_async,_map PURE_IMPORTS_END */
/**
 * @param scheduler
 * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}
 * @method timestamp
 * @owner Observable
 */

/** PURE_IMPORTS_START _reduce PURE_IMPORTS_END */

/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Branch out the source Observable values as a nested Observable whenever
 * `windowBoundaries` emits.
 *
 * <span class="informal">It's like {@link buffer}, but emits a nested Observable
 * instead of an array.</span>
 *
 * <img src="./img/window.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping
 * windows. It emits the current window and opens a new one whenever the
 * Observable `windowBoundaries` emits an item. Because each window is an
 * Observable, the output is a higher-order Observable.
 *
 * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var interval = Rx.Observable.interval(1000);
 * var result = clicks.window(interval)
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link buffer}
 *
 * @param {Observable<any>} windowBoundaries An Observable that completes the
 * previous window and starts a new window.
 * @return {Observable<Observable<T>>} An Observable of windows, which are
 * Observables emitting values of the source Observable.
 * @method window
 * @owner Observable
 */

var WindowOperator = /*@__PURE__*/ (function () {
    function WindowOperator(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        var windowSubscriber = new WindowSubscriber(subscriber);
        var sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.window = new Subject();
        destination.next(_this.window);
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this._complete();
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    WindowSubscriber.prototype._unsubscribe = function () {
        this.window = null;
    };
    WindowSubscriber.prototype.openWindow = function () {
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var destination = this.destination;
        var newWindow = this.window = new Subject();
        destination.next(newWindow);
    };
    return WindowSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */
/**
 * Branch out the source Observable values as a nested Observable with each
 * nested Observable emitting at most `windowSize` values.
 *
 * <span class="informal">It's like {@link bufferCount}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowCount.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows every `startWindowEvery`
 * items, each containing no more than `windowSize` items. When the source
 * Observable completes or encounters an error, the output Observable emits
 * the current window and propagates the notification from the source
 * Observable. If `startWindowEvery` is not provided, then new windows are
 * started immediately at the start of the source and when each window completes
 * with size `windowSize`.
 *
 * @example <caption>Ignore every 3rd click event, starting from the first one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(3)
 *   .map(win => win.skip(1)) // skip first of every 3 clicks
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Ignore every 3rd click event, starting from the third one</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.windowCount(2, 3)
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link windowWhen}
 * @see {@link bufferCount}
 *
 * @param {number} windowSize The maximum number of values emitted by each
 * window.
 * @param {number} [startWindowEvery] Interval at which to start a new window.
 * For example if `startWindowEvery` is `2`, then a new window will be started
 * on every other value from the source. A new window is started at the
 * beginning of the source by default.
 * @return {Observable<Observable<T>>} An Observable of windows, which in turn
 * are Observable of values.
 * @method windowCount
 * @owner Observable
 */

var WindowCountOperator = /*@__PURE__*/ (function () {
    function WindowCountOperator(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    WindowCountOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    };
    return WindowCountOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowCountSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowCountSubscriber, _super);
    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowSize = windowSize;
        _this.startWindowEvery = startWindowEvery;
        _this.windows = [new Subject()];
        _this.count = 0;
        destination.next(_this.windows[0]);
        return _this;
    }
    WindowCountSubscriber.prototype._next = function (value) {
        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        var destination = this.destination;
        var windowSize = this.windowSize;
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        var c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            var window_1 = new Subject();
            windows.push(window_1);
            destination.next(window_1);
        }
    };
    WindowCountSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    };
    WindowCountSubscriber.prototype._complete = function () {
        var windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    };
    WindowCountSubscriber.prototype._unsubscribe = function () {
        this.count = 0;
        this.windows = null;
    };
    return WindowCountSubscriber;
}(Subscriber));

/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */

var WindowTimeOperator = /*@__PURE__*/ (function () {
    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    WindowTimeOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    };
    return WindowTimeOperator;
}());
var CountedSubject = /*@__PURE__*/ (function (_super) {
    __extends(CountedSubject, _super);
    function CountedSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._numberOfNextedValues = 0;
        return _this;
    }
    CountedSubject.prototype.next = function (value) {
        this._numberOfNextedValues++;
        _super.prototype.next.call(this, value);
    };
    Object.defineProperty(CountedSubject.prototype, "numberOfNextedValues", {
        get: function () {
            return this._numberOfNextedValues;
        },
        enumerable: true,
        configurable: true
    });
    return CountedSubject;
}(Subject));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowTimeSubscriber, _super);
    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.windowTimeSpan = windowTimeSpan;
        _this.windowCreationInterval = windowCreationInterval;
        _this.maxWindowSize = maxWindowSize;
        _this.scheduler = scheduler;
        _this.windows = [];
        var window = _this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            var closeState = { subscriber: _this, window: window, context: null };
            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };
            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };
            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
        return _this;
    }
    WindowTimeSubscriber.prototype._next = function (value) {
        var windows = this.windows;
        var len = windows.length;
        for (var i = 0; i < len; i++) {
            var window_1 = windows[i];
            if (!window_1.closed) {
                window_1.next(value);
                if (window_1.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window_1);
                }
            }
        }
    };
    WindowTimeSubscriber.prototype._error = function (err) {
        var windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    };
    WindowTimeSubscriber.prototype._complete = function () {
        var windows = this.windows;
        while (windows.length > 0) {
            var window_2 = windows.shift();
            if (!window_2.closed) {
                window_2.complete();
            }
        }
        this.destination.complete();
    };
    WindowTimeSubscriber.prototype.openWindow = function () {
        var window = new CountedSubject();
        this.windows.push(window);
        var destination = this.destination;
        destination.next(window);
        return window;
    };
    WindowTimeSubscriber.prototype.closeWindow = function (window) {
        window.complete();
        var windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    };
    return WindowTimeSubscriber;
}(Subscriber));
function dispatchWindowTimeSpanOnly(state) {
    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
    var window = subscriber.openWindow();
    var action = this;
    var context = { action: action, subscription: null };
    var timeSpanState = { subscriber: subscriber, window: window, context: context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    var subscriber = state.subscriber, window = state.window, context = state.context;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}

/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Branch out the source Observable values as a nested Observable starting from
 * an emission from `openings` and ending when the output of `closingSelector`
 * emits.
 *
 * <span class="informal">It's like {@link bufferToggle}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowToggle.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits windows that contain those items
 * emitted by the source Observable between the time when the `openings`
 * Observable emits an item and when the Observable returned by
 * `closingSelector` emits an item.
 *
 * @example <caption>Every other second, emit the click events from the next 500ms</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var openings = Rx.Observable.interval(1000);
 * var result = clicks.windowToggle(openings, i =>
 *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()
 * ).mergeAll();
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowWhen}
 * @see {@link bufferToggle}
 *
 * @param {Observable<O>} openings An observable of notifications to start new
 * windows.
 * @param {function(value: O): Observable} closingSelector A function that takes
 * the value emitted by the `openings` observable and returns an Observable,
 * which, when it emits (either `next` or `complete`), signals that the
 * associated window should complete.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowToggle
 * @owner Observable
 */

var WindowToggleOperator = /*@__PURE__*/ (function () {
    function WindowToggleOperator(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    WindowToggleOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    };
    return WindowToggleOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WindowToggleSubscriber, _super);
    function WindowToggleSubscriber(destination, openings, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.openings = openings;
        _this.closingSelector = closingSelector;
        _this.contexts = [];
        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));
        return _this;
    }
    WindowToggleSubscriber.prototype._next = function (value) {
        var contexts = this.contexts;
        if (contexts) {
            var len = contexts.length;
            for (var i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    };
    WindowToggleSubscriber.prototype._error = function (err) {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_1 = contexts[index];
                context_1.window.error(err);
                context_1.subscription.unsubscribe();
            }
        }
        _super.prototype._error.call(this, err);
    };
    WindowToggleSubscriber.prototype._complete = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_2 = contexts[index];
                context_2.window.complete();
                context_2.subscription.unsubscribe();
            }
        }
        _super.prototype._complete.call(this);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    WindowToggleSubscriber.prototype._unsubscribe = function () {
        var contexts = this.contexts;
        this.contexts = null;
        if (contexts) {
            var len = contexts.length;
            var index = -1;
            while (++index < len) {
                var context_3 = contexts[index];
                context_3.window.unsubscribe();
                context_3.subscription.unsubscribe();
            }
        }
    };
    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            var closingSelector = this.closingSelector;
            var closingNotifier = tryCatch(closingSelector)(innerValue);
            if (closingNotifier === errorObject) {
                return this.error(errorObject.e);
            }
            else {
                var window_1 = new Subject();
                var subscription = new Subscription();
                var context_4 = { window: window_1, subscription: subscription };
                this.contexts.push(context_4);
                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);
                if (innerSubscription.closed) {
                    this.closeWindow(this.contexts.length - 1);
                }
                else {
                    innerSubscription.context = context_4;
                    subscription.add(innerSubscription);
                }
                this.destination.next(window_1);
            }
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    };
    WindowToggleSubscriber.prototype.notifyError = function (err) {
        this.error(err);
    };
    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    };
    WindowToggleSubscriber.prototype.closeWindow = function (index) {
        if (index === -1) {
            return;
        }
        var contexts = this.contexts;
        var context = contexts[index];
        var window = context.window, subscription = context.subscription;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    };
    return WindowToggleSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/**
 * Branch out the source Observable values as a nested Observable using a
 * factory function of closing Observables to determine when to start a new
 * window.
 *
 * <span class="informal">It's like {@link bufferWhen}, but emits a nested
 * Observable instead of an array.</span>
 *
 * <img src="./img/windowWhen.png" width="100%">
 *
 * Returns an Observable that emits windows of items it collects from the source
 * Observable. The output Observable emits connected, non-overlapping windows.
 * It emits the current window and opens a new one whenever the Observable
 * produced by the specified `closingSelector` function emits an item. The first
 * window is opened immediately when subscribing to the output Observable.
 *
 * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks
 *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))
 *   .map(win => win.take(2)) // each window has at most 2 emissions
 *   .mergeAll(); // flatten the Observable-of-Observables
 * result.subscribe(x => console.log(x));
 *
 * @see {@link window}
 * @see {@link windowCount}
 * @see {@link windowTime}
 * @see {@link windowToggle}
 * @see {@link bufferWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals (on either `next` or
 * `complete`) when to close the previous window and start a new one.
 * @return {Observable<Observable<T>>} An observable of windows, which in turn
 * are Observables.
 * @method windowWhen
 * @owner Observable
 */

var WindowOperator$1 = /*@__PURE__*/ (function () {
    function WindowOperator(closingSelector) {
        this.closingSelector = closingSelector;
    }
    WindowOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WindowSubscriber$1(subscriber, this.closingSelector));
    };
    return WindowOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WindowSubscriber$1 = /*@__PURE__*/ (function (_super) {
    __extends(WindowSubscriber, _super);
    function WindowSubscriber(destination, closingSelector) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        _this.closingSelector = closingSelector;
        _this.openWindow();
        return _this;
    }
    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype.notifyError = function (error, innerSub) {
        this._error(error);
    };
    WindowSubscriber.prototype.notifyComplete = function (innerSub) {
        this.openWindow(innerSub);
    };
    WindowSubscriber.prototype._next = function (value) {
        this.window.next(value);
    };
    WindowSubscriber.prototype._error = function (err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype._complete = function () {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    };
    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    };
    WindowSubscriber.prototype.openWindow = function (innerSub) {
        if (innerSub === void 0) {
            innerSub = null;
        }
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        var prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        var window = this.window = new Subject();
        this.destination.next(window);
        var closingNotifier = tryCatch(this.closingSelector)();
        if (closingNotifier === errorObject) {
            var err = errorObject.e;
            this.destination.error(err);
            this.window.error(err);
        }
        else {
            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));
        }
    };
    return WindowSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * Combines the source Observable with other Observables to create an Observable
 * whose values are calculated from the latest values of each, only when the
 * source emits.
 *
 * <span class="informal">Whenever the source Observable emits a value, it
 * computes a formula using that value plus the latest values from other input
 * Observables, then emits the output of that formula.</span>
 *
 * <img src="./img/withLatestFrom.png" width="100%">
 *
 * `withLatestFrom` combines each value from the source Observable (the
 * instance) with the latest values from the other input Observables only when
 * the source emits a value, optionally using a `project` function to determine
 * the value to be emitted on the output Observable. All input Observables must
 * emit at least one value before the output Observable will emit a value.
 *
 * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var result = clicks.withLatestFrom(timer);
 * result.subscribe(x => console.log(x));
 *
 * @see {@link combineLatest}
 *
 * @param {ObservableInput} other An input Observable to combine with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {Function} [project] Projection function for combining values
 * together. Receives all values in order of the Observables passed, where the
 * first parameter is a value from the source Observable. (e.g.
 * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not
 * passed, arrays will be emitted on the output Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 * @method withLatestFrom
 * @owner Observable
 */

var WithLatestFromOperator = /*@__PURE__*/ (function () {
    function WithLatestFromOperator(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    WithLatestFromOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    };
    return WithLatestFromOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {
    __extends(WithLatestFromSubscriber, _super);
    function WithLatestFromSubscriber(destination, observables, project) {
        var _this = _super.call(this, destination) || this;
        _this.observables = observables;
        _this.project = project;
        _this.toRespond = [];
        var len = observables.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            _this.toRespond.push(i);
        }
        for (var i = 0; i < len; i++) {
            var observable = observables[i];
            _this.add(subscribeToResult(_this, observable, observable, i));
        }
        return _this;
    }
    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        var toRespond = this.toRespond;
        if (toRespond.length > 0) {
            var found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    };
    WithLatestFromSubscriber.prototype.notifyComplete = function () {
        // noop
    };
    WithLatestFromSubscriber.prototype._next = function (value) {
        if (this.toRespond.length === 0) {
            var args = [value].concat(this.values);
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    };
    WithLatestFromSubscriber.prototype._tryProject = function (args) {
        var result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return WithLatestFromSubscriber;
}(OuterSubscriber));

/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */
/* tslint:enable:max-line-length */
/**
 * @deprecated Deprecated in favor of static zip.
 */

/** PURE_IMPORTS_START _observable_zip PURE_IMPORTS_END */

/* Operator exports */
/** PURE_IMPORTS_START  PURE_IMPORTS_END */

/**
 * @license Angular v6.0.4
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 *
 */
var HttpHandler = /** @class */ (function () {
    function HttpHandler() {
    }
    return HttpHandler;
}());
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 *
 */
var HttpBackend = /** @class */ (function () {
    function HttpBackend() {
    }
    return HttpBackend;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Immutable set of Http headers, with lazy parsing.
 *
 */
var HttpHeaders = /** @class */ (function () {
    function HttpHeaders(headers) {
        var _this = this;
        /**
         * Internal map of lowercased header names to the normalized
         * form of the name (the form seen first).
         */
        this.normalizedNames = new Map();
        /**
         * Queued updates to be materialized the next initialization.
         */
        this.lazyUpdate = null;
        if (!headers) {
            this.headers = new Map();
        }
        else if (typeof headers === 'string') {
            this.lazyInit = function () {
                _this.headers = new Map();
                headers.split('\n').forEach(function (line) {
                    var index = line.indexOf(':');
                    if (index > 0) {
                        var name_1 = line.slice(0, index);
                        var key = name_1.toLowerCase();
                        var value = line.slice(index + 1).trim();
                        _this.maybeSetNormalizedName(name_1, key);
                        if (_this.headers.has(key)) {
                            _this.headers.get(key).push(value);
                        }
                        else {
                            _this.headers.set(key, [value]);
                        }
                    }
                });
            };
        }
        else {
            this.lazyInit = function () {
                _this.headers = new Map();
                Object.keys(headers).forEach(function (name) {
                    var values = headers[name];
                    var key = name.toLowerCase();
                    if (typeof values === 'string') {
                        values = [values];
                    }
                    if (values.length > 0) {
                        _this.headers.set(key, values);
                        _this.maybeSetNormalizedName(name, key);
                    }
                });
            };
        }
    }
    /**
     * Checks for existence of header by given name.
     */
    HttpHeaders.prototype.has = function (name) {
        this.init();
        return this.headers.has(name.toLowerCase());
    };
    /**
     * Returns first header that matches given name.
     */
    HttpHeaders.prototype.get = function (name) {
        this.init();
        var values = this.headers.get(name.toLowerCase());
        return values && values.length > 0 ? values[0] : null;
    };
    /**
     * Returns the names of the headers
     */
    HttpHeaders.prototype.keys = function () {
        this.init();
        return Array.from(this.normalizedNames.values());
    };
    /**
     * Returns list of header values for a given name.
     */
    HttpHeaders.prototype.getAll = function (name) {
        this.init();
        return this.headers.get(name.toLowerCase()) || null;
    };
    HttpHeaders.prototype.append = function (name, value) {
        return this.clone({ name: name, value: value, op: 'a' });
    };
    HttpHeaders.prototype.set = function (name, value) {
        return this.clone({ name: name, value: value, op: 's' });
    };
    HttpHeaders.prototype.delete = function (name, value) {
        return this.clone({ name: name, value: value, op: 'd' });
    };
    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {
        if (!this.normalizedNames.has(lcName)) {
            this.normalizedNames.set(lcName, name);
        }
    };
    HttpHeaders.prototype.init = function () {
        var _this = this;
        if (!!this.lazyInit) {
            if (this.lazyInit instanceof HttpHeaders) {
                this.copyFrom(this.lazyInit);
            }
            else {
                this.lazyInit();
            }
            this.lazyInit = null;
            if (!!this.lazyUpdate) {
                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });
                this.lazyUpdate = null;
            }
        }
    };
    HttpHeaders.prototype.copyFrom = function (other) {
        var _this = this;
        other.init();
        Array.from(other.headers.keys()).forEach(function (key) {
            _this.headers.set(key, other.headers.get(key));
            _this.normalizedNames.set(key, other.normalizedNames.get(key));
        });
    };
    HttpHeaders.prototype.clone = function (update) {
        var clone = new HttpHeaders();
        clone.lazyInit =
            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;
        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
        return clone;
    };
    HttpHeaders.prototype.applyUpdate = function (update) {
        var key = update.name.toLowerCase();
        switch (update.op) {
            case 'a':
            case 's':
                var value = update.value;
                if (typeof value === 'string') {
                    value = [value];
                }
                if (value.length === 0) {
                    return;
                }
                this.maybeSetNormalizedName(update.name, key);
                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                base.push.apply(base, __spread(value));
                this.headers.set(key, base);
                break;
            case 'd':
                var toDelete_1 = update.value;
                if (!toDelete_1) {
                    this.headers.delete(key);
                    this.normalizedNames.delete(key);
                }
                else {
                    var existing = this.headers.get(key);
                    if (!existing) {
                        return;
                    }
                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });
                    if (existing.length === 0) {
                        this.headers.delete(key);
                        this.normalizedNames.delete(key);
                    }
                    else {
                        this.headers.set(key, existing);
                    }
                }
                break;
        }
    };
    /**
     * @internal
     */
    HttpHeaders.prototype.forEach = function (fn) {
        var _this = this;
        this.init();
        Array.from(this.normalizedNames.keys())
            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });
    };
    return HttpHeaders;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to
 * serialize and parse URL parameter keys and values.
 *
 *
 */
var HttpUrlEncodingCodec = /** @class */ (function () {
    function HttpUrlEncodingCodec() {
    }
    HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };
    HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };
    HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };
    HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };
    return HttpUrlEncodingCodec;
}());
function paramParser(rawParams, codec) {
    var map$$1 = new Map();
    if (rawParams.length > 0) {
        var params = rawParams.split('&');
        params.forEach(function (param) {
            var eqIdx = param.indexOf('=');
            var _a = __read(eqIdx == -1 ?
                [codec.decodeKey(param), ''] :
                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];
            var list = map$$1.get(key) || [];
            list.push(val);
            map$$1.set(key, list);
        });
    }
    return map$$1;
}
function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable - all mutation operations return a new instance.
 *
 *
 */
var HttpParams = /** @class */ (function () {
    function HttpParams(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.updates = null;
        this.cloneFrom = null;
        this.encoder = options.encoder || new HttpUrlEncodingCodec();
        if (!!options.fromString) {
            if (!!options.fromObject) {
                throw new Error("Cannot specify both fromString and fromObject.");
            }
            this.map = paramParser(options.fromString, this.encoder);
        }
        else if (!!options.fromObject) {
            this.map = new Map();
            Object.keys(options.fromObject).forEach(function (key) {
                var value = options.fromObject[key];
                _this.map.set(key, Array.isArray(value) ? value : [value]);
            });
        }
        else {
            this.map = null;
        }
    }
    /**
     * Check whether the body has one or more values for the given parameter name.
     */
    HttpParams.prototype.has = function (param) {
        this.init();
        return this.map.has(param);
    };
    /**
     * Get the first value for the given parameter name, or `null` if it's not present.
     */
    HttpParams.prototype.get = function (param) {
        this.init();
        var res = this.map.get(param);
        return !!res ? res[0] : null;
    };
    /**
     * Get all values for the given parameter name, or `null` if it's not present.
     */
    HttpParams.prototype.getAll = function (param) {
        this.init();
        return this.map.get(param) || null;
    };
    /**
     * Get all the parameter names for this body.
     */
    HttpParams.prototype.keys = function () {
        this.init();
        return Array.from(this.map.keys());
    };
    /**
     * Construct a new body with an appended value for the given parameter name.
     */
    HttpParams.prototype.append = function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };
    /**
     * Construct a new body with a new value for the given parameter name.
     */
    HttpParams.prototype.set = function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };
    /**
     * Construct a new body with either the given value for the given parameter
     * removed, if a value is given, or all values for the given parameter removed
     * if not.
     */
    HttpParams.prototype.delete = function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };
    /**
     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     */
    HttpParams.prototype.toString = function () {
        var _this = this;
        this.init();
        return this.keys()
            .map(function (key) {
            var eKey = _this.encoder.encodeKey(key);
            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })
                .join('&');
        })
            .join('&');
    };
    HttpParams.prototype.clone = function (update) {
        var clone = new HttpParams({ encoder: this.encoder });
        clone.cloneFrom = this.cloneFrom || this;
        clone.updates = (this.updates || []).concat([update]);
        return clone;
    };
    HttpParams.prototype.init = function () {
        var _this = this;
        if (this.map === null) {
            this.map = new Map();
        }
        if (this.cloneFrom !== null) {
            this.cloneFrom.init();
            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });
            this.updates.forEach(function (update) {
                switch (update.op) {
                    case 'a':
                    case 's':
                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];
                        base.push(update.value);
                        _this.map.set(update.param, base);
                        break;
                    case 'd':
                        if (update.value !== undefined) {
                            var base_1 = _this.map.get(update.param) || [];
                            var idx = base_1.indexOf(update.value);
                            if (idx !== -1) {
                                base_1.splice(idx, 1);
                            }
                            if (base_1.length > 0) {
                                _this.map.set(update.param, base_1);
                            }
                            else {
                                _this.map.delete(update.param);
                            }
                        }
                        else {
                            _this.map.delete(update.param);
                            break;
                        }
                }
            });
            this.cloneFrom = null;
        }
    };
    return HttpParams;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Determine whether the given HTTP method may include a body.
 */
function mightHaveBody(method) {
    switch (method) {
        case 'DELETE':
        case 'GET':
        case 'HEAD':
        case 'OPTIONS':
        case 'JSONP':
            return false;
        default:
            return true;
    }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 */
function isArrayBuffer(value) {
    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 */
function isBlob(value) {
    return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 */
function isFormData(value) {
    return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 *
 */
var HttpRequest = /** @class */ (function () {
    function HttpRequest(method, url, third, fourth) {
        this.url = url;
        /**
         * The request body, or `null` if one isn't set.
         *
         * Bodies are not enforced to be immutable, as they can include a reference to any
         * user-defined data type. However, interceptors should take care to preserve
         * idempotence by treating them as such.
         */
        this.body = null;
        /**
         * Whether this request should be made in a way that exposes progress events.
         *
         * Progress events are expensive (change detection runs on each event) and so
         * they should only be requested if the consumer intends to monitor them.
         */
        this.reportProgress = false;
        /**
         * Whether this request should be sent with outgoing credentials (cookies).
         */
        this.withCredentials = false;
        /**
         * The expected response type of the server.
         *
         * This is used to parse the response appropriately before returning it to
         * the requestee.
         */
        this.responseType = 'json';
        this.method = method.toUpperCase();
        // Next, need to figure out which argument holds the HttpRequestInit
        // options, if any.
        var options;
        // Check whether a body argument is expected. The only valid way to omit
        // the body argument is to use a known no-body method like GET.
        if (mightHaveBody(this.method) || !!fourth) {
            // Body is the third argument, options are the fourth.
            this.body = (third !== undefined) ? third : null;
            options = fourth;
        }
        else {
            // No body required, options are the third argument. The body stays null.
            options = third;
        }
        // If options have been passed, interpret them.
        if (options) {
            // Normalize reportProgress and withCredentials.
            this.reportProgress = !!options.reportProgress;
            this.withCredentials = !!options.withCredentials;
            // Override default response type of 'json' if one is provided.
            if (!!options.responseType) {
                this.responseType = options.responseType;
            }
            // Override headers if they're provided.
            if (!!options.headers) {
                this.headers = options.headers;
            }
            if (!!options.params) {
                this.params = options.params;
            }
        }
        // If no headers have been passed in, construct a new HttpHeaders instance.
        if (!this.headers) {
            this.headers = new HttpHeaders();
        }
        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
        if (!this.params) {
            this.params = new HttpParams();
            this.urlWithParams = url;
        }
        else {
            // Encode the parameters to a string in preparation for inclusion in the URL.
            var params = this.params.toString();
            if (params.length === 0) {
                // No parameters, the visible URL is just the URL given at creation time.
                this.urlWithParams = url;
            }
            else {
                // Does the URL already have query parameters? Look for '?'.
                var qIdx = url.indexOf('?');
                // There are 3 cases to handle:
                // 1) No existing parameters -> append '?' followed by params.
                // 2) '?' exists and is followed by existing query string ->
                //    append '&' followed by params.
                // 3) '?' exists at the end of the url -> append params directly.
                // This basically amounts to determining the character, if any, with
                // which to join the URL and parameters.
                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');
                this.urlWithParams = url + sep + params;
            }
        }
    }
    /**
     * Transform the free-form body into a serialized format suitable for
     * transmission to the server.
     */
    HttpRequest.prototype.serializeBody = function () {
        // If no body is present, no need to serialize it.
        if (this.body === null) {
            return null;
        }
        // Check whether the body is already in a serialized form. If so,
        // it can just be returned directly.
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        // Check whether the body is an instance of HttpUrlEncodedParams.
        if (this.body instanceof HttpParams) {
            return this.body.toString();
        }
        // Check whether the body is an object or array, and serialize with JSON if so.
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        // Fall back on toString() for everything else.
        return this.body.toString();
    };
    /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     */
    HttpRequest.prototype.detectContentTypeHeader = function () {
        // An empty body has no content type.
        if (this.body === null) {
            return null;
        }
        // FormData bodies rely on the browser's content type assignment.
        if (isFormData(this.body)) {
            return null;
        }
        // Blobs usually have their own content type. If it doesn't, then
        // no type can be inferred.
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        // Array buffers have unknown contents and thus no type can be inferred.
        if (isArrayBuffer(this.body)) {
            return null;
        }
        // Technically, strings could be a form of JSON data, but it's safe enough
        // to assume they're plain strings.
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        // `HttpUrlEncodedParams` has its own content-type.
        if (this.body instanceof HttpParams) {
            return 'application/x-www-form-urlencoded;charset=UTF-8';
        }
        // Arrays, objects, and numbers will be encoded as JSON.
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        // No type could be inferred.
        return null;
    };
    HttpRequest.prototype.clone = function (update) {
        if (update === void 0) { update = {}; }
        // For method, url, and responseType, take the current value unless
        // it is overridden in the update hash.
        var method = update.method || this.method;
        var url = update.url || this.url;
        var responseType = update.responseType || this.responseType;
        // The body is somewhat special - a `null` value in update.body means
        // whatever current body is present is being overridden with an empty
        // body, whereas an `undefined` value in update.body implies no
        // override.
        var body = (update.body !== undefined) ? update.body : this.body;
        // Carefully handle the boolean options to differentiate between
        // `false` and `undefined` in the update args.
        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;
        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;
        // Headers and params may be appended to if `setHeaders` or
        // `setParams` are used.
        var headers = update.headers || this.headers;
        var params = update.params || this.params;
        // Check whether the caller has asked to add headers.
        if (update.setHeaders !== undefined) {
            // Set every requested header.
            headers =
                Object.keys(update.setHeaders)
                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);
        }
        // Check whether the caller has asked to set params.
        if (update.setParams) {
            // Set every requested param.
            params = Object.keys(update.setParams)
                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);
        }
        // Finally, construct the new HttpRequest using the pieces from above.
        return new HttpRequest(method, url, body, {
            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,
        });
    };
    return HttpRequest;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Type enumeration for the different kinds of `HttpEvent`.
 *
 *
 */
var HttpEventType;
(function (HttpEventType) {
    /**
     * The request was sent out over the wire.
     */
    HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
    /**
     * An upload progress event was received.
     */
    HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
    /**
     * The response status code and headers were received.
     */
    HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
    /**
     * A download progress event was received.
     */
    HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
    /**
     * The full response including the body was received.
     */
    HttpEventType[HttpEventType["Response"] = 4] = "Response";
    /**
     * A custom event from an interceptor or a backend.
     */
    HttpEventType[HttpEventType["User"] = 5] = "User";
})(HttpEventType || (HttpEventType = {}));
/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 *
 */
var HttpResponseBase = /** @class */ (function () {
    /**
     * Super-constructor for all responses.
     *
     * The single parameter accepted is an initialization hash. Any properties
     * of the response passed there will override the default values.
     */
    function HttpResponseBase(init, defaultStatus, defaultStatusText) {
        if (defaultStatus === void 0) { defaultStatus = 200; }
        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }
        // If the hash has values passed, use them to initialize the response.
        // Otherwise use the default values.
        this.headers = init.headers || new HttpHeaders();
        this.status = init.status !== undefined ? init.status : defaultStatus;
        this.statusText = init.statusText || defaultStatusText;
        this.url = init.url || null;
        // Cache the ok value to avoid defining a getter.
        this.ok = this.status >= 200 && this.status < 300;
    }
    return HttpResponseBase;
}());
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 *
 */
var HttpHeaderResponse = /** @class */ (function (_super) {
    __extends(HttpHeaderResponse, _super);
    /**
     * Create a new `HttpHeaderResponse` with the given parameters.
     */
    function HttpHeaderResponse(init) {
        if (init === void 0) { init = {}; }
        var _this = _super.call(this, init) || this;
        _this.type = HttpEventType.ResponseHeader;
        return _this;
    }
    /**
     * Copy this `HttpHeaderResponse`, overriding its contents with the
     * given parameter hash.
     */
    HttpHeaderResponse.prototype.clone = function (update) {
        if (update === void 0) { update = {}; }
        // Perform a straightforward initialization of the new HttpHeaderResponse,
        // overriding the current parameters with new ones if given.
        return new HttpHeaderResponse({
            headers: update.headers || this.headers,
            status: update.status !== undefined ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    };
    return HttpHeaderResponse;
}(HttpResponseBase));
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 *
 */
var HttpResponse = /** @class */ (function (_super) {
    __extends(HttpResponse, _super);
    /**
     * Construct a new `HttpResponse`.
     */
    function HttpResponse(init) {
        if (init === void 0) { init = {}; }
        var _this = _super.call(this, init) || this;
        _this.type = HttpEventType.Response;
        _this.body = init.body !== undefined ? init.body : null;
        return _this;
    }
    HttpResponse.prototype.clone = function (update) {
        if (update === void 0) { update = {}; }
        return new HttpResponse({
            body: (update.body !== undefined) ? update.body : this.body,
            headers: update.headers || this.headers,
            status: (update.status !== undefined) ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    };
    return HttpResponse;
}(HttpResponseBase));
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 *
 */
var HttpErrorResponse = /** @class */ (function (_super) {
    __extends(HttpErrorResponse, _super);
    function HttpErrorResponse(init) {
        var _this = 
        // Initialize with a default status of 0 / Unknown Error.
        _super.call(this, init, 0, 'Unknown Error') || this;
        _this.name = 'HttpErrorResponse';
        /**
         * Errors are never okay, even when the status code is in the 2xx success range.
         */
        _this.ok = false;
        // If the response was successful, then this was a parse error. Otherwise, it was
        // a protocol-level failure of some sort. Either the request failed in transit
        // or the server returned an unsuccessful status code.
        if (_this.status >= 200 && _this.status < 300) {
            _this.message = "Http failure during parsing for " + (init.url || '(unknown url)');
        }
        else {
            _this.message =
                "Http failure response for " + (init.url || '(unknown url)') + ": " + init.status + " " + init.statusText;
        }
        _this.error = init.error || null;
        return _this;
    }
    return HttpErrorResponse;
}(HttpResponseBase));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. Basically, this clones the object and adds the body.
 */
function addBody(options, body) {
    return {
        body: body,
        headers: options.headers,
        observe: options.observe,
        params: options.params,
        reportProgress: options.reportProgress,
        responseType: options.responseType,
        withCredentials: options.withCredentials,
    };
}
/**
 * Perform HTTP requests.
 *
 * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies according to which
 * signature is called (mainly the values of `observe` and `responseType`).
 *
 *
 */
var HttpClient = /** @class */ (function () {
    function HttpClient(handler) {
        this.handler = handler;
    }
    /**
     * Constructs an `Observable` for a particular HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * This method can be called in one of two ways. Either an `HttpRequest`
     * instance can be passed directly as the only parameter, or a method can be
     * passed as the first parameter, a string URL as the second, and an
     * options hash as the third.
     *
     * If a `HttpRequest` object is passed directly, an `Observable` of the
     * raw `HttpEvent` stream will be returned.
     *
     * If a request is instead built by providing a URL, the options object
     * determines the return type of `request()`. In addition to configuring
     * request parameters such as the outgoing headers and/or the body, the options
     * hash specifies two key pieces of information about the request: the
     * `responseType` and what to `observe`.
     *
     * The `responseType` value determines how a successful response body will be
     * parsed. If `responseType` is the default `json`, a type interface for the
     * resulting object may be passed as a type parameter to `request()`.
     *
     * The `observe` value determines the return type of `request()`, based on what
     * the consumer is interested in observing. A value of `events` will return an
     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,
     * including progress events by default. A value of `response` will return an
     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`
     * depends on the `responseType` and any optionally provided type parameter.
     * A value of `body` will return an `Observable<T>` with the same `T` body type.
     */
    HttpClient.prototype.request = function (first, url, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var req;
        // Firstly, check whether the primary argument is an instance of `HttpRequest`.
        if (first instanceof HttpRequest) {
            // It is. The other arguments must be undefined (per the signatures) and can be
            // ignored.
            req = first;
        }
        else {
            // It's a string, so it represents a URL. Construct a request based on it,
            // and incorporate the remaining arguments (assuming GET unless a method is
            // provided.
            // Figure out the headers.
            var headers = undefined;
            if (options.headers instanceof HttpHeaders) {
                headers = options.headers;
            }
            else {
                headers = new HttpHeaders(options.headers);
            }
            // Sort out parameters.
            var params = undefined;
            if (!!options.params) {
                if (options.params instanceof HttpParams) {
                    params = options.params;
                }
                else {
                    params = new HttpParams({ fromObject: options.params });
                }
            }
            // Construct the request.
            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {
                headers: headers,
                params: params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials,
            });
        }
        // Start with an Observable.of() the initial request, and run the handler (which
        // includes all interceptors) inside a concatMap(). This way, the handler runs
        // inside an Observable chain, which causes interceptors to be re-run on every
        // subscription (this also makes retries re-run the handler, including interceptors).
        var events$ = of(req).pipe(concatMap(function (req) { return _this.handler.handle(req); }));
        // If coming via the API signature which accepts a previously constructed HttpRequest,
        // the only option is to get the event stream. Otherwise, return the event stream if
        // that is what was requested.
        if (first instanceof HttpRequest || options.observe === 'events') {
            return events$;
        }
        // The requested stream contains either the full response or the body. In either
        // case, the first step is to filter the event stream to extract a stream of
        // responses(s).
        var res$ = events$.pipe(filter(function (event) { return event instanceof HttpResponse; }));
        // Decide which stream to return.
        switch (options.observe || 'body') {
            case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                    case 'arraybuffer':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is an ArrayBuffer.
                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                                throw new Error('Response is not an ArrayBuffer.');
                            }
                            return res.body;
                        }));
                    case 'blob':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is a Blob.
                            if (res.body !== null && !(res.body instanceof Blob)) {
                                throw new Error('Response is not a Blob.');
                            }
                            return res.body;
                        }));
                    case 'text':
                        return res$.pipe(map(function (res) {
                            // Validate that the body is a string.
                            if (res.body !== null && typeof res.body !== 'string') {
                                throw new Error('Response is not a string.');
                            }
                            return res.body;
                        }));
                    case 'json':
                    default:
                        // No validation needed for JSON responses, as they can be of any type.
                        return res$.pipe(map(function (res) { return res.body; }));
                }
            case 'response':
                // The response stream was requested directly, so return it.
                return res$;
            default:
                // Guard against new future observe types being added.
                throw new Error("Unreachable: unhandled observe type " + options.observe + "}");
        }
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * DELETE request to be executed on the server. See the individual overloads for
     * details of `delete()`'s return type based on the provided options.
     */
    HttpClient.prototype.delete = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('DELETE', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * GET request to be executed on the server. See the individual overloads for
     * details of `get()`'s return type based on the provided options.
     */
    HttpClient.prototype.get = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('GET', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * HEAD request to be executed on the server. See the individual overloads for
     * details of `head()`'s return type based on the provided options.
     */
    HttpClient.prototype.head = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('HEAD', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause a request
     * with the special method `JSONP` to be dispatched via the interceptor pipeline.
     *
     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).
     * If no such interceptor is reached, then the `JSONP` request will likely be
     * rejected by the configured backend.
     */
    HttpClient.prototype.jsonp = function (url, callbackParam) {
        return this.request('JSONP', url, {
            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
            observe: 'body',
            responseType: 'json',
        });
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * OPTIONS request to be executed on the server. See the individual overloads for
     * details of `options()`'s return type based on the provided options.
     */
    HttpClient.prototype.options = function (url, options) {
        if (options === void 0) { options = {}; }
        return this.request('OPTIONS', url, options);
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * PATCH request to be executed on the server. See the individual overloads for
     * details of `patch()`'s return type based on the provided options.
     */
    HttpClient.prototype.patch = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PATCH', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    HttpClient.prototype.post = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('POST', url, addBody(options, body));
    };
    /**
     * Constructs an `Observable` which, when subscribed, will cause the configured
     * POST request to be executed on the server. See the individual overloads for
     * details of `post()`'s return type based on the provided options.
     */
    HttpClient.prototype.put = function (url, body, options) {
        if (options === void 0) { options = {}; }
        return this.request('PUT', url, addBody(options, body));
    };
    HttpClient.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpClient.ctorParameters = function () { return [
        { type: HttpHandler }
    ]; };
    return HttpClient;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
 *
 *
 */
var HttpInterceptorHandler = /** @class */ (function () {
    function HttpInterceptorHandler(next, interceptor) {
        this.next = next;
        this.interceptor = interceptor;
    }
    HttpInterceptorHandler.prototype.handle = function (req) {
        return this.interceptor.intercept(req, this.next);
    };
    return HttpInterceptorHandler;
}());
/**
 * A multi-provider token which represents the array of `HttpInterceptor`s that
 * are registered.
 *
 *
 */
var HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');
var NoopInterceptor = /** @class */ (function () {
    function NoopInterceptor() {
    }
    NoopInterceptor.prototype.intercept = function (req, next) {
        return next.handle(req);
    };
    NoopInterceptor.decorators = [
        { type: Injectable }
    ];
    return NoopInterceptor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.
var nextRequestId = 0;
// Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.
var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
// Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.
var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 *
 */
var JsonpCallbackContext = /** @class */ (function () {
    function JsonpCallbackContext() {
    }
    return JsonpCallbackContext;
}());
/**
 * `HttpBackend` that only processes `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 *
 *
 */
var JsonpClientBackend = /** @class */ (function () {
    function JsonpClientBackend(callbackMap, document) {
        this.callbackMap = callbackMap;
        this.document = document;
    }
    /**
     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
     */
    JsonpClientBackend.prototype.nextCallback = function () { return "ng_jsonp_callback_" + nextRequestId++; };
    /**
     * Process a JSONP request and return an event stream of the results.
     */
    JsonpClientBackend.prototype.handle = function (req) {
        var _this = this;
        // Firstly, check both the method and response type. If either doesn't match
        // then the request was improperly routed here and cannot be handled.
        if (req.method !== 'JSONP') {
            throw new Error(JSONP_ERR_WRONG_METHOD);
        }
        else if (req.responseType !== 'json') {
            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
        }
        // Everything else happens inside the Observable boundary.
        return new Observable(function (observer) {
            // The first step to make a request is to generate the callback name, and replace the
            // callback placeholder in the URL with the name. Care has to be taken here to ensure
            // a trailing &, if matched, gets inserted back into the URL in the correct place.
            var callback = _this.nextCallback();
            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=" + callback + "$1");
            // Construct the <script> tag and point it at the URL.
            var node = _this.document.createElement('script');
            node.src = url;
            // A JSONP request requires waiting for multiple callbacks. These variables
            // are closed over and track state across those callbacks.
            // The response object, if one has been received, or null otherwise.
            var body = null;
            // Whether the response callback has been called.
            var finished = false;
            // Whether the request has been cancelled (and thus any other callbacks)
            // should be ignored.
            var cancelled = false;
            // Set the response callback in this.callbackMap (which will be the window
            // object in the browser. The script being loaded via the <script> tag will
            // eventually call this callback.
            _this.callbackMap[callback] = function (data) {
                // Data has been received from the JSONP script. Firstly, delete this callback.
                delete _this.callbackMap[callback];
                // Next, make sure the request wasn't cancelled in the meantime.
                if (cancelled) {
                    return;
                }
                // Set state to indicate data was received.
                body = data;
                finished = true;
            };
            // cleanup() is a utility closure that removes the <script> from the page and
            // the response callback from the window. This logic is used in both the
            // success, error, and cancellation paths, so it's extracted out for convenience.
            var cleanup = function () {
                // Remove the <script> tag if it's still on the page.
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
                // Remove the response callback from the callbackMap (window object in the
                // browser).
                delete _this.callbackMap[callback];
            };
            // onLoad() is the success callback which runs after the response callback
            // if the JSONP script loads successfully. The event itself is unimportant.
            // If something went wrong, onLoad() may run without the response callback
            // having been invoked.
            var onLoad = function (event) {
                // Do nothing if the request has been cancelled.
                if (cancelled) {
                    return;
                }
                // Cleanup the page.
                cleanup();
                // Check whether the response callback has run.
                if (!finished) {
                    // It hasn't, something went wrong with the request. Return an error via
                    // the Observable error path. All JSONP errors have status 0.
                    observer.error(new HttpErrorResponse({
                        url: url,
                        status: 0,
                        statusText: 'JSONP Error',
                        error: new Error(JSONP_ERR_NO_CALLBACK),
                    }));
                    return;
                }
                // Success. body either contains the response body or null if none was
                // returned.
                observer.next(new HttpResponse({
                    body: body,
                    status: 200,
                    statusText: 'OK', url: url,
                }));
                // Complete the stream, the response is over.
                observer.complete();
            };
            // onError() is the error callback, which runs if the script returned generates
            // a Javascript error. It emits the error via the Observable error channel as
            // a HttpErrorResponse.
            var onError = function (error) {
                // If the request was already cancelled, no need to emit anything.
                if (cancelled) {
                    return;
                }
                cleanup();
                // Wrap the error in a HttpErrorResponse.
                observer.error(new HttpErrorResponse({
                    error: error,
                    status: 0,
                    statusText: 'JSONP Error', url: url,
                }));
            };
            // Subscribe to both the success (load) and error events on the <script> tag,
            // and add it to the page.
            node.addEventListener('load', onLoad);
            node.addEventListener('error', onError);
            _this.document.body.appendChild(node);
            // The request has now been successfully sent.
            observer.next({ type: HttpEventType.Sent });
            // Cancellation handler.
            return function () {
                // Track the cancellation so event listeners won't do anything even if already scheduled.
                cancelled = true;
                // Remove the event listeners so they won't run if the events later fire.
                node.removeEventListener('load', onLoad);
                node.removeEventListener('error', onError);
                // And finally, clean up the page.
                cleanup();
            };
        });
    };
    JsonpClientBackend.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    JsonpClientBackend.ctorParameters = function () { return [
        { type: JsonpCallbackContext },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return JsonpClientBackend;
}());
/**
 * An `HttpInterceptor` which identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 *
 */
var JsonpInterceptor = /** @class */ (function () {
    function JsonpInterceptor(jsonp) {
        this.jsonp = jsonp;
    }
    JsonpInterceptor.prototype.intercept = function (req, next) {
        if (req.method === 'JSONP') {
            return this.jsonp.handle(req);
        }
        // Fall through for normal HTTP requests.
        return next.handle(req);
    };
    JsonpInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    JsonpInterceptor.ctorParameters = function () { return [
        { type: JsonpClientBackend }
    ]; };
    return JsonpInterceptor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 */
function getResponseUrl(xhr) {
    if ('responseURL' in xhr && xhr.responseURL) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return null;
}
/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 *
 */
var XhrFactory = /** @class */ (function () {
    function XhrFactory() {
    }
    return XhrFactory;
}());
/**
 * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.
 *
 *
 */
var BrowserXhr = /** @class */ (function () {
    function BrowserXhr() {
    }
    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };
    BrowserXhr.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BrowserXhr.ctorParameters = function () { return []; };
    return BrowserXhr;
}());
/**
 * An `HttpBackend` which uses the XMLHttpRequest API to send
 * requests to a backend server.
 *
 *
 */
var HttpXhrBackend = /** @class */ (function () {
    function HttpXhrBackend(xhrFactory) {
        this.xhrFactory = xhrFactory;
    }
    /**
     * Process a request and return a stream of response events.
     */
    HttpXhrBackend.prototype.handle = function (req) {
        var _this = this;
        // Quick check to give a better error message when a user attempts to use
        // HttpClient.jsonp() without installing the JsonpClientModule
        if (req.method === 'JSONP') {
            throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");
        }
        // Everything happens on Observable subscription.
        return new Observable(function (observer) {
            // Start by setting up the XHR object with request method, URL, and withCredentials flag.
            var xhr = _this.xhrFactory.build();
            xhr.open(req.method, req.urlWithParams);
            if (!!req.withCredentials) {
                xhr.withCredentials = true;
            }
            // Add all the requested headers.
            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });
            // Add an Accept header if one isn't present already.
            if (!req.headers.has('Accept')) {
                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
            }
            // Auto-detect the Content-Type header if one isn't present already.
            if (!req.headers.has('Content-Type')) {
                var detectedType = req.detectContentTypeHeader();
                // Sometimes Content-Type detection fails.
                if (detectedType !== null) {
                    xhr.setRequestHeader('Content-Type', detectedType);
                }
            }
            // Set the responseType if one was requested.
            if (req.responseType) {
                var responseType = req.responseType.toLowerCase();
                // JSON responses need to be processed as text. This is because if the server
                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                // xhr.response will be null, and xhr.responseText cannot be accessed to
                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                // is parsed by first requesting text and then applying JSON.parse.
                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');
            }
            // Serialize the request body if one is present. If not, this will be set to null.
            var reqBody = req.serializeBody();
            // If progress events are enabled, response headers will be delivered
            // in two events - the HttpHeaderResponse event and the full HttpResponse
            // event. However, since response headers don't change in between these
            // two events, it doesn't make sense to parse them twice. So headerResponse
            // caches the data extracted from the response whenever it's first parsed,
            // to ensure parsing isn't duplicated.
            var headerResponse = null;
            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
            // state, and memoizes it into headerResponse.
            var partialFromXhr = function () {
                if (headerResponse !== null) {
                    return headerResponse;
                }
                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).
                var status = xhr.status === 1223 ? 204 : xhr.status;
                var statusText = xhr.statusText || 'OK';
                // Parse headers from XMLHttpRequest - this step is lazy.
                var headers = new HttpHeaders(xhr.getAllResponseHeaders());
                // Read the response URL from the XMLHttpResponse instance and fall back on the
                // request URL.
                var url = getResponseUrl(xhr) || req.url;
                // Construct the HttpHeaderResponse and memoize it.
                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });
                return headerResponse;
            };
            // Next, a few closures are defined for the various events which XMLHttpRequest can
            // emit. This allows them to be unregistered as event listeners later.
            // First up is the load event, which represents a response being fully available.
            var onLoad = function () {
                // Read response state from the memoized partial data.
                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;
                // The body will be read out if present.
                var body = null;
                if (status !== 204) {
                    // Use XMLHttpRequest.response if set, responseText otherwise.
                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;
                }
                // Normalize another potential bug (this one comes from CORS).
                if (status === 0) {
                    status = !!body ? 200 : 0;
                }
                // ok determines whether the response will be transmitted on the event or
                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                // but a successful status code can still result in an error if the user
                // asked for JSON data and the body cannot be parsed as such.
                var ok = status >= 200 && status < 300;
                // Check whether the body needs to be parsed as JSON (in many cases the browser
                // will have done that already).
                if (req.responseType === 'json' && typeof body === 'string') {
                    // Save the original body, before attempting XSSI prefix stripping.
                    var originalBody = body;
                    body = body.replace(XSSI_PREFIX, '');
                    try {
                        // Attempt the parse. If it fails, a parse error should be delivered to the user.
                        body = body !== '' ? JSON.parse(body) : null;
                    }
                    catch (error) {
                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a
                        // JSON response. Restore the original body (including any XSSI prefix) to deliver
                        // a better error response.
                        body = originalBody;
                        // If this was an error request to begin with, leave it as a string, it probably
                        // just isn't JSON. Otherwise, deliver the parsing error to the user.
                        if (ok) {
                            // Even though the response status was 2xx, this is still an error.
                            ok = false;
                            // The parse error contains the text of the body that failed to parse.
                            body = { error: error, text: body };
                        }
                    }
                }
                if (ok) {
                    // A successful response is delivered on the event stream.
                    observer.next(new HttpResponse({
                        body: body,
                        headers: headers,
                        status: status,
                        statusText: statusText,
                        url: url || undefined,
                    }));
                    // The full body has been received and delivered, no further events
                    // are possible. This request is complete.
                    observer.complete();
                }
                else {
                    // An unsuccessful request is delivered on the error channel.
                    observer.error(new HttpErrorResponse({
                        // The error in this case is the response body (error from the server).
                        error: body,
                        headers: headers,
                        status: status,
                        statusText: statusText,
                        url: url || undefined,
                    }));
                }
            };
            // The onError callback is called when something goes wrong at the network level.
            // Connection timeout, DNS error, offline, etc. These are actual errors, and are
            // transmitted on the error channel.
            var onError = function (error) {
                var res = new HttpErrorResponse({
                    error: error,
                    status: xhr.status || 0,
                    statusText: xhr.statusText || 'Unknown Error',
                });
                observer.error(res);
            };
            // The sentHeaders flag tracks whether the HttpResponseHeaders event
            // has been sent on the stream. This is necessary to track if progress
            // is enabled since the event will be sent on only the first download
            // progerss event.
            var sentHeaders = false;
            // The download progress event handler, which is only registered if
            // progress events are enabled.
            var onDownProgress = function (event) {
                // Send the HttpResponseHeaders event if it hasn't been sent already.
                if (!sentHeaders) {
                    observer.next(partialFromXhr());
                    sentHeaders = true;
                }
                // Start building the download progress event to deliver on the response
                // event stream.
                var progressEvent = {
                    type: HttpEventType.DownloadProgress,
                    loaded: event.loaded,
                };
                // Set the total number of bytes in the event if it's available.
                if (event.lengthComputable) {
                    progressEvent.total = event.total;
                }
                // If the request was for text content and a partial response is
                // available on XMLHttpRequest, include it in the progress event
                // to allow for streaming reads.
                if (req.responseType === 'text' && !!xhr.responseText) {
                    progressEvent.partialText = xhr.responseText;
                }
                // Finally, fire the event.
                observer.next(progressEvent);
            };
            // The upload progress event handler, which is only registered if
            // progress events are enabled.
            var onUpProgress = function (event) {
                // Upload progress events are simpler. Begin building the progress
                // event.
                var progress = {
                    type: HttpEventType.UploadProgress,
                    loaded: event.loaded,
                };
                // If the total number of bytes being uploaded is available, include
                // it.
                if (event.lengthComputable) {
                    progress.total = event.total;
                }
                // Send the event.
                observer.next(progress);
            };
            // By default, register for load and error events.
            xhr.addEventListener('load', onLoad);
            xhr.addEventListener('error', onError);
            // Progress events are only enabled if requested.
            if (req.reportProgress) {
                // Download progress is always enabled if requested.
                xhr.addEventListener('progress', onDownProgress);
                // Upload progress depends on whether there is a body to upload.
                if (reqBody !== null && xhr.upload) {
                    xhr.upload.addEventListener('progress', onUpProgress);
                }
            }
            // Fire the request, and notify the event stream that it was fired.
            xhr.send(reqBody);
            observer.next({ type: HttpEventType.Sent });
            // This is the return from the Observable function, which is the
            // request cancellation handler.
            return function () {
                // On a cancellation, remove all registered event listeners.
                xhr.removeEventListener('error', onError);
                xhr.removeEventListener('load', onLoad);
                if (req.reportProgress) {
                    xhr.removeEventListener('progress', onDownProgress);
                    if (reqBody !== null && xhr.upload) {
                        xhr.upload.removeEventListener('progress', onUpProgress);
                    }
                }
                // Finally, abort the in-flight request.
                xhr.abort();
            };
        });
    };
    HttpXhrBackend.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpXhrBackend.ctorParameters = function () { return [
        { type: XhrFactory }
    ]; };
    return HttpXhrBackend;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');
var XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 *
 */
var HttpXsrfTokenExtractor = /** @class */ (function () {
    function HttpXsrfTokenExtractor() {
    }
    return HttpXsrfTokenExtractor;
}());
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */
var HttpXsrfCookieExtractor = /** @class */ (function () {
    function HttpXsrfCookieExtractor(doc, platform, cookieName) {
        this.doc = doc;
        this.platform = platform;
        this.cookieName = cookieName;
        this.lastCookieString = '';
        this.lastToken = null;
        /**
         * @internal for testing
         */
        this.parseCount = 0;
    }
    HttpXsrfCookieExtractor.prototype.getToken = function () {
        if (this.platform === 'server') {
            return null;
        }
        var cookieString = this.doc.cookie || '';
        if (cookieString !== this.lastCookieString) {
            this.parseCount++;
            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);
            this.lastCookieString = cookieString;
        }
        return this.lastToken;
    };
    HttpXsrfCookieExtractor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpXsrfCookieExtractor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }
    ]; };
    return HttpXsrfCookieExtractor;
}());
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */
var HttpXsrfInterceptor = /** @class */ (function () {
    function HttpXsrfInterceptor(tokenService, headerName) {
        this.tokenService = tokenService;
        this.headerName = headerName;
    }
    HttpXsrfInterceptor.prototype.intercept = function (req, next) {
        var lcUrl = req.url.toLowerCase();
        // Skip both non-mutating requests and absolute URLs.
        // Non-mutating requests don't require a token, and absolute URLs require special handling
        // anyway as the cookie set
        // on our origin is not the same as the token expected by another origin.
        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||
            lcUrl.startsWith('https://')) {
            return next.handle(req);
        }
        var token = this.tokenService.getToken();
        // Be careful not to overwrite an existing header of the same name.
        if (token !== null && !req.headers.has(this.headerName)) {
            req = req.clone({ headers: req.headers.set(this.headerName, token) });
        }
        return next.handle(req);
    };
    HttpXsrfInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpXsrfInterceptor.ctorParameters = function () { return [
        { type: HttpXsrfTokenExtractor },
        { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }
    ]; };
    return HttpXsrfInterceptor;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An `HttpHandler` that applies a bunch of `HttpInterceptor`s
 * to a request before passing it to the given `HttpBackend`.
 *
 * The interceptors are loaded lazily from the injector, to allow
 * interceptors to themselves inject classes depending indirectly
 * on `HttpInterceptingHandler` itself.
 */
var HttpInterceptingHandler = /** @class */ (function () {
    function HttpInterceptingHandler(backend, injector) {
        this.backend = backend;
        this.injector = injector;
        this.chain = null;
    }
    HttpInterceptingHandler.prototype.handle = function (req) {
        if (this.chain === null) {
            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);
        }
        return this.chain.handle(req);
    };
    HttpInterceptingHandler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpInterceptingHandler.ctorParameters = function () { return [
        { type: HttpBackend },
        { type: Injector }
    ]; };
    return HttpInterceptingHandler;
}());
/**
 * `NgModule` which adds XSRF protection support to outgoing requests.
 *
 * Provided the server supports a cookie-based XSRF protection system, this
 * module can be used directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no such names are provided, the default is to use `X-XSRF-TOKEN` for
 * the header name and `XSRF-TOKEN` for the cookie name.
 *
 *
 */
var HttpClientXsrfModule = /** @class */ (function () {
    function HttpClientXsrfModule() {
    }
    /**
     * Disable the default XSRF protection.
     */
    HttpClientXsrfModule.disable = function () {
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },
            ],
        };
    };
    /**
     * Configure XSRF protection to use the given cookie name or header name,
     * or the default names (as described above) if not provided.
     */
    HttpClientXsrfModule.withOptions = function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],
                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],
            ],
        };
    };
    HttpClientXsrfModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        HttpXsrfInterceptor,
                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
                    ],
                },] }
    ];
    return HttpClientXsrfModule;
}());
/**
 * `NgModule` which provides the `HttpClient` and associated services.
 *
 * Interceptors can be added to the chain behind `HttpClient` by binding them
 * to the multiprovider for `HTTP_INTERCEPTORS`.
 *
 *
 */
var HttpClientModule = /** @class */ (function () {
    function HttpClientModule() {
    }
    HttpClientModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientXsrfModule.withOptions({
                            cookieName: 'XSRF-TOKEN',
                            headerName: 'X-XSRF-TOKEN',
                        }),
                    ],
                    providers: [
                        HttpClient,
                        { provide: HttpHandler, useClass: HttpInterceptingHandler },
                        HttpXhrBackend,
                        { provide: HttpBackend, useExisting: HttpXhrBackend },
                        BrowserXhr,
                        { provide: XhrFactory, useExisting: BrowserXhr },
                    ],
                },] }
    ];
    return HttpClientModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DisplayFieldService {
    constructor() { }
    /**
     * @param {?} dataIndex
     * @param {?} data
     * @return {?}
     */
    findValue(dataIndex, data) {
        this.rowData = data;
        if (dataIndex != null) {
            const /** @type {?} */ index = dataIndex.split('.');
            if (index.includes('')) {
                index.splice(1);
            }
            for (const /** @type {?} */ ir of index) {
                this.rowData = this.rowData[ir];
            }
            return this.rowData;
        }
    }
}
DisplayFieldService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] },
];
/** @nocollapse */
DisplayFieldService.ctorParameters = () => [];
/** @nocollapse */ DisplayFieldService.ngInjectableDef = defineInjectable({ factory: function DisplayFieldService_Factory() { return new DisplayFieldService(); }, token: DisplayFieldService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DisplayFieldComponent {
    /**
     * @param {?} displayFieldService
     */
    constructor(displayFieldService) {
        this.displayFieldService = displayFieldService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.findDisplayValues();
    }
    /**
     * @return {?}
     */
    findDisplayValues() {
        this.rowData = this.displayFieldService.findValue(this.dataIndex, this.data);
    }
}
DisplayFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-display-field',
                template: `
    {{rowData}}
  `,
            },] },
];
/** @nocollapse */
DisplayFieldComponent.ctorParameters = () => [
    { type: DisplayFieldService }
];
DisplayFieldComponent.propDecorators = {
    data: [{ type: Input }],
    dataIndex: [{ type: Input, args: ['data-index',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
class DropDownListComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.itemclick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDropDownListClick(event) {
        this.itemclick.emit(event);
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    scroll(rowindex) {
        const /** @type {?} */ listitems = this.elementRef.nativeElement.getElementsByClassName('list-items')[rowindex];
        if (listitems) {
            listitems.scrollIntoView({ behavior: 'smooth' });
        }
    }
    /**
     * @return {?}
     */
    selectedItem() {
        return this.elementRef.nativeElement.getElementsByClassName('list-items list-items-selected');
    }
}
DropDownListComponent.decorators = [
    { type: Component, args: [{
                selector: 'dropdown-list-item',
                template: `
          <ul role="list"  class="dropdown-list">
              <li role="listitem" [ngClass]="{'list-items-selected': (i === highlightrow)}" 
                   class="list-items" 
                   [attr.valuefield]="item[valuefield]" 
                   [attr.displayfield]="item[displayfield]" 
                   *ngFor="let item of viewdata | async | filterpipe : displayfield : displayValue ; index as i"  
                  (mousedown)="onDropDownListClick(item)"
                  id="{{item.index}}">
                  <ng-container *ngIf="!template">
                      <div><amexio-display-field [data]="item" [data-index]="displayfield"></amexio-display-field></div>    
                  </ng-container>

                  <ng-container *ngIf="template">
                      <ng-template [ngTemplateOutlet]="template" [ngTemplateOutletContext]="{ $implicit: { text : row }, row: item }">
                      </ng-template>
                  </ng-container>
    
              </li>
          </ul>
    `,
            },] },
];
/** @nocollapse */
DropDownListComponent.ctorParameters = () => [
    { type: ElementRef }
];
DropDownListComponent.propDecorators = {
    viewdata: [{ type: Input, args: ['data',] }],
    highlightrow: [{ type: Input, args: ['highlight-row',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    displayValue: [{ type: Input, args: ['display-value',] }],
    itemclick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class FilterPipe {
    /**
     * @param {?} items
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    transform(items, field, value) {
        if (!items) {
            return [];
        }
        if (!field || !value) {
            return items;
        }
        return items.filter((singleItem) => singleItem[field].toLowerCase().startsWith(value.toLowerCase()));
    }
}
FilterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'filterpipe',
            },] },
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const faFaCaretIcon = 'fa fa-caret-down';
const faFaTimesIcon = 'fa fa-times';
const ICON_MAPPING = [
    {
        component: 'datepicker_previous',
        fa: 'fa fa-chevron-left',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'datepicker_calendar',
        fa: 'fa fa-calendar',
        mat: 'date_range',
    },
    {
        component: 'datepicker_next',
        fa: 'fa fa-chevron-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'datepicker_previous_fast',
        fa: 'fa fa-step-backward',
        mat: 'fast_rewind',
    },
    {
        component: 'datepicker_next_fast',
        fa: 'fa fa-step-forward',
        mat: 'fast_forward',
    },
    {
        component: 'accordion_expand',
        fa: 'fa fa-plus',
        mat: 'add',
    },
    {
        component: 'accordion_collapse',
        fa: 'fa fa-minus',
        mat: 'remove',
    },
    {
        component: 'tree_expand',
        fa: 'fa fa-chevron-down',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'tree_collapse',
        fa: 'fa fa-chevron-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'dropdown_caret',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'tab_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'window_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'window_maximize',
        fa: 'fa fa-window-maximize',
        mat: 'open_with',
    },
    {
        component: 'window_restore',
        fa: 'fa fa-window-restore',
        mat: 'indeterminate_check_box',
    },
    {
        component: 'paginator_previous',
        fa: 'fa fa-angle-left',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'paginator_next',
        fa: 'fa fa-angle-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'paginator_first',
        fa: 'fa fa-angle-double-left',
        mat: 'first_page',
    },
    {
        component: 'paginator_last',
        fa: 'fa fa-angle-double-right',
        mat: 'last_page',
    },
    {
        component: 'itemselector_caretup',
        fa: 'fa fa-caret-up',
        mat: 'arrow_drop_up',
    },
    {
        component: 'itemselector_caretdown',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'itemselector_arrowup',
        fa: 'fa fa-arrow-up',
        mat: 'arrow_upward',
    },
    {
        component: 'itemselector_arrowdown',
        fa: 'fa fa-arrow-down',
        mat: 'arrow_downward',
    },
    {
        component: 'itemselector_arrowleft',
        fa: 'fa fa-arrow-left',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'itemselector_arrowright',
        fa: 'fa fa-arrow-right',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'tab_previous',
        fa: 'fa fa-angle-left fa-2x',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'tab_next',
        fa: 'fa fa-angle-right  fa-2x',
    },
    {
        component: 'tab_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'fieldset_expand',
        fa: 'fa fa-plus',
        mat: 'add',
    },
    {
        component: 'fieldset_collpase',
        fa: 'fa fa-minus',
        mat: 'remove',
    },
    {
        component: 'carousel_previous',
        fa: 'fa fa-angle-left fa-2x',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'carousel_next',
        fa: 'fa fa-angle-right  fa-2x',
    },
    {
        component: 'dockbar_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'notify_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'sidenav_bar',
        fa: 'fa fa-bars fa-2x',
        mat: 'menu',
    },
    {
        component: 'sidenav_close',
        fa: faFaTimesIcon,
        mat: 'close',
    },
    {
        component: 'datagrid_arrowdown',
        fa: 'fa fa-arrow-down',
        mat: 'arrow_downward',
    },
    {
        component: 'datagrid_arrowup',
        fa: 'fa fa-arrow-up',
        mat: 'arrow_upward',
    },
    {
        component: 'datagrid_list',
        fa: 'fa fa-th-list',
        mat: 'view_list',
    },
    {
        component: 'datagrid_expand',
        fa: 'fa fa-caret-right',
        mat: '',
    },
    {
        component: 'datagrid_collapse',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'datagrid_collapse',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'datagrid_filter',
        fa: 'fa fa-filter',
        mat: 'filter_list',
    },
    {
        component: 'tree_filter',
        fa: 'fa fa-filter',
        mat: 'filter_list',
    },
    {
        component: 'data_check',
        fa: 'fa fa-check',
        mat: 'check',
    },
    {
        component: 'button_caret-down',
        fa: faFaCaretIcon,
        mat: 'arrow_drop_down',
    },
    {
        component: 'button_angle-right',
        fa: 'fa fa-angle-right',
        mat: 'arrow_drop_right',
    },
    {
        component: 'button_angle-down',
        fa: 'fa fa-angle-down',
        mat: 'arrow_drop_down',
    },
    {
        component: 'menubar_ravelry',
        fa: 'fa fa-ravelry',
        mat: 'done',
    },
    {
        component: 'sidenav-angle-up',
        fa: 'fa fa-angle-up',
        mat: 'keyboard_arrow_up',
    },
    {
        component: 'sidenav-angle-down',
        fa: 'fa fa-angle-down',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-error',
        fa: 'fa fa-exclamation-triangle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-warning',
        fa: 'fa fa-exclamation-triangle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-help',
        fa: 'fa fa-question-circle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'window-msgtype-confirm',
        fa: 'fa fa-check-circle fa-2x fa-fw',
        mat: 'keyboard_arrow_down',
    },
    {
        component: 'horizontal-tree-expanded',
        fa: 'fa fa-caret-right fa-fw',
        mat: 'keyboard_arrow_right',
    },
    {
        component: 'horizontal-tree-collapse',
        fa: 'fa fa-caret-left fa-fw',
        mat: 'keyboard_arrow_left',
    },
    {
        component: 'button-loading-icon',
        fa: 'fa fa-refresh fa-spin',
        mat: 'cached',
    },
    {
        component: 'datepicker-clock-icon',
        fa: 'fa fa-clock-o',
        mat: 'access_time',
    },
    {
        component: 'sidenavnode-icon',
        fa: 'fa fa-user-circle',
        mat: 'person_pin',
    },
];
class IconLoaderService {
    constructor() {
        this.iconMappings = ICON_MAPPING;
    }
    /**
     * @return {?}
     */
    get iconToUse() {
        if (this._iconToUse == null) {
            return 'fa';
        }
        else {
            return this._iconToUse;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iconToUse(value) {
        this._iconToUse = value;
    }
    /**
     * @param {?} componentKey
     * @param {?} newValue
     * @return {?}
     */
    modifyIconClass(componentKey, newValue) {
        if (this.iconMappings != null) {
            this.iconMappings.forEach((icon) => {
                if (icon.component === componentKey) {
                    icon[this._iconToUse.toString()] = newValue;
                }
            });
        }
    }
    /**
     * @param {?} componentName
     * @return {?}
     */
    getIconObject(componentName) {
        let /** @type {?} */ obj = null;
        if (this.iconMappings !== null) {
            this.iconMappings.forEach((object) => {
                if (object.component === componentName) {
                    obj = object;
                }
            });
        }
        return obj;
    }
}
IconLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IconLoaderService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by  Pratik on 21/12/17.
*/
class CommonIconComponent {
    /**
     * @param {?} iconLoaderService
     */
    constructor(iconLoaderService) {
        this.iconLoaderService = iconLoaderService;
        /*
        Properties
        name : label
        datatype : string
        version : 5.5.5 onwards
        default : none
        description : sets the key for icon
        */
        this.label = '';
        /*
        Events
        name : onClick
        datatype : any
        version : none
        default : none
        description : Event is fired when button is click
        */
        this.onClick = new EventEmitter();
        this.faiconcolor = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.iconClass = this.getIconClass();
    }
    /**
     * @return {?}
     */
    getIconClass() {
        if (this.iconLoaderService.iconMappings != null) {
            const /** @type {?} */ iconObject = this.iconLoaderService.iconMappings.find((obj) => obj.component === this.key);
            if (iconObject != null) {
                return iconObject[this.iconLoaderService.iconToUse.toString()];
            }
            else {
                return '';
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['key']) {
            this.key = changes["key"].currentValue;
            this.iconClass = this.getIconClass();
        }
    }
}
CommonIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-c-icon',
                template: `
   <ng-container *ngIf="iconLoaderService.iconToUse == 'fa'">

   <ng-container *ngIf="customclass != null">
     <span [ngStyle]="{'color':color}" class="{{customclass}}" aria-hidden="true"
     (click)="onClick.emit($event)">
     <ng-container *ngIf="label != ''">
     <span class="font-with-label" >
     {{label}}</span>
     </ng-container>
     </span>
   </ng-container>
   <ng-container *ngIf="customclass == null">
     <span [ngStyle]="{'color':color}" class="{{iconClass}}" aria-hidden="true"
     (click)="onClick.emit($event)">
     <ng-container *ngIf="label != ''">
     <span class="font-with-label">
     {{label}}
     </span>
     </ng-container>
     </span>
   </ng-container>

 </ng-container>

 <ng-container *ngIf="iconLoaderService.iconToUse == 'mat'">

   <ng-container *ngIf="customclass != null">
     <i [ngStyle]="{'color':color}" class="material-icons"
     (click)="onClick.emit($event)">{{customclass}}</i>
<ng-container *ngIf="label != ''">
     <span class="font-with-label"> {{label}}</span>
</ng-container>
   </ng-container>

   <ng-container *ngIf="customclass == null">
     <i [ngStyle]="{'color':color}" class="material-icons"
     (click)="onClick.emit($event)">{{iconClass}}</i>
     <ng-container *ngIf="label != ''">
     <span class="font-with-label"> {{label}}</span>
     </ng-container>
   </ng-container>


 </ng-container>
  `,
                styles: [`
  .fa-2x,.fa-3x, .fa-4x, .fa-5x {
    margin-top:0px!important;
  }

  `],
            },] },
];
/** @nocollapse */
CommonIconComponent.ctorParameters = () => [
    { type: IconLoaderService }
];
CommonIconComponent.propDecorators = {
    key: [{ type: Input }],
    label: [{ type: Input }],
    onClick: [{ type: Output }],
    customclass: [{ type: Input }],
    color: [{ type: Input }],
    faiconcolor: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const COMMON_COMPONENTS = [
    DisplayFieldComponent,
    DropDownListComponent,
    FilterPipe,
    CommonIconComponent,
];
class AmexioCommonModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioCommonModule,
            providers: [IconLoaderService, DisplayFieldService],
        };
    }
}
AmexioCommonModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                ],
                exports: COMMON_COMPONENTS,
                declarations: COMMON_COMPONENTS,
                providers: [],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const defaultclass = class {
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioRuntimeComponent {
    /**
     * @param {?} _compiler
     * @param {?} _injector
     * @param {?} _m
     */
    constructor(_compiler, _injector, _m) {
        this._compiler = _compiler;
        this._injector = _injector;
        this._m = _m;
        this.oninit = new EventEmitter();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set htmltemplate(v) {
        if (v != null && v.length > 0) {
            this._htmlTemplate = v;
            this.render();
        }
    }
    /**
     * @return {?}
     */
    get htmltemplate() {
        return this._htmlTemplate;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set tsclass(v) {
        if (v != null) {
            this._tsclass = v;
            this.render();
        }
    }
    /**
     * @return {?}
     */
    get tsclass() {
        return this._tsclass;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    render() {
        if (!this.htmltemplate || this.htmltemplate.length === 0) {
            return;
        }
        if (!this.tsclass) {
            this.tsclass = defaultclass;
        }
        const /** @type {?} */ tmpCmp = Component({ template: this.htmltemplate })(this.tsclass);
        const /** @type {?} */ tmpModule = NgModule({
            providers: [HttpClientModule], imports: [FormsModule, AmexioWidgetModule, HttpClientModule],
            declarations: [tmpCmp],
            entryComponents: [tmpCmp],
        })(defaultclass);
        this._compiler.compileModuleAsync(tmpModule)
            .then((moduleFactory) => {
            const /** @type {?} */ resolver = moduleFactory.create(this._injector).componentFactoryResolver;
            const /** @type {?} */ f = resolver.resolveComponentFactory(tmpCmp);
            const /** @type {?} */ cmpRef = f.create(this._injector, [], null, this._m);
            this._container.insert(cmpRef.hostView);
            const /** @type {?} */ object = { reference: cmpRef, instance: cmpRef.instance };
            this.oninit.emit(object);
        });
    }
}
AmexioRuntimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-runtime',
                template: '<div #vc></div>',
            },] },
];
/** @nocollapse */
AmexioRuntimeComponent.ctorParameters = () => [
    { type: Compiler },
    { type: Injector },
    { type: NgModuleRef }
];
AmexioRuntimeComponent.propDecorators = {
    _container: [{ type: ViewChild, args: ['vc', { read: ViewContainerRef },] }],
    htmltemplate: [{ type: Input, args: ['html-template',] }],
    tsclass: [{ type: Input, args: ['ts-class',] }],
    oninit: [{ type: Output, args: ['onInit',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CommonDataService {
    /**
     * @param {?} _http
     */
    constructor(_http) {
        this._http = _http;
        this.filteredObject = [];
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @return {?}
     */
    fetchData(serviceUrl, methodType) {
        const /** @type {?} */ requestJson = {};
        const /** @type {?} */ headers = new HttpHeaders().append('Content-Type', 'application/json;charset=UTF-8');
        if (methodType === 'post') {
            return this._http.post(serviceUrl, requestJson, { headers });
        }
        else if (methodType === 'get') {
            return this._http.get(serviceUrl, { headers });
        }
    }
    /**
     * @param {?} serviceUrl
     * @param {?} methodType
     * @param {?} requestData
     * @return {?}
     */
    uploadFile(serviceUrl, methodType, requestData) {
        const /** @type {?} */ requestJson = requestData;
        const /** @type {?} */ headers = new HttpHeaders().append('Access-Control-Allow-Origin', '*');
        if (methodType.toUpperCase() === 'POST') {
            return this._http.post(serviceUrl, requestJson, { headers });
        }
    }
}
CommonDataService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
CommonDataService.ctorParameters = () => [
    { type: HttpClient }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const FORM_COMPONENTS = [
    AmexioRuntimeComponent,
];
class AmexioRuntimeModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioRuntimeModule,
            providers: [],
        };
    }
}
AmexioRuntimeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    AmexioCommonModule.forRoot(),
                ],
                exports: FORM_COMPONENTS,
                declarations: FORM_COMPONENTS,
                providers: [],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
class AmexioContextMenuComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.onRightClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.isflagshow = true;
        this.contextStyle = this.getContextMenuStyle();
    }
    /**
     * @return {?}
     */
    getContextMenuStyle() {
        return {
            'cursor': 'default',
            'position': 'fixed',
            'display': this.isflagshow ? 'block' : 'none',
            'left': this.mouseLocationLeft + 'px',
            'top': this.mouseLocationTop + 'px',
            'box-shadow': '1px 1px 2px #000000',
            'width': '15%',
        };
    }
    /**
     * @param {?} itemConfig
     * @return {?}
     */
    onContextNodeClick(itemConfig) {
        if (!itemConfig.disabled) {
            const /** @type {?} */ obj = {
                menuData: itemConfig,
                nodeData: this.rightClickData,
            };
            this.isflagshow = false;
            this.onRightClick.emit(obj);
        }
    }
}
AmexioContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'base-contextmenu',
                template: `
    <span [ngStyle]="contextStyle"> 
        <ul class="context-menu-list" [ngClass]="{'dropdown-up' : posixUp}">
            <li (click)="onContextNodeClick(itemConfig)" class="context-menu-list-items"
             [ngStyle]="{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}"
                [ngClass]="{'context-menu-separator':itemConfig.seperator}" *ngFor="let itemConfig of contextmenu">
                <em [ngStyle]="{'padding-left': itemConfig.icon ? '5px':'19px'}" [ngClass]="itemConfig.icon"></em>
                <span style="white-space: nowrap;display: inline ; padding-left:5px">{{itemConfig.text}}
                </span>
            </li>
        </ul>
    </span>
  `,
                styles: [`
    .context-menu-list{display:block;position:absolute;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;min-width:180px;cursor:pointer;max-height:150px;z-index:1;padding:10px 0;overflow-y:auto;-webkit-box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}
  `],
            },] },
];
/** @nocollapse */
AmexioContextMenuComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioContextMenuComponent.propDecorators = {
    isflagshow: [{ type: Input, args: ['is-FlagShow',] }],
    contextmenu: [{ type: Input, args: ['base-context-menu',] }],
    posixUp: [{ type: Input, args: ['position-up',] }],
    onRightClick: [{ type: Output }],
    rightClickData: [{ type: Input, args: ['right-click-data',] }],
    mouseLocationLeft: [{ type: Input, args: ['mouse-location-left',] }],
    mouseLocationTop: [{ type: Input, args: ['mouse-location-top',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const CONTEXTMENU_COMPONENTS = [
    AmexioContextMenuComponent,
];
class AmexioBaseContextMenuModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioBaseContextMenuModule,
            providers: [CommonDataService, IconLoaderService],
        };
    }
}
AmexioBaseContextMenuModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                ],
                exports: CONTEXTMENU_COMPONENTS,
                declarations: CONTEXTMENU_COMPONENTS,
                providers: [CommonDataService, IconLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 1/4/18.
*/
class AmexioNavMenuComponent {
    constructor() {
        /*
          Events
          name : navLinkClick
          datatype : any
          version : none
          default : none
          description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
          */
        this.navLinkClick = new EventEmitter();
        this.onNavItemClick = new EventEmitter();
        this.mobilemode = false;
        this.issubmenu = false;
        this.position = 'right';
        this.ishovered = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    setMobileMode(flag) {
        this.mobilemode = flag;
    }
    /**
     * @param {?} n
     * @param {?} _event
     * @return {?}
     */
    dataObject(n, _event) {
        return { data: n, event: _event };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onHeaderClick(event) {
        const /** @type {?} */ node = {
            header: true,
            title: this.title,
            icon: this.icon,
        };
        this.onClick(node, event);
    }
    /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    onNodeHover(node, event) {
        this.ishovered = false;
        // clear hover flag;
        this.data.forEach((element) => {
            this.clearNodeHover(element);
        });
        if (node.submenus && (node.submenus.length > 0)) {
            node.ishover = true;
            this.data.forEach((element) => {
                if (node === element) {
                    this.setNodeHover(node);
                }
            });
        }
        this.position = this.getMenuPosition(event);
        event.stopPropagation();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    setNodeHover(node) {
        node.ishover = true;
        if (node.submenus && (node.submenus.length > 0)) {
            this.setNodeHover(node.submenus);
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    clearNodeHover(node) {
        node.ishover = false;
        if (node.submenus && (node.submenus.length > 0)) {
            node.submenus.forEach((element) => {
                this.clearNodeHover(element);
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getMenuPosition(event) {
        const /** @type {?} */ remainingleft = event.currentTarget.getBoundingClientRect().left;
        const /** @type {?} */ remainingright = window.screen.width - event.currentTarget.getBoundingClientRect().right;
        let /** @type {?} */ directionflag;
        if (remainingright > remainingleft) {
            directionflag = 'right';
        }
        else {
            directionflag = 'left';
        }
        return directionflag;
    }
    /**
     * @return {?}
     */
    clearhover() {
        setTimeout(() => {
            this.data.forEach((element) => {
                this.clearNodeHover(element);
            });
        }, 0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseoverTitle(event) {
        this.position = this.getMenuPosition(event);
    }
    /**
     * @param {?} _node
     * @param {?} _event
     * @return {?}
     */
    onClick(_node, _event) {
        const /** @type {?} */ n = {
            title: this.title,
            data: this.data,
            icon: this.icon,
            node: _node,
            mobilemode: this.mobilemode,
        };
        this.onNavItemClick.emit(this.dataObject(n, _event));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navItemClick(event) {
        event.event.stopPropagation();
        this.onNavItemClick.emit(event);
    }
}
AmexioNavMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-nav-menu',
                template: `
    <div class="nav-dropdown">
        <a class="nav-dropbtn" [ngStyle]="{'color':color}" (mouseover)="onMouseoverTitle($event)" (click)="onHeaderClick($event)">
            <span>
                <i *ngIf="icon" [ngClass]="icon"></i>
            </span>
            <span>{{title}}</span>
        
            <span>
                <i class="dropdownicon fa fa-angle-down"></i>
            </span>
        </a>

        <div class="nav-dropdown-content">

            <a *ngFor="let node of data" (click)="onClick(node, $event)" (mouseover)="onNodeHover(node, $event)">

                <div>
                    <span class="nav-dropdown-content-node">
                        <i *ngIf="icon" [ngClass]="node.icon"></i>&nbsp;
                        <span>
                            <span *ngIf="position == 'left' && node.submenus">
                                <i class="fa fa-angle-left" style="padding-bottom:6px; padding-right:6px;" aria-hidden="true"></i>
                            </span>
                            {{node.text}}
                    
                            <span *ngIf="position == 'right' && node.submenus">
                                <i class="fa fa-angle-right" style="float:right ;padding-top:5px" aria-hidden="true"></i>

                            </span>
                        </span>
                    </span>

                    <span [ngClass]="{'submenunodes':position == 'right', 'submenunodesright':position == 'left' }" *ngIf="node.submenus">
                        <amexio-nav-innermenu [color]="itemcolor" [submenuposition]="position" [data]="node.submenus" (navLinkClick)="navItemClick($event)">
                        </amexio-nav-innermenu>
                    </span>
                </div>
            </a>

            <div *ngIf="type==='menucontainer'" class="nav-menu-container">
                <a *ngFor="let node of data" (click)="onClick(node, $event)">
                    <i *ngIf="icon" [ngClass]="node.icon"></i>&nbsp;{{node.text}}</a>
                <ng-content></ng-content>
            </div>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioNavMenuComponent.ctorParameters = () => [];
AmexioNavMenuComponent.propDecorators = {
    type: [{ type: Input }],
    title: [{ type: Input }],
    data: [{ type: Input }],
    icon: [{ type: Input }],
    navLinkClick: [{ type: Output }],
    onNavItemClick: [{ type: Output }],
    rightflag: [{ type: Input }],
    color: [{ type: Input, args: ['color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 1/4/18.
*/
const noop$1 = () => {
};
class AmexioNavItemComponent {
    /**
     * @param {?} elementref
     */
    constructor(elementref) {
        this.elementref = elementref;
        /*
          Events
          name : onNavItemClick
          datatype : any
          version : none
          default : none
          description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
          */
        this.onNavItemClick = new EventEmitter();
        this.mobilemode = false;
        this.isAction = false;
        this.isTextField = false;
        this.isMenu = false;
        this.isMenuContainer = false;
        this.innerValue = '';
        this.onTouchedCallback = noop$1;
        this.onChangeCallback = noop$1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.type === 'link' || this.type === 'button' || this.type === 'toggle') {
            this.isAction = true;
        }
        else if (this.type === 'textfield') {
            this.isTextField = true;
        }
        else if (this.type === 'menu') {
            this.isMenu = true;
        }
        else if (this.type === 'menucontainer') {
            this.isMenuContainer = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(() => {
            this.right = this.elementref.nativeElement.getBoundingClientRect().right;
        }, 100);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    setSubmenuIcon(node) {
        if (node.submenus && (node.submenus.length > 0)) {
            node.submenus['iconposition'] = 'left';
            this.setSubmenuIcon(node.submenus);
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    setHoverattr(node) {
        node['ishover'] = false;
        if (node.submenus && (node.submenus.length > 0)) {
            this.setHoverattr(node.submenus);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navItemClick(event) {
        this.onNavItemClick.emit(event);
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    setMobileMode(flag) {
        this.mobilemode = flag;
    }
    /**
     * @param {?} navbarwidth
     * @return {?}
     */
    setNavbarWidth(navbarwidth) {
        setTimeout(() => {
            this.navbarwidth = navbarwidth;
            if ((this.navbarwidth - this.elementref.nativeElement.getBoundingClientRect().left) < 165) {
                this.enablerightclass = true;
            }
        }, 0);
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @return {?}
     */
    hoverfun() {
        this.data.forEach((node) => {
            this.ResetHoverattr(node);
        });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ResetHoverattr(node) {
        node.ishover = false;
        if (node.submenus && (node.submenus.length > 0)) {
            node.submenus.forEach((element) => {
                this.ResetHoverattr(node.submenus);
            });
        }
    }
}
AmexioNavItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-nav-item',
                template: `
    <div class="topnavmainbarinneritems" [ngClass]="{'topnavmainbarinneritems-mobile':mobilemode,
     'nav-dropdown-content-right':enablerightclass}">
        <amexio-nav-action *ngIf="isAction" [color]="itemcolor" [type]="type" [title]="title" [icon]="icon" (navLinkClick)="navItemClick($event)"></amexio-nav-action>
        <amexio-nav-textfield *ngIf="isTextField" [color]="itemcolor" [(ngModel)]="value" [title]="title"></amexio-nav-textfield>
        <amexio-nav-menu *ngIf="isMenu" [color]="itemcolor" [title]="title" [icon]="icon" [data]="data" (onNavItemClick)="navItemClick($event)">
        </amexio-nav-menu>
        <amexio-nav-menu *ngIf="isMenuContainer" [color]="itemcolor" [title]="title" [icon]="icon" [type]="type" (navLinkClick)="navItemClick($event)">
            <ng-content></ng-content>
        </amexio-nav-menu>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioNavItemComponent), multi: true,
                    }],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/** @nocollapse */
AmexioNavItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
AmexioNavItemComponent.propDecorators = {
    type: [{ type: Input }],
    title: [{ type: Input }],
    icon: [{ type: Input }],
    data: [{ type: Input }],
    onNavItemClick: [{ type: Output }],
    navmenus: [{ type: ContentChildren, args: [AmexioNavMenuComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class DeviceQueryService {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        this.platformId = platformId;
        this.rules = {
            print: 'print',
            screen: 'screen',
            phone: '(max-width: 767px)',
            tablet: '(min-width: 768px) and (max-width: 1024px)',
            desktop: '(min-width: 1025px)',
            portrait: '(orientation: portrait)',
            landscape: '(orientation: landscape)',
            retina: '(-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)',
        };
        this.Check = function (mq) {
            if (isPlatformBrowser(this.platformId)) {
                if (!mq) {
                    return;
                }
                return window.matchMedia(mq).matches;
            }
            else {
                return;
            }
        };
        this.IsTablet = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.tablet).matches;
            }
            else {
                return null;
            }
        };
        this.IsDesktop = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.desktop).matches;
            }
            else {
                return null;
            }
        };
        this.IsPortrait = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.portrait).matches;
            }
            else {
                return null;
            }
        };
        this.IsLandscape = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.landscape).matches;
            }
            else {
                return null;
            }
        };
        this.IsRetina = function () {
            if (isPlatformBrowser(this.platformId)) {
                return window.matchMedia(this.rules.retina).matches;
            }
            else {
                return null;
            }
        };
        this.browserWindow = () => {
            return window;
        };
    }
    /**
     * *******************************************
     * METHODS FOR CHECKING TYPE
     * ********************************************
     * @return {?}
     */
    IsPhone() {
        if (isPlatformBrowser(this.platformId)) {
            return window.matchMedia(this.rules.phone).matches;
        }
        else {
            return null;
        }
    }
    /**
     * *******************************************
     * EVENT LISTENERS BY TYPE
     * ********************************************
     * @param {?} callBack
     * @return {?}
     */
    OnPhone(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            const /** @type {?} */ mql = window.matchMedia(this.rules.phone);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnTablet(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            const /** @type {?} */ mql = window.matchMedia(this.rules.tablet);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnDesktop(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            const /** @type {?} */ mql = window.matchMedia(this.rules.desktop);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnPortrait(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            const /** @type {?} */ mql = window.matchMedia(this.rules.portrait);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @return {?}
     */
    OnLandscape(callBack) {
        if (typeof callBack === 'function' && isPlatformBrowser(this.platformId)) {
            const /** @type {?} */ mql = window.matchMedia(this.rules.landscape);
            this.mqlMethod(callBack, mql);
        }
    }
    /**
     * @param {?} callBack
     * @param {?} mql
     * @return {?}
     */
    mqlMethod(callBack, mql) {
        mql.addListener((mql1) => {
            if (mql1.matches) {
                callBack(mql);
            }
        });
    }
}
DeviceQueryService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DeviceQueryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*  Created by ketangote on 12/8/17.
*/
class AmexioNavBarComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
        /*
        Properties
        name : logo
        datatype : string
        version : 4.0 onwards
        default : none
        description : Logo of navbar.
        */
        this.logo = '';
        /*
        Properties
        name : enable-side-nav-position
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : Indicate if side-nav-bar is present
        */
        this.sidenavspace = false;
        /*
        Properties
        name : enable-side-nav-position
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : transparent nav bar
        */
        this.transparent = false;
        this.onNavLogoClick = new EventEmitter();
        this.onNavTitleClick = new EventEmitter();
        this.onIconArrowClick = new EventEmitter();
        this.onIconClick = new EventEmitter();
        this.navSubmenuClick = new EventEmitter();
        this.toggle = true;
        this.mobilemode = false;
        this.sidenav = false;
        this.isIconLeft = true;
        this.isLHSHide = false;
        this.lhsWidth = '5%';
        this.isExpand = false;
        this.isPhone = false;
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.mobilemode = true;
            this.isPhone = true;
        }
        else {
            this.mobilemode = false;
            this.isPhone = false;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.logo) {
            this.loadNavItems();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.navItemComponents = this.navitems.toArray();
        this.navItemComponents.forEach((element) => {
            element.itemcolor = this.color;
        });
    }
    /**
     * @return {?}
     */
    onImageLoad() {
        this.loadNavItems();
    }
    /**
     * @return {?}
     */
    loadNavItems() {
        this.handleNavItems();
        if (this.navbaritems2.nativeElement) {
            this.navitemwidth = (5 +
                (this.navbaritems2.nativeElement.offsetWidth) +
                (this.navbaritems2.nativeElement.offsetWidth) +
                (this.navbaritems3.nativeElement.offsetWidth));
            this.handleDeviceSetting();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleDrawerPanel(event) {
        this.toggle = !this.toggle;
    }
    /**
     * @return {?}
     */
    handleNavItems() {
        this.navItemComponents = this.navitems.toArray();
        this.navItemComponents.forEach((node) => node.onNavItemClick.subscribe((eventdata) => this.handleNavItemEvent(eventdata)));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleNavItemEvent(event) {
        if (event && event.data && event.data.node && !event.data.node.header && this.mobilemode) {
            this.toggle = false;
        }
    }
    /**
     * @param {?} navbarwidth
     * @return {?}
     */
    notifyNavItems(navbarwidth) {
        if (this.navItemComponents) {
            this.navItemComponents.forEach((node) => {
                node.setMobileMode(this.mobilemode);
                node.setNavbarWidth(navbarwidth);
            });
        }
    }
    /**
     * @return {?}
     */
    handleDeviceSetting() {
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.mobilemode = true;
            this.isPhone = true;
        }
        else {
            this.mobilemode = false;
            this.isPhone = false;
        }
        if (this.sidenavspace) {
            this.sideNavbar();
        }
        const /** @type {?} */ navbarwidth = this.navbar.nativeElement.offsetWidth;
        const /** @type {?} */ navbarheight = this.navbar.nativeElement.offsetHeight;
        if (!this.navfixeditem) {
            this.navfixeditem = this.navbarfixed.nativeElement.offsetWidth;
        }
        if (!this.navitemwidth) {
            let /** @type {?} */ navbaritems1Width = 0;
            let /** @type {?} */ navbaritems2Width = 0;
            let /** @type {?} */ navbaritems3Width = 0;
            if (this.navbaritems1) {
                navbaritems1Width = this.navbaritems1.nativeElement.offsetWidth;
            }
            if (this.navbaritems2) {
                navbaritems2Width = this.navbaritems2.nativeElement.offsetWidth;
            }
            if (this.navbaritems3) {
                navbaritems3Width = this.navbaritems3.nativeElement.offsetWidth;
            }
            this.navitemwidth = (this.navfixeditem + navbaritems1Width + navbaritems2Width + navbaritems3Width);
        }
        const /** @type {?} */ navbaravailablewidth = (navbarwidth - (this.navfixeditem + this.navitemwidth));
        if ((navbaravailablewidth < 10 || navbarheight > 100)) {
            this.mobilemode = true;
            this.toggle = false;
            this.notifyNavItems(navbarwidth);
        }
        else {
            this.mobilemode = false;
            this.toggle = true;
            this.notifyNavItems(navbarwidth);
        }
    }
    /**
     * @return {?}
     */
    sideNavbar() {
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.sidenav = true;
        }
        else {
            this.sidenav = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    resize(event) {
        this.handleDeviceSetting();
        if (this.homepageType === '3') {
            if (!this.isExpand) {
                this.lhsWidth = '0 0 19%';
            }
            else {
                this.isLHSHide = true;
                this.lhsWidth = '0 0 5%';
            }
            this.isExpand = !this.isExpand;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onArrowClick(event) {
        this.onIconArrowClick.emit();
        this.isIconLeft = !this.isIconLeft;
    }
    /**
     * @return {?}
     */
    onExpandIconClick() {
        if (this.homepageType === '3') {
            if (!this.isExpand) {
                this.lhsWidth = '0 0 19%';
            }
            else {
                this.isLHSHide = true;
                this.lhsWidth = '0 0 5%';
            }
            this.onIconClick.emit(!this.isExpand);
            this.isExpand = !this.isExpand;
        }
    }
}
AmexioNavBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-nav', template: `
    <nav #navbar class="topnav" [ngStyle]="{'color': color, 'top': top, 'opacity': opacity}" [ngClass]="{'topnav-mobile':mobilemode, 'transparentNav':transparent}" (window:resize)="resize($event)">

        <div #navbarfixed  [ngClass]="{'lhs-mobile':mobilemode}"
         [ngStyle]="{'flex': !title || !logo ? 'none':''}">
            <div class="topnav-lhs-inner" [ngClass]="{'topnav-lhs-inner-mobile':mobilemode, 'topnav-lhs-nologo': logo==''}">
                <span>

                <span style="padding-left: 40px;" *ngIf="sidenav">  &nbsp;</span>

                <span *ngIf="(!(mobilemode && sidenav) && homepageType ==='1')" class="homepage-bar-collapse" (click)="onArrowClick($event)"><amexio-image [icon-class]=" 'fa fa-bars' "></amexio-image> &nbsp;</span>

                <img alt="title " style="cursor: pointer " (click)="onNavLogoClick.emit($event) " (load)="onImageLoad() " *ngIf="logo " [attr.src]="logo " class="navbar-logo ">
                <a (click)="onNavTitleClick.emit($event) ">{{title}}</a>


                <ng-container *ngIf="homepageType=='2' && !sidenav">
                    <ng-container *ngIf="!isIconLeft">
                        <span class="collaspe-icon-style" (click)="onArrowClick($event)"><amexio-image [icon-class]=" 'fa fa-chevron-right' "></amexio-image></span>
                    </ng-container>
                    <ng-container *ngIf="isIconLeft">
                        <span class="collaspe-icon-style" (click)="onArrowClick($event)"><amexio-image  [icon-class]=" 'fa fa-chevron-left' "></amexio-image></span>
                    </ng-container>
                </ng-container>

                </span>

                <span *ngIf="mobilemode" class="float-right mobilebar" (click)="toggleDrawerPanel($event)">
                  <em *ngIf="!toggle" class="fa fa-caret-down fa-2x"></em>
                  <em *ngIf="toggle" class="fa fa-caret-up fa-2x"></em>
              </span>
            </div>
        </div>

        <div #navbaritems *ngIf="toggle" class="topnav-rhs" [ngClass]="{'rhs-mobile':mobilemode, 'transparentNav1':transparent && mobilemode}">
            <div class="topnavmainbar" [ngClass]="{'topnavmainbar-mobile':mobilemode}">
                <div #navbaritems1 class="topnavmainbaritems" [ngClass]="{'topnavmainbaritems-mobile':mobilemode}">
                    <ng-content select="[position-left]"></ng-content>
                </div>
                <div #navbaritems2 class="topnavmainbaritems" [ngClass]="{'topnavmainbaritems-mobile':mobilemode}">
                    <ng-content select="[position-center]"></ng-content>
                </div>
                <div #navbaritems3 class="topnavmainbaritems" [ngClass]="{'topnavmainbaritems-mobile':mobilemode}">
                    <ng-content select="[position-right]"></ng-content>
                </div>
            </div>
        </div>
        <!--
      <div #navbarfixed [ngStyle]="{'flex': !mobilemode ? lhsWidth : '','flex-width': !mobilemode ? lhsWidth :'' }"
                   [ngClass]="{ ' topnav-lhs-mobile':mobilemode,'topnav-lhs topnav-lhs-color':!mobilemode} ">
          <div [ngClass]="{'homepage-expand': (isExpand && !mobilemode),'homepage-collapse':(!isExpand && !mobilemode) }">

              <ng-container *ngIf="!isLHSHide || mobilemode">
                  <span [ngClass]=" sidenav ? 'sidenav-padding':'' " [ngStyle]="{ 'padding-left':sidenav ? '40px': '0px'} ">
                <span *ngIf="homepageType=='1' && !isPhone" class="homepage-bar-collapse"  (click)="onArrowClick($event)"  ><amexio-image [icon-class]=" 'fa fa-bars' "></amexio-image></span>
                  <img alt="title " style="cursor: pointer " (click)="onNavLogoClick.emit($event) " (load)="onImageLoad() " *ngIf="logo " [attr.src]="logo " class="navbar-logo ">
                  <a (click)="onNavTitleClick.emit($event) ">{{title}}</a>
                  </span>
              </ng-container>
              <ng-container *ngIf="!isPhone">
                  <span *ngIf="homepageType=='3' || isLHSHide " (click)="onExpandIconClick($event) " class="homepage3-bar">
                <amexio-image *ngIf="!isExpand" [icon-class]=" 'fa fa-bars' "></amexio-image>
                <amexio-image *ngIf="isExpand" [icon-class]=" 'fa fa-times-circle' "></amexio-image>
              </span>
              </ng-container>
              <ng-container *ngIf="homepageType=='2' && !sidenav">
                  <ng-container *ngIf="!isIconLeft">
                      <span class="collaspe-icon-style" (click)="onArrowClick($event)"><amexio-image [icon-class]=" 'fa fa-chevron-right' "></amexio-image></span>
                  </ng-container>
                  <ng-container *ngIf="isIconLeft">
                      <span class="collaspe-icon-style" (click)="onArrowClick($event)"><amexio-image  [icon-class]=" 'fa fa-chevron-left' "></amexio-image></span>
                  </ng-container>
              </ng-container>
          </div>
          <div *ngIf="mobilemode" class="float-right mobilebar" (click)="toggleDrawerPanel($event)">
              <em *ngIf="!toggle" class="fa fa-caret-down fa-2x"></em>
              <em *ngIf="toggle" class="fa fa-caret-up fa-2x"></em>
          </div>
      </div>
      <div #navbaritems *ngIf="toggle" [ngClass]="{'topnav-rhs topnav-rhs-color':!mobilemode}">
          <div class="topnavmainbar" [ngClass]="{'topnavmainbar-mobile':mobilemode}">
              <div #navbaritems1 class="topnavmainbaritems" [ngClass]="{'topnavmainbaritems-mobile':mobilemode}">
                  <ng-content select="[position-left]"></ng-content>
              </div>
              <div #navbaritems2 class="topnavmainbaritems" [ngClass]="{'topnavmainbaritems-mobile':mobilemode}">
                  <ng-content select="[position-center]"></ng-content>
              </div>
              <div #navbaritems3 class="topnavmainbaritems" [ngClass]="{'topnavmainbaritems-mobile':mobilemode}">
                  <ng-content select="[position-right]"></ng-content>
              </div>

          </div>
      </div>

    -->
    </nav>
  `,
            },] },
];
/** @nocollapse */
AmexioNavBarComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioNavBarComponent.propDecorators = {
    title: [{ type: Input }],
    logo: [{ type: Input }],
    sidenavspace: [{ type: Input, args: ['enable-side-nav-position',] }],
    transparent: [{ type: Input, args: ['transparent',] }],
    color: [{ type: Input, args: ['color',] }],
    homepageType: [{ type: Input, args: ['home-page-type',] }],
    onNavLogoClick: [{ type: Output }],
    onNavTitleClick: [{ type: Output }],
    onIconArrowClick: [{ type: Output }],
    onIconClick: [{ type: Output }],
    navSubmenuClick: [{ type: Output }],
    navitems: [{ type: ContentChildren, args: [AmexioNavItemComponent,] }],
    navbar: [{ type: ViewChild, args: ['navbar', { read: ElementRef },] }],
    navbarfixed: [{ type: ViewChild, args: ['navbarfixed', { read: ElementRef },] }],
    navbaritems: [{ type: ViewChild, args: ['navbaritems', { read: ElementRef },] }],
    navbaritems1: [{ type: ViewChild, args: ['navbaritems1', { read: ElementRef },] }],
    navbaritems2: [{ type: ViewChild, args: ['navbaritems2', { read: ElementRef },] }],
    navbaritems3: [{ type: ViewChild, args: ['navbaritems3', { read: ElementRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/1/17.
*/
class SideNavNodeComponent {
    /**
     * @param {?} matchMediaService
     * @param {?} iconService
     */
    constructor(matchMediaService, iconService) {
        this.matchMediaService = matchMediaService;
        this.iconService = iconService;
        /*
           Events
           name : nodeClick
           datatype : none
           version : none
           default : none
           description : Fire when sidenav bar menu click
           */
        this.nodeClick = new EventEmitter();
        /*
           Events
           name : onDrag
           datatype : none
           version : 4.2.9
           default : none
           description : Fire when you drag node
           */
        this.onDrag = new EventEmitter();
        this.nodeEmitToSideNav = new EventEmitter();
        this.expand = false;
        this.isMobile = false;
        this.isDefaultUserIcon = false;
        this.displaykey = 'text';
        this.childarraykey = 'children';
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.isMobile = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.node && !this.label) {
            this.expand = true;
            this.collapsable = false;
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onClick(node) {
        this.expand = !this.expand;
        if (this.nodedata) {
            if (this.nodedata.children && this.expand === false) {
                this.nodedata.children.forEach((element) => {
                    element['tabindex'] = '-1';
                });
            }
            else if (this.nodedata.children && this.expand === true) {
                this.nodedata.children.forEach((element) => {
                    element['tabindex'] = '1';
                });
            }
        }
        this.nodeClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onNodeClick(node) {
        this.nodeClick.emit(node);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragStartEvent(event) {
        if (this.enabledrag) {
            event.event.dataTransfer.setData('dragData', JSON.stringify(event.data));
            this.onDrag.emit(event);
        }
    }
    /**
     * @param {?} allNodeData
     * @return {?}
     */
    emittednodedata(allNodeData) {
        this.nodeEmitToSideNav.emit(allNodeData);
    }
    /**
     * @param {?} divref
     * @param {?} nodedata
     * @return {?}
     */
    onenterClick(divref, nodedata) {
        if (divref.tabIndex === 1 && nodedata.children) {
            nodedata.expand = !nodedata.expand;
        }
        if (nodedata.children && nodedata.expand === true) {
            nodedata.children.forEach((element, index) => {
                element['tabindex'] = '1';
            });
        }
        this.onClick(nodedata);
    }
    /**
     * @param {?} isIcon
     * @return {?}
     */
    setShowOnlyIconFlag(isIcon) {
        let /** @type {?} */ icon = '';
        const /** @type {?} */ iconObject = this.iconService.getIconObject('sidenavnode-icon');
        if (this.iconService.iconToUse === 'fa') {
            icon = iconObject.fa;
        }
        else {
            icon = iconObject.mat;
        }
        if (this.isDefaultUserIcon && this.icon === 'fa fa-user-circle') {
            this.icon = '';
            this.isDefaultUserIcon = false;
        }
        else if ((!this.icon || this.icon === '') && !this.isDefaultUserIcon) {
            this.icon = icon;
            this.isDefaultUserIcon = true;
        }
        this.isShowOnlyIcon = isIcon;
    }
}
SideNavNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-sidenav-node', template: `
    <!-- node {{node | json}} -->
    <li>
        <div *ngIf="enableborder" class="border"></div>
        <div tabindex="1" (keyup.enter)="onenterClick(currentdivref,nodedata)" *ngIf="label || badge || icon" [attr.draggable]="enabledrag" (dragstart)="dragStartEvent({event:$event,data:node})" class="headernode" [ngClass]="{'activenode':active}" (click)="onClick(nodedata)">
            <ng-container *ngIf="icon">
                <amexio-c-icon class="node-icon" [customclass]="icon" [color]="iconcolor"></amexio-c-icon>
                <ng-container *ngIf="!isShowOnlyIcon || isMobile">
                <span>{{label}} </span>
            
                <span *ngIf="badge" class="nav-badge">{{badge}}</span>
            
                <ng-container *ngIf="(node && (node.length>0)) || collapsable">
                <span style="padding-right: 10px; float: right" *ngIf="expand">
                <amexio-c-icon key="sidenav-angle-up"></amexio-c-icon>
                </span>
                <span style="padding-right: 10px;float: right" *ngIf="!expand">
                <amexio-c-icon key="sidenav-angle-down"></amexio-c-icon>
                </span>
                </ng-container>
                </ng-container>
            </ng-container>
            
            <ng-container *ngIf="!icon">
                <amexio-c-icon class="node-icon" [customclass]="icon" [color]="iconcolor"></amexio-c-icon>
                <ng-container *ngIf="!isShowOnlyIcon || isMobile">
                <span style="padding-left: 20px;">{{label}} </span>
            
                <span *ngIf="badge" class="nav-badge">{{badge}}</span>
            
                <ng-container *ngIf="(node && (node.length>0)) || collapsable">
                <span style="padding-right: 10px; float: right" *ngIf="expand">
                <amexio-c-icon key="sidenav-angle-up"></amexio-c-icon>
                </span>
                <span style="padding-right: 10px;float: right" *ngIf="!expand">
                <amexio-c-icon key="sidenav-angle-down"></amexio-c-icon>
                </span>
                </ng-container>
                </ng-container>
            </ng-container>
        </div>

        <!-- id [data] given      </div>
     (emitNode) = "emittednodedata($event)" -->
        <div *ngIf="node && !isShowOnlyIcon" class="sidenav-submenu-details sidenav-submenu-expanded" [ngClass]="{'sidenav-submenu-expanded':expand}">
            <amexio-sidenav-innernode *ngIf="node && (node.length>0)" (onClick)="onNodeClick($event)" [display-key]="displaykey" [child-array-key]="childarraykey" [enable-drag]="enabledrag" (emitNode)="emittednodedata($event)" (onDrag)="dragStartEvent($event)" [data]="node">
            </amexio-sidenav-innernode>
        </div>
        <!-- ng content block-->
        <div class="sidenav-submenu-details" style="padding-right: 20px;" [ngClass]="{'sidenav-submenu-expanded':expand}">
            <ng-content *ngIf="!isShowOnlyIcon"></ng-content>
        </div>
    </li>
  `,
            },] },
];
/** @nocollapse */
SideNavNodeComponent.ctorParameters = () => [
    { type: DeviceQueryService },
    { type: IconLoaderService }
];
SideNavNodeComponent.propDecorators = {
    nodedata: [{ type: Input, args: ['node',] }],
    currentdivref: [{ type: Input, args: ['currentdivref',] }],
    badge: [{ type: Input, args: ['badge',] }],
    icon: [{ type: Input, args: ['icon',] }],
    label: [{ type: Input, args: ['label',] }],
    enableborder: [{ type: Input, args: ['enable-border',] }],
    active: [{ type: Input, args: ['active',] }],
    collapsable: [{ type: Input, args: ['collapsable',] }],
    node: [{ type: Input, args: ['data',] }],
    enabledrag: [{ type: Input, args: ['enable-drag',] }],
    nodeClick: [{ type: Output }],
    onDrag: [{ type: Output }],
    nodeEmitToSideNav: [{ type: Output }],
    displaykey: [{ type: Input, args: ['display-key',] }],
    childarraykey: [{ type: Input, args: ['child-array-key',] }],
    expand: [{ type: Input }],
    iconcolor: [{ type: Input, args: ['icon-color',] }],
    isShowOnlyIcon: [{ type: Input, args: ['show-only-icon',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/1/17.
*/
class AmexioSideNavComponent {
    /**
     * @param {?} dataService
     * @param {?} matchMediaService
     * @param {?} element
     * @param {?} cd
     */
    constructor(dataService, matchMediaService, element, cd) {
        this.dataService = dataService;
        this.matchMediaService = matchMediaService;
        this.element = element;
        this.cd = cd;
        /*
           Events
           name : nodeClick
           datatype : none
           version : none
           default : none
           description : Fire when sidenav bar menu click
           */
        this.nodeClick = new EventEmitter();
        /*
           Events
           name : onDrag
           datatype : none
           version : 4.2.9
           default : none
           description : Fire when you drag node
           */
        this.onDrag = new EventEmitter();
        /*
           Properties
           name : enable-border
           datatype : boolean
           version : 5.5.5 onwards
           default : true
           description : By default enable-border is enabled
           */
        this.enableborder = true;
        this.onMouseLeave = new EventEmitter();
        this.onMouseOver = new EventEmitter();
        this.nodes = [];
        this.isShowOnlyIcon = false;
        this.isSideNavEnable = true;
        this.position = 'left';
        this.smalldevice = false;
        this.sidenavexpandedinsmalldevice = false;
        this.width = '0%';
        const /** @type {?} */ that = this;
        this.displaykey = 'text';
        this.childarraykey = 'children';
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.smalldevice = true;
            this.width = '0%';
        }
        else {
            this.width = '19%';
        }
        /*---------------------------------------------------
             TAP INTO LISTENERS FOR WHEN DEVICE WIDTH CHANGES
             ---------------------------------------------------*/
        this.matchMediaService.OnPhone((mediaQueryList) => {
            that.handleDeviceSettings(false);
        });
        this.matchMediaService.OnTablet((mediaQueryList) => {
            that.handleDeviceSettings(false);
        });
        this.matchMediaService.OnDesktop((mediaQueryList) => {
            that.handleDeviceSettings(false);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        if (this.data && (!this.httpmethod || !this.httpurl)) {
            this.setData(this.data);
        }
        if (this.position == null) {
            this.position = 'left';
        }
        if (!this.height) {
            this.height = '100%';
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.nodearray = this.sidennavnodearray.toArray();
        this.nodearray.forEach((element) => {
            element.nodeEmitToSideNav.subscribe((node) => {
                node.forEach((nodeelement) => {
                    if (nodeelement.active === true) {
                        this.activenode = nodeelement;
                    }
                });
                this.activateNode = JSON.parse(JSON.stringify(node));
                this.findObj(node);
            });
        });
    }
    /**
     * @param {?} currentnode
     * @return {?}
     */
    findObj(currentnode) {
        this.nodearray.forEach((element) => {
            if (element.node && (element.node.length > 0)) {
                (element.node).forEach((individualnode) => {
                    if ((this.activenode.text === individualnode.text)
                        && (this.activenode.active === individualnode.active)) {
                        individualnode.active = true;
                    }
                    else {
                        individualnode.active = false;
                    }
                });
            }
        });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onClick(node) {
        this.nodeClick.emit(node);
        this.activateNode(this.data, node);
        if (this.smalldevice && (!node.children || node.children === null || node.children === '')) {
            this.isSideNavEnable = false;
        }
        else {
            this.isSideNavEnable = true;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    generateIndex(data) {
        data.forEach((element, index) => {
            if (element[this.childarraykey]) {
                element[this.childarraykey].forEach((innerelement) => {
                    innerelement['tabindex'] = '-1';
                    if (innerelement[this.childarraykey]) {
                        innerelement[this.childarraykey].forEach((innerelement2) => {
                            innerelement2['tabindex'] = '-1';
                        });
                    }
                });
            }
        });
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        // Check if key is added?
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.generateIndex(this.data);
        this.activateNode(this.data, null);
        this.handleDeviceSettings(false);
    }
    /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    activateNode(data, node) {
        for (const /** @type {?} */ i of data) {
            if (node === i && !i[this.childarraykey]) {
                i['active'] = true;
            }
            else {
                i['active'] = false;
            }
            if (i[this.childarraykey]) {
                this.activateNode(i[this.childarraykey], node);
            }
        }
    }
    /**
     * @return {?}
     */
    toggleSideNav() {
        this.isSideNavEnable = true;
        this.handleDeviceSettings(!this.isSideNavExpand);
    }
    /**
     * @return {?}
     */
    close() {
        this.handleDeviceSettings(false);
    }
    /**
     * @param {?} expand
     * @return {?}
     */
    handleDeviceSettings(expand) {
        if (this.position !== 'relative') {
            if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
                this.smalldevice = true;
                if (expand) {
                    this.width = '80%';
                    this.isSideNavExpand = true;
                    this.sidenavexpandedinsmalldevice = true;
                }
                else {
                    this.width = '0%';
                    this.isSideNavExpand = false;
                    this.sidenavexpandedinsmalldevice = false;
                }
            }
            else {
                if (this.isShowOnlyIcon) {
                    this.width = '5%';
                }
                else {
                    this.width = '19%';
                }
                this.smalldevice = false;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getNodeDragEvent(event) {
        this.onDrag.emit(event);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    setHomePageType(type) {
        this.homepageType = type;
        if (this.homepageType === '3') {
            this.nodearray.forEach((element) => {
                element.setShowOnlyIconFlag(this.isShowOnlyIcon);
            });
        }
        this.cd.detectChanges();
    }
}
AmexioSideNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-side-nav', template: `
    <div *ngIf="(position !='relative' && smalldevice )" [ngClass]="{'sidenav-mobile-bar-left':(position=='left' && position!='relative'),'sidenav-mobile-bar-right':(position=='right' && position!='relative')}" class="sidenav-mobile-bar"
        (click)="toggleSideNav()">
        <amexio-c-icon class="homepage3-bar" key="sidenav_bar" [color]=""></amexio-c-icon>
    </div>
    <div *ngIf="isSideNavEnable" style="height: 100%" [style.width]="width" [ngStyle]="{'background': bgimage ? 'url(' + bgimage + ') center/cover no-repeat' : null}" [ngClass]="{'left':(position=='left' && position!='relative'),'right':(position=='right' && position!='relative')}">
        <div class="sidenav" [ngClass]="{'sidenav-color': !background}" [style.color]="color" [style.background]="background" [style.height]="height">
            <ul>
                <li>
                    <div *ngIf="sidenavtitle" class="title">
                        <ng-container *ngIf="titleimage">
                            <p>
                                <img [attr.src]="titleimage" alt=" Title image" style="width: 60px;height: 60px;padding-left: 80px;" />
                            </p>
                        </ng-container>
                        <ng-container *ngIf="sidenavtitle">
                            <p>{{sidenavtitle}}</p>
                        </ng-container>
                        <span *ngIf="sidenavexpandedinsmalldevice" style="padding-right: 10px; float: right" (click)="close()">
                        <amexio-c-icon key="sidenav_close"></amexio-c-icon>
                    </span>
                    </div>
                </li>
                <!-- (nodeEmitToSideNav) = "getNodesData($event)" -->
                <div #currentdivref role="option" *ngFor="let node of data" id="{{node.index}}">
                    <amexio-sidenav-node [show-only-icon]="isShowOnlyIcon" [enable-border]="enableborder && (node && node[childarraykey] && (node[childarraykey].length>0))" [currentdivref]="currentdivref" [active]="(node && node.active)" [icon]="node.icon" [badge]="node.badge"
                        [enable-drag]="enabledrag" (nodeClick)="onClick($event)" (onDrag)="getNodeDragEvent($event)" [expand]="node?.expand" [label]="node[displaykey]" [node]="node" [icon-color]="node.iconcolor" [data]="node[childarraykey]">
                    </amexio-sidenav-node>
                </div>

                <ng-content></ng-content>
            </ul>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioSideNavComponent.ctorParameters = () => [
    { type: CommonDataService },
    { type: DeviceQueryService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
AmexioSideNavComponent.propDecorators = {
    data: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    position: [{ type: Input }],
    titleimage: [{ type: Input }],
    nodeClick: [{ type: Output }],
    onDrag: [{ type: Output }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    sidenavtitle: [{ type: Input, args: ['title',] }],
    enabledrag: [{ type: Input, args: ['enable-drag',] }],
    displaykey: [{ type: Input, args: ['display-key',] }],
    childarraykey: [{ type: Input, args: ['child-array-key',] }],
    enableborder: [{ type: Input, args: ['enable-border',] }],
    background: [{ type: Input, args: ['background',] }],
    color: [{ type: Input, args: ['color',] }],
    bgimage: [{ type: Input, args: ['bg-image',] }],
    onMouseLeave: [{ type: Output }],
    onMouseOver: [{ type: Output }],
    sidennavnodearray: [{ type: ContentChildren, args: [SideNavNodeComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioHomePageNorthPanelComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
        this.enableIcon = false;
        this.nothPanelIconClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.amexioNavBarComponent && this.type === '2' && !(this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone())) {
            this.amexioNavBarComponent.homepageType = this.type;
        }
        this.amexioNavBarComponent.onIconArrowClick.subscribe((eventdata) => this.westPanelShowHideClick(eventdata));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    westPanelShowHideClick(data) {
        this.nothPanelIconClick.emit();
    }
}
AmexioHomePageNorthPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-homepage-northpanel',
                template: `
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioHomePageNorthPanelComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioHomePageNorthPanelComponent.propDecorators = {
    enableIcon: [{ type: Input, args: ['enable-icon',] }],
    type: [{ type: Input, args: ['type',] }],
    nothPanelIconClick: [{ type: Output }],
    amexioNavBarComponent: [{ type: ContentChild, args: [AmexioNavBarComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioHomePageComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
        this.type = '1';
        this.isDisableWestPanel = true;
        this.isPhone = false;
        this.westPanelWidth = '0 0 19%';
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.isPhone = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.sideNavComponents = this.sideNavList.toArray();
        if (this.type === '3') {
            this.sideNavComponents[0].isShowOnlyIcon = true;
            this.sideNavComponents[0].width = '5%';
            this.westPanelWidth = '0 0 5%';
            this.sideNavComponents[0].setHomePageType(this.type);
            // NAVBAR
            this.amexioNavBarComponent.isLHSHide = true;
            this.amexioNavBarComponent.lhsWidth = '0 0 5%';
            this.amexioNavBarComponent.onIconClick.subscribe((eventdata) => this.northPanelClick(eventdata));
        }
        if (this.amexoHomePageNorthpanel) {
            this.amexoHomePageNorthpanel.type = this.type;
            this.amexoHomePageNorthpanel.nothPanelIconClick.subscribe((eventdata) => this.showHideWestPanel());
        }
        this.amexioNavBarComponent.homepageType = this.type;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    resize(event) {
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.isPhone = true;
        }
        else {
            this.isPhone = false;
        }
    }
    /**
     * @return {?}
     */
    showHideWestPanel() {
        this.isDisableWestPanel = !this.isDisableWestPanel;
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.isPhone = true;
        }
    }
    /**
     * @param {?} isExpand
     * @return {?}
     */
    northPanelClick(isExpand) {
        if (isExpand) {
            this.amexioNavBarComponent.isLHSHide = false;
            // SIDE NAV
            this.sideNavComponents[0].isShowOnlyIcon = false;
            this.sideNavComponents[0].width = '19%';
            this.westPanelWidth = '0 0 19%';
        }
        else {
            this.amexioNavBarComponent.isLHSHide = true;
            // SIDE NAV
            this.sideNavComponents[0].isShowOnlyIcon = true;
            this.sideNavComponents[0].width = '5%';
            this.westPanelWidth = '0 0 5%';
        }
        this.sideNavComponents[0].setHomePageType(this.type);
    }
}
AmexioHomePageComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-homepage-ce',
                template: `
    <div class="{{'homepage-'+type}}" (window:resize)="resize($event)">
        <div class="homepage-northpanel-flex">
            <ng-content select="amexio-homepage-northpanel">
            </ng-content>
        </div>
        <div [ngStyle]="{'display': !isPhone ? 'flex':'','flex-direction': isDisableWestPanel ? 'row' : 'column'}">
            <div [ngStyle]="{'flex':isPhone ? '0 0 0%':westPanelWidth}">
                <ng-content *ngIf="isDisableWestPanel" select="amexio-homepage-westpanel">
                </ng-content>
            </div>
            <div [ngClass]="{'homepage-centerpanel-flex':!isPhone || (isDisableWestPanel && !isPhone), 'homepage-centerpanel-flex-fullview':(!isDisableWestPanel && !isPhone) }">
                <ng-content select="amexio-homepage-centerpanel">
                </ng-content>
            </div>
            <!-- <div [ngStyle]="{'flex':isPhone ? '0 0 0%':'0 0 19%'}">
            <ng-content select="amexio-homepage-eastpanel">
            </ng-content>
        </div> -->
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioHomePageComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioHomePageComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }],
    amexoHomePageNorthpanel: [{ type: ContentChild, args: [AmexioHomePageNorthPanelComponent,] }],
    sideNavList: [{ type: ContentChildren, args: [AmexioSideNavComponent, { descendants: true },] }],
    amexioNavBarComponent: [{ type: ContentChild, args: [AmexioNavBarComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright [2019] [Metamagic]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by pratik on 18/12/17.
 */
class AmexioFooterComponent {
    constructor() {
        this.className = 'modal-window-footer';
        this.footer = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setFooterAlignment(this.footeralign);
    }
    /**
     * @param {?} footeralign
     * @return {?}
     */
    setFooterAlignment(footeralign) {
        switch (footeralign) {
            case 'right': {
                this.alignClass = 'flex-end';
                break;
            }
            case 'center': {
                this.alignClass = 'center';
                break;
            }
            case 'left': {
                this.alignClass = 'flex-start';
                break;
            }
            default: {
                this.alignClass = 'flex-end';
                break;
            }
        }
    }
}
AmexioFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-action', template: `
    <ng-container *ngIf="footer">
      <ng-content></ng-content>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
AmexioFooterComponent.ctorParameters = () => [];
AmexioFooterComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['attr.class',] }],
    footeralign: [{ type: Input, args: ['footer-align',] }],
    alignClass: [{ type: HostBinding, args: ['style.justify-content',] }],
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright [2019] [Metamagic]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by pratik on 18/12/17.
 */
class AmexioBodyComponent {
    constructor() {
        this.className = 'window-middle';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.height = this.bodyHeight + '%';
    }
}
AmexioBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-body', template: `
    <ng-content></ng-content>
  `
            },] },
];
/** @nocollapse */
AmexioBodyComponent.ctorParameters = () => [];
AmexioBodyComponent.propDecorators = {
    height: [{ type: HostBinding, args: ['style.height',] }],
    className: [{ type: HostBinding, args: ['attr.class',] }],
    bodyHeight: [{ type: Input, args: ['body-height',] }],
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 Component Name : Amexio Carousel
 Component Selector : <[amexioTemplate]>
 Component Description : Amexio CarouselView displays a collection of
 images or other content in a horizontal layout with built-in navigation between the items.

*/
class AmexioTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    getType() {
        return this.name;
    }
}
AmexioTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[amexioTemplate]',
            },] },
];
/** @nocollapse */
AmexioTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
AmexioTemplateDirective.propDecorators = {
    type: [{ type: Input }],
    name: [{ type: Input, args: ['amexioTemplate',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 28/12/17.
*/
class AmexioCarouselComponent {
    constructor() {
        // @ViewChild('kk') kk: ElementRef;
        this.prevImage = -1;
        this.nextImage = -1;
        this.currImage = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.startTimeInterval();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.templates.forEach((item) => {
            this.itemTemplate = item.template;
        });
    }
    /**
     * @return {?}
     */
    scrollData() {
    }
    /**
     * @return {?}
     */
    next() {
        const /** @type {?} */ nxt = this.tabs.nativeElement;
        nxt.scrollLeft = nxt.scrollLeft + 200;
    }
    /**
     * @return {?}
     */
    previous() {
        const /** @type {?} */ prev = this.tabs.nativeElement;
        prev.scrollLeft = prev.scrollLeft - 200;
    }
    /**
     * @return {?}
     */
    shuffle() {
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onArrowRight(item) {
        if (this.data.length - 1 > item) {
            const /** @type {?} */ currentitem = item + 1;
            const /** @type {?} */ itemId = this.header + currentitem;
            document.getElementById(itemId).focus();
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onArrowLeft(item) {
        if (item > 0) {
            const /** @type {?} */ currentitem = item - 1;
            const /** @type {?} */ itemId = this.header + currentitem;
            document.getElementById(itemId).focus();
        }
    }
    /**
     * @return {?}
     */
    startTimeInterval() {
        if (this.shuffleinterval != null) {
            this.timeInterval = setInterval(() => {
                const /** @type {?} */ carouselItemPosix = this.tabs.nativeElement;
                if (!((carouselItemPosix.scrollWidth - carouselItemPosix.offsetWidth - carouselItemPosix.scrollLeft) <= 0)) {
                    // go next
                    carouselItemPosix.scrollLeft = carouselItemPosix.scrollLeft + 200;
                }
                else if (carouselItemPosix.scrollLeft > 0) {
                    // go previous
                    carouselItemPosix.scrollLeft = carouselItemPosix.scrollLeft - 200;
                }
            }, this.shuffleinterval);
        }
    }
    /**
     * @return {?}
     */
    stopTimeInterval() {
        clearTimeout(this.timeInterval);
    }
}
AmexioCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-carousel',
                template: `
    <h4>{{header}}</h4>
    <div class="tabwrapper">
      <div class="carouselnavigation float-left" (click)="previous()">
        <amexio-c-icon key="carousel_previous"></amexio-c-icon>
      </div>
      <div class="carouselnavigation float-right" (click)="next()">
        <amexio-c-icon key="carousel_next"></amexio-c-icon>
      </div>
      <ul #tab class="tab">
        <li attr.aria-label="'carousel {{rowno}}'" tabindex="1" id="{{header}}{{rowno}}" class="tablistitems" *ngFor="let item of data let rowno= index" [ngClass]="{'list-carousel-items':item.isSelected}"
          (mouseover)="stopTimeInterval($event)" (mouseleave)="startTimeInterval($event)" (keyup.arrowleft)="onArrowLeft(rowno)"
          (keyup.arrowright)="onArrowRight(rowno)">
          <ng-template tabindex="1" [amexioTemplateWrapper]="itemTemplate" [item]="item"></ng-template>
        </li>
      </ul>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioCarouselComponent.ctorParameters = () => [];
AmexioCarouselComponent.propDecorators = {
    header: [{ type: Input }],
    data: [{ type: Input }],
    shuffleinterval: [{ type: Input, args: ['shuffle-interval',] }],
    templates: [{ type: ContentChildren, args: [AmexioTemplateDirective,] }],
    tabs: [{ type: ViewChild, args: ['tab', { read: ElementRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioTemplateWrapperDirective {
    /**
     * @param {?} viewContainer
     */
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.render();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    set item(item) {
        this._item = item;
        if (this.view) {
            this.view.destroy();
            this.render();
        }
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    render() {
        this.view = this.viewContainer.createEmbeddedView(this.templateRef, {
            $implicit: this.item, index: this.index,
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.view.destroy();
    }
}
AmexioTemplateWrapperDirective.decorators = [
    { type: Directive, args: [{
                selector: '[amexioTemplateWrapper]',
            },] },
];
/** @nocollapse */
AmexioTemplateWrapperDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
AmexioTemplateWrapperDirective.propDecorators = {
    index: [{ type: Input }],
    templateRef: [{ type: Input, args: ['amexioTemplateWrapper',] }],
    item: [{ type: Input }]
};

/**
 * @license Angular v6.0.4
 * (c) 2010-2018 Google, Inc. https://angular.io/
 * License: MIT
 */

/**
 * AnimationBuilder is an injectable service that is available when the {@link
 * BrowserAnimationsModule BrowserAnimationsModule} or {@link NoopAnimationsModule
 * NoopAnimationsModule} modules are used within an application.
 *
 * The purpose if this service is to produce an animation sequence programmatically within an
 * angular component or directive.
 *
 * Programmatic animations are first built and then a player is created when the build animation is
 * attached to an element.
 *
 * ```ts
 * // remember to include the BrowserAnimationsModule module for this to work...
 * import {AnimationBuilder} from '@angular/animations';
 *
 * class MyCmp {
 *   constructor(private _builder: AnimationBuilder) {}
 *
 *   makeAnimation(element: any) {
 *     // first build the animation
 *     const myAnimation = this._builder.build([
 *       style({ width: 0 }),
 *       animate(1000, style({ width: '100px' }))
 *     ]);
 *
 *     // then create a player from it
 *     const player = myAnimation.create(element);
 *
 *     player.play();
 *   }
 * }
 * ```
 *
 * When an animation is built an instance of {@link AnimationFactory AnimationFactory} will be
 * returned. Using that an {@link AnimationPlayer AnimationPlayer} can be created which can then be
 * used to start the animation.
 *
 * @experimental Animation support is experimental.
 */
/**
 * `trigger` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the
 * {@link Component#animations component animations metadata page} to gain a better
 * understanding of how animations in Angular are used.
 *
 * `trigger` Creates an animation trigger which will a list of {@link state state} and
 * {@link transition transition} entries that will be evaluated when the expression
 * bound to the trigger changes.
 *
 * Triggers are registered within the component annotation data under the
 * {@link Component#animations animations section}. An animation trigger can be placed on an element
 * within a template by referencing the name of the trigger followed by the expression value that
 the
 * trigger is bound to (in the form of `[@triggerName]="expression"`.
 *
 * Animation trigger bindings strigify values and then match the previous and current values against
 * any linked transitions. If a boolean value is provided into the trigger binding then it will both
 * be represented as `1` or `true` and `0` or `false` for a true and false boolean values
 * respectively.
 *
 * ### Usage
 *
 * `trigger` will create an animation trigger reference based on the provided `name` value. The
 * provided `animation` value is expected to be an array consisting of {@link state state} and
 * {@link transition transition} declarations.
 *
 * ```typescript
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ### Using an inline function
 * The `transition` animation method also supports reading an inline function which can decide
 * if its associated animation should be run.
 *
 * ```
 * // this method will be run each time the `myAnimationTrigger`
 * // trigger value changes...
 * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
 string]: any}): boolean {
 *   // notice that `element` and `params` are also available here
 *   return toState == 'yes-please-animate';
 * }
 *
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger('myAnimationTrigger', [
 *       transition(myInlineMatcherFn, [
 *         // the animation sequence code
 *       ]),
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "yes-please-animate";
 * }
 * ```
 *
 * The inline method will be run each time the trigger
 * value changes
 *
 * ## Disable Animations
 * A special animation control binding called `@.disabled` can be placed on an element which will
 then disable animations for any inner animation triggers situated within the element as well as
 any animations on the element itself.
 *
 * When true, the `@.disabled` binding will prevent all animations from rendering. The example
 below shows how to use this feature:
 *
 * ```ts
 * @Component({
 *   selector: 'my-component',
 *   template: `
 *     <div [@.disabled]="isDisabled">
 *       <div [@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * The `@childAnimation` trigger will not animate because `@.disabled` prevents it from happening
 (when true).
 *
 * Note that `@.disabled` will only disable all animations (this means any animations running on
 * the same element will also be disabled).
 *
 * ### Disabling Animations Application-wide
 * When an area of the template is set to have animations disabled, **all** inner components will
 also have their animations disabled as well. This means that all animations for an angular
 application can be disabled by placing a host binding set on `@.disabled` on the topmost Angular
 component.
 *
 * ```ts
 * import {Component, HostBinding} from '@angular/core';
 *
 * @Component({
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 *   @HostBinding('@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### What about animations that us `query()` and `animateChild()`?
 * Despite inner animations being disabled, a parent animation can {@link query query} for inner
 elements located in disabled areas of the template and still animate them as it sees fit. This is
 also the case for when a sub animation is queried by a parent and then later animated using {@link
 animateChild animateChild}.

 * ### Detecting when an animation is disabled
 * If a region of the DOM (or the entire application) has its animations disabled, then animation
 * trigger callbacks will still fire just as normal (only for zero seconds).
 *
 * When a trigger callback fires it will provide an instance of an {@link AnimationEvent}. If
 animations
 * are disabled then the `.disabled` flag on the event will be true.
 *
 * @experimental Animation support is experimental.
 */
function trigger(name, definitions) {
    return { type: 7 /* Trigger */, name: name, definitions: definitions, options: {} };
}
/**
 * `animate` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `animate` specifies an animation step that will apply the provided `styles` data for a given
 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
 * to be used within {@link sequence an animation sequence}, {@link group group}, or {@link
 * transition transition}.
 *
 * ### Usage
 *
 * The `animate` function accepts two input parameters: `timing` and `styles`:
 *
 * - `timing` is a string based value that can be a combination of a duration with optional delay
 * and easing values. The format for the expression breaks down to `duration delay easing`
 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
 * `duration` value in millisecond form.
 * - `styles` is the style input data which can either be a call to {@link style style} or {@link
 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
 * and used (this is useful when describing an animation step that will complete an animation by
 * {@link transition#the-final-animate-call animating to the final state}).
 *
 * ```typescript
 * // various functions for specifying timing data
 * animate(500, style(...))
 * animate("1s", style(...))
 * animate("100ms 0.5s", style(...))
 * animate("5s ease", style(...))
 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
 *
 * // either style() of keyframes() can be used
 * animate(500, style({ background: "red" }))
 * animate(500, keyframes([
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 * ])
 * ```
 *
 * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * @experimental Animation support is experimental.
 */
function animate(timings, styles) {
    if (styles === void 0) { styles = null; }
    return { type: 4 /* Animate */, styles: styles, timings: timings };
}
/**
 * `style` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `style` declares a key/value object containing CSS properties/styles that can then be used for
 * {@link state animation states}, within an {@link sequence animation sequence}, or as styling data
 * for both {@link animate animate} and {@link keyframes keyframes}.
 *
 * ### Usage
 *
 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
 * to be defined.
 *
 * ```typescript
 * // string values are used for css properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical (pixel) values are also supported
 * style({ width: 100, height: 0 })
 * ```
 *
 * #### Auto-styles (using `*`)
 *
 * When an asterix (`*`) character is used as a value then it will be detected from the element
 * being animated and applied as animation data when the animation starts.
 *
 * This feature proves useful for a state depending on layout and/or environment factors; in such
 * cases the styles are calculated just before the animation starts.
 *
 * ```typescript
 * // the steps below will animate from 0 to the
 * // actual height of the element
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * @experimental Animation support is experimental.
 */
function style(tokens) {
    return { type: 6 /* Style */, styles: tokens, offset: null };
}
/**
 * `state` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `state` declares an animation state within the given trigger. When a state is active within a
 * component then its associated styles will persist on the element that the trigger is attached to
 * (even when the animation ends).
 *
 * To animate between states, have a look at the animation {@link transition transition} DSL
 * function. To register states to an animation trigger please have a look at the {@link trigger
 * trigger} function.
 *
 * #### The `void` state
 *
 * The `void` state value is a reserved word that angular uses to determine when the element is not
 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
 * associated element is void).
 *
 * #### The `*` (default) state
 *
 * The `*` state (when styled) is a fallback state that will be used if the state that is being
 * animated is not declared within the trigger.
 *
 * ### Usage
 *
 * `state` will declare an animation state with its associated styles
 * within the given trigger.
 *
 * - `stateNameExpr` can be one or more state names separated by commas.
 * - `styles` refers to the {@link style styling data} that will be persisted on the element once
 * the state has been reached.
 *
 * ```typescript
 * // "void" is a reserved name for a state and is used to represent
 * // the state in which an element is detached from from the application.
 * state("void", style({ height: 0 }))
 *
 * // user-defined states
 * state("closed", style({ height: 0 }))
 * state("open, visible", style({ height: "*" }))
 * ```
 *
 * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * @experimental Animation support is experimental.
 */
function state(name, styles, options) {
    return { type: 0 /* State */, name: name, styles: styles, options: options };
}
/**
 * `transition` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
 * and/or ending state).
 *
 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
 * function will be executed each time a state change occurs. If the value returned within the
 * function is true then the associated animation will be run.
 *
 * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
 * to animate to a state value and persist its styles then one or more {@link state animation
 * states} is expected to be defined.
 *
 * ### Usage
 *
 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
 * what the previous state is and what the current state has become. In other words, if a transition
 * is defined that matches the old/current state criteria then the associated animation will be
 * triggered.
 *
 * ```typescript
 * // all transition/state changes are defined within an animation trigger
 * trigger("myAnimationTrigger", [
 *   // if a state is defined then its styles will be persisted when the
 *   // animation has fully completed itself
 *   state("on", style({ background: "green" })),
 *   state("off", style({ background: "grey" })),
 *
 *   // a transition animation that will be kicked off when the state value
 *   // bound to "myAnimationTrigger" changes from "on" to "off"
 *   transition("on => off", animate(500)),
 *
 *   // it is also possible to do run the same animation for both directions
 *   transition("on <=> off", animate(500)),
 *
 *   // or to define multiple states pairs separated by commas
 *   transition("on => off, off => void", animate(500)),
 *
 *   // this is a catch-all state change for when an element is inserted into
 *   // the page and the destination state is unknown
 *   transition("void => *", [
 *     style({ opacity: 0 }),
 *     animate(500)
 *   ]),
 *
 *   // this will capture a state change between any states
 *   transition("* => *", animate("1s 0s")),
 *
 *   // you can also go full out and include a function
 *   transition((fromState, toState) => {
 *     // when `true` then it will allow the animation below to be invoked
 *     return fromState == "off" && toState == "on";
 *   }, animate("1s 0s"))
 * ])
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * #### The final `animate` call
 *
 * If the final step within the transition steps is a call to `animate()` that **only** uses a
 * timing value with **no style data** then it will be automatically used as the final animation arc
 * for the element to animate itself to the final state. This involves an automatic mix of
 * adding/removing CSS styles so that the element will be in the exact state it should be for the
 * applied state to be presented correctly.
 *
 * ```
 * // start off by hiding the element, but make sure that it animates properly to whatever state
 * // is currently active for "myAnimationTrigger"
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 * ])
 * ```
 *
 * ### Using :enter and :leave
 *
 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
 * => void` state changes.
 *
 * ```
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 * ]),
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 * ])
 * ```
 *
 * ### Boolean values
 * if a trigger binding value is a boolean value then it can be matched using a transition
 * expression that compares `true` and `false` or `1` and `0`.
 *
 * ```
 * // in the template
 * <div [@openClose]="open ? true : false">...</div>
 *
 * // in the component metadata
 * trigger('openClose', [
 *   state('true', style({ height: '*' })),
 *   state('false', style({ height: '0px' })),
 *   transition('false <=> true', animate(500))
 * ])
 * ```
 *
 * ### Using :increment and :decrement
 * In addition to the :enter and :leave transition aliases, the :increment and :decrement aliases
 * can be used to kick off a transition when a numeric value has increased or decreased in value.
 *
 * ```
 * import {group, animate, query, transition, style, trigger} from '@angular/animations';
 * import {Component} from '@angular/core';
 *
 * @Component({
 *   selector: 'banner-carousel-component',
 *   styles: [`
 *     .banner-container {
 *        position:relative;
 *        height:500px;
 *        overflow:hidden;
 *      }
 *     .banner-container > .banner {
 *        position:absolute;
 *        left:0;
 *        top:0;
 *        font-size:200px;
 *        line-height:500px;
 *        font-weight:bold;
 *        text-align:center;
 *        width:100%;
 *      }
 *   `],
 *   template: `
 *     <button (click)="previous()">Previous</button>
 *     <button (click)="next()">Next</button>
 *     <hr>
 *     <div [@bannerAnimation]="selectedIndex" class="banner-container">
 *       <div class="banner" *ngFor="let banner of banners"> {{ banner }} </div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger('bannerAnimation', [
 *       transition(":increment", group([
 *         query(':enter', [
 *           style({ left: '100%' }),
 *           animate('0.5s ease-out', style('*'))
 *         ]),
 *         query(':leave', [
 *           animate('0.5s ease-out', style({ left: '-100%' }))
 *         ])
 *       ])),
 *       transition(":decrement", group([
 *         query(':enter', [
 *           style({ left: '-100%' }),
 *           animate('0.5s ease-out', style('*'))
 *         ]),
 *         query(':leave', [
 *           animate('0.5s ease-out', style({ left: '100%' }))
 *         ])
 *       ]))
 *     ])
 *   ]
 * })
 * class BannerCarouselComponent {
 *   allBanners: string[] = ['1', '2', '3', '4'];
 *   selectedIndex: number = 0;
 *
 *   get banners() {
 *      return [this.allBanners[this.selectedIndex]];
 *   }
 *
 *   previous() {
 *     this.selectedIndex = Math.max(this.selectedIndex - 1, 0);
 *   }
 *
 *   next() {
 *     this.selectedIndex = Math.min(this.selectedIndex + 1, this.allBanners.length - 1);
 *   }
 * }
 * ```
 *
 * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * @experimental Animation support is experimental.
 */
function transition(stateChangeExpr, steps, options) {
    if (options === void 0) { options = null; }
    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options: options };
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function scheduleMicroTask(cb) {
    Promise.resolve(null).then(cb);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @experimental Animation support is experimental.
 */
var NoopAnimationPlayer = /** @class */ (function () {
    function NoopAnimationPlayer(duration, delay) {
        if (duration === void 0) { duration = 0; }
        if (delay === void 0) { delay = 0; }
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._started = false;
        this._destroyed = false;
        this._finished = false;
        this.parentPlayer = null;
        this.totalTime = duration + delay;
    }
    NoopAnimationPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    NoopAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    NoopAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    NoopAnimationPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
    NoopAnimationPlayer.prototype.hasStarted = function () { return this._started; };
    NoopAnimationPlayer.prototype.init = function () { };
    NoopAnimationPlayer.prototype.play = function () {
        if (!this.hasStarted()) {
            this._onStart();
            this.triggerMicrotask();
        }
        this._started = true;
    };
    /* @internal */
    NoopAnimationPlayer.prototype.triggerMicrotask = function () {
        var _this = this;
        scheduleMicroTask(function () { return _this._onFinish(); });
    };
    NoopAnimationPlayer.prototype._onStart = function () {
        this._onStartFns.forEach(function (fn) { return fn(); });
        this._onStartFns = [];
    };
    NoopAnimationPlayer.prototype.pause = function () { };
    NoopAnimationPlayer.prototype.restart = function () { };
    NoopAnimationPlayer.prototype.finish = function () { this._onFinish(); };
    NoopAnimationPlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._destroyed = true;
            if (!this.hasStarted()) {
                this._onStart();
            }
            this.finish();
            this._onDestroyFns.forEach(function (fn) { return fn(); });
            this._onDestroyFns = [];
        }
    };
    NoopAnimationPlayer.prototype.reset = function () { };
    NoopAnimationPlayer.prototype.setPosition = function (p) { };
    NoopAnimationPlayer.prototype.getPosition = function () { return 0; };
    /* @internal */
    NoopAnimationPlayer.prototype.triggerCallback = function (phaseName) {
        var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach(function (fn) { return fn(); });
        methods.length = 0;
    };
    return NoopAnimationPlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationGroupPlayer = /** @class */ (function () {
    function AnimationGroupPlayer(_players) {
        var _this = this;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this._onDestroyFns = [];
        this.parentPlayer = null;
        this.totalTime = 0;
        this.players = _players;
        var doneCount = 0;
        var destroyCount = 0;
        var startCount = 0;
        var total = this.players.length;
        if (total == 0) {
            scheduleMicroTask(function () { return _this._onFinish(); });
        }
        else {
            this.players.forEach(function (player) {
                player.onDone(function () {
                    if (++doneCount == total) {
                        _this._onFinish();
                    }
                });
                player.onDestroy(function () {
                    if (++destroyCount == total) {
                        _this._onDestroy();
                    }
                });
                player.onStart(function () {
                    if (++startCount == total) {
                        _this._onStart();
                    }
                });
            });
        }
        this.totalTime = this.players.reduce(function (time, player) { return Math.max(time, player.totalTime); }, 0);
    }
    AnimationGroupPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    AnimationGroupPlayer.prototype.init = function () { this.players.forEach(function (player) { return player.init(); }); };
    AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    AnimationGroupPlayer.prototype._onStart = function () {
        if (!this.hasStarted()) {
            this._started = true;
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
        }
    };
    AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    AnimationGroupPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };
    AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
    AnimationGroupPlayer.prototype.play = function () {
        if (!this.parentPlayer) {
            this.init();
        }
        this._onStart();
        this.players.forEach(function (player) { return player.play(); });
    };
    AnimationGroupPlayer.prototype.pause = function () { this.players.forEach(function (player) { return player.pause(); }); };
    AnimationGroupPlayer.prototype.restart = function () { this.players.forEach(function (player) { return player.restart(); }); };
    AnimationGroupPlayer.prototype.finish = function () {
        this._onFinish();
        this.players.forEach(function (player) { return player.finish(); });
    };
    AnimationGroupPlayer.prototype.destroy = function () { this._onDestroy(); };
    AnimationGroupPlayer.prototype._onDestroy = function () {
        if (!this._destroyed) {
            this._destroyed = true;
            this._onFinish();
            this.players.forEach(function (player) { return player.destroy(); });
            this._onDestroyFns.forEach(function (fn) { return fn(); });
            this._onDestroyFns = [];
        }
    };
    AnimationGroupPlayer.prototype.reset = function () {
        this.players.forEach(function (player) { return player.reset(); });
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    AnimationGroupPlayer.prototype.setPosition = function (p) {
        var timeAtPosition = p * this.totalTime;
        this.players.forEach(function (player) {
            var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
            player.setPosition(position);
        });
    };
    AnimationGroupPlayer.prototype.getPosition = function () {
        var min = 0;
        this.players.forEach(function (player) {
            var p = player.getPosition();
            min = Math.min(p, min);
        });
        return min;
    };
    AnimationGroupPlayer.prototype.beforeDestroy = function () {
        this.players.forEach(function (player) {
            if (player.beforeDestroy) {
                player.beforeDestroy();
            }
        });
    };
    /* @internal */
    AnimationGroupPlayer.prototype.triggerCallback = function (phaseName) {
        var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach(function (fn) { return fn(); });
        methods.length = 0;
    };
    return AnimationGroupPlayer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexiodialoguePaneComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        /*
           Properties
           name : button-size
           datatype :  string
           version : 4.2 onwards
           default :
           description : Different Sizes of Buttons availabe : large, default, small & xsmall
           */
        this.buttonsize = 'large' || 'small' || 'default' || 'xsmall';
        this.showChange = new EventEmitter();
        /*
           Events
           name : actionStatus
           datatype :  none
           version : none
           default : none
           description : Fire when click on yes or no button
           */
        this.actionStatus = new EventEmitter();
        /*
           Events
           name : onSuccess
           datatype :  none
           version : none
           default : none
           description : Fire when click on yes or no button
           */
        this.onSuccess = new EventEmitter();
        /*
           Events
           name : onFailure
           datatype :  none
           version : none
           default : none
           description : Fire when click on yes or no button
           */
        this.onCancel = new EventEmitter();
        /*
           Events
           name : close
           datatype :  none
           version : none
           default : none
           description : Fire when user close dialogue
           */
        this.close = new EventEmitter();
        this.value = 0;
        this.closable = true;
        this.secondaryactionlabel = 'Cancel';
        this.primaryactionlabel = 'Ok';
        this.custom = false;
        this.buttonsize = 'default';
        this.buttontype = 'theme-color';
        this.closeonescape = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.showdialogue) {
            this.show = this.showdialogue;
        }
        if (this.footeralign == null) {
            this.footeralign = 'right';
        }
        if (this.contentalign == null || this.contentalign === '') {
            this.contentalign = 'center';
        }
        if (this.type == null) {
            this.type = 'confirm';
        }
        this.defaultStyle = this.getDefaultStyle();
        this.buttontype = this.getStyle();
        this.componentId = this.createCompId('dialog', this.type);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.amexioFooter) {
            this.amexioFooter.toArray().forEach((footer) => {
                footer.footer = true;
            });
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['show']) {
            this.show = changes["show"].currentValue;
            this.escapeMethod();
        }
        else if (changes['showdialogue']) {
            this.show = changes["showdialogue"].currentValue;
            this.escapeMethod();
        }
    }
    /**
     * @return {?}
     */
    escapeMethod() {
        if (this.show && this.closeonescape) {
            this.globalListenFunc = this.renderer.listen('document', 'keyup.esc', (e) => {
                this.showdialogue = false;
                this.show = false;
                this.showChange.emit(false);
            });
        }
        else if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        if (this.closable) {
            this.showdialogue = false;
            this.show = false;
            this.showChange.emit(false);
            this.close.emit(false);
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    getStatus(v) {
        this.onCloseClick();
        this.actionStatus.emit(v);
        if (v === 'ok') {
            this.onSuccess.emit(v);
        }
        else {
            this.onCancel.emit(v);
        }
    }
    /**
     * @return {?}
     */
    getDefaultStyle() {
        if (this.materialDesign) {
            return 'transparent';
        }
        else {
            return 'defualt';
        }
    }
    /**
     * @return {?}
     */
    getStyle() {
        if (this.materialDesign) {
            this.buttontype = 'transparent';
            return this.buttontype;
        }
        else {
            return this.buttontype;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
    /**
     * @param {?} inputType
     * @param {?} name
     * @return {?}
     */
    createCompId(inputType, name) {
        return inputType + '_' + name + '_' + Math.floor(Math.random() * 1000 + 999);
    }
}
AmexiodialoguePaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dialogue',
                template: `
    <div class="root-window" *ngIf="show">
        <!-- Generate BG shade for below modal -->
    </div>

    <div class="dialogue-sm" [@animation]="{value: 'visible', params: {transitionParams: transitionOptions}}" *ngIf="show">
        <div role="dialog" attr.aria-labelledby="componentId" class="dialogue-content">
            <header [ngClass]="{'dialogue-material-design':materialDesign ,'dialogue-header':!materialDesign }">
                <div id="{{componentId}}" tabindex="1" class="dialogue-table">
                    <div class="tablerow">
                        <div class="tablecol">
                            {{title}}
                        </div>
                        <div tabindex="1" aria-label="close button" class="tablecol float-right">
                            <div *ngIf="closable" class="icon-style">
                                <amexio-c-icon [key]="'window_close'" (onClick)="onCloseClick()"></amexio-c-icon>
                            </div>
                        </div>
                    </div>
                </div>
            </header>
            <div class="dialogue-middle" [ngStyle]="{'text-align':custom ? contentalign :'center'}">
                <span role="dialog" attr.aria-labelledby="componentId" class="dialogue-icon">
            <span  [ngClass]="{'dialogue-success': messagetype  == 'help','dialogue-danger':messagetype  == 'error',
                          'dialogue-warning': messagetype  == 'warning'}"
              *ngIf="messagetype  || messagetype  != '' ">
              <amexio-c-icon [key]="'window-msgtype-'+ messagetype "></amexio-c-icon>
            </span>
                <ng-container *ngIf="!custom">
                    <span id="{{componentId}}" tabindex="1" class="dialogue-message">
                {{message}}
              </span>
                </ng-container>
                </span>
                <ng-container *ngIf="custom">
                    <ng-content select="amexio-body"></ng-content>
                </ng-container>

            </div>
            <footer *ngIf="custom" class="dialogue-footer" [ngClass]="{'flex-start':(footeralign=='left'),'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}">
                <ng-content select="amexio-action"></ng-content>
            </footer>

            <footer *ngIf="!custom" class="dialogue-footer" [ngClass]="{'dialogue-material-design-footer':materialDesign ,
                            'dialogue-footer':!materialDesign, 'flex-start':(footeralign=='left'),
                            'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}">
                <amexio-button *ngIf="type =='confirm'" [size]="buttonsize" [label]="secondaryactionlabel" [type]="defaultStyle" (onClick)="getStatus('cancel')"></amexio-button>
                <div class="custom-btn">
                    <amexio-button *ngIf="type =='confirm' || type == 'alert'" [size]="buttonsize" [label]="primaryactionlabel" [ngStyle]="{'color':materialDesign ? 'blue':'white'}" [type]="buttontype" (onClick)="getStatus('ok')">
                    </amexio-button>
                </div>

            </footer>
        </div>
    </div>
  `,
                animations: [
                    trigger('animation', [
                        state('void', style({
                            transform: 'translate3d(0, 25%, 0) scale(0.9)',
                            opacity: 0,
                        })),
                        state('visible', style({
                            transform: 'none',
                            opacity: 1,
                        })),
                        transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexiodialoguePaneComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexiodialoguePaneComponent.propDecorators = {
    closeonescape: [{ type: Input, args: ['close-on-escape',] }],
    buttontype: [{ type: Input, args: ['button-type',] }],
    buttonsize: [{ type: Input, args: ['button-size',] }],
    footeralign: [{ type: Input, args: ['footer-align',] }],
    contentalign: [{ type: Input, args: ['content-align',] }],
    showdialogue: [{ type: Input, args: ['show-dialogue',] }],
    show: [{ type: Input }],
    showChange: [{ type: Output }],
    closable: [{ type: Input }],
    title: [{ type: Input }],
    message: [{ type: Input }],
    custom: [{ type: Input }],
    type: [{ type: Input }],
    primaryactionlabel: [{ type: Input, args: ['primary-action-label',] }],
    secondaryactionlabel: [{ type: Input, args: ['secondary-action-label',] }],
    messagetype: [{ type: Input, args: ['message-type',] }],
    materialDesign: [{ type: Input, args: ['material-design',] }],
    actionStatus: [{ type: Output }],
    onSuccess: [{ type: Output }],
    onCancel: [{ type: Output }],
    close: [{ type: Output }],
    amexioFooter: [{ type: ContentChildren, args: [AmexioFooterComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioFieldSetComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.collapsible) {
            this.isActive = true;
        }
    }
    /**
     * @return {?}
     */
    onLegendClick() {
        if (this.collapsible) {
            this.isActive = !this.isActive;
        }
    }
}
AmexioFieldSetComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-fieldset',
                template: `
    <fieldset>
        <legend tabindex="1" (keyup.enter)="onLegendClick()" (keyup.space)="onLegendClick()" role="heading" aria-expanded=" true"
            *ngIf="(title && title.length>0) || collapsible " class="collapsible-legend" (click)="onLegendClick()">
            <ng-container *ngIf="!collapsible">
                {{title}}
            </ng-container>
            <ng-container *ngIf="collapsible && !isActive">
                <amexio-c-icon [attr.aria-exapnded]="isActive" style="padding-right:5px" key="fieldset_expand"></amexio-c-icon>{{title}}
            </ng-container>
            <ng-container *ngIf="collapsible && isActive">
                <amexio-c-icon style="padding-right:5px" key="fieldset_collpase"></amexio-c-icon>{{title}}
            </ng-container>
        </legend>
        <div class="collapsible-fieldset" [@fieldsetContent]="!isActive ? {value: 'hidden', params: {transitionParams: '400ms cubic-bezier(0.86, 0, 0.07, 1)'}} : {value: 'visible', params: {transitionParams: '400ms cubic-bezier(0.86, 0, 0.07, 1)'}}"
        [ngStyle]="{'overflow': isActive ? '': 'hidden'}">
            <ng-content></ng-content>
        </div>
    </fieldset> 
  `,
                animations: [
                    trigger('fieldsetContent', [
                        state('hidden', style({
                            height: '0px',
                        })),
                        state('visible', style({
                            height: '*',
                        })),
                        transition('visible => hidden', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hidden => visible', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioFieldSetComponent.ctorParameters = () => [];
AmexioFieldSetComponent.propDecorators = {
    collapsible: [{ type: Input }],
    title: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 11/23/17.
*/
const COMPONENT_CLASS_MAP = {
    primary: 'btn-primary-badge',
    secondary: 'btn-secondary-badge',
};
class AmexioButtonComponent {
    constructor() {
        /*
          Properties
          name : disabled
          datatype : boolean
          version : 4.0 onwards
          default : false
          description : Enable/Disables the button
          */
        this.disabled = false;
        /*
          Events
          name : onClick
          datatype :  none
          version : none
          default : none
          description : Fire when button click
          */
        this.onClick = new EventEmitter();
        this.bgBorderColor = '';
        this.badgeCssClass = '';
        this.ispressed = false;
        this.bgColorClass = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    buttonClick(event) {
        this.ispressed = !this.ispressed;
        if (!this.disabled) {
            this.onClick.emit(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.getBGStyle() !== null) {
            this.bgColorClass = this.getBGStyle();
        }
        this.badgeCssClass = this.badgeClass();
    }
    /**
     * @return {?}
     */
    badgeClass() {
        let /** @type {?} */ className = '';
        if (this.type === 'primary' || this.type === 'theme-color') {
            className = 'btn-primary-badge';
        }
        if (this.type === 'secondary' || this.type === 'theme-backgroundcolor') {
            className = 'btn-secondary-badge';
        }
        if (this.type === 'success' || this.type === 'green') {
            className = 'btn-success-badge';
        }
        if (this.type === 'danger' || this.type === 'red') {
            className = 'btn-danger-badge';
        }
        if (this.type === 'warning' || this.type === 'yellow') {
            className = 'btn-warning-badge';
        }
        if (this.type === 'transparent') {
            className = 'btn-transparent-badge';
        }
        return className;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    setDisabled(disabled) {
        this.disabled = disabled;
    }
    /**
     * @return {?}
     */
    getBGStyle() {
        if (this.bgcolor && this.color) {
            this.type = 'default';
            this.bgBorderColor = 'none';
            return {
                'background-color': this.bgcolor,
                'color': this.color,
            };
        }
        return null;
    }
}
AmexioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-button',
                template: `
    <button #button class="button" role="button" tabindex="1" [attr.aria-pressed]="ispressed" [ngStyle]="{'cursor': disabled ? 'not-allowed':'pointer','background-color':bgcolor,'color':color,'box-shadow':bgBorderColor}" ng-disabled="disabled ? true: null"
        [attr.title]="tooltip" [ngClass]="{'button-default': size=='default'
            || size ==null,
            'button-small': size=='small',
            'button-large' : size=='large',
            'button-block': block==true ,
            'button-primary' : (type == 'primary' || type == 'theme-color') && disabled == false,
            'button-secondary' : type == 'secondary' || type == 'theme-backgroundcolor' && disabled == false,
            'button-success' : type == 'success' || type == 'green' && disabled == false,
            'button-danger' : type=='danger' || type == 'red' && disabled == false,
            'button-warning' : type=='warning' || type == 'yellow' && disabled == false,
            'button-transparent' : type=='transparent' && disabled == false,
            'disabled' : (type =='transparent' && disabled) || (type == 'secondary' || type == 'theme-backgroundcolor') && disabled,
            'button-primary-disabled' : (type == 'primary' || type == 'theme-color') && disabled,
            'button-success-disabled' : (type == 'success' || type == 'green') && disabled,
            'button-danger-disabled' : (type == 'danger' || type == 'red') && disabled,
            'button-warning-disabled' : (type == 'warning' || type == 'yellow') && disabled}" (click)="buttonClick($event)">
            <span class="button-text">
              <span style="padding-right: 5px;" *ngIf="icon">
                <amexio-c-icon [customclass]="icon" [label]="label">
                </amexio-c-icon>
              </span>
              <span style="padding-right: 5px;" *ngIf="loading">
                <amexio-c-icon key="button-loading-icon" [label]="label"></amexio-c-icon>
              </span>
              <ng-container *ngIf="!icon">{{label}}</ng-container>

              <ng-container *ngIf="badge">
                <span [ngClass]="badgeCssClass" >{{badge}}</span>
             </ng-container>
          </span>


    </button>
  `,
                styles: [`

  `],
            },] },
];
/** @nocollapse */
AmexioButtonComponent.ctorParameters = () => [];
AmexioButtonComponent.propDecorators = {
    label: [{ type: Input }],
    badge: [{ type: Input, args: ['badge',] }],
    icon: [{ type: Input }],
    type: [{ type: Input }],
    tooltip: [{ type: Input }],
    disabled: [{ type: Input }],
    formbind: [{ type: Input, args: ['form-bind',] }],
    size: [{ type: Input }],
    loading: [{ type: Input }],
    onClick: [{ type: Output }],
    block: [{ type: Input }],
    bgcolor: [{ type: Input, args: ['bg-color',] }],
    color: [{ type: Input, args: ['color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioButtonGroupComponent {
    constructor() {
        /* for internal use*/
        this._buttonGroupLocalData = [];
        this.ispressed = false;
        this.getButton = new EventEmitter();
        this.buttons = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set buttonGroupLocalData(value) {
        this._buttonGroupLocalData = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get buttonGroupLocalData() {
        return this._buttonGroupLocalData;
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.buttonGroupPreviewData) !== JSON.stringify(this.buttonGroupLocalData)) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.buttons = this.buttonGroupLocalData;
            this.setButtonSizes(this.buttons);
        }
    }
    /**
     * @param {?} change
     * @return {?}
     */
    ngOnChanges(change) {
        if (change["size"] && !change["size"].isFirstChange()) {
            this.updateButtonSizes(change["size"]);
        }
    }
    /**
     * @param {?} clickEvent
     * @param {?} btnObj
     * @return {?}
     */
    buttonGroupClick(clickEvent, btnObj) {
        this.ispressed = !this.ispressed;
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.getButton.emit({ event: clickEvent, buttonObject: btnObj });
        }
        else {
            btnObj.onClick.emit(clickEvent);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.buttons = this.buttonGroupLocalData;
        }
        else {
            this.buttons = this.btns.toArray();
            this.addBadgeCssClass();
        }
        this.setButtonSizes(this.buttons);
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    addBadgeCssClass() {
        this.buttons.forEach((btn) => {
            btn.badgeCssClass = this.badgeClass(btn);
        });
    }
    /**
     * @param {?} button
     * @return {?}
     */
    badgeClass(button) {
        let /** @type {?} */ btnStyleClass = '';
        switch (button.type) {
            case 'primary': {
                return 'btn-group-primary-badge';
            }
            case 'theme-color': {
                return 'btn-group-primary-badge';
            }
            case 'secondary': {
                return 'btn-group-secondary-badge';
            }
            case 'theme-backgroundcolor': {
                return 'btn-group-secondary-badge';
            }
            case 'success': {
                return 'btn-group-success-badge';
            }
            case 'green': {
                return 'btn-group-success-badge';
            }
        }
        btnStyleClass = this.badgeMoreClass(button);
        return btnStyleClass;
    }
    /**
     * @param {?} btnArray
     * @return {?}
     */
    setButtonSizes(btnArray) {
        if (btnArray.length > 0) {
            btnArray.forEach((btn) => {
                btn.size = this.size;
            });
        }
    }
    /**
     * @param {?} button
     * @return {?}
     */
    badgeMoreClass(button) {
        let /** @type {?} */ className = '';
        if (button.type === 'danger' || button.type === 'red') {
            className = 'btn-group-danger-badge';
        }
        if (button.type === 'warning' || button.type === 'yellow') {
            className = 'btn-group-warning-badge';
        }
        if (button.type === 'transparent') {
            className = 'btn-group-transparent-badge';
        }
        return className;
    }
    /**
     * @param {?} size
     * @return {?}
     */
    updateButtonSizes(size) {
        this.buttons.forEach((btn) => {
            btn.size = size;
        });
    }
}
AmexioButtonGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-group',
                template: `
    <div class="btn-group">
      <ng-container *ngFor="let button of buttons">
          <button [ngStyle]="{'cursor': disabled ? 'not-allowed':'pointer','background-color':button.bgcolor,'color':button.color,'box-shadow':bgBorderColor}" 
          role="button" tabindex="1" [attr.aria-pressed]="ispressed" [attr.disabled]="button.disabled ? true: null" [attr.title]="button.tooltip" 
          (click)="buttonGroupClick($event,button)" 
      [ngClass]="{'button-default': button.size=='default'
      || size ==null,
      'button-small': button.size=='small',
      'button-large' : button.size=='large',
      'button-block': button.block==true ,
      'button-primary' : (button.type == 'primary' || button.type == 'theme-color') && button.disabled == false,
      'button-secondary' : button.type == 'secondary' || button.type == 'theme-backgroundcolor' && button.disabled == false,
      'button-success' : button.type == 'success' || button.type == 'green' && button.disabled == false,
      'button-danger' : button.type =='danger' || button.type == 'red' && button.disabled == false,
      'button-warning' : button.type =='warning' || button.type == 'yellow' && button.disabled == false,
      'button-transparent' : button.type=='transparent' && button.disabled == false,
      'disabled' : (button.type =='transparent' && button.disabled) || (button.type == 'secondary' || button.type == 'theme-backgroundcolor') && disabled,
      'button-primary-disabled' : (button.type == 'primary' || button.type == 'theme-color') && button.disabled,
      'button-success-disabled' : (button.type == 'success' || button.type == 'green') && button.disabled,
      'button-danger-disabled' : (button.type == 'danger' || button.type == 'red') && button.disabled,
      'button-warning-disabled' : (button.type == 'warning' || button.type == 'yellow') && button.disabled}">
        <ng-container *ngIf="button.icon!=null">
          <amexio-c-icon style="padding-right: 5px;" [customclass]="button.icon"></amexio-c-icon>
        </ng-container>

        {{button.label}}
        <ng-container *ngIf="button.badge">
          <span [ngClass]="button.badgeCssClass" >{{button.badge}}</span>
       </ng-container>
      </button>
      </ng-container>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioButtonGroupComponent.ctorParameters = () => [];
AmexioButtonGroupComponent.propDecorators = {
    size: [{ type: Input }],
    buttonGroupLocalData: [{ type: Input, args: ['buttonGroupLocalData',] }],
    badge: [{ type: Input, args: ['badge',] }],
    getButton: [{ type: Output }],
    btns: [{ type: ContentChildren, args: [AmexioButtonComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Component Name : Amexio Form Action
* Component Selector : <amexio-form-action>
* Component Description : Amexio Form actions contains the action items within form
*/
class AmexioFormActionComponent {
    constructor() {
        this.buttons = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.btns.length > 0) {
            this.buttons = this.btns.toArray();
        }
        else if (this.btngrp.length > 0) {
            this.buttons = this.btngrp.toArray()[0].buttons;
        }
    }
}
AmexioFormActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-form-action', template: '<ng-content></ng-content>',
            },] },
];
/** @nocollapse */
AmexioFormActionComponent.ctorParameters = () => [];
AmexioFormActionComponent.propDecorators = {
    padding: [{ type: Input }],
    btns: [{ type: ContentChildren, args: [AmexioButtonComponent,] }],
    btngrp: [{ type: ContentChildren, args: [AmexioButtonGroupComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioFormBodyComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioFormBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-form-body', template: '<ng-content></ng-content>',
            },] },
];
/** @nocollapse */
AmexioFormBodyComponent.ctorParameters = () => [];
AmexioFormBodyComponent.propDecorators = {
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*Created by ashwini on 01/03/19.
*/
class LifeCycleBaseComponent {
    constructor() {
        this.initiated = new EventEmitter();
        this.ready = new EventEmitter();
        this.destroy = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.enableLifeCycleEvents === 'all' || this.enableLifeCycleEvents === 'init') {
            this.lifeCycleInit();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.enableLifeCycleEvents === 'all' || this.enableLifeCycleEvents === 'ready') {
            this.lifeCycleAfterViewInit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.enableLifeCycleEvents === 'all' || this.enableLifeCycleEvents === 'destroy') {
            this.lifeCycleDestroy();
        }
    }
    /**
     * @return {?}
     */
    lifeCycleInit() {
        this.initiated.emit();
    }
    /**
     * @return {?}
     */
    lifeCycleAfterViewInit() {
        this.ready.emit();
    }
    /**
     * @return {?}
     */
    lifeCycleDestroy() {
        this.destroy.emit();
    }
}
LifeCycleBaseComponent.propDecorators = {
    enableLifeCycleEvents: [{ type: Input, args: ['enable-lifecycle-events',] }],
    initiated: [{ type: Output }],
    ready: [{ type: Output }],
    destroy: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioFormGroupDirective {
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.modelsarray = this.models.toArray();
    }
}
AmexioFormGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[form-group]',
            },] },
];
AmexioFormGroupDirective.propDecorators = {
    group: [{ type: Input, args: ['form-group',] }],
    models: [{ type: ContentChildren, args: [NgModel, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioFormHeaderComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioFormHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-form-header', template: `
        <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioFormHeaderComponent.ctorParameters = () => [];
AmexioFormHeaderComponent.propDecorators = {
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioFormComponent extends LifeCycleBaseComponent {
    /**
     * @param {?} formBuilder
     */
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        /*
        Properties
        name : show-error
        datatype : boolean
        version : 4.2 onwards
        default : false
        description : Flag to show form invalid error messages
        */
        this.showError = false;
        /*
        Events
        name : showErrorMsg
        datatype : any
        version : none
        default :
        description : Event fired if showError msg info button is clicked
        */
        this.showErrorMsg = new EventEmitter();
        this.componentError = [];
        this.checkForm = false;
        this.isFormValid = false;
        this.showDialogue = false;
        this.headeralign = 'left';
        this.footeralign = 'right';
        this.errorMsgArray = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // FOR HEADER PADING
        this.headerComponentList = this.amexioHeader.toArray();
        this.headerComponentList.forEach((item, currentIndex) => {
            if (item.padding) {
                this.headerPadding = item.padding;
            }
        });
        // FOR BODY PADDING
        this.bodyComponentList = this.amexioBody.toArray();
        this.bodyComponentList.forEach((item, currentIndex) => {
            if (item.padding) {
                this.bodyPadding = item.padding;
            }
        });
        // FOR FOOTER PADDING
        this.footerComponentList = this.amexioFooter.toArray();
        this.footerComponentList.forEach((item, currentIndex) => {
            if (item.padding) {
                this.footerPadding = item.padding;
            }
        });
    }
    /**
     * @return {?}
     */
    onResize() {
        if (this.bodyheight) {
            let /** @type {?} */ h = (window.innerHeight / 100) * this.bodyheight;
            if (this.formHeader && this.formHeader.nativeElement && this.formHeader.nativeElement.offsetHeight) {
                h = h - this.formHeader.nativeElement.offsetHeight;
            }
            if (this.formFooter && this.formFooter.nativeElement && this.formFooter.nativeElement.offsetHeight) {
                h = h - this.formFooter.nativeElement.offsetHeight;
            }
            if (this.bodyheight === 100) {
                h = h - 40;
            }
            this.minHeight = h;
            this.height = h;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buttons = [];
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const /** @type {?} */ ngContentModels = this.models.toArray();
        const /** @type {?} */ innerModelArray = [];
        this.fb.forEach((fbnode) => {
            const /** @type {?} */ modelarray = fbnode.modelsarray;
            const /** @type {?} */ fgc = {};
            modelarray.forEach((m) => {
                fgc[m.name] = m.control;
                innerModelArray.push(m);
            });
            const /** @type {?} */ grp = this.formBuilder.group(fgc);
            this.form.form.registerControl(fbnode.group, grp);
        });
        ngContentModels.forEach((model) => {
            if (!this.isFieldPresentInParentAndChildBoth(innerModelArray, model.name)) {
                if (!model.name || model.name === null) {
                    model.name = model.valueAccessor['name'];
                }
                this.form.control.registerControl(model.name, model.control);
            }
        });
        this.clearTimeout = setTimeout(() => {
            this.form.form.updateValueAndValidity();
        }, 100);
        this.btns.toArray().forEach((btnCom) => {
            if ((btnCom.formbind === this.fname) && !btnCom.disabled) {
                this.buttons.push(btnCom);
            }
        });
        this.validateForm();
        this.onResize();
    }
    /**
     * @param {?} innerModelArray
     * @param {?} name
     * @return {?}
     */
    isFieldPresentInParentAndChildBoth(innerModelArray, name) {
        let /** @type {?} */ isPresent = false;
        innerModelArray.forEach((innerModel) => {
            if (name === innerModel.name) {
                isPresent = true;
            }
        });
        return isPresent;
    }
    /**
     * @return {?}
     */
    closeDialogue() {
        this.showDialogue = !this.showDialogue;
    }
    /**
     * @return {?}
     */
    addErrorMsg() {
        if (this.form && this.form.status === 'INVALID') {
            for (const [key, value] of Object.entries(this.form.controls)) {
                if (value && value.status === 'INVALID') {
                    const /** @type {?} */ errorObject = {};
                    errorObject['label'] = key;
                    this.errorMsgArray.push(errorObject);
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showErrors(event) {
        this.errorMsgArray = [];
        this.addErrorMsg();
        this.showDialogue = !this.isFormValid;
        if (!this.isFormValid) {
            this.showDialogue = true;
        }
        else {
            this.showDialogue = false;
        }
    }
    /**
     * @return {?}
     */
    validateForm() {
        if (this.form && this.form.status === 'INVALID') {
            this.disableButton(true);
        }
        else {
            this.disableButton(false);
        }
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    disableButton(flag) {
        this.buttons.forEach((btn) => {
            btn.disabled = flag;
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.validateForm();
    }
    /**
     * @return {?}
     */
    findformStyleClass() {
        if (this.headeralign === 'right') {
            return 'flex-end';
        }
        if (this.headeralign === 'left') {
            return 'flex-start';
        }
        if (this.headeralign === 'center') {
            return 'flex-center';
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        clearTimeout(this.clearTimeout);
    }
}
AmexioFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-form',
                template: `
    <form name="fname" class="form-container form-group" (window:resize)="onResize()">

        <header #formHeader class="form-header" [style.padding]="headerPadding" *ngIf="header" [ngClass]="findformStyleClass()">
            <ng-content select="amexio-form-header"></ng-content>
        </header>

        <div class="form-body formbody" [style.padding]="bodyPadding" [ngStyle]="{'height.px' : height,'overflow-y' : height!= null ? 'auto' : '','min-height.px' : minHeight}">
            <ng-content select="amexio-form-body"></ng-content>
        </div>

        <footer #formFooter class="form-footer" [style.padding]="footerPadding" [ngClass]="{'flex-start':(footeralign=='left'),'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}">
            <ng-content select="amexio-form-action"></ng-content>
            <br/>
            <div *ngIf="!form.valid" style="padding: 5px;">
                <button class="button" [attr.title]="'click'" (click)="showErrors($event)" [ngClass]="'button-warning button-small button-round'">
                            <span class="button-text">
                              <span style="padding-right: 5px;" *ngIf="icon">
                                <amexio-c-icon [customclass]="icon" >
                                </amexio-c-icon>
                              </span>
                              <span style="padding-right: 5px;" *ngIf="loading">
                                <amexio-c-icon key="button-loading-icon"></amexio-c-icon>
                              </span>
                              ?
                            </span>
                    </button>
                <amexio-dialogue [close-on-escape]="true" [(show)]="showDialogue" [custom]="true" [content-align]="'left'" [closable]="false" [title]="'Invalid Fields'" [type]="'confirm'">

                    <amexio-body *ngFor="let msg of errorMsgArray let index=index">
                        <amexio-label>{{index+1}}) {{msg.label}}</amexio-label><br>
                    </amexio-body>

                    <amexio-action>
                        <amexio-button type="primary" (onClick)="closeDialogue()" [label]="'OK'">
                        </amexio-button>
                    </amexio-action>
                </amexio-dialogue>
            </div>
        </footer>
    </form>
  `,
            },] },
];
/** @nocollapse */
AmexioFormComponent.ctorParameters = () => [
    { type: FormBuilder }
];
AmexioFormComponent.propDecorators = {
    headeralign: [{ type: Input, args: ['header-align',] }],
    footeralign: [{ type: Input, args: ['footer-align',] }],
    fname: [{ type: Input, args: ['form-name',] }],
    header: [{ type: Input, args: ['header',] }],
    showError: [{ type: Input, args: ['show-error',] }],
    height: [{ type: Input }],
    minHeight: [{ type: Input, args: ['min-height',] }],
    bodyheight: [{ type: Input, args: ['body-height',] }],
    formHeader: [{ type: ViewChild, args: ['formHeader', { read: ElementRef },] }],
    formFooter: [{ type: ViewChild, args: ['formFooter', { read: ElementRef },] }],
    showErrorMsg: [{ type: Output }],
    amexioHeader: [{ type: ContentChildren, args: [AmexioFormHeaderComponent,] }],
    amexioBody: [{ type: ContentChildren, args: [AmexioFormBodyComponent,] }],
    amexioFooter: [{ type: ContentChildren, args: [AmexioFormActionComponent,] }],
    btns: [{ type: ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
    form: [{ type: ViewChild, args: [NgForm,] }],
    models: [{ type: ContentChildren, args: [NgModel, { descendants: true },] }],
    fb: [{ type: ContentChildren, args: [AmexioFormGroupDirective, { descendants: true },] }]
};

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var isFunction_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isFunction(x) {
    return typeof x === 'function';
}
exports.isFunction = isFunction;

});

unwrapExports(isFunction_1);

var config$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _enable_super_gross_mode_that_will_cause_bad_things = false;
/**
 * The global configuration object for RxJS, used to configure things
 * like what Promise contructor should used to create Promises
 */
exports.config = {
    /**
     * The promise constructor used by default for methods such as
     * {@link toPromise} and {@link forEach}
     */
    Promise: undefined,
    /**
     * If true, turns on synchronous error rethrowing, which is a deprecated behavior
     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
     * call in a try/catch block. It also enables producer interference, a nasty bug
     * where a multicast can be broken for all observers by a downstream consumer with
     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME
     * FOR MIGRATION REASONS.
     */
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            var error = new Error();
            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};

});

unwrapExports(config$1);

var hostReportError_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Throws an error on another job so that it's picked up by the runtime's
 * uncaught error handling mechanism.
 * @param err the error to throw
 */
function hostReportError(err) {
    setTimeout(function () { throw err; });
}
exports.hostReportError = hostReportError;

});

unwrapExports(hostReportError_1);

var Observer = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


exports.empty = {
    closed: true,
    next: function (value) { },
    error: function (err) {
        if (config$1.config.useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            hostReportError_1.hostReportError(err);
        }
    },
    complete: function () { }
};

});

unwrapExports(Observer);

var isArray$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });

});

unwrapExports(isArray$1);

var isObject_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isObject(x) {
    return x != null && typeof x === 'object';
}
exports.isObject = isObject;

});

unwrapExports(isObject_1);

var errorObject$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// typeof any so that it we don't have to cast when comparing a result to the error object
exports.errorObject = { e: {} };

});

unwrapExports(errorObject$1);

var tryCatch_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject$1.errorObject.e = e;
        return errorObject$1.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
exports.tryCatch = tryCatch;

});

unwrapExports(tryCatch_1);

var UnsubscriptionError_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = /** @class */ (function (_super) {
    __extends(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        var _this = _super.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '') || this;
        _this.errors = errors;
        _this.name = 'UnsubscriptionError';
        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);
        return _this;
    }
    return UnsubscriptionError;
}(Error));
exports.UnsubscriptionError = UnsubscriptionError;

});

unwrapExports(UnsubscriptionError_1);

var Subscription_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });






/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = /** @class */ (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        /** @internal */
        this._parent = null;
        /** @internal */
        this._parents = null;
        /** @internal */
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject$1.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject$1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject$1.errorObject.e.errors) : [errorObject$1.errorObject.e]);
            }
        }
        if (isArray$1.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject$1.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject$1.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    /** @internal */
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    /** @nocollapse */
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
exports.Subscription = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}

});

unwrapExports(Subscription_1);

var rxSubscriber$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')
    ? Symbol.for('rxSubscriber')
    : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;

});

unwrapExports(rxSubscriber$1);

var Subscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = /** @class */ (function (_super) {
    __extends(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        var _this = _super.call(this) || this;
        /** @internal */ _this.syncErrorValue = null;
        /** @internal */ _this.syncErrorThrown = false;
        /** @internal */ _this.syncErrorThrowable = false;
        _this.isStopped = false;
        switch (arguments.length) {
            case 0:
                _this.destination = Observer.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    _this.destination = Observer.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in
                    // node_modules, we cannot rely on `instanceof` checks
                    if (isTrustedSubscriber(destinationOrNext)) {
                        var trustedSubscriber = destinationOrNext[rxSubscriber$1.rxSubscriber]();
                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;
                        _this.destination = trustedSubscriber;
                        trustedSubscriber.add(_this);
                    }
                    else {
                        _this.syncErrorThrowable = true;
                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
                    }
                    break;
                }
            default:
                _this.syncErrorThrowable = true;
                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
                break;
        }
        return _this;
    }
    Subscriber.prototype[rxSubscriber$1.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     * @nocollapse
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
exports.Subscriber = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = /** @class */ (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        _this._parentSubscriber = _parentSubscriber;
        var next;
        var context = _this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    _this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = _this.unsubscribe.bind(_this);
            }
        }
        _this._context = context;
        _this._next = next;
        _this._error = error;
        _this._complete = complete;
        return _this;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!config$1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            var useDeprecatedSynchronousErrorHandling = config$1.config.useDeprecatedSynchronousErrorHandling;
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                hostReportError_1.hostReportError(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    hostReportError_1.hostReportError(err);
                }
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!config$1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (config$1.config.useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                hostReportError_1.hostReportError(err);
            }
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        if (!config$1.config.useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (config$1.config.useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                hostReportError_1.hostReportError(err);
                return true;
            }
        }
        return false;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));
function isTrustedSubscriber(obj) {
    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber$1.rxSubscriber]);
}

});

unwrapExports(Subscriber_1);

var toSubscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber$1.rxSubscriber]) {
            return nextOrObserver[rxSubscriber$1.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
exports.toSubscriber = toSubscriber;

});

unwrapExports(toSubscriber_1);

var observable$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** Symbol.observable or a string "@@observable". Used for interop */
exports.observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';

});

unwrapExports(observable$1);

var noop_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-empty */
function noop() { }
exports.noop = noop;

});

unwrapExports(noop_1);

var pipe_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/* tslint:enable:max-line-length */
function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
exports.pipe = pipe;
/* @internal */
function pipeFromArray(fns) {
    if (!fns) {
        return noop_1.noop;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
exports.pipeFromArray = pipeFromArray;

});

unwrapExports(pipe_1);

var Observable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




/**
 * A representation of any set of values over any amount of time. This is the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = /** @class */ (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        /** Internal implementation detail, do not use directly. */
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remove this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2.5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (config$1.config.useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (config$1.config.useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Observable.prototype._subscribe = function (subscriber) {
        var source = this.source;
        return source && source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable$1.observable] = function () {
        return this;
    };
    /* tslint:enable:max-line-length */
    /**
     * Used to stitch together functional operators into a chain.
     * @method pipe
     * @return {Observable} the Observable result of all of the operators having
     * been called in the order they were passed in.
     *
     * @example
     *
     * import { map, filter, scan } from 'rxjs/operators';
     *
     * Rx.Observable.interval(1000)
     *   .pipe(
     *     filter(x => x % 2 === 0),
     *     map(x => x + x),
     *     scan((acc, x) => acc + x)
     *   )
     *   .subscribe(x => console.log(x))
     */
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        if (operations.length === 0) {
            return this;
        }
        return pipe_1.pipeFromArray(operations)(this);
    };
    /* tslint:enable:max-line-length */
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     * @nocollapse
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
exports.Observable = Observable;
/**
 * Decides between a passed promise constructor from consuming code,
 * A default configured promise constructor, and the native promise
 * constructor and returns it. If nothing can be found, it will throw
 * an error.
 * @param promiseCtor The optional promise constructor to passed by consuming code
 */
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = config$1.config.Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}

});

unwrapExports(Observable_1);

var ObjectUnsubscribedError_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = /** @class */ (function (_super) {
    __extends(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var _this = _super.call(this, 'object unsubscribed') || this;
        _this.name = 'ObjectUnsubscribedError';
        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);
        return _this;
    }
    return ObjectUnsubscribedError;
}(Error));
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;

});

unwrapExports(ObjectUnsubscribedError_1);

var SubjectSubscription_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = /** @class */ (function (_super) {
    __extends(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        var _this = _super.call(this) || this;
        _this.subject = subject;
        _this.subscriber = subscriber;
        _this.closed = false;
        return _this;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
exports.SubjectSubscription = SubjectSubscription;

});

unwrapExports(SubjectSubscription_1);

var Subject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = /** @class */ (function (_super) {
    __extends(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.destination = destination;
        return _this;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
exports.SubjectSubscriber = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = /** @class */ (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.observers = [];
        _this.closed = false;
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype[rxSubscriber$1.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    /**@nocollapse */
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
exports.Subject = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = /** @class */ (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
exports.AnonymousSubject = AnonymousSubject;

});

unwrapExports(Subject_1);

var refCount_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
exports.refCount = refCount;
var RefCountOperator = /** @class */ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /** @class */ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));

});

unwrapExports(refCount_1);

var ConnectableObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });





/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = /** @class */ (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._refCount = 0;
        /** @internal */
        _this._isComplete = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount_1.refCount()(this);
    };
    return ConnectableObservable;
}(Observable_1.Observable));
exports.ConnectableObservable = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
exports.connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = /** @class */ (function (_super) {
    __extends(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = /** @class */ (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = /** @class */ (function (_super) {
    __extends(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        var _this = _super.call(this, destination) || this;
        _this.connectable = connectable;
        return _this;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));

});

unwrapExports(ConnectableObservable_1);

var groupBy_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });




/* tslint:enable:max-line-length */
/**
 * Groups the items emitted by an Observable according to a specified criterion,
 * and emits these grouped items as `GroupedObservables`, one
 * {@link GroupedObservable} per group.
 *
 * <img src="./img/groupBy.png" width="100%">
 *
 * @example <caption>Group objects by id and return as array</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs3'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *     )
 *     .groupBy(p => p.id)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // [ { id: 1, name: 'aze1' },
 * //   { id: 1, name: 'erg1' },
 * //   { id: 1, name: 'df1' } ]
 * //
 * // [ { id: 2, name: 'sf2' },
 * //   { id: 2, name: 'dg2' },
 * //   { id: 2, name: 'sfqfb2' },
 * //   { id: 2, name: 'qsgqsfg2' } ]
 * //
 * // [ { id: 3, name: 'qfs3' } ]
 *
 * @example <caption>Pivot data on the id field</caption>
 * Observable.of<Obj>({id: 1, name: 'aze1'},
 *                    {id: 2, name: 'sf2'},
 *                    {id: 2, name: 'dg2'},
 *                    {id: 1, name: 'erg1'},
 *                    {id: 1, name: 'df1'},
 *                    {id: 2, name: 'sfqfb2'},
 *                    {id: 3, name: 'qfs1'},
 *                    {id: 2, name: 'qsgqsfg2'}
 *                   )
 *     .groupBy(p => p.id, p => p.name)
 *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], ["" + group$.key]))
 *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))
 *     .subscribe(p => console.log(p));
 *
 * // displays:
 * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }
 * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }
 * // { id: 3, values: [ 'qfs1' ] }
 *
 * @param {function(value: T): K} keySelector A function that extracts the key
 * for each item.
 * @param {function(value: T): R} [elementSelector] A function that extracts the
 * return element for each item.
 * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]
 * A function that returns an Observable to determine how long each group should
 * exist.
 * @return {Observable<GroupedObservable<K,R>>} An Observable that emits
 * GroupedObservables, each of which corresponds to a unique key value and each
 * of which emits those items from the source Observable that share that key
 * value.
 * @method groupBy
 * @owner Observable
 */
function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return function (source) {
        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
    };
}
exports.groupBy = groupBy;
var GroupByOperator = /** @class */ (function () {
    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    GroupByOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    };
    return GroupByOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupBySubscriber = /** @class */ (function (_super) {
    __extends(GroupBySubscriber, _super);
    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        var _this = _super.call(this, destination) || this;
        _this.keySelector = keySelector;
        _this.elementSelector = elementSelector;
        _this.durationSelector = durationSelector;
        _this.subjectSelector = subjectSelector;
        _this.groups = null;
        _this.attemptedToUnsubscribe = false;
        _this.count = 0;
        return _this;
    }
    GroupBySubscriber.prototype._next = function (value) {
        var key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    };
    GroupBySubscriber.prototype._group = function (value, key) {
        var groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        var group = groups.get(key);
        var element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject());
            groups.set(key, group);
            var groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                var duration = void 0;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    };
    GroupBySubscriber.prototype._error = function (err) {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    };
    GroupBySubscriber.prototype._complete = function () {
        var groups = this.groups;
        if (groups) {
            groups.forEach(function (group, key) {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    };
    GroupBySubscriber.prototype.removeGroup = function (key) {
        this.groups.delete(key);
    };
    GroupBySubscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                _super.prototype.unsubscribe.call(this);
            }
        }
    };
    return GroupBySubscriber;
}(Subscriber_1.Subscriber));
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var GroupDurationSubscriber = /** @class */ (function (_super) {
    __extends(GroupDurationSubscriber, _super);
    function GroupDurationSubscriber(key, group, parent) {
        var _this = _super.call(this, group) || this;
        _this.key = key;
        _this.group = group;
        _this.parent = parent;
        return _this;
    }
    GroupDurationSubscriber.prototype._next = function (value) {
        this.complete();
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupDurationSubscriber.prototype._unsubscribe = function () {
        var _a = this, parent = _a.parent, key = _a.key;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    };
    return GroupDurationSubscriber;
}(Subscriber_1.Subscriber));
/**
 * An Observable representing values belonging to the same group represented by
 * a common key. The values emitted by a GroupedObservable come from the source
 * Observable. The common key is available as the field `key` on a
 * GroupedObservable instance.
 *
 * @class GroupedObservable<K, T>
 */
var GroupedObservable = /** @class */ (function (_super) {
    __extends(GroupedObservable, _super);
    /** @deprecated Do not construct this type. Internal use only */
    function GroupedObservable(key, groupSubject, refCountSubscription) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this.groupSubject = groupSubject;
        _this.refCountSubscription = refCountSubscription;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    GroupedObservable.prototype._subscribe = function (subscriber) {
        var subscription = new Subscription_1.Subscription();
        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    };
    return GroupedObservable;
}(Observable_1.Observable));
exports.GroupedObservable = GroupedObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerRefCountSubscription = /** @class */ (function (_super) {
    __extends(InnerRefCountSubscription, _super);
    function InnerRefCountSubscription(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        parent.count++;
        return _this;
    }
    InnerRefCountSubscription.prototype.unsubscribe = function () {
        var parent = this.parent;
        if (!parent.closed && !this.closed) {
            _super.prototype.unsubscribe.call(this);
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    };
    return InnerRefCountSubscription;
}(Subscription_1.Subscription));

});

unwrapExports(groupBy_1);

var BehaviorSubject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = /** @class */ (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated This is an internal implementation detail, do not use. */
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
exports.BehaviorSubject = BehaviorSubject;

});

unwrapExports(BehaviorSubject_1);

var Action_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * A unit of work to be executed in a {@link Scheduler}. An action is typically
 * created from within a Scheduler and an RxJS user does not need to concern
 * themselves about creating and manipulating an Action.
 *
 * ```ts
 * class Action<T> extends Subscription {
 *   new (scheduler: Scheduler, work: (state?: T) => void);
 *   schedule(state?: T, delay: number = 0): Subscription;
 * }
 * ```
 *
 * @class Action<T>
 */
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    /**
     * Schedules this action on its parent Scheduler for execution. May be passed
     * some context object, `state`. May happen at some point in the future,
     * according to the `delay` parameter, if specified.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler.
     * @return {void}
     */
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription_1.Subscription));
exports.Action = Action;

});

unwrapExports(Action_1);

var AsyncAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsyncAction = /** @class */ (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        // Always replace the current state with the new state.
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        //
        // Important implementation note:
        //
        // Actions only execute once by default, unless rescheduled from within the
        // scheduled callback. This allows us to implement single and repeat
        // actions via the same code path, without adding API surface area, as well
        // as mimic traditional recursion but across asynchronous boundaries.
        //
        // However, JS runtimes and timers distinguish between intervals achieved by
        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
        // serial `setTimeout` calls can be individually delayed, which delays
        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
        // guarantee the interval callback will be invoked more precisely to the
        // interval period, regardless of load.
        //
        // Therefore, we use `setInterval` to schedule single and repeat actions.
        // If the action reschedules itself with the same delay, the interval is not
        // canceled. If the action doesn't reschedule, or reschedules with a
        // different delay, the interval will be canceled after scheduled callback
        // execution.
        //
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        // Set the pending flag indicating that this action has been scheduled, or
        // has recursively rescheduled itself.
        this.pending = true;
        this.delay = delay;
        // If this action has already an async Id, don't request a new one.
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If this action is rescheduled with the same delay time, don't clear the interval id.
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        // Otherwise, if the action's delay time is different from the current delay,
        // or the action has been rescheduled before it's executed, clear the interval id
        return clearInterval(id) && undefined || undefined;
    };
    /**
     * Immediately executes this action and the `work` it contains.
     * @return {any}
     */
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            // Dequeue if the action didn't reschedule itself. Don't call
            // unsubscribe(), because the action could reschedule later.
            // For example:
            // ```
            // scheduler.schedule(function doWork(counter) {
            //   /* ... I'm a busy worker bee ... */
            //   var originalAction = this;
            //   /* wait 100ms before rescheduling the action */
            //   setTimeout(function () {
            //     originalAction.schedule(counter + 1);
            //   }, 100);
            // }, 1000);
            // ```
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, delay) {
        var errored = false;
        var errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncAction.prototype._unsubscribe = function () {
        var id = this.id;
        var scheduler = this.scheduler;
        var actions = scheduler.actions;
        var index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    };
    return AsyncAction;
}(Action_1.Action));
exports.AsyncAction = AsyncAction;

});

unwrapExports(AsyncAction_1);

var QueueAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var QueueAction = /** @class */ (function (_super) {
    __extends(QueueAction, _super);
    function QueueAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    QueueAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay > 0) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    };
    QueueAction.prototype.execute = function (state, delay) {
        return (delay > 0 || this.closed) ?
            _super.prototype.execute.call(this, state, delay) :
            this._execute(state, delay);
    };
    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Otherwise flush the scheduler starting with this action.
        return scheduler.flush(this);
    };
    return QueueAction;
}(AsyncAction_1.AsyncAction));
exports.QueueAction = QueueAction;

});

unwrapExports(QueueAction_1);

var Scheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An execution context and a data structure to order tasks and schedule their
 * execution. Provides a notion of (potentially virtual) time, through the
 * `now()` getter method.
 *
 * Each unit of work in a Scheduler is called an {@link Action}.
 *
 * ```ts
 * class Scheduler {
 *   now(): number;
 *   schedule(work, delay?, state?): Subscription;
 * }
 * ```
 *
 * @class Scheduler
 * @deprecated Scheduler is an internal implementation detail of RxJS, and
 * should not be used directly. Rather, create your own class and implement
 * {@link SchedulerLike}
 */
var Scheduler = /** @class */ (function () {
    function Scheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    /**
     * Schedules a function, `work`, for execution. May happen at some point in
     * the future, according to the `delay` parameter, if specified. May be passed
     * some context object, `state`, which will be passed to the `work` function.
     *
     * The given arguments will be processed an stored as an Action object in a
     * queue of actions.
     *
     * @param {function(state: ?T): ?Subscription} work A function representing a
     * task, or some unit of work to be executed by the Scheduler.
     * @param {number} [delay] Time to wait before executing the work, where the
     * time unit is implicit and defined by the Scheduler itself.
     * @param {T} [state] Some contextual data that the `work` function uses when
     * called by the Scheduler.
     * @return {Subscription} A subscription in order to be able to unsubscribe
     * the scheduled work.
     */
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.SchedulerAction(this, work).schedule(state, delay);
    };
    /** @nocollapse */
    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
    return Scheduler;
}());
exports.Scheduler = Scheduler;

});

unwrapExports(Scheduler_1);

var AsyncScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AsyncScheduler = /** @class */ (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler_1.Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, function () {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        }) || this;
        _this.actions = [];
        /**
         * A flag to indicate whether the Scheduler is currently executing a batch of
         * queued actions.
         * @type {boolean}
         * @deprecated internal use only
         */
        _this.active = false;
        /**
         * An internal ID used to track the latest asynchronous task such as those
         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
         * others.
         * @type {any}
         * @deprecated internal use only
         */
        _this.scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return _super.prototype.schedule.call(this, work, delay, state);
        }
    };
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this.active) {
            actions.push(action);
            return;
        }
        var error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift()); // exhaust the scheduler queue
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler_1.Scheduler));
exports.AsyncScheduler = AsyncScheduler;

});

unwrapExports(AsyncScheduler_1);

var QueueScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var QueueScheduler = /** @class */ (function (_super) {
    __extends(QueueScheduler, _super);
    function QueueScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueueScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.QueueScheduler = QueueScheduler;

});

unwrapExports(QueueScheduler_1);

var queue$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 *
 * Queue Scheduler
 *
 * <span class="informal">Put every next task on a queue, instead of executing it immediately</span>
 *
 * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.
 *
 * When used without delay, it schedules given task synchronously - executes it right when
 * it is scheduled. However when called recursively, that is when inside the scheduled task,
 * another task is scheduled with queue scheduler, instead of executing immediately as well,
 * that task will be put on a queue and wait for current one to finish.
 *
 * This means that when you execute task with `queue` scheduler, you are sure it will end
 * before any other task scheduled with that scheduler will start.
 *
 * @examples <caption>Schedule recursively first, then do something</caption>
 *
 * Rx.Scheduler.queue.schedule(() => {
 *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue
 *
 *   console.log('first');
 * });
 *
 * // Logs:
 * // "first"
 * // "second"
 *
 *
 * @example <caption>Reschedule itself recursively</caption>
 *
 * Rx.Scheduler.queue.schedule(function(state) {
 *   if (state !== 0) {
 *     console.log('before', state);
 *     this.schedule(state - 1); // `this` references currently executing Action,
 *                               // which we reschedule with new state
 *     console.log('after', state);
 *   }
 * }, 0, 3);
 *
 * // In scheduler that runs recursively, you would expect:
 * // "before", 3
 * // "before", 2
 * // "before", 1
 * // "after", 1
 * // "after", 2
 * // "after", 3
 *
 * // But with queue it logs:
 * // "before", 3
 * // "after", 3
 * // "before", 2
 * // "after", 2
 * // "before", 1
 * // "after", 1
 *
 *
 * @static true
 * @name queue
 * @owner Scheduler
 */
exports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);

});

unwrapExports(queue$1);

var empty_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * The same Observable instance returned by any call to {@link empty} without a
 * {@link Scheduler}. It is preferrable to use this over `empty()`.
 */
exports.EMPTY = new Observable_1.Observable(function (subscriber) { return subscriber.complete(); });
/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits a complete notification.
 *
 * <span class="informal">Just emits 'complete', and nothing else.
 * </span>
 *
 * <img src="./img/empty.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the complete notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then complete.</caption>
 * var result = Rx.Observable.empty().startWith(7);
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
 * var interval = Rx.Observable.interval(1000);
 * var result = interval.mergeMap(x =>
 *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following to the console:
 * // x is equal to the count on the interval eg(0,1,2,3,...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1 print abc
 * // if x % 2 is not equal to 1 nothing will be output
 *
 * @see {@link create}
 * @see {@link never}
 * @see {@link of}
 * @see {@link throw}
 *
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the complete notification.
 * @return {Observable} An "empty" Observable: emits only the complete
 * notification.
 * @static true
 * @name empty
 * @owner Observable
 * @deprecated Deprecated in favor of using EMPTY constant.
 */
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : exports.EMPTY;
}
exports.empty = empty;
function emptyScheduled(scheduler) {
    return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
exports.emptyScheduled = emptyScheduled;

});

unwrapExports(empty_1);

var isScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
exports.isScheduler = isScheduler;

});

unwrapExports(isScheduler_1);

var subscribeToArray$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Subscribes to an ArrayLike with a subscriber
 * @param array The array or array-like to subscribe to
 */
exports.subscribeToArray = function (array) { return function (subscriber) {
    for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
        subscriber.next(array[i]);
    }
    if (!subscriber.closed) {
        subscriber.complete();
    }
}; };

});

unwrapExports(subscribeToArray$1);

var fromArray_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToArray$1.subscribeToArray(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            var i = 0;
            sub.add(scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                    return;
                }
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    sub.add(this.schedule());
                }
            }));
            return sub;
        });
    }
}
exports.fromArray = fromArray;

});

unwrapExports(fromArray_1);

var scalar_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function scalar(value) {
    var result = new Observable_1.Observable(function (subscriber) {
        subscriber.next(value);
        subscriber.complete();
    });
    result._isScalar = true;
    result.value = value;
    return result;
}
exports.scalar = scalar;

});

unwrapExports(scalar_1);

var of_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args[args.length - 1];
    if (isScheduler_1.isScheduler(scheduler)) {
        args.pop();
    }
    else {
        scheduler = undefined;
    }
    switch (args.length) {
        case 0:
            return empty_1.empty(scheduler);
        case 1:
            return scheduler ? fromArray_1.fromArray(args, scheduler) : scalar_1.scalar(args[0]);
        default:
            return fromArray_1.fromArray(args, scheduler);
    }
}
exports.of = of;

});

unwrapExports(of_1);

var throwError_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits an error notification.
 *
 * <span class="informal">Just emits 'error', and nothing else.
 * </span>
 *
 * <img src="./img/throw.png" width="100%">
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the error notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * @example <caption>Emit the number 7, then emit an error.</caption>
 * import { throwError, concat, of } from 'rxjs/create';
 *
 * const result = concat(of(7), throwError(new Error('oops!')));
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>
 * import { throwError, interval, of } from 'rxjs/create';
 * import { mergeMap } from 'rxjs/operators';
 *
 * interval(1000).pipe(
 *   mergeMap(x => x === 13 ?
 *     throwError('Thirteens are bad') :
 *     of('a', 'b', 'c')
 *   )
 * ).subscribe(x => console.log(x), e => console.error(e));
 *
 * @see {@link create}
 * @see {@link empty}
 * @see {@link never}
 * @see {@link of}
 *
 * @param {any} error The particular Error to pass to the error notification.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emission of the error notification.
 * @return {Observable} An error Observable: emits only the error notification
 * using the given error argument.
 * @static true
 * @name throw
 * @owner Observable
 */
function throwError(error, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(function (subscriber) { return subscriber.error(error); });
    }
    else {
        return new Observable_1.Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
    }
}
exports.throwError = throwError;
function dispatch(_a) {
    var error = _a.error, subscriber = _a.subscriber;
    subscriber.error(error);
}

});

unwrapExports(throwError_1);

var Notification_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = /** @class */ (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return of_1.of(this.value);
            case 'E':
                return throwError_1.throwError(this.error);
            case 'C':
                return empty_1.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     * @nocollapse
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     * @nocollapse
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
exports.Notification = Notification;

});

unwrapExports(Notification_1);

var observeOn_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
exports.observeOn = observeOn;
var ObserveOnOperator = /** @class */ (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
exports.ObserveOnOperator = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = /** @class */ (function (_super) {
    __extends(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        var _this = _super.call(this, destination) || this;
        _this.scheduler = scheduler;
        _this.delay = delay;
        return _this;
    }
    /** @nocollapse */
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
exports.ObserveOnSubscriber = ObserveOnSubscriber;
var ObserveOnMessage = /** @class */ (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
exports.ObserveOnMessage = ObserveOnMessage;

});

unwrapExports(observeOn_1);

var ReplaySubject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






/**
 * @class ReplaySubject<T>
 */
var ReplaySubject = /** @class */ (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(bufferSize, windowTime, scheduler) {
        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this) || this;
        _this.scheduler = scheduler;
        _this._events = [];
        _this._infiniteTimeWindow = false;
        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        _this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            _this._infiniteTimeWindow = true;
            _this.next = _this.nextInfiniteTimeWindow;
        }
        else {
            _this.next = _this.nextTimeWindow;
        }
        return _this;
    }
    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
        var _events = this._events;
        _events.push(value);
        // Since this method is invoked in every next() call than the buffer
        // can overgrow the max size only by one item
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype.nextTimeWindow = function (value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        _super.prototype.next.call(this, value);
    };
    /** @deprecated This is an internal implementation detail, do not use. */
    ReplaySubject.prototype._subscribe = function (subscriber) {
        // When `_infiniteTimeWindow === true` then the buffer is already trimmed
        var _infiniteTimeWindow = this._infiniteTimeWindow;
        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        var scheduler = this.scheduler;
        var len = _events.length;
        var subscription;
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.isStopped || this.hasError) {
            subscription = Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (var i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    };
    ReplaySubject.prototype._getNow = function () {
        return (this.scheduler || queue$1.queue).now();
    };
    ReplaySubject.prototype._trimBufferThenGetEvents = function () {
        var now = this._getNow();
        var _bufferSize = this._bufferSize;
        var _windowTime = this._windowTime;
        var _events = this._events;
        var eventsCount = _events.length;
        var spliceCount = 0;
        // Trim events that fall out of the time window.
        // Start at the front of the list. Break early once
        // we encounter an event that falls within the window.
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    };
    return ReplaySubject;
}(Subject_1.Subject));
exports.ReplaySubject = ReplaySubject;
var ReplayEvent = /** @class */ (function () {
    function ReplayEvent(time, value) {
        this.time = time;
        this.value = value;
    }
    return ReplayEvent;
}());

});

unwrapExports(ReplaySubject_1);

var AsyncSubject_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * @class AsyncSubject<T>
 */
var AsyncSubject = /** @class */ (function (_super) {
    __extends(AsyncSubject, _super);
    function AsyncSubject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.value = null;
        _this.hasNext = false;
        _this.hasCompleted = false;
        return _this;
    }
    /** @deprecated This is an internal implementation detail, do not use. */
    AsyncSubject.prototype._subscribe = function (subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        return _super.prototype._subscribe.call(this, subscriber);
    };
    AsyncSubject.prototype.next = function (value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    };
    AsyncSubject.prototype.error = function (error) {
        if (!this.hasCompleted) {
            _super.prototype.error.call(this, error);
        }
    };
    AsyncSubject.prototype.complete = function () {
        this.hasCompleted = true;
        if (this.hasNext) {
            _super.prototype.next.call(this, this.value);
        }
        _super.prototype.complete.call(this);
    };
    return AsyncSubject;
}(Subject_1.Subject));
exports.AsyncSubject = AsyncSubject;

});

unwrapExports(AsyncSubject_1);

var Immediate$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nextHandle = 1;
var tasksByHandle = {};
function runIfPresent(handle) {
    var cb = tasksByHandle[handle];
    if (cb) {
        cb();
    }
}
exports.Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        tasksByHandle[handle] = cb;
        Promise.resolve().then(function () { return runIfPresent(handle); });
        return handle;
    },
    clearImmediate: function (handle) {
        delete tasksByHandle[handle];
    },
};

});

unwrapExports(Immediate$1);

var AsapAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AsapAction = /** @class */ (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If a microtask has already been scheduled, don't schedule another
        // one. If a microtask hasn't been scheduled yet, schedule one now. Return
        // the current scheduled microtask id.
        return scheduler.scheduled || (scheduler.scheduled = Immediate$1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested microtask and
        // set the scheduled flag to undefined so the next AsapAction will schedule
        // its own.
        if (scheduler.actions.length === 0) {
            Immediate$1.Immediate.clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AsapAction;
}(AsyncAction_1.AsyncAction));
exports.AsapAction = AsapAction;

});

unwrapExports(AsapAction_1);

var AsapScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AsapScheduler = /** @class */ (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AsapScheduler = AsapScheduler;

});

unwrapExports(AsapScheduler_1);

var asap$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 *
 * Asap Scheduler
 *
 * <span class="informal">Perform task as fast as it can be performed asynchronously</span>
 *
 * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task
 * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing
 * code to end and then it will try to execute given task as fast as possible.
 *
 * `asap` scheduler will do its best to minimize time between end of currently executing code
 * and start of scheduled task. This makes it best candidate for performing so called "deferring".
 * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves
 * some (although minimal) unwanted delay.
 *
 * Note that using `asap` scheduler does not necessarily mean that your task will be first to process
 * after currently executing code. In particular, if some task was also scheduled with `asap` before,
 * that task will execute first. That being said, if you need to schedule task asynchronously, but
 * as soon as possible, `asap` scheduler is your best bet.
 *
 * @example <caption>Compare async and asap scheduler</caption>
 *
 * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...
 * Rx.Scheduler.asap.schedule(() => console.log('asap'));
 *
 * // Logs:
 * // "asap"
 * // "async"
 * // ... but 'asap' goes first!
 *
 * @static true
 * @name asap
 * @owner Scheduler
 */
exports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);

});

unwrapExports(asap$1);

var async$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 *
 * Async Scheduler
 *
 * <span class="informal">Schedule task as if you used setTimeout(task, duration)</span>
 *
 * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript
 * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating
 * in intervals.
 *
 * If you just want to "defer" task, that is to perform it right after currently
 * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),
 * better choice will be the {@link asap} scheduler.
 *
 * @example <caption>Use async scheduler to delay task</caption>
 * const task = () => console.log('it works!');
 *
 * Rx.Scheduler.async.schedule(task, 2000);
 *
 * // After 2 seconds logs:
 * // "it works!"
 *
 *
 * @example <caption>Use async scheduler to repeat task in intervals</caption>
 * function task(state) {
 *   console.log(state);
 *   this.schedule(state + 1, 1000); // `this` references currently executing Action,
 *                                   // which we reschedule with new state and delay
 * }
 *
 * Rx.Scheduler.async.schedule(task, 3000, 0);
 *
 * // Logs:
 * // 0 after 3s
 * // 1 after 4s
 * // 2 after 5s
 * // 3 after 6s
 *
 * @static true
 * @name async
 * @owner Scheduler
 */
exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);

});

unwrapExports(async$1);

var AnimationFrameAction_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var AnimationFrameAction = /** @class */ (function (_super) {
    __extends(AnimationFrameAction, _super);
    function AnimationFrameAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay is greater than 0, request as an async action.
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        // Push the action to the end of the scheduler queue.
        scheduler.actions.push(this);
        // If an animation frame has already been requested, don't request another
        // one. If an animation frame hasn't been requested yet, request one. Return
        // the current animation frame request id.
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(function () { return scheduler.flush(null); }));
    };
    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        // If delay exists and is greater than 0, or if the delay is null (the
        // action wasn't rescheduled) but was originally scheduled as an async
        // action, then recycle as an async action.
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        // If the scheduler queue is empty, cancel the requested animation frame and
        // set the scheduled flag to undefined so the next AnimationFrameAction will
        // request its own.
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        // Return undefined so the action knows to request a new async id if it's rescheduled.
        return undefined;
    };
    return AnimationFrameAction;
}(AsyncAction_1.AsyncAction));
exports.AnimationFrameAction = AnimationFrameAction;

});

unwrapExports(AnimationFrameAction_1);

var AnimationFrameScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

var AnimationFrameScheduler = /** @class */ (function (_super) {
    __extends(AnimationFrameScheduler, _super);
    function AnimationFrameScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationFrameScheduler.prototype.flush = function (action) {
        this.active = true;
        this.scheduled = undefined;
        var actions = this.actions;
        var error;
        var index = -1;
        var count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AnimationFrameScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.AnimationFrameScheduler = AnimationFrameScheduler;

});

unwrapExports(AnimationFrameScheduler_1);

var animationFrame$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 *
 * Animation Frame Scheduler
 *
 * <span class="informal">Perform task when `window.requestAnimationFrame` would fire</span>
 *
 * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler
 * behaviour.
 *
 * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.
 * It makes sure scheduled task will happen just before next browser content repaint,
 * thus performing animations as efficiently as possible.
 *
 * @example <caption>Schedule div height animation</caption>
 * const div = document.querySelector('.some-div');
 *
 * Rx.Scheduler.animationFrame.schedule(function(height) {
 *   div.style.height = height + "px";
 *
 *   this.schedule(height + 1);  // `this` references currently executing Action,
 *                               // which we reschedule with new state
 * }, 0, 0);
 *
 * // You will see .some-div element growing in height
 *
 *
 * @static true
 * @name animationFrame
 * @owner Scheduler
 */
exports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);

});

unwrapExports(animationFrame$1);

var VirtualTimeScheduler_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });


var VirtualTimeScheduler = /** @class */ (function (_super) {
    __extends(VirtualTimeScheduler, _super);
    function VirtualTimeScheduler(SchedulerAction, maxFrames) {
        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }
        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this, SchedulerAction, function () { return _this.frame; }) || this;
        _this.maxFrames = maxFrames;
        _this.frame = 0;
        _this.index = -1;
        return _this;
    }
    /**
     * Prompt the Scheduler to execute all of its queued actions, therefore
     * clearing its queue.
     * @return {void}
     */
    VirtualTimeScheduler.prototype.flush = function () {
        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
        var error, action;
        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    VirtualTimeScheduler.frameTimeFactor = 10;
    return VirtualTimeScheduler;
}(AsyncScheduler_1.AsyncScheduler));
exports.VirtualTimeScheduler = VirtualTimeScheduler;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var VirtualAction = /** @class */ (function (_super) {
    __extends(VirtualAction, _super);
    function VirtualAction(scheduler, work, index) {
        if (index === void 0) { index = scheduler.index += 1; }
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.index = index;
        _this.active = true;
        _this.index = scheduler.index = index;
        return _this;
    }
    VirtualAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (!this.id) {
            return _super.prototype.schedule.call(this, state, delay);
        }
        this.active = false;
        // If an action is rescheduled, we save allocations by mutating its state,
        // pushing it to the end of the scheduler queue, and recycling the action.
        // But since the VirtualTimeScheduler is used for testing, VirtualActions
        // must be immutable so they can be inspected later.
        var action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    };
    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        this.delay = scheduler.frame + delay;
        var actions = scheduler.actions;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    };
    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        return undefined;
    };
    VirtualAction.prototype._execute = function (state, delay) {
        if (this.active === true) {
            return _super.prototype._execute.call(this, state, delay);
        }
    };
    VirtualAction.sortActions = function (a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    };
    return VirtualAction;
}(AsyncAction_1.AsyncAction));
exports.VirtualAction = VirtualAction;

});

unwrapExports(VirtualTimeScheduler_1);

var identity_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function identity(x) {
    return x;
}
exports.identity = identity;

});

unwrapExports(identity_1);

var isObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Tests to see if the object is an RxJS {@link Observable}
 * @param obj the object to test
 */
function isObservable(obj) {
    return !!obj && (obj instanceof Observable_1.Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
exports.isObservable = isObservable;

});

unwrapExports(isObservable_1);

var ArgumentOutOfRangeError_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when an element was queried at a certain index of an
 * Observable, but no such index or position exists in that sequence.
 *
 * @see {@link elementAt}
 * @see {@link take}
 * @see {@link takeLast}
 *
 * @class ArgumentOutOfRangeError
 */
var ArgumentOutOfRangeError = /** @class */ (function (_super) {
    __extends(ArgumentOutOfRangeError, _super);
    function ArgumentOutOfRangeError() {
        var _this = _super.call(this, 'argument out of range') || this;
        _this.name = 'ArgumentOutOfRangeError';
        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);
        return _this;
    }
    return ArgumentOutOfRangeError;
}(Error));
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;

});

unwrapExports(ArgumentOutOfRangeError_1);

var EmptyError_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = /** @class */ (function (_super) {
    __extends(EmptyError, _super);
    function EmptyError() {
        var _this = _super.call(this, 'no elements in sequence') || this;
        _this.name = 'EmptyError';
        Object.setPrototypeOf(_this, EmptyError.prototype);
        return _this;
    }
    return EmptyError;
}(Error));
exports.EmptyError = EmptyError;

});

unwrapExports(EmptyError_1);

var TimeoutError_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An error thrown when duetime elapses.
 *
 * @see {@link timeout}
 *
 * @class TimeoutError
 */
var TimeoutError = /** @class */ (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var _this = _super.call(this, 'Timeout has occurred') || this;
        _this.name = 'TimeoutError';
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        return _this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;

});

unwrapExports(TimeoutError_1);

var map_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
exports.map = map;
var MapOperator = /** @class */ (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
exports.MapOperator = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = /** @class */ (function (_super) {
    __extends(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.count = 0;
        _this.thisArg = thisArg || _this;
        return _this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));

});

unwrapExports(map_1);

var bindCallback_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });





// tslint:enable:max-line-length
/**
 * Converts a callback API to a function that returns an Observable.
 *
 * <span class="informal">Give it a function `f` of type `f(x, callback)` and
 * it will return a function `g` that when called as `g(x)` will output an
 * Observable.</span>
 *
 * `bindCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, the
 * last parameter must be a callback function that `func` calls when it is
 * done.
 *
 * The output of `bindCallback` is a function that takes the same parameters
 * as `func`, except the last one (the callback). When the output function
 * is called with arguments it will return an Observable. If function `func`
 * calls its callback with one argument the Observable will emit that value.
 * If on the other hand the callback is called with multiple values the resulting
 * Observable will emit an array with said values as arguments.
 *
 * It is very important to remember that input function `func` is not called
 * when the output function is, but rather when the Observable returned by the output
 * function is subscribed. This means if `func` makes an AJAX request, that request
 * will be made every time someone subscribes to the resulting Observable, but not before.
 *
 * The last optional parameter - {@link Scheduler} - can be used to control when the call
 * to `func` happens after someone subscribes to Observable, as well as when results
 * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`
 * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,
 * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler
 * and call `subscribe` on the output Observable all function calls that are currently executing
 * will end before `func` is invoked.
 *
 * By default results passed to the callback are emitted immediately after `func` invokes the callback.
 * In particular, if the callback is called synchronously the subscription of the resulting Observable
 * will call the `next` function synchronously as well.  If you want to defer that call,
 * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can
 * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.
 *
 * Note that the Observable created by the output function will always emit a single value
 * and then complete immediately. If `func` calls the callback multiple times, values from subsequent
 * calls will not appear in the stream. If you need to listen for multiple calls,
 *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.
 *
 * If `func` depends on some context (`this` property) and is not already bound the context of `func`
 * will be the context that the output function has at call time. In particular, if `func`
 * is called as a method of some objec and if `func` is not already bound, in order to preserve the context
 * it is recommended that the context of the output function is set to that object as well.
 *
 * If the input function calls its callback in the "node style" (i.e. first argument to callback is
 * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}
 * provides convenient error handling and probably is a better choice.
 * `bindCallback` will treat such functions the same as any other and error parameters
 * (whether passed or not) will always be interpreted as regular callback argument.
 *
 *
 * @example <caption>Convert jQuery's getJSON to an Observable API</caption>
 * // Suppose we have jQuery.getJSON('/my/url', callback)
 * var getJSONAsObservable = bindCallback(jQuery.getJSON);
 * var result = getJSONAsObservable('/my/url');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Receive an array of arguments passed to a callback</caption>
 * someFunction((a, b, c) => {
 *   console.log(a); // 5
 *   console.log(b); // 'some string'
 *   console.log(c); // {someProperty: 'someValue'}
 * });
 *
 * const boundSomeFunction = bindCallback(someFunction);
 * boundSomeFunction().subscribe(values => {
 *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]
 * });
 *
 *
 * @example <caption>Compare behaviour with and without async Scheduler</caption>
 * function iCallMyCallbackSynchronously(cb) {
 *   cb();
 * }
 *
 * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);
 * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);
 *
 * boundSyncFn().subscribe(() => console.log('I was sync!'));
 * boundAsyncFn().subscribe(() => console.log('I was async!'));
 * console.log('This happened...');
 *
 * // Logs:
 * // I was sync!
 * // This happened...
 * // I was async!
 *
 *
 * @example <caption>Use bindCallback on an object method</caption>
 * const boundMethod = bindCallback(someObject.methodWithCallback);
 * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject
 * .subscribe(subscriber);
 *
 *
 * @see {@link bindNodeCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func A function with a callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the callback would deliver.
 * @name bindCallback
 */
function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = this;
        var subject;
        var params = {
            context: context,
            subject: subject,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
        };
        return new Observable_1.Observable(function (subscriber) {
            if (!scheduler) {
                if (!subject) {
                    subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                var state = {
                    args: args, subscriber: subscriber, params: params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
exports.bindCallback = bindCallback;
function dispatch(state) {
    var _this = this;
    var args = state.args, subscriber = state.subscriber, params = state.params;
    var callbackFunc = params.callbackFunc, context = params.context, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    var value = state.value, subject = state.subject;
    subject.next(value);
    subject.complete();
}


});

unwrapExports(bindCallback_1);

var bindNodeCallback_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });





/**
 * Converts a Node.js-style callback API to a function that returns an
 * Observable.
 *
 * <span class="informal">It's just like {@link bindCallback}, but the
 * callback is expected to be of type `callback(error, result)`.</span>
 *
 * `bindNodeCallback` is not an operator because its input and output are not
 * Observables. The input is a function `func` with some parameters, but the
 * last parameter must be a callback function that `func` calls when it is
 * done. The callback function is expected to follow Node.js conventions,
 * where the first argument to the callback is an error object, signaling
 * whether call was successful. If that object is passed to callback, it means
 * something went wrong.
 *
 * The output of `bindNodeCallback` is a function that takes the same
 * parameters as `func`, except the last one (the callback). When the output
 * function is called with arguments, it will return an Observable.
 * If `func` calls its callback with error parameter present, Observable will
 * error with that value as well. If error parameter is not passed, Observable will emit
 * second parameter. If there are more parameters (third and so on),
 * Observable will emit an array with all arguments, except first error argument.
 *
 * Note that `func` will not be called at the same time output function is,
 * but rather whenever resulting Observable is subscribed. By default call to
 * `func` will happen synchronously after subscription, but that can be changed
 * with proper {@link Scheduler} provided as optional third parameter. Scheduler
 * can also control when values from callback will be emitted by Observable.
 * To find out more, check out documentation for {@link bindCallback}, where
 * Scheduler works exactly the same.
 *
 * As in {@link bindCallback}, context (`this` property) of input function will be set to context
 * of returned function, when it is called.
 *
 * After Observable emits value, it will complete immediately. This means
 * even if `func` calls callback again, values from second and consecutive
 * calls will never appear on the stream. If you need to handle functions
 * that call callbacks multiple times, check out {@link fromEvent} or
 * {@link fromEventPattern} instead.
 *
 * Note that `bindNodeCallback` can be used in non-Node.js environments as well.
 * "Node.js-style" callbacks are just a convention, so if you write for
 * browsers or any other environment and API you use implements that callback style,
 * `bindNodeCallback` can be safely used on that API functions as well.
 *
 * Remember that Error object passed to callback does not have to be an instance
 * of JavaScript built-in `Error` object. In fact, it does not even have to an object.
 * Error parameter of callback function is interpreted as "present", when value
 * of that parameter is truthy. It could be, for example, non-zero number, non-empty
 * string or boolean `true`. In all of these cases resulting Observable would error
 * with that value. This means usually regular style callbacks will fail very often when
 * `bindNodeCallback` is used. If your Observable errors much more often then you
 * would expect, check if callback really is called in Node.js-style and, if not,
 * switch to {@link bindCallback} instead.
 *
 * Note that even if error parameter is technically present in callback, but its value
 * is falsy, it still won't appear in array emitted by Observable.
 *
 *
 * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>
 * import * as fs from 'fs';
 * var readFileAsObservable = bindNodeCallback(fs.readFile);
 * var result = readFileAsObservable('./roadNames.txt', 'utf8');
 * result.subscribe(x => console.log(x), e => console.error(e));
 *
 *
 * @example <caption>Use on function calling callback with multiple arguments</caption>
 * someFunction((err, a, b) => {
 *   console.log(err); // null
 *   console.log(a); // 5
 *   console.log(b); // "some string"
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(value => {
 *   console.log(value); // [5, "some string"]
 * });
 *
 * @example <caption>Use on function calling callback in regular style</caption>
 * someFunction(a => {
 *   console.log(a); // 5
 * });
 * var boundSomeFunction = bindNodeCallback(someFunction);
 * boundSomeFunction()
 * .subscribe(
 *   value => {}             // never gets called
 *   err => console.log(err) // 5
 * );
 *
 *
 * @see {@link bindCallback}
 * @see {@link from}
 * @see {@link fromPromise}
 *
 * @param {function} func Function with a Node.js-style callback as the last parameter.
 * @param {Scheduler} [scheduler] The scheduler on which to schedule the
 * callbacks.
 * @return {function(...params: *): Observable} A function which returns the
 * Observable that delivers the same values the Node.js callback would
 * deliver.
 * @name bindNodeCallback
 */
function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (isScheduler_1.isScheduler(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            // DEPRECATED PATH
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindNodeCallback(callbackFunc, scheduler).apply(void 0, args).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
            };
        }
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var params = {
            subject: undefined,
            args: args,
            callbackFunc: callbackFunc,
            scheduler: scheduler,
            context: this,
        };
        return new Observable_1.Observable(function (subscriber) {
            var context = params.context;
            var subject = params.subject;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new AsyncSubject_1.AsyncSubject();
                    var handler = function () {
                        var innerArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            innerArgs[_i] = arguments[_i];
                        }
                        var err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, args.concat([handler]));
                    }
                    catch (err) {
                        subject.error(err);
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params: params, subscriber: subscriber, context: context });
            }
        });
    };
}
exports.bindNodeCallback = bindNodeCallback;
function dispatch(state) {
    var _this = this;
    var params = state.params, subscriber = state.subscriber, context = state.context;
    var callbackFunc = params.callbackFunc, args = params.args, scheduler = params.scheduler;
    var subject = params.subject;
    if (!subject) {
        subject = params.subject = new AsyncSubject_1.AsyncSubject();
        var handler = function () {
            var innerArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                innerArgs[_i] = arguments[_i];
            }
            var err = innerArgs.shift();
            if (err) {
                _this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
            }
            else {
                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                _this.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
            }
        };
        try {
            callbackFunc.apply(context, args.concat([handler]));
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    var value = arg.value, subject = arg.subject;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    var err = arg.err, subject = arg.subject;
    subject.error(err);
}

});

unwrapExports(bindNodeCallback_1);

var OuterSubscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = /** @class */ (function (_super) {
    __extends(OuterSubscriber, _super);
    function OuterSubscriber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
exports.OuterSubscriber = OuterSubscriber;

});

unwrapExports(OuterSubscriber_1);

var InnerSubscriber_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = /** @class */ (function (_super) {
    __extends(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.outerValue = outerValue;
        _this.outerIndex = outerIndex;
        _this.index = 0;
        return _this;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
exports.InnerSubscriber = InnerSubscriber;

});

unwrapExports(InnerSubscriber_1);

var subscribeToPromise$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.subscribeToPromise = function (promise) { return function (subscriber) {
    promise.then(function (value) {
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }, function (err) { return subscriber.error(err); })
        .then(null, hostReportError_1.hostReportError);
    return subscriber;
}; };

});

unwrapExports(subscribeToPromise$1);

var iterator$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
exports.getSymbolIterator = getSymbolIterator;
exports.iterator = getSymbolIterator();
/**
 * @deprecated use {@link iterator} instead
 */
exports.$$iterator = exports.iterator;

});

unwrapExports(iterator$1);

var subscribeToIterable$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

exports.subscribeToIterable = function (iterable) { return function (subscriber) {
    var iterator = iterable[iterator$1.iterator]();
    do {
        var item = iterator.next();
        if (item.done) {
            subscriber.complete();
            break;
        }
        subscriber.next(item.value);
        if (subscriber.closed) {
            break;
        }
    } while (true);
    // Finalize the iterator if it happens to be a Generator
    if (typeof iterator.return === 'function') {
        subscriber.add(function () {
            if (iterator.return) {
                iterator.return();
            }
        });
    }
    return subscriber;
}; };

});

unwrapExports(subscribeToIterable$1);

var subscribeToObservable$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Subscribes to an object that implements Symbol.observable with the given
 * Subscriber.
 * @param obj An object that implements Symbol.observable
 */
exports.subscribeToObservable = function (obj) { return function (subscriber) {
    var obs = obj[observable$1.observable]();
    if (typeof obs.subscribe !== 'function') {
        // Should be caught by observable subscribe function error handling.
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    }
    else {
        return obs.subscribe(subscriber);
    }
}; };

});

unwrapExports(subscribeToObservable$1);

var isArrayLike$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

});

unwrapExports(isArrayLike$1);

var isPromise_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
exports.isPromise = isPromise;

});

unwrapExports(isPromise_1);

var subscribeTo$1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });










exports.subscribeTo = function (result) {
    if (result instanceof Observable_1.Observable) {
        return function (subscriber) {
            if (result._isScalar) {
                subscriber.next(result.value);
                subscriber.complete();
                return undefined;
            }
            else {
                return result.subscribe(subscriber);
            }
        };
    }
    else if (isArrayLike$1.isArrayLike(result)) {
        return subscribeToArray$1.subscribeToArray(result);
    }
    else if (isPromise_1.isPromise(result)) {
        return subscribeToPromise$1.subscribeToPromise(result);
    }
    else if (result && typeof result[iterator$1.iterator] === 'function') {
        return subscribeToIterable$1.subscribeToIterable(result);
    }
    else if (result && typeof result[observable$1.observable] === 'function') {
        return subscribeToObservable$1.subscribeToObservable(result);
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = "You provided " + value + " where a stream was expected."
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};

});

unwrapExports(subscribeTo$1);

var subscribeToResult_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    return subscribeTo$1.subscribeTo(result)(destination);
}
exports.subscribeToResult = subscribeToResult;

});

unwrapExports(subscribeToResult_1);

var combineLatest_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });





var NONE = {};
/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are
 * calculated from the latest values of each of its input Observables.
 *
 * <span class="informal">Whenever any input Observable emits a value, it
 * computes a formula using the latest values from all the inputs, then emits
 * the output of that formula.</span>
 *
 * <img src="./img/combineLatest.png" width="100%">
 *
 * `combineLatest` combines the values from all the Observables passed as
 * arguments. This is done by subscribing to each Observable in order and,
 * whenever any Observable emits, collecting an array of the most recent
 * values from each Observable. So if you pass `n` Observables to operator,
 * returned Observable will always emit an array of `n` values, in order
 * corresponding to order of passed Observables (value from the first Observable
 * on the first place and so on).
 *
 * Static version of `combineLatest` accepts either an array of Observables
 * or each Observable can be put directly as an argument. Note that array of
 * Observables is good choice, if you don't know beforehand how many Observables
 * you will combine. Passing empty array will result in Observable that
 * completes immediately.
 *
 * To ensure output array has always the same length, `combineLatest` will
 * actually wait for all input Observables to emit at least once,
 * before it starts emitting results. This means if some Observable emits
 * values before other Observables started emitting, all that values but last
 * will be lost. On the other hand, is some Observable does not emit value but
 * completes, resulting Observable will complete at the same moment without
 * emitting anything, since it will be now impossible to include value from
 * completed Observable in resulting array. Also, if some input Observable does
 * not emit any value and never completes, `combineLatest` will also never emit
 * and never complete, since, again, it will wait for all streams to emit some
 * value.
 *
 * If at least one Observable was passed to `combineLatest` and all passed Observables
 * emitted something, resulting Observable will complete when all combined
 * streams complete. So even if some Observable completes, result of
 * `combineLatest` will still emit values when other Observables do. In case
 * of completed Observable, its value from now on will always be the last
 * emitted value. On the other hand, if any Observable errors, `combineLatest`
 * will error immediately as well, and all other Observables will be unsubscribed.
 *
 * `combineLatest` accepts as optional parameter `project` function, which takes
 * as arguments all values that would normally be emitted by resulting Observable.
 * `project` can return any kind of value, which will be then emitted by Observable
 * instead of default array. Note that `project` does not take as argument that array
 * of values, but values themselves. That means default `project` can be imagined
 * as function that takes all its arguments and puts them into an array.
 *
 *
 * @example <caption>Combine two timer Observables</caption>
 * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now
 * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now
 * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);
 * combinedTimers.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0] after 0.5s
 * // [1, 0] after 1s
 * // [1, 1] after 1.5s
 * // [2, 1] after 2s
 *
 *
 * @example <caption>Combine an array of Observables</caption>
 * const observables = [1, 5, 10].map(
 *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds
 * );
 * const combined = Rx.Observable.combineLatest(observables);
 * combined.subscribe(value => console.log(value));
 * // Logs
 * // [0, 0, 0] immediately
 * // [1, 0, 0] after 1s
 * // [1, 5, 0] after 5s
 * // [1, 5, 10] after 10s
 *
 *
 * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>
 * var weight = Rx.Observable.of(70, 72, 76, 79, 75);
 * var height = Rx.Observable.of(1.76, 1.77, 1.78);
 * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));
 * bmi.subscribe(x => console.log('BMI is ' + x));
 *
 * // With output to console:
 * // BMI is 24.212293388429753
 * // BMI is 23.93948099205209
 * // BMI is 23.671253629592222
 *
 *
 * @see {@link combineAll}
 * @see {@link merge}
 * @see {@link withLatestFrom}
 *
 * @param {ObservableInput} observable1 An input Observable to combine with other Observables.
 * @param {ObservableInput} observable2 An input Observable to combine with other Observables.
 * More than one input Observables may be given as arguments
 * or an array of Observables may be given as the first argument.
 * @param {function} [project] An optional function to project the values from
 * the combined latest values into a new value on the output Observable.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to
 * each input Observable.
 * @return {Observable} An Observable of projected values from the most recent
 * values from each input Observable, or an array of the most recent values from
 * each input Observable.
 */
function combineLatest() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = null;
    var scheduler = null;
    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    // if the first and only other argument besides the resultSelector is an array
    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`
    if (observables.length === 1 && isArray$1.isArray(observables[0])) {
        observables = observables[0];
    }
    return fromArray_1.fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
exports.combineLatest = combineLatest;
var CombineLatestOperator = /** @class */ (function () {
    function CombineLatestOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    CombineLatestOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    };
    return CombineLatestOperator;
}());
exports.CombineLatestOperator = CombineLatestOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CombineLatestSubscriber = /** @class */ (function (_super) {
    __extends(CombineLatestSubscriber, _super);
    function CombineLatestSubscriber(destination, resultSelector) {
        var _this = _super.call(this, destination) || this;
        _this.resultSelector = resultSelector;
        _this.active = 0;
        _this.values = [];
        _this.observables = [];
        return _this;
    }
    CombineLatestSubscriber.prototype._next = function (observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    };
    CombineLatestSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (var i = 0; i < len; i++) {
                var observable = observables[i];
                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
            }
        }
    };
    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    };
    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        var values = this.values;
        var oldVal = values[outerIndex];
        var toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    };
    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {
        var result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return CombineLatestSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.CombineLatestSubscriber = CombineLatestSubscriber;

});

unwrapExports(combineLatest_1);

var isInteropObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/** Identifies an input as being Observable (but not necessary an Rx Observable) */
function isInteropObservable(input) {
    return input && typeof input[observable$1.observable] === 'function';
}
exports.isInteropObservable = isInteropObservable;

});

unwrapExports(isInteropObservable_1);

var isIterable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/** Identifies an input as being an Iterable */
function isIterable(input) {
    return input && typeof input[iterator$1.iterator] === 'function';
}
exports.isIterable = isIterable;

});

unwrapExports(isIterable_1);

var fromPromise_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function fromPromise(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToPromise$1.subscribeToPromise(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            sub.add(scheduler.schedule(function () { return input.then(function (value) {
                sub.add(scheduler.schedule(function () {
                    subscriber.next(value);
                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
                }));
            }, function (err) {
                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
            }); }));
            return sub;
        });
    }
}
exports.fromPromise = fromPromise;

});

unwrapExports(fromPromise_1);

var fromIterable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToIterable$1.subscribeToIterable(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            var iterator;
            sub.add(function () {
                // Finalize generators
                if (iterator && typeof iterator.return === 'function') {
                    iterator.return();
                }
            });
            sub.add(scheduler.schedule(function () {
                iterator = input[iterator$1.iterator]();
                sub.add(scheduler.schedule(function () {
                    if (subscriber.closed) {
                        return;
                    }
                    var value;
                    var done;
                    try {
                        var result = iterator.next();
                        value = result.value;
                        done = result.done;
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                        this.schedule();
                    }
                }));
            }));
            return sub;
        });
    }
}
exports.fromIterable = fromIterable;

});

unwrapExports(fromIterable_1);

var fromObservable_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromObservable(input, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(subscribeToObservable$1.subscribeToObservable(input));
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var sub = new Subscription_1.Subscription();
            sub.add(scheduler.schedule(function () {
                var observable = input[observable$1.observable]();
                sub.add(observable.subscribe({
                    next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
                    error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
                    complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
                }));
            }));
            return sub;
        });
    }
}
exports.fromObservable = fromObservable;

});

unwrapExports(fromObservable_1);

var from_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });










function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof Observable_1.Observable) {
            return input;
        }
        return new Observable_1.Observable(subscribeTo$1.subscribeTo(input));
    }
    if (input != null) {
        if (isInteropObservable_1.isInteropObservable(input)) {
            return fromObservable_1.fromObservable(input, scheduler);
        }
        else if (isPromise_1.isPromise(input)) {
            return fromPromise_1.fromPromise(input, scheduler);
        }
        else if (isArrayLike$1.isArrayLike(input)) {
            return fromArray_1.fromArray(input, scheduler);
        }
        else if (isIterable_1.isIterable(input) || typeof input === 'string') {
            return fromIterable_1.fromIterable(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
exports.from = from;

});

unwrapExports(from_1);

var mergeMap_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });




/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'function') {
        // DEPRECATED PATH
        return function (source) { return source.pipe(mergeMap(function (a, i) { return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
}
exports.mergeMap = mergeMap;
var MergeMapOperator = /** @class */ (function () {
    function MergeMapOperator(project, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    };
    return MergeMapOperator;
}());
exports.MergeMapOperator = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = /** @class */ (function (_super) {
    __extends(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        var _this = _super.call(this, destination) || this;
        _this.project = project;
        _this.concurrent = concurrent;
        _this.hasCompleted = false;
        _this.buffer = [];
        _this.active = 0;
        _this.index = 0;
        return _this;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.MergeMapSubscriber = MergeMapSubscriber;

});

unwrapExports(mergeMap_1);

var mergeAll_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return mergeMap_1.mergeMap(identity_1.identity, concurrent);
}
exports.mergeAll = mergeAll;

});

unwrapExports(mergeAll_1);

var concatAll_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return mergeAll_1.mergeAll(1);
}
exports.concatAll = concatAll;

});

unwrapExports(concatAll_1);

var concat_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which sequentially emits all values from given
 * Observable and then moves on to the next.
 *
 * <span class="informal">Concatenates multiple Observables together by
 * sequentially emitting their values, one Observable after the other.</span>
 *
 * <img src="./img/concat.png" width="100%">
 *
 * `concat` joins multiple Observables together, by subscribing to them one at a time and
 * merging their results into the output Observable. You can pass either an array of
 * Observables, or put them directly as arguments. Passing an empty array will result
 * in Observable that completes immediately.
 *
 * `concat` will subscribe to first input Observable and emit all its values, without
 * changing or affecting them in any way. When that Observable completes, it will
 * subscribe to then next Observable passed and, again, emit its values. This will be
 * repeated, until the operator runs out of Observables. When last input Observable completes,
 * `concat` will complete as well. At any given moment only one Observable passed to operator
 * emits values. If you would like to emit values from passed Observables concurrently, check out
 * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,
 * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.
 *
 * Note that if some input Observable never completes, `concat` will also never complete
 * and Observables following the one that did not complete will never be subscribed. On the other
 * hand, if some Observable simply completes immediately after it is subscribed, it will be
 * invisible for `concat`, which will just move on to the next Observable.
 *
 * If any Observable in chain errors, instead of passing control to the next Observable,
 * `concat` will error immediately as well. Observables that would be subscribed after
 * the one that emitted error, never will.
 *
 * If you pass to `concat` the same Observable many times, its stream of values
 * will be "replayed" on every subscription, which means you can repeat given Observable
 * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,
 * you can always use {@link repeat}.
 *
 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
 * var timer = Rx.Observable.interval(1000).take(4);
 * var sequence = Rx.Observable.range(1, 10);
 * var result = Rx.Observable.concat(timer, sequence);
 * result.subscribe(x => console.log(x));
 *
 * // results in:
 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
 *
 *
 * @example <caption>Concatenate an array of 3 Observables</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed
 * result.subscribe(x => console.log(x));
 *
 * // results in the following:
 * // (Prints to console sequentially)
 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
 *
 *
 * @example <caption>Concatenate the same Observable to repeat it</caption>
 * const timer = Rx.Observable.interval(1000).take(2);
 *
 * Rx.Observable.concat(timer, timer) // concating the same Observable!
 * .subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('...and it is done!')
 * );
 *
 * // Logs:
 * // 0 after 1s
 * // 1 after 2s
 * // 0 after 3s
 * // 1 after 4s
 * // "...and it is done!" also after 4s
 *
 * @see {@link concatAll}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 *
 * @param {ObservableInput} input1 An input Observable to concatenate with others.
 * @param {ObservableInput} input2 An input Observable to concatenate with others.
 * More than one input Observables may be given as argument.
 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
 * Observable subscription on.
 * @return {Observable} All values of each passed Observable merged into a
 * single Observable, in order, in serial fashion.
 * @static true
 * @name concat
 * @owner Observable
 */
function concat() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {
        return from_1.from(observables[0]);
    }
    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));
}
exports.concat = concat;

});

unwrapExports(concat_1);

var defer_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

 // lol

/**
 * Creates an Observable that, on subscribe, calls an Observable factory to
 * make an Observable for each new Observer.
 *
 * <span class="informal">Creates the Observable lazily, that is, only when it
 * is subscribed.
 * </span>
 *
 * <img src="./img/defer.png" width="100%">
 *
 * `defer` allows you to create the Observable only when the Observer
 * subscribes, and create a fresh Observable for each Observer. It waits until
 * an Observer subscribes to it, and then it generates an Observable,
 * typically with an Observable factory function. It does this afresh for each
 * subscriber, so although each subscriber may think it is subscribing to the
 * same Observable, in fact each subscriber gets its own individual
 * Observable.
 *
 * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>
 * var clicksOrInterval = Rx.Observable.defer(function () {
 *   if (Math.random() > 0.5) {
 *     return Rx.Observable.fromEvent(document, 'click');
 *   } else {
 *     return Rx.Observable.interval(1000);
 *   }
 * });
 * clicksOrInterval.subscribe(x => console.log(x));
 *
 * // Results in the following behavior:
 * // If the result of Math.random() is greater than 0.5 it will listen
 * // for clicks anywhere on the "document"; when document is clicked it
 * // will log a MouseEvent object to the console. If the result is less
 * // than 0.5 it will emit ascending numbers, one every second(1000ms).
 *
 * @see {@link create}
 *
 * @param {function(): SubscribableOrPromise} observableFactory The Observable
 * factory function to invoke for each Observer that subscribes to the output
 * Observable. May also return a Promise, which will be converted on the fly
 * to an Observable.
 * @return {Observable} An Observable whose Observers' subscriptions trigger
 * an invocation of the given Observable factory function.
 * @static true
 * @name defer
 * @owner Observable
 */
function defer(observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = input ? from_1.from(input) : empty_1.empty();
        return source.subscribe(subscriber);
    });
}
exports.defer = defer;

});

unwrapExports(defer_1);

var forkJoin_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






/* tslint:enable:max-line-length */
/**
 * Joins last values emitted by passed Observables.
 *
 * <span class="informal">Wait for Observables to complete and then combine last values they emitted.</span>
 *
 * <img src="./img/forkJoin.png" width="100%">
 *
 * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array
 * or directly as arguments. If no input Observables are provided, resulting stream will complete
 * immediately.
 *
 * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last
 * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting
 * array will have `n` values, where first value is the last thing emitted by the first Observable,
 * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will
 * not emit more than once and it will complete after that. If you need to emit combined values not only
 * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}
 * or {@link zip} instead.
 *
 * In order for resulting array to have the same length as the number of input Observables, whenever any of
 * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well
 * and it will not emit anything either, even if it already has some last values from other Observables.
 * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,
 * unless at any point some other Observable completes without emitting value, which brings us back to
 * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments
 * have to emit something at least once and complete.
 *
 * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables
 * will be immediately unsubscribed.
 *
 * Optionally `forkJoin` accepts project function, that will be called with values which normally
 * would land in emitted array. Whatever is returned by project function, will appear in output
 * Observable instead. This means that default project can be thought of as a function that takes
 * all its arguments and puts them into an array. Note that project function will be called only
 * when output Observable is supposed to emit a result.
 *
 * @example <caption>Use forkJoin with operator emitting immediately</caption>
 * import { forkJoin, of } from 'rxjs';
 *
 * const observable = forkJoin(
 *   of(1, 2, 3, 4),
 *   of(5, 6, 7, 8)
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [4, 8]
 * // "This is how it ends!"
 *
 *
 * @example <caption>Use forkJoin with operator emitting after some time</caption>
 * import { forkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)) // emit 0, 1, 2, 3 every half a second and complete
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // [2, 3] after 3 seconds
 * // "This is how it ends!" immediately after
 *
 *
 * @example <caption>Use forkJoin with project function</caption>
 * import { jorkJoin, interval } from 'rxjs';
 * import { take } from 'rxjs/operators';
 *
 * const observable = forkJoin(
 *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete
 *   interval(500).pipe(take(4)), // emit 0, 1, 2, 3 every half a second and complete
 *   (n, m) => n + m
 * );
 * observable.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('This is how it ends!')
 * );
 *
 * // Logs:
 * // 5 after 3 seconds
 * // "This is how it ends!" immediately after
 *
 * @see {@link combineLatest}
 * @see {@link zip}
 *
 * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments
 * passed directly to the operator.
 * @param {function} [project] Function that takes values emitted by input Observables and returns value
 * that will appear in resulting Observable instead of default array.
 * @return {Observable} Observable emitting either an array of last values emitted by passed Observables
 * or value from project function.
 */
function forkJoin() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    var resultSelector;
    if (typeof sources[sources.length - 1] === 'function') {
        // DEPRECATED PATH
        resultSelector = sources.pop();
    }
    // if the first and only other argument is an array
    // assume it's been called with `forkJoin([obs1, obs2, obs3])`
    if (sources.length === 1 && isArray$1.isArray(sources[0])) {
        sources = sources[0];
    }
    if (sources.length === 0) {
        return empty_1.EMPTY;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return forkJoin(sources).pipe(map_1.map(function (args) { return resultSelector.apply(void 0, args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        return new ForkJoinSubscriber(subscriber, sources);
    });
}
exports.forkJoin = forkJoin;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = /** @class */ (function (_super) {
    __extends(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources) {
        var _this = _super.call(this, destination) || this;
        _this.sources = sources;
        _this.completed = 0;
        _this.haveValues = 0;
        var len = sources.length;
        _this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult_1.subscribeToResult(_this, source, null, i);
            if (innerSubscription) {
                _this.add(innerSubscription);
            }
        }
        return _this;
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var _a = this, destination = _a.destination, haveValues = _a.haveValues, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            destination.next(values);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

});

unwrapExports(forkJoin_1);

var fromEvent_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction_1.isFunction(options)) {
        // DEPRECATED PATH
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEvent(target, eventName, options).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
exports.fromEvent = fromEvent;
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    var unsubscribe;
    if (isEventTarget(sourceObj)) {
        var source_1 = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        var source_2 = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = function () { return source_2.off(eventName, handler); };
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        var source_3 = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
    }
    else if (sourceObj && sourceObj.length) {
        for (var i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}

});

unwrapExports(fromEvent_1);

var fromEventPattern_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




/* tslint:enable:max-line-length */
/**
 * Creates an Observable from an API based on addHandler/removeHandler
 * functions.
 *
 * <span class="informal">Converts any addHandler/removeHandler API to an
 * Observable.</span>
 *
 * <img src="./img/fromEventPattern.png" width="100%">
 *
 * Creates an Observable by using the `addHandler` and `removeHandler`
 * functions to add and remove the handlers. The `addHandler` is
 * called when the output Observable is subscribed, and `removeHandler` is
 * called when the Subscription is unsubscribed.
 *
 * @example <caption>Emits clicks happening on the DOM document</caption>
 * function addClickHandler(handler) {
 *   document.addEventListener('click', handler);
 * }
 *
 * function removeClickHandler(handler) {
 *   document.removeEventListener('click', handler);
 * }
 *
 * var clicks = fromEventPattern(
 *   addClickHandler,
 *   removeClickHandler
 * );
 * clicks.subscribe(x => console.log(x));
 *
 * @see {@link from}
 * @see {@link fromEvent}
 *
 * @param {function(handler: Function): any} addHandler A function that takes
 * a `handler` function as argument and attaches it somehow to the actual
 * source of events.
 * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that
 * takes a `handler` function as argument and removes it in case it was
 * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,
 * removeHandler function will forward it.
 * @return {Observable<T>}
 * @name fromEventPattern
 */
function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        // DEPRECATED PATH
        return fromEventPattern(addHandler, removeHandler).pipe(map_1.map(function (args) { return isArray$1.isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
    }
    return new Observable_1.Observable(function (subscriber) {
        var handler = function () {
            var e = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                e[_i] = arguments[_i];
            }
            return subscriber.next(e.length === 1 ? e[0] : e);
        };
        var retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!isFunction_1.isFunction(removeHandler)) {
            return undefined;
        }
        return function () { return removeHandler(handler, retValue); };
    });
}
exports.fromEventPattern = fromEventPattern;

});

unwrapExports(fromEventPattern_1);

var generate_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    var resultSelector;
    var initialState;
    if (arguments.length == 1) {
        var options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || identity_1.identity;
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = identity_1.identity;
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new Observable_1.Observable(function (subscriber) {
        var state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber: subscriber,
                iterate: iterate,
                condition: condition,
                resultSelector: resultSelector,
                state: state
            });
        }
        do {
            if (condition) {
                var conditionResult = void 0;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            var value = void 0;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
exports.generate = generate;
function dispatch(state) {
    var subscriber = state.subscriber, condition = state.condition;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        var conditionResult = void 0;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    var value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}

});

unwrapExports(generate_1);

var iif_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * Decides at subscription time which Observable will actually be subscribed.
 *
 * <span class="informal">`If` statement for Observables.</span>
 *
 * `if` accepts a condition function and two Observables. When
 * an Observable returned by the operator is subscribed, condition function will be called.
 * Based on what boolean it returns at that moment, consumer will subscribe either to
 * the first Observable (if condition was true) or to the second (if condition was false). Condition
 * function may also not return anything - in that case condition will be evaluated as false and
 * second Observable will be subscribed.
 *
 * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that
 * was left undefined, resulting stream will simply complete immediately. That allows you to, rather
 * then controlling which Observable will be subscribed, decide at runtime if consumer should have access
 * to given Observable or not.
 *
 * If you have more complex logic that requires decision between more than two Observables, {@link defer}
 * will probably be a better choice. Actually `if` can be easily implemented with {@link defer}
 * and exists only for convenience and readability reasons.
 *
 *
 * @example <caption>Change at runtime which Observable will be subscribed</caption>
 * let subscribeToFirst;
 * const firstOrSecond = Rx.Observable.if(
 *   () => subscribeToFirst,
 *   Rx.Observable.of('first'),
 *   Rx.Observable.of('second')
 * );
 *
 * subscribeToFirst = true;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "first"
 *
 * subscribeToFirst = false;
 * firstOrSecond.subscribe(value => console.log(value));
 *
 * // Logs:
 * // "second"
 *
 *
 * @example <caption>Control an access to an Observable</caption>
 * let accessGranted;
 * const observableIfYouHaveAccess = Rx.Observable.if(
 *   () => accessGranted,
 *   Rx.Observable.of('It seems you have an access...') // Note that only one Observable is passed to the operator.
 * );
 *
 * accessGranted = true;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "It seems you have an access..."
 * // "The end"
 *
 * accessGranted = false;
 * observableIfYouHaveAccess.subscribe(
 *   value => console.log(value),
 *   err => {},
 *   () => console.log('The end')
 * );
 *
 * // Logs:
 * // "The end"
 *
 * @see {@link defer}
 *
 * @param {function(): boolean} condition Condition which Observable should be chosen.
 * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.
 * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.
 * @return {Observable} Either first or second Observable, depending on condition.
 * @static true
 * @name iif
 * @owner Observable
 */
function iif(condition, trueResult, falseResult) {
    if (trueResult === void 0) { trueResult = empty_1.EMPTY; }
    if (falseResult === void 0) { falseResult = empty_1.EMPTY; }
    return defer_1.defer(function () { return condition() ? trueResult : falseResult; });
}
exports.iif = iif;

});

unwrapExports(iif_1);

var isNumeric_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

function isNumeric(val) {
    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    // adding 1 corrects loss of precision from parseFloat (#15100)
    return !isArray$1.isArray(val) && (val - parseFloat(val) + 1) >= 0;
}
exports.isNumeric = isNumeric;

});

unwrapExports(isNumeric_1);

var interval_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });



/**
 * Creates an Observable that emits sequential numbers every specified
 * interval of time, on a specified IScheduler.
 *
 * <span class="informal">Emits incremental numbers periodically in time.
 * </span>
 *
 * <img src="./img/interval.png" width="100%">
 *
 * `interval` returns an Observable that emits an infinite sequence of
 * ascending integers, with a constant interval of time of your choosing
 * between those emissions. The first emission is not sent immediately, but
 * only after the first period has passed. By default, this operator uses the
 * `async` IScheduler to provide a notion of time, but you may pass any
 * IScheduler to it.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>
 * var numbers = Rx.Observable.interval(1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link delay}
 *
 * @param {number} [period=0] The interval size in milliseconds (by default)
 * or the time unit determined by the scheduler's clock.
 * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a sequential number each time
 * interval.
 * @static true
 * @name interval
 * @owner Observable
 */
function interval(period, scheduler) {
    if (period === void 0) { period = 0; }
    if (scheduler === void 0) { scheduler = async$1.async; }
    if (!isNumeric_1.isNumeric(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = async$1.async;
    }
    return new Observable_1.Observable(function (subscriber) {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));
        return subscriber;
    });
}
exports.interval = interval;
function dispatch(state) {
    var subscriber = state.subscriber, counter = state.counter, period = state.period;
    subscriber.next(counter);
    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);
}

});

unwrapExports(interval_1);

var merge_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function merge() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return mergeAll_1.mergeAll(concurrent)(fromArray_1.fromArray(observables, scheduler));
}
exports.merge = merge;

});

unwrapExports(merge_1);

var never_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * An Observable that emits no items to the Observer and never completes.
 *
 * <img src="./img/never.png" width="100%">
 *
 * A simple Observable that emits neither values nor errors nor the completion
 * notification. It can be used for testing purposes or for composing with other
 * Observables. Please note that by never emitting a complete notification, this
 * Observable keeps the subscription from being disposed automatically.
 * Subscriptions need to be manually disposed.
 *
 * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>
 * function info() {
 *   console.log('Will not be called');
 * }
 * var result = NEVER.startWith(7);
 * result.subscribe(x => console.log(x), info, info);
 *
 * @see {@link create}
 * @see {@link EMPTY}
 * @see {@link of}
 * @see {@link throwError}
 */
exports.NEVER = new Observable_1.Observable(noop_1.noop);
/**
 * @deprecated Deprecated in favor of using NEVER constant.
 */
function never() {
    return exports.NEVER;
}
exports.never = never;

});

unwrapExports(never_1);

var onErrorResumeNext_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




/* tslint:enable:max-line-length */
/**
 * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one
 * that was passed.
 *
 * <span class="informal">Execute series of Observables no matter what, even if it means swallowing errors.</span>
 *
 * <img src="./img/onErrorResumeNext.png" width="100%">
 *
 * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.
 * If the source it's subscribed to emits an error or completes, it will move to the next source
 * without error.
 *
 * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.
 *
 * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its
 * sources emits an error.
 *
 * Note that there is no way to handle any errors thrown by sources via the resuult of
 * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can
 * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.
 *
 * @example <caption>Subscribe to the next Observable after map fails</caption>
 * import { onErrorResumeNext, of } from 'rxjs/create';
 * import { map } from 'rxjs/operators';
 *
 * onErrorResumeNext(
 *  of(1, 2, 3, 0).pipe(
 *    map(x => {
 *      if (x === 0) throw Error();
 *      return 10 / x;
 *    })
 *  ),
 *  of(1, 2, 3),
 * )
 * .subscribe(
 *   val => console.log(val),
 *   err => console.log(err),          // Will never be called.
 *   () => console.log('done')
 * );
 *
 * // Logs:
 * // 10
 * // 5
 * // 3.3333333333333335
 * // 1
 * // 2
 * // 3
 * // "done"
 *
 * @see {@link concat}
 * @see {@link catch}
 *
 * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.
 * @return {Observable} An Observable that concatenates all sources, one after the other,
 * ignoring all errors, such that any error causes it to move on to the next source.
 */
function onErrorResumeNext() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    if (sources.length === 0) {
        return empty_1.EMPTY;
    }
    var first = sources[0], remainder = sources.slice(1);
    if (sources.length === 1 && isArray$1.isArray(first)) {
        return onErrorResumeNext.apply(void 0, first);
    }
    return new Observable_1.Observable(function (subscriber) {
        var subNext = function () { return subscriber.add(onErrorResumeNext.apply(void 0, remainder).subscribe(subscriber)); };
        return from_1.from(first).subscribe({
            next: function (value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
exports.onErrorResumeNext = onErrorResumeNext;

});

unwrapExports(onErrorResumeNext_1);

var pairs_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });


/**
 * Convert an object into an observable sequence of [key, value] pairs
 * using an optional IScheduler to enumerate the object.
 *
 * @example <caption>Converts a javascript object to an Observable</caption>
 * var obj = {
 *   foo: 42,
 *   bar: 56,
 *   baz: 78
 * };
 *
 * var source = Rx.Observable.pairs(obj);
 *
 * var subscription = source.subscribe(
 *   function (x) {
 *     console.log('Next: %s', x);
 *   },
 *   function (err) {
 *     console.log('Error: %s', err);
 *   },
 *   function () {
 *     console.log('Completed');
 *   });
 *
 * @param {Object} obj The object to inspect and turn into an
 * Observable sequence.
 * @param {Scheduler} [scheduler] An optional IScheduler to run the
 * enumeration of the input sequence on.
 * @returns {(Observable<[string, T]>)} An observable sequence of
 * [key, value] pairs from the object.
 */
function pairs(obj, scheduler) {
    if (!scheduler) {
        return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length && !subscriber.closed; i++) {
                var key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new Observable_1.Observable(function (subscriber) {
            var keys = Object.keys(obj);
            var subscription = new Subscription_1.Subscription();
            subscription.add(scheduler.schedule(dispatch, 0, { keys: keys, index: 0, subscriber: subscriber, subscription: subscription, obj: obj }));
            return subscription;
        });
    }
}
exports.pairs = pairs;
/** @internal */
function dispatch(state) {
    var keys = state.keys, index = state.index, subscriber = state.subscriber, subscription = state.subscription, obj = state.obj;
    if (!subscriber.closed) {
        if (index < keys.length) {
            var key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys: keys, index: index + 1, subscriber: subscriber, subscription: subscription, obj: obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
exports.dispatch = dispatch;

});

unwrapExports(pairs_1);

var race_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });




function race() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    // if the only argument is an array, it was most likely called with
    // `race([obs1, obs2, ...])`
    if (observables.length === 1) {
        if (isArray$1.isArray(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return fromArray_1.fromArray(observables, undefined).lift(new RaceOperator());
}
exports.race = race;
var RaceOperator = /** @class */ (function () {
    function RaceOperator() {
    }
    RaceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    };
    return RaceOperator;
}());
exports.RaceOperator = RaceOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var RaceSubscriber = /** @class */ (function (_super) {
    __extends(RaceSubscriber, _super);
    function RaceSubscriber(destination) {
        var _this = _super.call(this, destination) || this;
        _this.hasFirst = false;
        _this.observables = [];
        _this.subscriptions = [];
        return _this;
    }
    RaceSubscriber.prototype._next = function (observable) {
        this.observables.push(observable);
    };
    RaceSubscriber.prototype._complete = function () {
        var observables = this.observables;
        var len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (var i = 0; i < len && !this.hasFirst; i++) {
                var observable = observables[i];
                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    };
    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (var i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    var subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    };
    return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
exports.RaceSubscriber = RaceSubscriber;

});

unwrapExports(race_1);

var range_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * Creates an Observable that emits a sequence of numbers within a specified
 * range.
 *
 * <span class="informal">Emits a sequence of numbers in a range.</span>
 *
 * <img src="./img/range.png" width="100%">
 *
 * `range` operator emits a range of sequential integers, in order, where you
 * select the `start` of the range and its `length`. By default, uses no
 * IScheduler and just delivers the notifications synchronously, but may use
 * an optional IScheduler to regulate those deliveries.
 *
 * @example <caption>Emits the numbers 1 to 10</caption>
 * var numbers = Rx.Observable.range(1, 10);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link timer}
 * @see {@link interval}
 *
 * @param {number} [start=0] The value of the first integer in the sequence.
 * @param {number} [count=0] The number of sequential integers to generate.
 * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
 * the emissions of the notifications.
 * @return {Observable} An Observable of numbers that emits a finite range of
 * sequential integers.
 * @static true
 * @name range
 * @owner Observable
 */
function range(start, count, scheduler) {
    if (start === void 0) { start = 0; }
    if (count === void 0) { count = 0; }
    return new Observable_1.Observable(function (subscriber) {
        var index = 0;
        var current = start;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index: index, count: count, start: start, subscriber: subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
exports.range = range;
/** @internal */
function dispatch(state) {
    var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
exports.dispatch = dispatch;

});

unwrapExports(range_1);

var timer_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });




/**
 * Creates an Observable that starts emitting after an `initialDelay` and
 * emits ever increasing numbers after each `period` of time thereafter.
 *
 * <span class="informal">Its like {@link interval}, but you can specify when
 * should the emissions start.</span>
 *
 * <img src="./img/timer.png" width="100%">
 *
 * `timer` returns an Observable that emits an infinite sequence of ascending
 * integers, with a constant interval of time, `period` of your choosing
 * between those emissions. The first emission happens after the specified
 * `initialDelay`. The initial delay may be a {@link Date}. By default, this
 * operator uses the `async` IScheduler to provide a notion of time, but you
 * may pass any IScheduler to it. If `period` is not specified, the output
 * Observable emits only one value, `0`. Otherwise, it emits an infinite
 * sequence.
 *
 * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>
 * var numbers = Rx.Observable.timer(3000, 1000);
 * numbers.subscribe(x => console.log(x));
 *
 * @example <caption>Emits one number after five seconds</caption>
 * var numbers = Rx.Observable.timer(5000);
 * numbers.subscribe(x => console.log(x));
 *
 * @see {@link interval}
 * @see {@link delay}
 *
 * @param {number|Date} [dueTime] The initial delay time to wait before
 * emitting the first value of `0`.
 * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the
 * subsequent numbers.
 * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling
 * the emission of values, and providing a notion of "time".
 * @return {Observable} An Observable that emits a `0` after the
 * `initialDelay` and ever increasing numbers after each `period` of time
 * thereafter.
 * @static true
 * @name timer
 * @owner Observable
 */
function timer(dueTime, periodOrScheduler, scheduler) {
    if (dueTime === void 0) { dueTime = 0; }
    var period = -1;
    if (isNumeric_1.isNumeric(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (isScheduler_1.isScheduler(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!isScheduler_1.isScheduler(scheduler)) {
        scheduler = async$1.async;
    }
    return new Observable_1.Observable(function (subscriber) {
        var due = isNumeric_1.isNumeric(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period: period, subscriber: subscriber
        });
    });
}
exports.timer = timer;
function dispatch(state) {
    var index = state.index, period = state.period, subscriber = state.subscriber;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}

});

unwrapExports(timer_1);

var using_1 = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

 // from from from! LAWL

/**
 * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.
 *
 * <span class="informal">Use it when you catch yourself cleaning up after an Observable.</span>
 *
 * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.
 * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with
 * that object and should return an Observable. That Observable can use resource object during its execution.
 * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor
 * resource object will be shared in any way between subscriptions.
 *
 * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed
 * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output
 * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,
 * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which
 * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone
 * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make
 * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.
 *
 * @see {@link defer}
 *
 * @param {function(): ISubscription} resourceFactory A function which creates any resource object
 * that implements `unsubscribe` method.
 * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which
 * creates an Observable, that can use injected resource object.
 * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but
 * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.
 */
function using(resourceFactory, observableFactory) {
    return new Observable_1.Observable(function (subscriber) {
        var resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        var source = result ? from_1.from(result) : empty_1.EMPTY;
        var subscription = source.subscribe(subscriber);
        return function () {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
exports.using = using;

});

unwrapExports(using_1);

var zip_1 = createCommonjsModule(function (module, exports) {
"use strict";
var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });






/* tslint:enable:max-line-length */
/**
 * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each
 * of its input Observables.
 *
 * If the latest parameter is a function, this function is used to compute the created value from the input values.
 * Otherwise, an array of the input values is returned.
 *
 * @example <caption>Combine age and name from different sources</caption>
 *
 * let age$ = Observable.of<number>(27, 25, 29);
 * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');
 * let isDev$ = Observable.of<boolean>(true, true, false);
 *
 * Observable
 *     .zip(age$,
 *          name$,
 *          isDev$,
 *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))
 *     .subscribe(x => console.log(x));
 *
 * // outputs
 * // { age: 27, name: 'Foo', isDev: true }
 * // { age: 25, name: 'Bar', isDev: true }
 * // { age: 29, name: 'Beer', isDev: false }
 *
 * @param observables
 * @return {Observable<R>}
 * @static true
 * @name zip
 * @owner Observable
 */
function zip() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i] = arguments[_i];
    }
    var resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return fromArray_1.fromArray(observables, undefined).lift(new ZipOperator(resultSelector));
}
exports.zip = zip;
var ZipOperator = /** @class */ (function () {
    function ZipOperator(resultSelector) {
        this.resultSelector = resultSelector;
    }
    ZipOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    };
    return ZipOperator;
}());
exports.ZipOperator = ZipOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipSubscriber = /** @class */ (function (_super) {
    __extends(ZipSubscriber, _super);
    function ZipSubscriber(destination, resultSelector, values) {
        if (values === void 0) { values = Object.create(null); }
        var _this = _super.call(this, destination) || this;
        _this.iterators = [];
        _this.active = 0;
        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        _this.values = values;
        return _this;
    }
    ZipSubscriber.prototype._next = function (value) {
        var iterators = this.iterators;
        if (isArray$1.isArray(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[iterator$1.iterator] === 'function') {
            iterators.push(new StaticIterator(value[iterator$1.iterator]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    };
    ZipSubscriber.prototype._complete = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                this.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--; // not an observable
            }
        }
    };
    ZipSubscriber.prototype.notifyInactive = function () {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    };
    ZipSubscriber.prototype.checkIterators = function () {
        var iterators = this.iterators;
        var len = iterators.length;
        var destination = this.destination;
        // abort if not all of them have values
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        var shouldComplete = false;
        var args = [];
        for (var i = 0; i < len; i++) {
            var iterator = iterators[i];
            var result = iterator.next();
            // check to see if it's completed now that you've gotten
            // the next value.
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    };
    ZipSubscriber.prototype._tryresultSelector = function (args) {
        var result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return ZipSubscriber;
}(Subscriber_1.Subscriber));
exports.ZipSubscriber = ZipSubscriber;
var StaticIterator = /** @class */ (function () {
    function StaticIterator(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    StaticIterator.prototype.hasValue = function () {
        return true;
    };
    StaticIterator.prototype.next = function () {
        var result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    };
    StaticIterator.prototype.hasCompleted = function () {
        var nextResult = this.nextResult;
        return nextResult && nextResult.done;
    };
    return StaticIterator;
}());
var StaticArrayIterator = /** @class */ (function () {
    function StaticArrayIterator(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    StaticArrayIterator.prototype[iterator$1.iterator] = function () {
        return this;
    };
    StaticArrayIterator.prototype.next = function (value) {
        var i = this.index++;
        var array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    };
    StaticArrayIterator.prototype.hasValue = function () {
        return this.array.length > this.index;
    };
    StaticArrayIterator.prototype.hasCompleted = function () {
        return this.array.length === this.index;
    };
    return StaticArrayIterator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ZipBufferIterator = /** @class */ (function (_super) {
    __extends(ZipBufferIterator, _super);
    function ZipBufferIterator(destination, parent, observable) {
        var _this = _super.call(this, destination) || this;
        _this.parent = parent;
        _this.observable = observable;
        _this.stillUnsubscribed = true;
        _this.buffer = [];
        _this.isComplete = false;
        return _this;
    }
    ZipBufferIterator.prototype[iterator$1.iterator] = function () {
        return this;
    };
    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
    //    this is legit because `next()` will never be called by a subscription in this case.
    ZipBufferIterator.prototype.next = function () {
        var buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    };
    ZipBufferIterator.prototype.hasValue = function () {
        return this.buffer.length > 0;
    };
    ZipBufferIterator.prototype.hasCompleted = function () {
        return this.buffer.length === 0 && this.isComplete;
    };
    ZipBufferIterator.prototype.notifyComplete = function () {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    };
    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    };
    ZipBufferIterator.prototype.subscribe = function (value, index) {
        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);
    };
    return ZipBufferIterator;
}(OuterSubscriber_1.OuterSubscriber));

});

unwrapExports(zip_1);

var rxjs = createCommonjsModule(function (module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* Observable */

exports.Observable = Observable_1.Observable;

exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;

exports.GroupedObservable = groupBy_1.GroupedObservable;

exports.observable = observable$1.observable;
/* Subjects */

exports.Subject = Subject_1.Subject;

exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;

exports.ReplaySubject = ReplaySubject_1.ReplaySubject;

exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
/* Schedulers */

exports.asapScheduler = asap$1.asap;

exports.asyncScheduler = async$1.async;

exports.queueScheduler = queue$1.queue;

exports.animationFrameScheduler = animationFrame$1.animationFrame;

exports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;
exports.VirtualAction = VirtualTimeScheduler_1.VirtualAction;

exports.Scheduler = Scheduler_1.Scheduler;
/* Subscription */

exports.Subscription = Subscription_1.Subscription;

exports.Subscriber = Subscriber_1.Subscriber;
/* Notification */

exports.Notification = Notification_1.Notification;
/* Utils */

exports.pipe = pipe_1.pipe;

exports.noop = noop_1.noop;

exports.identity = identity_1.identity;

exports.isObservable = isObservable_1.isObservable;
/* Error types */

exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;

exports.EmptyError = EmptyError_1.EmptyError;

exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;

exports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;

exports.TimeoutError = TimeoutError_1.TimeoutError;
/* Static observable creation exports */

exports.bindCallback = bindCallback_1.bindCallback;

exports.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;

exports.combineLatest = combineLatest_1.combineLatest;

exports.concat = concat_1.concat;

exports.defer = defer_1.defer;

exports.empty = empty_1.empty;

exports.forkJoin = forkJoin_1.forkJoin;

exports.from = from_1.from;

exports.fromEvent = fromEvent_1.fromEvent;

exports.fromEventPattern = fromEventPattern_1.fromEventPattern;

exports.generate = generate_1.generate;

exports.iif = iif_1.iif;

exports.interval = interval_1.interval;

exports.merge = merge_1.merge;

exports.never = never_1.never;

exports.of = of_1.of;

exports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;

exports.pairs = pairs_1.pairs;

exports.race = race_1.race;

exports.range = range_1.range;

exports.throwError = throwError_1.throwError;

exports.timer = timer_1.timer;

exports.using = using_1.using;

exports.zip = zip_1.zip;
/* Constants */
var empty_2 = empty_1;
exports.EMPTY = empty_2.EMPTY;
var never_2 = never_1;
exports.NEVER = never_2.NEVER;
/* Config */

exports.config = config$1.config;

});

unwrapExports(rxjs);
var rxjs_1 = rxjs.Observable;
var rxjs_5 = rxjs.Subject;
var rxjs_6 = rxjs.BehaviorSubject;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright [2019] [Metamagic]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by pratik on 18/12/17.
 */
class AmexioHeaderComponent {
    constructor() {
        this.className = 'modal-window-header';
        this.jstyfy = 'space-between';
        this.background = '';
        this.color = '';
        this.closeable = false;
        this.maximize = false;
        this.isFullWindow = false;
        this.closeableBehaiour = new rxjs_6(false);
        this.maximizeBehaiour = new rxjs_6(false);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} maximize
     * @param {?} isFullWindow
     * @return {?}
     */
    setMaximizeData(maximize, isFullWindow) {
        this.maximize = maximize;
        this.isFullWindow = isFullWindow;
        this.maximizeBehaiour.next(this.isFullWindow);
    }
    /**
     * @param {?} materialDesign
     * @return {?}
     */
    setMaterialDesignStatus(materialDesign) {
        if (materialDesign) {
            this.background = 'white';
            this.color = 'black';
        }
    }
    /**
     * @return {?}
     */
    sizeChange() {
        this.isFullWindow = !this.isFullWindow;
        this.maximizeBehaiour.next(this.isFullWindow);
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.closeableBehaiour.next(false);
    }
}
AmexioHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-header', template: `
  <ng-content></ng-content>
  <span>
  <amexio-c-icon class="cursor-style" *ngIf="(isFullWindow && maximize )"
  [key]="'window_maximize'" (onClick)="sizeChange()"></amexio-c-icon>
  <amexio-c-icon class="cursor-style" *ngIf="(!isFullWindow && maximize )"
  [key]="'window_restore'" (click)="sizeChange()"></amexio-c-icon>
  <amexio-c-icon class="cursor-style"
  style = "padding-left: 10px"
  *ngIf="closeable" [key]="'window_close'" (onClick)="onCloseClick()"></amexio-c-icon>
  </span>
  `,
                styles: [
                    `
  .cursor-style {
  cursor:pointer;
  }
  `,
                ],
            },] },
];
/** @nocollapse */
AmexioHeaderComponent.ctorParameters = () => [];
AmexioHeaderComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['attr.class',] }],
    jstyfy: [{ type: HostBinding, args: ['style.justify-content',] }],
    background: [{ type: HostBinding, args: ['style.background',] }],
    color: [{ type: HostBinding, args: ['style.color',] }],
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*Created by pratik on 14/12/17.
*/
class AmexioPanelComponent extends LifeCycleBaseComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        /*
        Properties
        name : collapsible
        datatype :  boolean
        version : 4.0 onwards
        default : false
        description : Pane will expand or collapse based on the boolean.
        */
        this.collapsible = true;
        this.contentAlign = 'left';
        this.onClick = new EventEmitter();
        this.nodeRightClick = new EventEmitter();
        this.rightClick = new EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.faFaIconUPCss = 'fa fa-caret-up';
        this.faFaIconDownCss = 'fa fa-caret-down';
        this.panelstyle = { visibility: 'visible' };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = Math.random() * 1000 + 'panel';
        if (!this.collapsible) {
            this.expanded = true;
        }
        this.iconclassKey = this.expanded ? this.faFaIconUPCss : this.faFaIconDownCss;
        if (this.height) {
            return this.height;
        }
        this.updatestyle();
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    /**
     * @param {?} btn
     * @return {?}
     */
    onTabClick(btn) {
        btn.classList.toggle('active-accordion');
        if (this.iconclassKey === this.faFaIconDownCss) {
            this.iconclassKey = this.faFaIconUPCss;
        }
        else if (this.iconclassKey === this.faFaIconUPCss) {
            this.iconclassKey = this.faFaIconDownCss;
        }
        this.expanded = !this.expanded;
        this.updatestyle();
        this.onClick.emit();
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        this.rightClick.emit(Data);
    }
    /**
     * @return {?}
     */
    updatestyle() {
        if (this.fit && this.expanded) {
            this.panelstyle = { visibility: 'visible', state: 'visible' };
        }
        else if (this.fit && !this.expanded) {
            this.panelstyle = { visibility: 'hidden', state: 'hidden' };
        }
        else if (!this.fit && this.expanded) {
            this.panelstyle = { display: 'block', state: 'block' };
        }
        else if (!this.fit && !this.expanded) {
            this.panelstyle = { display: 'none', state: 'none' };
        }
        else {
            this.panelstyle = { visibility: 'visible', state: 'visible' };
        }
    }
    /**
     * @return {?}
     */
    getContextMenu() {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    loadContextMenu(rightClickData) {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.mouseLocation.left = rightClickData.event.clientX;
            this.mouseLocation.top = rightClickData.event.clientY;
            this.getContextMenu();
            this.posixUp = this.getListPosition(rightClickData.ref);
            rightClickData.event.preventDefault();
            rightClickData.event.stopPropagation();
            this.rightClickNodeData = rightClickData.data;
            this.nodeRightClick.emit(rightClickData);
        }
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.flag = false;
            if (!this.flag) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.removeListner();
    }
}
AmexioPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-panel',
                template: `



    <div    #id style="width: 100%" (contextmenu)="loadContextMenu({event:$event,ref:id})"  >
        <ng-container *ngIf="collapsible; else elseBlock"> 
            <div id="{{componentId}}" [ngStyle]="{'background': bgColor, 'color': color}"
            *ngIf="header" class="panel-accordion" 
            (click)="onTabClick(btn1)"    >
                <amexio-toolbar
                tabindex="0" 
                role="heading"
                [attr.aria-expanded]="expanded"
                (keyup.enter)="onTabClick(btn1)"
                (keyup.space)="onTabClick(btn1)"

            
                >
                    <amexio-toolbar-item position-left  attr.aria-label="{{title}}">
                        <amexio-label  attr.aria-labelledby="{{componentId}}" size="small">
                            {{title}}
                        </amexio-label>
                    </amexio-toolbar-item>
                    <amexio-toolbar-item position-right>
                        <ng-content select="amexio-panel-header"></ng-content>
                    </amexio-toolbar-item>
                    <amexio-toolbar-item style="margin:auto" position-right>
                        <i [class]="iconclassKey" aria-hidden="true" #btn1></i>
                    </amexio-toolbar-item>
                </amexio-toolbar>
            </div>
        </ng-container>

        <ng-template #elseBlock> {{expanded}}
            <div    id="{{componentId}}"   *ngIf="header" class="panel-accordion" (click)="onTabClick(btn1)">
                <amexio-toolbar
                tabindex="0" 
                [attr.aria-expanded]="expanded"
                (keyup.enter)="onTabClick(btn1)"
                (keyup.space)="onTabClick(btn1)"
            
                >
                    <amexio-toolbar-item position-left tabindex="0" [attr.aria-expanded]="expanded"  attr.aria-label="{{title}}">
                        <amexio-label  size="small"   attr.aria-labelledby="{{componentId}}" >
                            {{title}}
                        </amexio-label>
                    </amexio-toolbar-item>
                    <amexio-toolbar-item position-right>
                        <ng-content select="amexio-panel-header"></ng-content>
                    </amexio-toolbar-item>
                </amexio-toolbar>
            </div>
        </ng-template>
    
        <div tabindex="0"  id="panelpanelId" class="panel-panel" [ngStyle]="{'border-color': border && bgColor}" [ngClass]="{'panel-box-border':border}" [style.textAlign]="contentAlign" [style.height.px]="height"
            [@panelState]="panelstyle.state">
            <ng-content aria-labelledby="panelpanelId" ></ng-content>
        </div>

        <ng-container *ngIf="flag && (this.contextmenu && this.contextmenu.length > 0)">
            <base-contextmenu tabindex="0" [base-context-menu]="contextmenu" [mouse-location-top]="mouseLocation.top"
                [mouse-location-left]="mouseLocation.left" [is-FlagShow]="flag" [right-click-data]="nodeRightClick"
                (onRightClick)="rightClickDataEmit($event)" [position-up]="posixUp">
            </base-contextmenu>
        </ng-container>
    </div>
  `,
                animations: [
                    trigger('panelState', [
                        state('hidden', style({
                            visibility: 'hidden',
                            height: '0px',
                        })),
                        state('visible', style({
                            visibility: 'visible',
                            height: '*',
                        })),
                        state('block', style({
                            display: 'block',
                            height: '*',
                        })),
                        state('none', style({
                            display: 'none',
                            height: '0px',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioPanelComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioPanelComponent.propDecorators = {
    title: [{ type: Input }],
    header: [{ type: Input }],
    expanded: [{ type: Input }],
    border: [{ type: Input }],
    collapsible: [{ type: Input }],
    height: [{ type: Input }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    color: [{ type: Input }],
    bgColor: [{ type: Input, args: ['background',] }],
    contentAlign: [{ type: Input, args: ['content-align',] }],
    parentRef: [{ type: Input }],
    fit: [{ type: Input, args: ['fit',] }],
    onClick: [{ type: Output }],
    nodeRightClick: [{ type: Output }],
    rightClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioPanelHeaderComponent {
    constructor() {
        this.role = 'amexio-panel-header';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioPanelHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-panel-header', template: `
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioPanelHeaderComponent.ctorParameters = () => [];
AmexioPanelHeaderComponent.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.class',] }],
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StepBlockComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
StepBlockComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-step-block', template: `
  `,
            },] },
];
/** @nocollapse */
StepBlockComponent.ctorParameters = () => [];
StepBlockComponent.propDecorators = {
    active: [{ type: Input }],
    label: [{ type: Input }],
    icon: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*  Created by pratik on 15/12/17.
*/
class AmexioStepsComponent {
    constructor() {
        /*
        Events
        name : onClick
        datatype : none
        version : none
        default : none
        description :Event emitted on block click.
        */
        this.onClick = new EventEmitter();
        /*
        Events
        name : getStepBlockData
        datatype : none
        version : none
        default : none
        description :Gives stepblock information .
        */
        this.getStepBlockData = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} clickData
     * @param {?} ev
     * @return {?}
     */
    onStepClick(clickData, ev) {
        this.getStepBlockData.emit({ event: ev, data: clickData });
        this.onClick.emit(clickData);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.data && this.data.length > 0) {
            this.stepPreviewData = JSON.parse(JSON.stringify(this.data));
            this.stepBlockArray = this.data;
        }
        else {
            this.stepBlockArray = this.stepBlocks.toArray();
        }
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.stepPreviewData) !== JSON.stringify(this.data)) {
            this.stepPreviewData = JSON.parse(JSON.stringify(this.data));
            this.stepBlockArray = this.data;
        }
    }
}
AmexioStepsComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-steps', template: `
    <div class="stepwizard" *ngIf="(index && !block && !icon)">
        <div class="stepwizard-row setup-panel">
            <div *ngFor="let stepBlock of stepBlockArray; let i = index" class="stepwizard-step">
                <button type="button" [disabled]="!stepBlock.active" [ngClass]="{'disabled index-step-inactive':!stepBlock.active,
            'active':stepBlock.active}" class="btn-circle button button-primary" (click)="onStepClick(stepBlock,$event)">{{i + 1}}
                </button>
                <ng-container *ngIf="stepBlock.label && !stepBlock.active">
                    <p>{{stepBlock.label}}</p>
                </ng-container>
                <ng-container *ngIf="stepBlock.label && stepBlock.active">
                    <p><strong class="step-label-highlight">{{stepBlock.label}}</strong></p>
                </ng-container>
            </div>
        </div>
    </div>

    <!--this code use when user give icon true bydefault it is false-->
    <div class="stepwizard" *ngIf="(icon && !index && !block)">
        <div class="stepwizard-row setup-panel">
            <div *ngFor="let stepBlock of stepBlockArray; let i = index" class="stepwizard-step">
                <ng-container *ngIf="stepBlock.icon && stepBlock.active">
                    <span [ngClass]="{'step-box-icon-active':stepBlock.active}" (onClick)="onStepClick(stepBlock,$event)">
                        <amexio-c-icon [customclass]="stepBlock.icon"></amexio-c-icon>
                    </span>
                </ng-container>
                <ng-container *ngIf="stepBlock.icon && !stepBlock.active">
                    <span [ngClass]="{'step-block-icon-disable':!stepBlock.active}">
                        <amexio-c-icon [customclass]="stepBlock.icon" (onClick)="onStepClick(stepBlock,$event)"></amexio-c-icon>
                    </span>
                </ng-container>
                <ng-container *ngIf="stepBlock.icon=='' || !stepBlock.icon">
                    <br>
                </ng-container>
                <ng-container *ngIf="stepBlock.label && !stepBlock.active">
                    <p style="cursor:not-allowed;" (onClick)="onStepClick(stepBlock,$event)">{{stepBlock.label}}</p>
                </ng-container>
                <ng-container *ngIf="stepBlock.label && stepBlock.active">
                    <p style="cursor:pointer;"><strong class="step-label-highlight" [ngClass]="{'step-box-label-active':stepBlock.active}">{{stepBlock.label}}</strong></p>
                </ng-container>
            </div>
        </div>
    </div>

    <!--This code use for steps of boxes-->
    <div *ngIf="block">
        <div *ngIf="block" role="tablist" class="step-box-sqaure">
            <div class="step-box-table">
                <ng-container *ngFor="let stepBlock of stepBlockArray; let i = index">
                    <div role="link" class="step-box-table-item" [tabindex]="stepBlock.active ? 0 : -1" [attr.aria-labelleby]="stepBlock.label" (click)="onStepClick(stepBlock,$event)" style="padding-top: 10px;" [ngClass]="{'disabled step-box-table-item-hover ':!stepBlock.active,'active':stepBlock.active}">
                        <a>
                            <ng-container *ngIf="index">
                                {{i + 1}}<br>
                            </ng-container>
                            <ng-container *ngIf="icon && stepBlock.icon">
                                <amexio-c-icon [customclass]="stepBlock.icon"></amexio-c-icon>
                            </ng-container>
                            <ng-container *ngIf="stepBlock.label && !stepBlock.active">
                                <p style="word-wrap: break-word;">{{stepBlock.label}}</p>
                            </ng-container>
                            <ng-container *ngIf="stepBlock.label && stepBlock.active">
                                <p style="word-wrap: break-word;"><strong>{{stepBlock.label}}</strong></p>
                            </ng-container>
                        </a>
                    </div>
                </ng-container>

            </div>
        </div>

    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioStepsComponent.ctorParameters = () => [];
AmexioStepsComponent.propDecorators = {
    index: [{ type: Input }],
    icon: [{ type: Input }],
    block: [{ type: Input }],
    onClick: [{ type: Output }],
    getStepBlockData: [{ type: Output }],
    stepBlocks: [{ type: ContentChildren, args: [StepBlockComponent,] }],
    data: [{ type: Input, args: ['data',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 8/12/17.
*/
class AmexioTabPillComponent {
    constructor() {
        /*
        Properties
        name : disabled
        datatype : boolean
        version : 4.1.4 onwards
        default : false
        description : Disable property for tab
        */
        this.disabled = false;
        /*
        Properties
        name : active
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : Set true for specific tab open as default tab..
        */
        this.active = false;
        /*
         Properties
         name : closable
         datatype : boolean
         version : 4.2 onwards
         default : false
         description : Font color of label
         */
        this.closable = null;
        this.tabId = Math.floor(Math.random() * 90000) + 10000;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioTabPillComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tab', template: `
    <div style = "outline: none" role="tabpanel" tabindex="1" class="tab-pane active" attr.aria-labelledby="{{tablk}}" [attr.id]="tabId" [hidden]="!active">
      <ng-content></ng-content>
      <ng-template #target></ng-template>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioTabPillComponent.ctorParameters = () => [];
AmexioTabPillComponent.propDecorators = {
    title: [{ type: Input }],
    disabled: [{ type: Input }],
    active: [{ type: Input }],
    icon: [{ type: Input }],
    amexiocolor: [{ type: Input, args: ['amexio-color',] }],
    closable: [{ type: Input }],
    target: [{ type: ViewChild, args: ['target', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/1/17.
*/
class AmexioRightVerticalTabComponent {
    /**
     * @param {?} render
     * @param {?} componentFactoryResolver
     */
    constructor(render, componentFactoryResolver) {
        this.render = render;
        this.componentFactoryResolver = componentFactoryResolver;
        this.dummyArray = [];
        this.componentId = '';
        /*
        Events
        name : onClick
        datatype :none
        version : 4.0 onwards
        default : none
        description : Callback to invoke on activated tab event.
        */
        this.onClick = new EventEmitter();
        this.tabPosition = 'top';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = Math.floor(Math.random() * 90000) + 10000 + '_tabc';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.tabCollection = this.queryTabs.toArray();
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    onTabClick(tab) {
        if (!tab.disabled && !tab.header) {
            for (const /** @type {?} */ i of this.tabCollection) {
                if (i === tab) {
                    i['active'] = true;
                    this.asignTabPillClass(tab);
                    this.onClick.emit(tab);
                }
                else {
                    i['active'] = false;
                    i['tabPillClass'] = '';
                }
            }
            this.tabCollection.forEach((tab1) => {
                this.asignTabPillClass(tab1);
            });
        }
    }
    /**
     * @param {?} tabData
     * @return {?}
     */
    asignTabPillClass(tabData) {
        tabData.tabPillClass = '';
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && tabData.active && (this.tabPosition === 'top')) {
            tabData.tabPillClass = 'activetab';
        }
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'bottomActivetab';
        }
        if (tabData.disabled) {
            tabData.tabPillClass = 'disabled-tab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'top') && tabData.active) {
            tabData.tabPillClass = 'activecolortab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'activebottomcolortab';
        }
    }
    /**
     * @return {?}
     */
    findTabStyleClass() {
        if (this.tabPosition === 'top') {
            return 'tabposition-right-top';
        }
        if (this.tabPosition === 'bottom') {
            return 'tabposition-right-bottom';
        }
    }
    /**
     * @return {?}
     */
    closeAllTabs() {
        this.tabCollection.forEach((tabs) => {
            if (tabs.closable === true || this.closable === true) {
                this.closeTab(tabs);
            }
        });
    }
    /**
     * @param {?} title
     * @param {?} amexiocolor
     * @param {?} closable
     * @param {?} component
     * @return {?}
     */
    addDynamicTab(title, amexiocolor, closable, component) {
        // get a component factory for our TabComponent
        const /** @type {?} */ tpCF = this.componentFactoryResolver.resolveComponentFactory(AmexioTabPillComponent);
        const /** @type {?} */ tp = this.target.createComponent(tpCF);
        // set the according properties on our component instance
        const /** @type {?} */ instance = /** @type {?} */ (tp.instance);
        instance.title = title;
        instance.active = true;
        instance.closable = closable;
        instance['tabpillinstance'] = this.target;
        if (instance.amexiocolor === '') {
            instance.amexiocolor = 'amexio-top-tab-black';
        }
        else {
            instance.amexiocolor = 'amexio-top-tab-' + amexiocolor;
        }
        // create dynamic component
        const /** @type {?} */ dynCF = this.componentFactoryResolver.resolveComponentFactory(component);
        const /** @type {?} */ dynCmp = tp.instance.target.createComponent(dynCF);
        // Push new tab and select it.
        this.dummyArray.push(tp);
        this.tabCollection.push(tp.instance);
        this.selectTab(tp.instance);
        return dynCmp.instance;
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    selectTab(tab) {
        // deactivate all tabs
        this.tabCollection.forEach((tab1) => {
            tab1.active = false;
        });
        tab.active = true;
        this.tabCollection.forEach((tab1) => {
            this.asignTabPillClass(tab1);
        });
    }
    /**
     * @param {?} tabNode
     * @return {?}
     */
    closeTab(tabNode) {
        const /** @type {?} */ newTab = [];
        let /** @type {?} */ index = 0;
        let /** @type {?} */ tabHighlightIndex = 0;
        this.tabCollection.forEach((tab, i) => {
            tab.active = false;
            if (tab.tabId === tabNode.tabId) {
                tabHighlightIndex = index;
                if (tab.hasOwnProperty('tabpillinstance')) {
                    tab.target.remove();
                }
                else {
                    this.tabDomRemove(tab);
                }
            }
            else if (tab.tabId !== tabNode.tabId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex === newTab.length) {
            tabHighlightIndex--;
        }
        this.tabCollection = newTab;
        if (tabHighlightIndex > -1) {
            this.activateTab(newTab[tabHighlightIndex].tabId);
        }
        else {
            this.activateTab(null);
        }
        if (this.tabCollection.length === 1) {
            this.closable = false;
        }
        if (newTab.length === 1) {
            newTab[0].closable = false;
        }
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    tabDomRemove(tab) {
        const /** @type {?} */ removeNode = document.getElementById(tab.tabId).parentNode;
        const /** @type {?} */ parentRefNode = removeNode.parentNode;
        parentRefNode.removeChild(removeNode);
    }
    /**
     * @param {?} tabId
     * @return {?}
     */
    activateTab(tabId) {
        this.tabCollection.forEach((tab) => {
            tab.active = false;
            if (tab.tabId === tabId) {
                tab.active = true;
            }
        });
    }
}
AmexioRightVerticalTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-right-vertical-tab-view',
                template: `
    <div class="righttable">
        <div class="righttablerow">
            <div class="tablecol verticalalign-tabcontent">
                <div style="float:left" class="tabcontent" [attr.id]="componentId">
                    <ng-content></ng-content>
                    <ng-template #target></ng-template>
                </div>
            </div>

            <div style="float:right;height:580px" class="righttablecol verticalalign-tabright">
                <div #tab class="verticalnavtab verticalnavtab-right" [ngClass]="{'tabposition-right-top': (tabPosition==='top'),'tabposition-right-bottom':(tabPosition==='bottom')}">
                    <ul>
                        <li *ngFor="let tabnode of tabCollection">
                            <div class="defaultnode" [ngClass]="{'rightactivetab':tabnode.active,'disabled-tab':tabnode.disabled }" (click)="onTabClick(tabnode)" [ngStyle]="{'color': tabnode.amexiocolor}">
                                <span *ngIf="tabnode.icon" [ngClass]="tabnode.icon" aria-hidden="true"></span>
                                <span style="padding-left:5px">{{tabnode.title}}</span>
                                <span *ngIf="closable" class="tablecol">
                    <amexio-c-icon key="tab_close" (onClick)="closeTab(tabnode)" style="padding-left:5px;float:right"></amexio-c-icon>
                  </span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>

        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioRightVerticalTabComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ComponentFactoryResolver }
];
AmexioRightVerticalTabComponent.propDecorators = {
    tabs: [{ type: ViewChild, args: ['tab', { read: ElementRef },] }],
    queryTabs: [{ type: ContentChildren, args: [AmexioTabPillComponent,] }],
    target: [{ type: ViewChild, args: ['target', { read: ViewContainerRef },] }],
    closable: [{ type: Input }],
    tabPosition: [{ type: Input }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
const noop$3 = () => {
};
/**
 * @abstract
 * @template T
 */
class ValueAccessorBase {
    constructor() {
        this.onTouchedCallback = noop$3;
        this.onChangeCallback = noop$3;
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} name
     * @param {?} fieldlabel
     * @param {?} inputType
     * @return {?}
     */
    generateName(name, fieldlabel, inputType) {
        let /** @type {?} */ newName = name;
        if (!name && fieldlabel) {
            newName = fieldlabel.replace(/\s/g, '');
        }
        else if (!name && !fieldlabel) {
            newName = inputType + '-' + this.getRandomString();
        }
        return newName;
    }
    /**
     * @return {?}
     */
    getRandomString() {
        const /** @type {?} */ possibleCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        let /** @type {?} */ randomString = '';
        for (let /** @type {?} */ i = 0; i < 6; i++) {
            randomString += possibleCharacters.charAt(Math.floor(Math.random() * possibleCharacters.length));
        }
        return randomString;
    }
    /**
     * @param {?} inputType
     * @param {?} name
     * @return {?}
     */
    createCompId(inputType, name) {
        return inputType + '_' + name + '_' + Math.floor(Math.random() * 1000 + 999);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioCheckBoxGroupComponent extends ValueAccessorBase {
    /**
     * @param {?} httpService
     */
    constructor(httpService) {
        super();
        this.httpService = httpService;
        /*
          Properties
          name : disabled
          datatype : boolean
          version : 4.0 onwards
          default : false
          description :  If true will not react on any user events and show disable icon over
          */
        this.disabled = false;
        this.onSelection = new EventEmitter();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        this._data = v;
        this.viewdata = of(this.data);
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('checkboxgroup', this.name);
        let /** @type {?} */ reponseData;
        if (this.httpmethod && this.httpurl) {
            this.httpService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                reponseData = response;
            }, (error) => {
            }, () => {
                this.data = this.getResponseData(reponseData);
            });
        }
        else if (this.data && this.datareader) {
            this.data = this.getResponseData(this.data);
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    contains(value) {
        if (this._model instanceof Array) {
            this._model.forEach((obj) => {
                if (obj[this.displayfield] === value[this.displayfield]) {
                    return true;
                }
            });
        }
        return false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    add(value) {
        if (!this.contains(value)) {
            if (this._model instanceof Array) {
                this._model.push(value);
            }
            else {
                this._model = [value];
            }
            this.onChangeCallback(this._model);
        }
        this.emitCheckboxes(this._model);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    remove(value) {
        const /** @type {?} */ index = this._model.indexOf(value);
        if (!this._model || index < 0) {
            return;
        }
        this._model.splice(index, 1);
        this.onChangeCallback(this._model);
        this.emitCheckboxes(this._model);
    }
    /**
     * @param {?} selectedCheckBoxes
     * @return {?}
     */
    emitCheckboxes(selectedCheckBoxes) {
        this.selectedCheckBox = [];
        if (selectedCheckBoxes && selectedCheckBoxes.length > 0) {
            selectedCheckBoxes.forEach((obj) => {
                obj.checked = true;
                this.selectedCheckBox.push(obj);
            });
        }
        this.onSelection.emit(this.selectedCheckBox);
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return (this.required && (this._model && this._model.length > 0)) || !this.required
            ? null
            : {
                jsonParseError: {
                    valid: true,
                },
            };
    }
}
AmexioCheckBoxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-checkbox-group',
                template: `
    <div role="group"
         attr.aria-labelledby="{{componentId}}"
         [attr.aria-required]="required" 
         tabindex="0"
         class="inputgroup form-group">
        <div *ngIf="fieldlabel">
            <legend id="{{componentId}}">{{fieldlabel}}</legend>
        </div>  

        <div *ngIf="horizontal" style="display: inline-flex; flex-direction :row;">
            <checkbox *ngFor="let data of viewdata | async" [checked]="data.checked" [value]="data" [disabled]="data?.disabled || disabled" [label]="data[displayfield]">
            </checkbox>    
        </div>

        <div *ngIf="!horizontal" style="display: inline-flex;flex-direction :column;">
            <checkbox *ngFor="let data of viewdata | async" [checked]="data.checked" [value]="data" [disabled]="data?.disabled || disabled" [label]="data[displayfield]">
            </checkbox>
        </div>
    </div>
  `,
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioCheckBoxGroupComponent), multi: true },
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioCheckBoxGroupComponent), multi: true },
                ]
            },] },
];
/** @nocollapse */
AmexioCheckBoxGroupComponent.ctorParameters = () => [
    { type: CommonDataService }
];
AmexioCheckBoxGroupComponent.propDecorators = {
    horizontal: [{ type: Input }],
    disabled: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    required: [{ type: Input, args: ['required',] }],
    name: [{ type: Input, args: ['name',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    onSelection: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioFormValidator {
    /**
     * @param {?} inputType
     * @param {?} name
     * @return {?}
     */
    createCompId(inputType, name) {
        return inputType + '_' + name + '_' + Math.floor(Math.random() * 1000 + 999);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 11/21/17.
*/
const noop$4 = () => {
};
class AmexioCheckBoxComponent extends AmexioFormValidator {
    constructor() {
        super();
        this.innerValue = '';
        this.onTouchedCallback = noop$4;
        this.onChangeCallback = noop$4;
        /*
          Properties
          name : required
          datatype : boolean
          version : 4.0 onwards
          default : false
          description :  property to set if manditory
          */
        this.required = false;
        /*
          Events
          name : onSelection
          datatype : any
          version : none
          default : none
          description : Event fired on checkbox click.
          */
        this.onSelection = new EventEmitter();
        /*
          Events
          name : input
          datatype : any
          version : none
          default : none
          description : On input event field.
          */
        this.input = new EventEmitter();
        this.tabFocus = false;
        this.isComponentValid = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('checkbox', this.name);
        this.generateName();
        this.isValid = !this.required;
        this.isComponentValid.emit(!this.required);
    }
    /**
     * @return {?}
     */
    onInput() {
        this.isValid = this.value;
        this.isComponentValid.emit(this.value);
        this.input.emit(this.value);
    }
    /**
     * @return {?}
     */
    onClick() {
        this.value = !this.value;
        this.isValid = this.value;
        this.isComponentValid.emit(this.value);
        this.onSelection.emit(this.value);
    }
    /**
     * @return {?}
     */
    get value() {
        if (this.required) {
            this.isValid = this.innerValue;
        }
        else {
            this.isValid = true;
        }
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.tabFocus = false;
        this.onTouchedCallback();
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.tabFocus = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
            this.value = this.innerValue;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return ((this.required && this.value) || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
    /**
     * @return {?}
     */
    generateName() {
        if (!this.name && this.fieldlabel) {
            this.name = this.fieldlabel.replace(/\s/g, '');
        }
        else if (!this.name && !this.fieldlabel) {
            this.name = 'textinput-' + this.getRandomString();
        }
    }
    /**
     * @return {?}
     */
    getRandomString() {
        const /** @type {?} */ possibleCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        let /** @type {?} */ randomString = '';
        for (let /** @type {?} */ i = 0; i < 6; i++) {
            randomString += possibleCharacters.charAt(Math.floor(Math.random() * possibleCharacters.length));
        }
        return randomString;
    }
}
AmexioCheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-checkbox',
                template: `
    <div [attr.aria-checked]="value" class="inputgroup form-group" [ngClass]="{'checkbox-disable' : disabled}">
        <label for="{{componentId}}" class="input-box-container">
            <input
            id="{{componentId}}" type="checkbox" style="top:0; left:0"
            [attr.checked]="value ? true: null"
             tabindex="1"
            (input)="onInput()" 
            (click)="onClick()"
            (focus)="onFocus()"
            (blur)="onBlur()"
            [attr.disabled] = "disabled ? true: null"
            [attr.aria-disabled]="disabled"
            [attr.aria-required]="required"
            [required]="required" >
            {{fieldlabel}}
            <span class="input-box-checkbox-label" [ngClass]="{'focusOnCheckbox':tabFocus}">
            </span>
          </label>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioCheckBoxComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioCheckBoxComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioCheckBoxComponent.ctorParameters = () => [];
AmexioCheckBoxComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    onSelection: [{ type: Output }],
    input: [{ type: Output }],
    name: [{ type: Input, args: ['name',] }],
    isComponentValid: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
 * @template T
 */
class EventBaseComponent extends ValueAccessorBase {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} cd
     */
    constructor(renderer, element, cd) {
        super();
        this.renderer = renderer;
        this.element = element;
        this.cd = cd;
        this.self = false;
        this.itemClick = false;
        this.hide();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBaseFocusEvent(event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'visible' };
        this.bindDocumentClickListener();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBaseBlurEvent(event) {
        this.onBaseItemClicked();
        return false;
    }
    /**
     * @return {?}
     */
    onBaseItemClicked() {
        this.itemClick = true;
        this.hide();
        this.unbindDocumentClickListener();
        this.clearClicks();
    }
    /**
     * @return {?}
     */
    bindDocumentClickListener() {
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer
                .listen('document', 'click', (event) => this.handleDocumentListener(event));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleDocumentListener(event) {
        if (!this.self && !this.itemClick) {
            this.hide();
            this.unbindDocumentClickListener();
        }
        this.clearClicks();
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    clearClicks() {
        this.self = false;
        this.itemClick = false;
    }
    /**
     * @return {?}
     */
    unbindDocumentClickListener() {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.dropdownstyle = { visibility: 'hidden' };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 1/12/17.
 */
class AmexioDropDownComponent extends EventBaseComponent {
    /**
     * @param {?} dataService
     * @param {?} displayFieldService
     * @param {?} element
     * @param {?} renderer
     * @param {?} _cd
     */
    constructor(dataService, displayFieldService, element, renderer, _cd) {
        super(renderer, element, _cd);
        this.dataService = dataService;
        this.displayFieldService = displayFieldService;
        this.element = element;
        this.renderer = renderer;
        this.displayValue = '';
        this.filteredOptions = [];
        /*
          Events
          name : onBlur
          datatype : any
          version : 4.0 onwards
          default :
          description : 	On blur event
          */
        this.onBlur = new EventEmitter();
        /*
        Events
        name : input
        datatype : any
        version : none
        default :
        description : 	On input event field.
        */
        this.input = new EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On field focus event
        */
        this.focus = new EventEmitter();
        /*
        Events
        name : onSingleSelect
        datatype : any
        version : none
        default :
        description : Fire when drop down item selected.
        */
        this.onSingleSelect = new EventEmitter();
        /*
        Events
        name : onMultiSelect
        datatype : any
        version :none
        default :
        description : Fire when multiple record select in drop down.this event is only
        applied when multi-select=true
        */
        this.onMultiSelect = new EventEmitter();
        /*
        Events
        name : onClick
        datatype : any
        version :none
        default :
        description : On record select event.this event is only for normal dropdown.
        */
        this.onClick = new EventEmitter();
        /*
        Properties
        name : place-holder
        datatype : string
        version : 4.0 onwards
        default :
        description : Show place-holder inside dropdown component*/
        this.placeholder = '';
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : flag to set label
        */
        this.haslabel = true;
        this.enablesort = false;
        this.sort = '';
        this.selectedindex = -1;
        this.multiselectValues = [];
        this.maskloader = true;
        this.activedescendant = 'aria-activedescendant';
        // The internal dataviews model
        this.isComponentValid = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.setData(this._data);
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    get errormsg() {
        return this._errormsg;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set errormsg(value) {
        this.helpInfoMsg = value + '<br/>';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.generateName(this.name, this.fieldlabel, 'dropdowninput');
        this.componentId = this.createCompId('dropdown', this.displayfield);
        this.isValid = this.allowblank;
        this.isComponentValid.emit(this.allowblank);
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        // Check if key is added?
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            this.multiselectValues = [];
            const /** @type {?} */ dr = this.datareader.split('.');
            if (dr) {
                for (const /** @type {?} */ ir of dr) {
                    responsedata = responsedata[ir];
                }
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.setResponseData(responsedata);
        this.multiSelection();
        this.setUserSelection();
        this.maskloader = false;
    }
    /**
     * @param {?} responsedata
     * @return {?}
     */
    setResponseData(responsedata) {
        if (responsedata) {
            if (this.enablesort === true && (this.sort === '' || this.sort.toLowerCase() === 'asc')) {
                this.sortDataAscending(responsedata);
            }
            else if (this.enablesort === true && this.sort.toLowerCase() === 'desc') {
                this.sortDataDescending(responsedata);
            }
            else if (this.enablesort === false) {
                this.viewData = responsedata;
                this.filteredOptions = this.viewData;
                this.generateIndex(this.filteredOptions);
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    sortDataAscending(data) {
        this.viewData = data.sort((a, b) => this.displayFieldService.findValue(this.displayfield, a).toLowerCase()
            !== this.displayFieldService.findValue(this.displayfield, b).toLowerCase() ?
            this.displayFieldService.findValue(this.displayfield, a).toLowerCase() <
                this.displayFieldService.findValue(this.displayfield, b).toLowerCase() ? -1 : 1 : 0);
        this.filteredOptions = this.viewData;
        this.generateIndex(this.filteredOptions);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    sortDataDescending(data) {
        this.viewData = data.sort((a, b) => this.displayFieldService.findValue(this.displayfield, a).toLowerCase()
            !== this.displayFieldService.findValue(this.displayfield, b).toLowerCase() ?
            this.displayFieldService.findValue(this.displayfield, a).toLowerCase() >
                this.displayFieldService.findValue(this.displayfield, b).toLowerCase() ? -1 : 1 : 0);
        this.filteredOptions = this.viewData;
        this.generateIndex(this.filteredOptions);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    generateIndex(data) {
        data.forEach((element, index) => {
            element['index'] = this.componentId + 'listitem' + index;
        });
    }
    /**
     * @return {?}
     */
    multiSelection() {
        if (this.multiselect && this.viewData) {
            let /** @type {?} */ preSelectedMultiValues = '';
            const /** @type {?} */ optionsChecked = [];
            this.viewData.forEach((row) => {
                if (row.hasOwnProperty('checked')) {
                    if (row.checked) {
                        optionsChecked.push(row[this.valuefield]);
                        this.multiselectValues.push(row);
                        preSelectedMultiValues === '' ? preSelectedMultiValues +=
                            this.displayFieldService.findValue(this.displayfield, row) : preSelectedMultiValues += ', ' +
                            this.displayFieldService.findValue(this.displayfield, row);
                    }
                }
                else {
                    row['checked'] = false;
                }
            });
            this.displayValue = this.setMultiSelect();
            this.onMultiSelect.emit(this.multiselectValues);
        }
    }
    /**
     * @return {?}
     */
    setUserSelection() {
        // Set user selection
        if (this.innerValue != null) {
            const /** @type {?} */ valueKey = this.valuefield;
            const /** @type {?} */ displayKey = this.displayfield;
            const /** @type {?} */ val = this.innerValue;
            if (this.viewData.length > 0) {
                this.viewData.forEach((item) => {
                    if (item[valueKey] === val) {
                        this.isValid = true;
                        this.isComponentValid.emit(true);
                        this.displayValue = item[displayKey];
                        this.onSingleSelect.emit(item);
                    }
                });
            }
        }
    }
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    onItemSelect(selectedItem) {
        if (this.multiselect) {
            const /** @type {?} */ optionsChecked = [];
            this.multiselectValues = [];
            if (selectedItem.hasOwnProperty('checked')) {
                selectedItem.checked = !selectedItem.checked;
                this.filteredOptions.forEach((row) => {
                    if (row.checked) {
                        optionsChecked.push(row[this.valuefield]);
                        this.multiselectValues.push(row);
                    }
                });
                this.innerValue = optionsChecked;
                this.displayValue = this.setMultiSelect();
                this.onMultiSelect.emit(this.multiselectValues);
            }
        }
        else {
            this.value = selectedItem[this.valuefield]; // Issue here?
            this.displayValue = this.displayFieldService.findValue(this.displayfield, selectedItem);
            this.multiselect ? this.showToolTip = true : this.showToolTip = false;
            this.onSingleSelect.emit(selectedItem);
        }
        this.isValid = true;
        this.isComponentValid.emit(true);
    }
    /**
     * @return {?}
     */
    setMultiSelectData() {
        this.multiselectValues = [];
        if (this.innerValue && this.innerValue.length > 0) {
            const /** @type {?} */ modelValue = this.innerValue;
            this.filteredOptions.forEach((test) => {
                modelValue.forEach((mdValue) => {
                    if (test[this.valuefield] === mdValue) {
                        if (test.hasOwnProperty('checked')) {
                            test.checked = true;
                        }
                        this.multiselectValues.push(test);
                    }
                });
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateKey(event) {
    }
    /**
     * @return {?}
     */
    getDisplayText() {
        if (this.innerValue != null || this.innerValue !== '') {
            if (this.multiselect) {
                this.displayValue = this.setMultiSelect();
            }
            else {
                this.displayValue = '';
                this.filteredOptions.forEach((test) => {
                    if (test[this.valuefield] === this.innerValue) {
                        this.displayValue = this.displayFieldService.findValue(this.displayfield, test);
                    }
                });
                this.displayValue = this.displayValue === undefined ? '' : this.displayValue;
            }
        }
    }
    /**
     * @return {?}
     */
    setMultiSelect() {
        this.setMultiSelectData();
        let /** @type {?} */ multiselectDisplayString = '';
        this.multiselectValues.forEach((row) => {
            multiselectDisplayString === '' ? multiselectDisplayString +=
                this.displayFieldService.findValue(this.displayfield, row) : multiselectDisplayString += ', '
                + this.displayFieldService.findValue(this.displayfield, row);
        });
        if (this.multiselectValues.length > 0) {
            return multiselectDisplayString;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDropDownClick(event) {
        this.onBaseFocusEvent(event);
        this.showToolTip = true;
        this.onClick.emit(event);
        if (!this.multiselect && this.selectedindex > -1) {
            this.filteredOptions[this.selectedindex].selected = false;
            this.selectedindex = -1;
            this.selectedindex = this.selectedindex + 1;
            this.filteredOptions[this.selectedindex].selected = true;
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute(this.activedescendant, this.filteredOptions[this.selectedindex].index);
            this.generateScroll(this.selectedindex);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    generateScroll(index) {
        const /** @type {?} */ listitems = this.element.nativeElement.getElementsByClassName('list-items')[index];
        if (listitems) {
            listitems.scrollIntoView({ behavior: 'smooth' });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focusToLast(event) {
        if (this.selectedindex > -1) {
            this.filteredOptions[this.selectedindex].selected = false;
            this.selectedindex = this.filteredOptions.length - 1;
            this.filteredOptions[this.filteredOptions.length - 1].selected = true;
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute(this.activedescendant, this.filteredOptions[this.filteredOptions.length - 1].index);
            this.generateScroll(this.selectedindex);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeOnEScape(event) {
        this.showToolTip = false;
        this.hide();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        this.innerValue = event;
        this.isValid = true;
        this.getDisplayText();
        this.isComponentValid.emit(true);
    }
    /**
     * @param {?} input
     * @return {?}
     */
    onInput(input) {
        this.input.emit();
        this.isValid = input.valid;
        this.isComponentValid.emit(input.valid);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDropDownSearchKeyUp(event) {
        if (this.search && this.viewData) {
            const /** @type {?} */ keyword = event.target.value;
            if (keyword != null && keyword !== '' && keyword !== ' ') {
                this.filteredOptions = [];
                const /** @type {?} */ search_Term = keyword.toLowerCase();
                this.viewData.forEach((row) => {
                    if (this.displayFieldService.findValue(this.displayfield, row).toLowerCase().startsWith(search_Term)) {
                        this.filteredOptions.push(row);
                    }
                });
            }
            if (keyword === '') {
                this.filteredOptions = this.viewData;
            }
        }
        if (event.keyCode === 8) {
            this.innerValue = '';
        }
        if (event.keyCode === 40 || event.keyCode === 38 || event.keyCode === 13) {
            this.navigateUsingKey(event);
        }
        this.onBaseFocusEvent({});
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateUsingKey(event) {
        if (!this.showToolTip) {
            this.showToolTip = true;
        }
        if (this.selectedindex > this.filteredOptions.length) {
            this.selectedindex = 0;
        }
        if (event.keyCode === 40 || event.keyCode === 38 && this.selectedindex <
            this.filteredOptions.length) {
            let /** @type {?} */ prevselectedindex = -1;
            prevselectedindex = this.selectedindex;
            if (event.keyCode === 40) {
                this.selectedindex++;
            }
            else if (event.keyCode === 38) {
                this.selectedindex--;
            }
            this.navigateFilterOptions(prevselectedindex);
        }
        if (event.keyCode === 13 && this.filteredOptions[this.selectedindex]) {
            this.onItemSelect(this.filteredOptions[this.selectedindex]);
        }
    }
    /**
     * @param {?} previndex
     * @return {?}
     */
    navigateFilterOptions(previndex) {
        if (this.filteredOptions[this.selectedindex]) {
            this.filteredOptions[this.selectedindex].selected = true;
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute(this.activedescendant, this.filteredOptions[this.selectedindex].index);
        }
        if (this.filteredOptions[previndex]) {
            this.filteredOptions[previndex].selected = false;
            this.toNavigateFirstAndLastOption();
        }
        this.generateScroll(this.selectedindex);
    }
    /**
     * @return {?}
     */
    toNavigateFirstAndLastOption() {
        if (this.selectedindex === -1) {
            this.selectedindex = this.filteredOptions.length - 1;
            this.filteredOptions[this.filteredOptions.length - 1].selected = true;
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute(this.activedescendant, this.filteredOptions[this.filteredOptions.length - 1].index);
        }
        else if (this.selectedindex === this.filteredOptions.length) {
            this.selectedindex = 0;
            this.filteredOptions[this.selectedindex].selected = true;
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute(this.activedescendant, this.filteredOptions[this.selectedindex].index);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v != null && v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onblur(event) {
        if (event.target && event.target.value && this.filteredOptions &&
            this.filteredOptions.length === 1) {
            const /** @type {?} */ fvalue = event.target.value;
            const /** @type {?} */ row = this.filteredOptions[0];
            const /** @type {?} */ rvalue = this.displayFieldService.findValue(this.displayfield, row);
            if (fvalue && rvalue && (fvalue.toLowerCase() === rvalue.toLowerCase())) {
                this.onItemSelect(row);
            }
        }
        this.onTouchedCallback();
        this.onBaseBlurEvent(event);
        this.onBlur.emit();
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onFocus(elem) {
        this.onBaseFocusEvent(elem);
        this.showToolTip = true;
        this.posixUp = this.getListPosition(elem);
        this.focus.emit();
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ dropdownHeight = 325; // must be same in dropdown.scss
        if (window.screen.height - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value != null) {
            this.writeChangedValue(value);
        }
        else {
            this.innerValue = '';
            if (this.allowblank) {
                this.isValid = true;
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeChangedValue(value) {
        if (value !== this.innerValue) {
            let /** @type {?} */ status = false;
            if (this.viewData && this.viewData.length > 0) {
                this.viewData.forEach((item) => {
                    if (item[this.valuefield] === value) {
                        this.isValid = true;
                        this.displayValue = this.displayFieldService.findValue(this.displayfield, item);
                        status = true;
                        return;
                    }
                });
            }
            if (!status) {
                this.displayValue = '';
            }
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @return {?}
     */
    onIconClick() {
        if (!this.disabled) {
            const /** @type {?} */ showflag = this.showToolTip;
            if (!this.showToolTip) {
                this.onBaseFocusEvent({});
            }
            else {
                this.onBaseBlurEvent({});
            }
            this.showToolTip = !showflag;
        }
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return ((!this.allowblank && (this.value || this.value === 0)) || this.allowblank) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioDropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dropdown',
                template: `
    <div class="inputgroup" #rootDiv (keyup.esc)="closeOnEScape($event)">

        <label id="fieldlabel" for="input" *ngIf="haslabel" [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
        {{fieldlabel}}
      </label>

        <input type="hidden" [ngModel]="value" (ngModelChange)="onChange($event)" #inp="ngModel" />
        <input id="{{componentId}}" tabindex="1" aria-autocomplete="list" role="combobox" [attr.aria-expanded]="showToolTip" [attr.aria-activedescendant]="" type="text" class="input-control" [value]="displayValue" [ngClass]="{'input-control-error' : inp.invalid && !displayValue && (inp.dirty || inp.touched),
             'input-control-success' : inp.valid && displayValue && (inp.dirty || inp.touched)}" (input)="onInput(inp)" (blur)="onblur($event)" (focus)="onFocus(rootDiv)" (click)=" onDropDownClick($event)" [attr.placeholder]="placeholder" [readonly]="readonly ? true : null"
            [attr.disabled]="disabled ? true: null" [required]="!allowblank" (keyup.end)="focusToLast($event)" (keyup)="onDropDownSearchKeyUp($event)" (keyup.enter)="closeOnEScape($event)" (keydown)="navigateKey($event)" />

        <span class="drodown-caret-down" role="listbox" [attr.aria-expanded]="showToolTip" (click)="onIconClick()">
        <amexio-c-icon key="dropdown_caret" *ngIf="!maskloader"></amexio-c-icon>
        <em class="fa fa-spinner fa-spin" *ngIf="maskloader"></em>
      </span>

        <span #dropdownitems class="dropdown" [ngClass]="{'dropdown-up' : posixUp}" [ngStyle]="dropdownstyle">
        <ul aria-labelledby="fieldlabel" aria-haspopup="listbox" class="dropdown-list">

          <li role="option" tabindex="1" class="list-items" [ngClass]="{'list-items-selected':item.selected}" *ngFor="let item of filteredOptions"
            id="{{item.index}}" (mousedown)="onItemSelect(item)" (click)="onItemSelect(item)">
            <ng-container *ngIf="bodyTemplate">
              <ng-template [ngTemplateOutlet]="bodyTemplate" [ngTemplateOutletContext]="{ $implicit: { text : row }, row: item }">
              </ng-template>
            </ng-container>
            <ng-container *ngIf="!bodyTemplate">
              <span>
                <amexio-display-field [data]="item" [data-index]="displayfield"></amexio-display-field>
              </span>

        </ng-container>
        <span style="float : right">{{item?.checked ? '&#10004;': ''}}</span>
        </li>
    
        <ng-template *ngIf="filteredOptions && (filteredOptions.length < 1)">
            <li class="list-items">No Options</li>
        </ng-template>
        </ul>
        <ng-content></ng-content>
        </span>
        <span class="inputfieldbar"></span>
    </div>
    <span *ngIf="showToolTip && enablepopover" class="tooltiptext">
      <div [innerHTML]="helpInfoMsg"></div>
    </span>

    <span *ngIf="iconfeedback && (inp.invalid && (inp.dirty || inp.touched) || inp.valid)" class="input-control-feedback">
      <span *ngIf="inp.invalid && (inp.dirty || inp.touched)">&#9888;</span>
    <span *ngIf="inp.valid && (inp.dirty || inp.touched)"> &#10004;</span>

    </span>
  `,
                animations: [
                    trigger('changeState', [
                        state('visible', style({
                            'max-height': '200px',
                        })),
                        state('hidden', style({
                            'max-height': '0px',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioDropDownComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioDropDownComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioDropDownComponent.ctorParameters = () => [
    { type: CommonDataService },
    { type: DisplayFieldService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
AmexioDropDownComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    data: [{ type: Input, args: ['data',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    search: [{ type: Input }],
    readonly: [{ type: Input }],
    multiselect: [{ type: Input, args: ['multi-select',] }],
    dropdownitems: [{ type: ViewChild, args: ['dropdownitems', { read: ElementRef },] }],
    onBlur: [{ type: Output }],
    input: [{ type: Output }],
    focus: [{ type: Output }],
    onSingleSelect: [{ type: Output }],
    onMultiSelect: [{ type: Output }],
    onClick: [{ type: Output }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    enablesort: [{ type: Input, args: ['enable-sort',] }],
    sort: [{ type: Input, args: ['sort',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    bodyTemplate: [{ type: ContentChild, args: ['amexioBodyTmpl',] }],
    isComponentValid: [{ type: Output }],
    name: [{ type: Input, args: ['name',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by  Pratik on 7/2/18.
*/
class AmexioLabelComponent {
    constructor() {
        this.enableclick = false;
        // For internal use
        this.blackLabel = false;
        this.onClick = new EventEmitter();
        this.tempStyleArray = ['large', 'medium', 'small', 'bold', 'large-bold', 'medium-bold', 'small-bold',
            'large-44', 'large-24', 'large-50', 'large-54', 'large-56', 'large-60', 'large-64', 'large-68', 'large-78', 'large-9vw',
            'large-44-bold', 'large-50-bold', 'large-24-bold', 'large-4vw', 'large-4vw-bold',
            'large-54-bold', 'large-56-bold', 'large-60-bold', 'large-64-bold', 'large-68-bold', 'large-78-bold', 'large-9vw-bold'];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.styleClass == null) {
            this.styleClass = 'small';
        }
        else {
            this.styleClass = this.tempStyleArray.find((x) => x === this.styleClass);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onLabel(event) {
        if (this.enableclick) {
            this.onClick.emit(event);
        }
    }
}
AmexioLabelComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-label',
                template: `
  <label [ngClass]="{'labelFontClass': blackLabel}" style="outline: none"
  role="text" tabindex="1" class="label-content {{styleClass}}" (click)="onLabel($event)"
    [ngStyle]="{'color' : fontColor,'cursor': enableclick ? 'pointer': 'text'}">
    <ng-content></ng-content>
    <span class="label-badge" *ngIf="badge">{{badge}}</span>
  </label>
  `,
            },] },
];
/** @nocollapse */
AmexioLabelComponent.ctorParameters = () => [];
AmexioLabelComponent.propDecorators = {
    badge: [{ type: Input, args: ['badge',] }],
    styleClass: [{ type: Input, args: ['size',] }],
    fontColor: [{ type: Input, args: ['font-color',] }],
    enableclick: [{ type: Input, args: ['enable-click',] }],
    blackLabel: [{ type: Input }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioNumberInputComponent extends ValueAccessorBase {
    constructor() {
        super();
        this.isValid = false;
        /*
          Events
          name : onBlur
          datatype : any
          version : 4.0 onwards
          default :
          description : On blur event
          */
        this.onBlur = new EventEmitter();
        /*
         Events
         name : input
         datatype : any
         version : none
         default :
         description : 	On input event field.
         */
        this.input = new EventEmitter();
        /*
         Events
         name : focus
         datatype : any
         version : none
         default :
         description : On focus event field.
         */
        this.focus = new EventEmitter();
        /*
         Events
         name : change
         datatype : any
         version : none
         default :
         description : On field value change event
         */
        this.change = new EventEmitter();
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : true
        description : Flag to set label
        */
        this.haslabel = true;
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pattern(value) {
        if (value != null) {
            this.regEx = new RegExp(this.pattern);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('numberinput', this.name);
        this.name = this.generateName(this.name, this.fieldlabel, 'numberinput');
    }
    /**
     * @return {?}
     */
    onBlurEvent() {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.showToolTip = true;
        this.focus.emit(this.value);
    }
    /**
     * @return {?}
     */
    onInput() {
        this.isValid = this.isFieldValidate();
        this.input.emit(this.value);
    }
    /**
     * @return {?}
     */
    onChangeEv() {
        this.change.emit(this.value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUpHome(event) {
        this.value = this.minvalue;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUpEnd(event) {
        this.value = this.maxvalue;
    }
    /**
     * @return {?}
     */
    isFieldValidate() {
        if (this.minvalue && !this.maxvalue) {
            return this.innerValue && (this.innerValue >= this.minvalue);
        }
        else if (!this.minvalue && this.maxvalue) {
            return this.innerValue && (this.innerValue <= this.maxvalue);
        }
        else if (!this.minvalue && !this.maxvalue && this.innerValue) {
            return true;
        }
        else {
            return this.innerValue && (this.innerValue >= this.minvalue && this.innerValue <= this.maxvalue);
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        const /** @type {?} */ isValid = (!this.allowblank && this.isFieldValidate()) || this.allowblank;
        return isValid ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioNumberInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-number-input',
                template: `



    <div class="inputgroup">

      <label *ngIf="haslabel" role="number"  id="{{componentId}}"  [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
          {{fieldlabel}}
      </label>

      <input type="number" 


            role="number"
            tabindex="1"
       
            aria-describedby="numberDes"
            attr.aria-labelledby="{{componentId}}"
            [attr.aria-required]="!allowblank"
            [attr.aria-invalid]="!isValid "
            (keyup.home)="onKeyUpHome($event)"
            (keyup.end)="onKeyUpEnd($event)"



             class="input-control"
             [ngClass]="model.touched ? allowblank ? '' : (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''"
             [(ngModel)]="value"
             (blur)="onBlurEvent()" 
             (focus)="onFocus()" 
             (input)="onInput()" 
             (change)="onChangeEv()"
             [name]="name" 
             [pattern]="regEx"
             [attr.placeholder]="placeholder" 
             [attr.max]="maxvalue" 
             [attr.min]="minvalue" 
             [attr.disabled]="disabled ? true: null"
             [required]="!allowblank" />


      <ng-container *ngIf="iconfeedback">
          <span class="input-control-feedback">
              <span *ngIf="!isValid && model.touched"><em class="fa fa-times"></em></span>
              <span *ngIf="isValid && model.touched"><em class="fa fa-check"></em></span>
          </span>
      </ng-container>

      <input-help *ngIf="showToolTip && enablepopover"

      id="numberDes"
      role="tooltip"

      [error-msg]="errormsg" 
      [max-error-msg]="maxerrormsg"
      [min-error-msg]="minerrormsg"
      [min-value]="minvalue"
      [max-value]="maxvalue"
      [min-msg]="minmsg" 
      [max-msg]="maxmsg"
      [is-number]="true"
      >
      </input-help>
  
      <span class="inputfieldbar"></span>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioNumberInputComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioNumberInputComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioNumberInputComponent.ctorParameters = () => [];
AmexioNumberInputComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    minvalue: [{ type: Input, args: ['min-value',] }],
    maxvalue: [{ type: Input, args: ['max-value',] }],
    minerrormsg: [{ type: Input, args: ['min-error-msg',] }],
    maxerrormsg: [{ type: Input, args: ['max-error-msg',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    onBlur: [{ type: Output }],
    input: [{ type: Output }],
    focus: [{ type: Output }],
    change: [{ type: Output }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    name: [{ type: Input, args: ['name',] }],
    pattern: [{ type: Input, args: ['pattern',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    model: [{ type: ViewChild, args: [NgModel,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by  Pratik on 27/11/17.
*/
class AmexioRadioGroupComponent extends ValueAccessorBase {
    /**
     * @param {?} amxHttp
     * @param {?} cd
     */
    constructor(amxHttp, cd) {
        super();
        this.amxHttp = amxHttp;
        this.cd = cd;
        /*
           Properties
           name : default-value
           datatype : string
           version : 4.0 onwards
           default :
           description : Default Value to be checked
           */
        this.defaultSelectedValue = '';
        /*
           Properties
           name : data
           datatype : any
           version : 4.0 onwards
           default :
           description : 	Local data for radio group.
           */
        this.data = [];
        /*
           Events
           name : onSelection
           datatype : any
           version : 4.0 onwards
           default :
           description : Fires selection event
           */
        this.onSelection = new EventEmitter();
        // Placeholders for the callbacks which are later provided
        // by the Control Value Accessor
        // private onTouchedCallback: () => void = noop;
        // private onChangeCallback: (_: any) => void = noop;
        this.isComponentValid = new EventEmitter();
        this.tabFocus = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('radiogroup', this.name);
        this.name = this.generateName(this.name, this.fieldlabel, 'radiogroup');
        if (this.defaultSelectedValue) {
            this.value = this.defaultSelectedValue;
        }
        this.isValid = this.allowblank;
        this.isComponentValid.emit(this.allowblank);
        if (this.httpmethod && this.httpurl) {
            this.amxHttp.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.data = this.getResponseData(response);
            });
        }
        else if (this.data != null) {
            this.data = this.getResponseData(this.data);
        }
    }
    /**
     * @param {?} viewData
     * @return {?}
     */
    checkDefaultValidation(viewData) {
        viewData.forEach((opt) => {
            opt['tabindex'] = '-1';
            opt['radioId'] = 'radio' + '_' + opt[this.valuefield] + '_' + this.getRandomString();
            if (opt[this.valuefield] === this.innerValue || (opt.hasOwnProperty('selected') && opt.selected)) {
                this.isValid = true;
                opt['selected'] = true;
                opt['tabindex'] = '0';
                this.isComponentValid.emit(true);
                return;
            }
            else {
                opt['selected'] = false;
                const /** @type {?} */ tempArray = [];
                viewData.forEach((option) => {
                    if (option.selected === false) {
                        tempArray.push('0');
                        if (tempArray.length === viewData.length) {
                            viewData[0].tabindex = '0';
                        }
                    }
                });
            }
        });
    }
    /**
     * @param {?} viewData
     * @return {?}
     */
    checkSelectedFlag(viewData) {
        viewData.forEach((opt) => {
            if (this.innerValue === '' && (opt.hasOwnProperty('selected') && opt.selected)) {
                this.value = opt[this.valuefield];
                opt.tabindex = '0';
                return;
            }
        });
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            if (dr != null) {
                for (const /** @type {?} */ ir of dr) {
                    responsedata = responsedata[ir];
                }
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.checkSelectedFlag(responsedata);
        if (!this.allowblank) {
            this.checkDefaultValidation(responsedata);
        }
        return responsedata;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
            this.checkDefaultValidation(this.data);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.tabFocus = false;
        this.onTouchedCallback();
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.tabFocus = true;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    onClick(row) {
        for (const /** @type {?} */ r of this.data) {
            if (r.selected) {
                r.selected = false;
            }
        }
        for (const /** @type {?} */ r of this.data) {
            if (r === row) {
                r.selected = true;
                this.isValid = true;
                this.value = row[this.valuefield];
                this.listCopy = Object.assign([], row);
                delete this.listCopy.tabindex;
                delete this.listCopy.radioId;
                this.onSelection.emit(this.listCopy);
                delete row.tabindex;
                this.isComponentValid.emit(true);
                this.onSelection.emit(row);
            }
            else {
                r.selected = false;
            }
        }
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return ((!this.allowblank && this.value) || this.allowblank) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-radio-group',
                template: `
    <div role="radiogroup" [attr.name]="name"  attr.aria-labelledby="{{componentId}}" [attr.aria-disabled]="disabled"
      [attr.aria-required]="!allowblank" class="inputgroup from-group">
      <div *ngIf="fieldlabel">
        <legend style="margin-bottom: .6rem; margin-top: 5px;" id="{{componentId}}">{{fieldlabel}}</legend>
      </div>

      <ng-container *ngIf="horizontal">
        <ng-container *ngFor="let rData of data let index=index">
          <label for="{{name+rData[displayfield]+index}}" 
          [attr.aria-checked]="value" 
          [attr.aria-disabled]="rData.disabled"
     
            class="input-box-container" style="padding-bottom:0px !important; margin: 5px !important" (click)="onClick(rData)"
            [ngClass]="{'disable-component' : rData.disabled || disabled}">
            {{rData[displayfield]}}

            <input [attr.tabindex]="disabled ? -1 : 1"
            style="top:0; left:0" id="{{name+rData[displayfield]+index}}"
             type="radio" 

              [required]="!allowblank"
               [attr.name]="name" 
               [value]="rData?.selected ? rData[valuefield] : rData[valuefield] "
              [attr.disabled]="rData?.disabled ? true: null" 
              (focus)="onFocus()"
              (blur)="onBlur()"
              [checked]="(value === rData[valuefield] || rData.selected)">

            <span class="input-box-radiobox-label" [ngClass]="{'focusOnCheckbox':tabFocus}" ></span>
          </label>
        </ng-container>
      </ng-container>

      <ng-container *ngIf="!horizontal">
        <ng-container *ngFor="let rData of data let index=index">
          <div>
            <label for="{{name+rData[displayfield]+index}}" [attr.aria-checked]="value" [attr.aria-disabled]="rData.disabled"
              class="input-box-container" style="padding-bottom:0px !important; margin: 5px !important" (click)="onClick(rData)"
              [ngClass]="{'disable-component' : rData.disabled || disabled}">{{rData[displayfield]}}
              <input style="top:0; left:0" id="{{name+rData[displayfield]+index}}" type="radio"
              [attr.tabindex]="disabled ? -1 : 1" [required]="!allowblank" [attr.name]="name" [value]="rData?.selected ? rData[valuefield] : rData[valuefield] "
              (focus)="onFocus()"
              (blur)="onBlur()"
              [attr.disabled]="rData?.disabled ? true: null" [(ngModel)]="rData?.selected ? rData[valuefield] : value"
                [checked]="(value === rData[valuefield] || rData.selected)">
              <span class="input-box-radiobox-label" [ngClass]="{'focusOnCheckbox':tabFocus}"></span>
            </label>
          </div>
        </ng-container>
      </ng-container>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioRadioGroupComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: AmexioRadioGroupComponent, multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioRadioGroupComponent.ctorParameters = () => [
    { type: CommonDataService },
    { type: ChangeDetectorRef }
];
AmexioRadioGroupComponent.propDecorators = {
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    name: [{ type: Input }],
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    defaultSelectedValue: [{ type: Input, args: ['default-value',] }],
    horizontal: [{ type: Input }],
    data: [{ type: Input }],
    disabled: [{ type: Input }],
    onSelection: [{ type: Output }],
    isComponentValid: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioRatingComponent extends AmexioFormValidator {
    constructor() {
        super(...arguments);
        /*
          Properties
          name : icon-class
          datatype : string
          version : 4.0 onwards
          default : star-icon
          description : Sets if custom icon class is required
          */
        this.iconclass = 'star-icon';
        /*
          Properties
          name : full-icon
          datatype : string
          version : 4.0 onwards
          default :
          description : 	Icon for selected rating .This attribute is useful only
          when user have custom rating icons.example
          */
        this.fullicon = 'â';
        /*
          Properties
          name : empty-icon
          datatype : string
          version : 4.0 onwards
          default :
          description : Icon for non-selected rating .This attribute is useful only
          when user have custom rating icons.example
          */
        this.emptyicon = 'â';
        /*
          Properties
          name : titles
          datatype : string array
          version : 4.0 onwards
          default : 1,2,3..
          description : Array of titles
          */
        this.titles = [];
        this.ratingRangeData = [];
        // -------------------------------------------------------------------------
        // Outputs
        // -------------------------------------------------------------------------
        /*
          Events
          name : onHover
          datatype : any
          version : 4.0 onwards
          default :
          description : Fires on hovering component
          */
        this.onHover = new EventEmitter();
        /*
          Events
          name : onLeave
          datatype : any
          version : 4.0 onwards
          default :
          description : fires on leaving component and returns its value
          */
        this.onLeave = new EventEmitter();
        this.hovered = 0;
        this.hoveredPercent = undefined;
        this._max = 5;
    }
    /**
     * @param {?} max
     * @return {?}
     */
    set max(max) {
        this._max = max;
        this.buildRanges();
    }
    /**
     * @return {?}
     */
    get max() {
        return this._max;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.model = value;
        this.setAttribute(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        if (this.required && !c.value) {
            return {
                required: true,
            };
        }
        return null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('rating', this.fieldlabel);
        this.starId = 'star' + Math.floor(Math.random() * 1000 + 999);
        for (let /** @type {?} */ i = 0; i < this.ratingRange.length; i++) {
            const /** @type {?} */ obj = {};
            obj['number'] = i + 1;
            obj['selected'] = false;
            obj['tabindex'] = '-1';
            this.ratingRangeData.push(obj);
        }
        this.buildRanges();
    }
    /**
     * @param {?} item
     * @return {?}
     */
    calculateWidth(item) {
        if (this.hovered > 0) {
            if (this.hoveredPercent !== undefined && this.hovered === item) {
                return this.hoveredPercent;
            }
            else {
                return this.hovered >= item ? 100 : 0;
            }
        }
        else {
            return this.model >= item ? 100 : 100 - Math.round((item - this.model) * 10) * 10;
        }
    }
    /**
     * @param {?} hovered
     * @return {?}
     */
    setHovered(hovered) {
        if (!this.readonly && !this.disabled) {
            this.hovered = hovered;
            this.onHover.emit(hovered);
            this.ratingMethod(hovered);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeHovered(event) {
        if (!this.float) {
            return;
        }
        const /** @type {?} */ target = /** @type {?} */ (event.target);
        const /** @type {?} */ relativeX = event.pageX - target.offsetLeft;
        const /** @type {?} */ percent = Math.round((relativeX * 100 / target.offsetWidth) / 10) * 10;
        this.hoveredPercent = percent > 50 ? 100 : 50;
    }
    /**
     * @return {?}
     */
    resetHovered() {
        this.hovered = 0;
        this.hoveredPercent = undefined;
        this.onLeave.emit(this.hovered);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    rate(value) {
        if (!this.readonly && !this.disabled && value >= 0 && value <= this.ratingRange.length) {
            this.setAttribute(value);
            const /** @type {?} */ newValue = this.hoveredPercent ? (value - 1) + this.hoveredPercent / 100 : value;
            this.onChange(newValue);
            this.model = newValue;
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    rate1(item) {
        this.ratingMethod(item);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setAttribute(value) {
        this.ratingRangeData.forEach((element) => {
            element.selected = false;
            element.tabindex = '-1';
            if (value >= element.number) {
                element.selected = true;
            }
            if (value === element.number) {
                element.tabindex = 0;
            }
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    ratingMethod(item) {
        this.ratingRangeData.forEach((element) => {
            element.selected = false;
            if (item + 1 >= element.number) {
                element.selected = true;
            }
        });
    }
    /**
     * @return {?}
     */
    buildRanges() {
        this.ratingRange = this.range(1, this.max);
    }
    /**
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    range(start, end) {
        const /** @type {?} */ foo = [];
        for (let /** @type {?} */ i = start; i <= end; i++) {
            foo.push(i);
        }
        return foo;
    }
}
AmexioRatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-rating-input',
                template: `
    <div tabindex="1" role="radiogroup" attr.aria-labelledby="{{componentId}}" class="inputgroup">
      <ng-container *ngIf="fieldlabel">
        <legend id="{{componentId}}">
          {{fieldlabel}}
        </legend>
      </ng-container>

      <div (mouseleave)="resetHovered()" class="rating" [class.disabled]="disabled" [class.readonly]="readonly">
        <span *ngFor="let item of ratingRangeData; let index = index">
          <input (keyup.space)="rate1(index)" style="top:0; left:0; position: absolute;
            opacity: 0;
            cursor: pointer;"
            value="{{model}}" id="{{starId}}{{index}}" [attr.aria-checked]="item.selected" type="radio" name="rating" role="radio">

          <label for="{{starId}}{{index}}" style="display: inline-flex;">
            <em [ngStyle]="{'cursor': readonly ? 'not-allowed' : 'pointer'}" role="tooltip" [attr.tabindex]="item.tabindex"
              (mouseenter)="setHovered(item.number)" attr.aria-label="Star {{index+1}}" (click)="rate(item.number)"
              [attr.data-icon]="fullicon" class="{{ iconclass }} half{{(item.selected? 100 : 0) }}" [title]="titles[index] || item.number">{{
              emptyicon }}</em>
          </label>

        </span>
      </div>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => AmexioRatingComponent),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => AmexioRatingComponent),
                        multi: true,
                    },
                ],
            },] },
];
AmexioRatingComponent.propDecorators = {
    iconclass: [{ type: Input, args: ['icon-class',] }],
    fullicon: [{ type: Input, args: ['full-icon',] }],
    emptyicon: [{ type: Input, args: ['empty-icon',] }],
    readonly: [{ type: Input, args: ['read-only',] }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    float: [{ type: Input }],
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    titles: [{ type: Input }],
    max: [{ type: Input }],
    onHover: [{ type: Output }],
    onLeave: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioTextInputComponent extends ValueAccessorBase {
    constructor() {
        super();
        /*
        Properties
        name : icon-feedback
        datatype : boolean
        version : 4.0 onwards
        default :false
        description :
        */
        this.iconfeedback = false;
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : Flag to set label
        */
        this.haslabel = true;
        this.isValid = false;
        /*
         Events
         name : onBlur
         datatype : any
         version : 4.0 onwards
         default :
         description : On blur event
         */
        this.onBlur = new EventEmitter();
        /*
        Events
        name : input
        datatype : any
        version : none
        default :
        description :   On input event field.
        */
        this.input = new EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On focus event field.
        */
        this.focus = new EventEmitter();
        /*
        Events
        name : change
        datatype : any
        version : none
        default :
        description : On field value change event
        */
        this.change = new EventEmitter();
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pattern(value) {
        if (value != null) {
            this._pattern = value;
            this.regEx = new RegExp(this._pattern);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('textinput', this.name);
        this.name = this.generateName(this.name, this.fieldlabel, 'textinput');
    }
    /**
     * @return {?}
     */
    onBlurEvent() {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    }
    /**
     * @return {?}
     */
    onFocusEvent() {
        this.showToolTip = true;
        this.focus.emit(this.value);
    }
    /**
     * @return {?}
     */
    onInput() {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    }
    /**
     * @return {?}
     */
    onChangeEv() {
        this.change.emit(this.value);
    }
    /**
     * @return {?}
     */
    isFieldValid() {
        let /** @type {?} */ valid;
        valid = (!this.allowblank && (this.value && ((this.value.length >= this.minlength) && this.value.length > 0)) ||
            (!this.minlength && this.value && this.value.length > 0)) || this.allowblank;
        return valid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioTextInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-text-input',
                template: `
    <div class="inputgroup">

        <label *ngIf="haslabel" role="input" id="{{componentId}}"  for="{{componentId}}" [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
          {{fieldlabel}}
      </label>
        <input type="text" 

            role="text" 
            tabindex="1"
            id="{{componentId}}" 
            name="textID"
            attr.aria-labelledby="{{componentId}}"
            aria-describedby="textDec"
            [attr.aria-required]="!allowblank"
            [attr.aria-invalid]="!isValid "



            class="input-control" 
            [ngClass]="model.touched ? allowblank ? '' : (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''" 
            [(ngModel)]="value"
            (blur)="onBlurEvent()" 
            (focus)="onFocusEvent()" 
            (input)="onInput()"
            (change)="onChangeEv()"
            [name]="name" 
            [pattern]="regEx" 
            [attr.placeholder]="placeholder" 
            [maxlength]="maxlength" 
            [minlength]="minlength" 
            [attr.disabled]="disabled ? true: null"
            [required]="!allowblank" />

        <ng-container *ngIf="iconfeedback">
            <span class="input-control-feedback">
              <span *ngIf="!isValid && model.touched"><em class="fa fa-times"></em></span>
            <span *ngIf="isValid && model.touched"><em class="fa fa-check"></em></span>
            </span>
        </ng-container>

          <input-help *ngIf="showToolTip && enablepopover" 

          id="textDec"
          role="tooltip"

          [error-msg]="errormsg" 
          [min-msg]="minmsg" 
          [max-error-msg]="maxerrormsg"
          [min-error-msg]="minerrormsg"
          [min-length]="minlength"
          [max-length]="maxlength"
          [max-msg]="maxmsg">
          </input-help>
   
        <span class="inputfieldbar"></span>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioTextInputComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioTextInputComponent), multi: true,
                    }],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/** @nocollapse */
AmexioTextInputComponent.ctorParameters = () => [];
AmexioTextInputComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    minlength: [{ type: Input, args: ['min-length',] }],
    maxlength: [{ type: Input, args: ['max-length',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    minerrormsg: [{ type: Input, args: ['min-error-msg',] }],
    maxerrormsg: [{ type: Input, args: ['max-error-msg',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    pattern: [{ type: Input, args: ['pattern',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    model: [{ type: ViewChild, args: [NgModel,] }],
    name: [{ type: Input, args: ['name',] }],
    onBlur: [{ type: Output }],
    input: [{ type: Output }],
    focus: [{ type: Output }],
    change: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const noop$6 = () => {
};
class AmexioToggleComponent extends AmexioFormValidator {
    constructor() {
        super();
        this.onChange = new EventEmitter();
        this.isComponentValid = new EventEmitter();
        this.innerValue = '';
        this.onTouchedCallback = noop$6;
        this.onChangeCallback = noop$6;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('togglebtn', this.fieldlabel);
        this.toggleId = this.createCompId('toggleId', this.fieldlabel);
        if (this.shape === '' || this.shape == null) {
            this.shape = 'round';
        }
        this.isValid = !this.required;
        this.isComponentValid.emit(false);
    }
    /**
     * @return {?}
     */
    onToggle() {
        this.checked = !this.checked;
        this.value = this.checked;
        this.isValid = this.value;
        this.isComponentValid.emit(this.value);
        this.onChange.emit(this.value);
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onTouchedCallback();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value && value !== this.innerValue) {
            this.isValid = value;
        }
        if (!value && value !== this.innerValue) {
            this.isValid = value;
        }
        this.innerValue = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return ((this.required && this.value) || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEventFilter(event) {
        this.onToggle();
    }
}
AmexioToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-toggle',
                template: `
    <div id="{{componentId}}" class="inputgroup">
      {{fieldlabel}}


      <label role="switch" attr.aria-labelledby="{{componentId}}" [attr.aria-checked]="checked" tabindex="1" for="{{toggleId}}"
        [ngClass]="{smallToggle:(size == 'small' && type != 2),
        smallType2Toggle:(size == 'small' && type == 2),

        mediumToggle:(size == 'medium' && type != 2),
        mediumType2Toggle:(size == 'medium' && type == 2),

        largeToggle:(size == 'large' && type != 2),
        largeType2Toggle:(size == 'large' && type == 2)

    }"
        (keyup.space)="onEventFilter($event)">

        <input id="{{toggleId}}" type="checkbox" style="top:0; left:0;display: none;" [attr.checked]="checked" data-check-switch=""
          [attr.aria-required]="required" #rangeHndl [(ngModel)]="value" (blur)="onBlur()" [attr.aria-checked]="checked"
          (change)="onToggle()">
        <span class="toggle-slider {{shape}}" [ngClass]="
        {
          smallToggleSlider :(size == 'small' && type != 2),
          smallType2ToggleSlider :(size == 'small' && type == 2),

         mediumToggleSlider : (size == 'medium' && type !=2),
         mediumType2ToggleSlider : (size == 'medium' && type ==2),

         largeToggleSlider : (size == 'large' && type !=2),
         largeType2ToggleSlider : (size == 'large' && type ==2)
      }">

        </span>
      </label>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioToggleComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioToggleComponent), multi: true,
                    }],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/** @nocollapse */
AmexioToggleComponent.ctorParameters = () => [];
AmexioToggleComponent.propDecorators = {
    shape: [{ type: Input }],
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    required: [{ type: Input }],
    size: [{ type: Input, args: ['size',] }],
    type: [{ type: Input, args: ['type',] }],
    onChange: [{ type: Output }],
    isComponentValid: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 18/12/17.
*/
class AmexioImageComponent {
    constructor() {
        /*
        Properties
        name : c-class
        datatype :  string
        version : 4.0 onwards
        default :
        description : Used for custom style classes
        */
        this.cclass = '';
        /*
        Events
        name : onClick
        datatype :  none
        version : none
        default : none
        description : Get image / icon click event.
        */
        this.onClick = new EventEmitter();
        /*
        Properties
        name :absolute
        datatype :  string
        version : 4.1.9 onwards
        default :
        description :sets absolute attribute  to image
        */
        this.absolute = false;
        /*
        Properties
        name :relative
        datatype :  string
        version : 4.1.9 onwards
        default :
        description :sets relative attribute  to image
        */
        this.relative = false;
        this.overlay = false;
        this.absoluteposition = false;
        this.imageCss = ' image-';
        this.overlayTextCss = 'overlay-text overlay-';
        this.textCss = '-text';
        this.imgFluidCss = ' img-fluid';
        this.overlayOverlayCss = 'overlay overlay-';
        this.imageTitleCss = 'image-title image-';
        this.imageTitleBottomCss = 'image-title image-bottom-right';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onImageClick(event) {
        this.onClick.emit(event);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!(this.width || this.height)) {
            this.cclass = this.cclass + this.imgFluidCss;
        }
        if (this.filter) {
            this.cclass = this.cclass + this.imageCss + this.filter;
        }
        if (this.overlayEffect) {
            this.overlay = true;
            if (!this.overlayText) {
                this.overlayText = '';
            }
            if (this.overlayText) {
                this.overlayTextClass = this.overlayTextCss + this.overlayEffect + this.textCss;
            }
            this.overlayEffect = this.overlayOverlayCss + this.overlayEffect;
        }
        if (this.position && !this.imgTitle) {
            this.imgTitle = '';
        }
        if (this.imgTitle) {
            if (this.position) {
                this.position = this.imageTitleCss + this.position;
            }
            else {
                this.position = this.imageTitleBottomCss;
            }
        }
    }
    /**
     * @return {?}
     */
    addimageCSSClass() {
        if (this.top || this.bottom || this.right || this.left) {
            this.absoluteposition = true;
        }
        this.imagepositionclass = '';
        if (this.relative && !this.absolute) {
            this.imagepositionclass = ' img-relative ';
            this.top = '';
            this.left = '';
            this.right = '';
            this.bottom = '';
        }
        else if (this.absolute) {
            this.imagepositionclass = 'img-absolute ';
        }
        return this.imagepositionclass;
    }
}
AmexioImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-image', template: `
    <!--Normal image-->
    <ng-container *ngIf="iconclass && (!path && !mda) && overlay || overlayText || titlePara || imgTitle ">
    <div class="img-container" [ngClass]="addimageCSSClass()"  [ngStyle]="{'top':top,'bottom':bottom,'left':left,'right':right} ">
      <ng-container *ngIf="path || (path && iconclass)">
        <ng-container *ngIf="!(width || height)">
          <img alt="title" [src]="path" [attr.class]="cclass" (click)="onImageClick($event)" [attr.title]="tooltip">
          <div *ngIf="overlay" [ngClass]="overlayEffect">
            <div *ngIf="overlayText" [ngClass]="overlayTextClass">{{overlayText}}
              <p *ngIf="titlePara">{{titlePara}}</p>
            </div>
          </div>
          <div *ngIf="imgTitle" [ngClass]="position">{{imgTitle}}</div>
        </ng-container>
        <ng-container *ngIf="width || height">
          <img alt="title" [ngStyle]="{'width':width,'height':height}" [attr.class]="cclass" [src]="path" (click)="onImageClick($event)" [attr.title]="tooltip">
           <div *ngIf="overlay" [ngClass]="overlayEffect">
            <div *ngIf="overlayText" [ngClass]="overlayTextClass">{{overlayText}}
              <p *ngIf="titlePara">{{titlePara}}</p>
            </div>
          </div>
          <div *ngIf="imgTitle" [ngClass]="position">{{imgTitle}}</div>
        </ng-container>
      </ng-container>
      </div>
    </ng-container>



    <ng-container *ngIf="!(iconclass && (!path && !mda) && overlay || overlayText || titlePara || imgTitle )">
        <ng-container *ngIf="path || (path && iconclass)">
        <ng-container *ngIf="!(width || height)">
        <img alt="title" [src]="path" [attr.class]="cclass" (click)="onImageClick($event)" [attr.title]="tooltip">
        </ng-container>
        <ng-container *ngIf="width || height">
        <img alt="title" [ngStyle]="{'width':width,'height':height}" [attr.class]="cclass" [src]="path" (click)="onImageClick($event)" [attr.title]="tooltip">
        </ng-container>
        </ng-container>
        </ng-container>
    
    <!--this is for fontawesome-->
    <ng-container *ngIf="iconclass && (!path && !mda)">
      <em [attr.class]="iconclass" [attr.title]="tooltip" (click)="onImageClick($event)"></em>
      <label class="image-title" *ngIf="title" (click)="onImageClick($event)" style="cursor: pointer">{{title}}</label>
    </ng-container>

    <!--Material icon-->
    <ng-container *ngIf="(iconclass && mda) && !path">
      <em [attr.class]="iconclass" [attr.title]="tooltip" (click)="onImageClick($event)">{{mda}}</em>
    </ng-container>

    <ng-container *ngIf=" title && !iconclass">
      <span style="font-size: medium">{{title}}</span>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
AmexioImageComponent.ctorParameters = () => [];
AmexioImageComponent.propDecorators = {
    tooltip: [{ type: Input }],
    title: [{ type: Input }],
    path: [{ type: Input }],
    iconclass: [{ type: Input, args: ['icon-class',] }],
    cclass: [{ type: Input, args: ['c-class',] }],
    mda: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    onClick: [{ type: Output }],
    filter: [{ type: Input, args: ['filter',] }],
    overlayEffect: [{ type: Input, args: ['overlay-effect',] }],
    overlayText: [{ type: Input, args: ['overlay-text',] }],
    imgTitle: [{ type: Input, args: ['image-title',] }],
    position: [{ type: Input, args: ['title-position',] }],
    titlePara: [{ type: Input, args: ['para',] }],
    top: [{ type: Input, args: ['position-top',] }],
    bottom: [{ type: Input, args: ['position-bottom',] }],
    left: [{ type: Input, args: ['position-left',] }],
    right: [{ type: Input, args: ['position-right',] }],
    absolute: [{ type: Input, args: ['absolute',] }],
    relative: [{ type: Input, args: ['relative',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioTabActionComponent {
    constructor() {
        this.showContent = false;
        this.actionComponent = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    checkActionComponent() {
        this.textinput = this.queryTextinput.toArray();
        if (this.textinput.length > 0) {
            this.actionComponent = 'text';
            this.textinput[0].haslabel = false;
            this.textinput[0].iconfeedback = false;
        }
        this.checkbox = this.queryCheckbox.toArray();
        if (this.checkbox.length > 0) {
            this.actionComponent = 'checkbox';
            this.checkbox[0].fieldlabel = '';
        }
        this.radioGroup = this.queryRadioGroup.toArray();
        if (this.radioGroup.length > 0) {
            this.actionComponent = 'radiogroup';
            this.radioGroup[0].fieldlabel = '';
            this.radioGroup[0].horizontal = true;
        }
        this.label = this.queryLabel.toArray();
        if (this.label.length > 0) {
            this.actionComponent = 'label';
        }
        this.number = this.queryNumber.toArray();
        if (this.number.length > 0) {
            this.actionComponent = 'number';
            this.number[0].fieldlabel = '';
        }
        this.rating = this.queryRating.toArray();
        if (this.rating.length > 0) {
            this.actionComponent = 'rating';
            this.rating[0].fieldlabel = '';
        }
        this.toggle = this.queryToggle.toArray();
        if (this.toggle.length > 0) {
            this.actionComponent = 'toggle';
            this.toggle[0].fieldlabel = '';
        }
        this.button = this.queryButton.toArray();
        if (this.button.length > 0) {
            this.actionComponent = 'button';
        }
        this.image = this.queryImage.toArray();
        if (this.image.length > 0) {
            this.actionComponent = 'image';
        }
        this.dropdown = this.queryDropDown.toArray();
        if (this.dropdown.length > 0) {
            this.actionComponent = 'dropdown';
            this.dropdown[0].fieldlabel = '';
        }
        this.checkboxgroup = this.queryCheckBoxGroup.toArray();
        if (this.checkboxgroup.length > 0) {
            this.actionComponent = 'checkboxgroup';
            this.checkboxgroup[0].fieldlabel = '';
            this.checkboxgroup[0].horizontal = true;
        }
    }
}
AmexioTabActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tab-action',
                template: `
   <ng-content></ng-content>
   `,
            },] },
];
/** @nocollapse */
AmexioTabActionComponent.ctorParameters = () => [];
AmexioTabActionComponent.propDecorators = {
    queryTextinput: [{ type: ContentChildren, args: [AmexioTextInputComponent, { descendants: true },] }],
    queryCheckbox: [{ type: ContentChildren, args: [AmexioCheckBoxComponent, { descendants: true },] }],
    queryRadioGroup: [{ type: ContentChildren, args: [AmexioRadioGroupComponent, { descendants: true },] }],
    queryLabel: [{ type: ContentChildren, args: [AmexioLabelComponent, { descendants: true },] }],
    queryNumber: [{ type: ContentChildren, args: [AmexioNumberInputComponent, { descendants: true },] }],
    queryRating: [{ type: ContentChildren, args: [AmexioRatingComponent, { descendants: true },] }],
    queryToggle: [{ type: ContentChildren, args: [AmexioToggleComponent, { descendants: true },] }],
    queryButton: [{ type: ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
    queryImage: [{ type: ContentChildren, args: [AmexioImageComponent, { descendants: true },] }],
    queryDropDown: [{ type: ContentChildren, args: [AmexioDropDownComponent, { descendants: true },] }],
    queryCheckBoxGroup: [{ type: ContentChildren, args: [AmexioCheckBoxGroupComponent, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/1/17.
*/
const TOP_COMPONENT_CLASS_MAP = {
    red: 'amexio-top-tab-red',
    green: 'amexio-top-tab-green',
    purple: 'amexio-top-tab-purple',
    blue: 'amexio-top-tab-blue',
    brown: 'amexio-top-tab-brown',
    yellow: 'amexio-top-tab-yellow',
    black: 'amexio-top-tab-black',
    pink: 'amexio-top-tab-pink',
    orange: 'amexio-top-tab-orange',
};
const BOTTOM_COMPONENT_CLASS_MAP = {
    red: 'amexio-bottom-tab-red',
    green: 'amexio-bottom-tab-green',
    purple: 'amexio-bottom-tab-purple',
    blue: 'amexio-bottom-tab-blue',
    brown: 'amexio-bottom-tab-brown',
    yellow: 'amexio-bottom-tab-yellow',
    black: 'amexio-bottom-tab-black',
    pink: 'amexio-bottom-tab-pink',
    orange: 'amexio-bottom-tab-orange',
};
class AmexioTabComponent extends LifeCycleBaseComponent {
    /**
     * @param {?} render
     * @param {?} componentFactoryResolver
     * @param {?} renderer
     */
    constructor(render, componentFactoryResolver, renderer) {
        super();
        this.render = render;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        /*
           Properties
           name :  context-menu
           datatype : string
           version : 5.0.1 onwards
           default :
           description : Context Menu provides the list of menus on right click.
           */
        this.contextmenu = [];
        /*
           Events
           name : rightClick
           datatype : none
           version : 5.0.1
           default : none
           description : It will gives you row clicked data.
           */
        this.rightClick = new EventEmitter();
        /*
           Events
           name : onClick
           datatype : none
           version : none
           default : none
           description : Callback to invoke on activated tab event.
           */
        this.onClick = new EventEmitter();
        this.showprev = false;
        this.shownext = false;
        this.mouseLocation = { left: 0, top: 0 };
        this.closeOthersConst = 'Close Others';
        this.dummyArray = [];
        this.tabPositionClass = '';
        this.componentId = '';
        this.map = new Map();
        this.prevtabindex = -1;
        this.currtabindex = -1;
        this.headeralign = 'left';
        this.typeActionAlign = 'left';
        this.tabPosition = 'top';
        this.fullPageTabs = false;
        this.action = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set tabLocalData(value) {
        this._tabLocalData = value;
        if (this.componentLoaded) {
            this.updateTabComponent();
        }
    }
    /**
     * @return {?}
     */
    get tabLocalData() {
        return this._tabLocalData;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentLoaded = true;
        this.componentId = Math.floor(Math.random() * 90000) + 10000 + '_tabc';
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    updateTabComponent() {
        if (this.tabs.nativeElement.scrollWidth > this.tabs.nativeElement.clientWidth) {
            this.headeralign = 'left';
        }
        this.adjustWidth();
        if (this.tabs && this.tabs.nativeElement
            && this.headerWidth && this.headerWidth.nativeElement
            && this.tabAction && this.tabAction.nativeElement
            && this.tabWidth1 !== this.tabs.nativeElement.offsetWidth) {
            this.headWidth = (this.tabAction.nativeElement.scrollWidth + this.headerWidth.nativeElement.scrollWidth);
            this.widthTabs = this.tabs.nativeElement.offsetWidth - this.headWidth;
        }
        if (JSON.stringify(this.tabPreviewData) !== JSON.stringify(this.tabLocalData)) {
            this.tabPreviewData = JSON.parse(JSON.stringify(this.tabLocalData));
            this.tabCollection = this.tabLocalData;
        }
        this.tabPositionClass = this.findTabStyleClass();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // set time out
        setTimeout(() => {
            this.tabWidth1 = this.tabs.nativeElement.offsetWidth;
            this.totalTabs = this.tabCollection.length;
            this.updateTabComponent();
            this.tabCollection.forEach((element, index) => {
                element['tablk'] = Math.floor(Math.random() * 90000) + 10000 + '_tablk';
                super.ngAfterViewInit();
            });
        }, 500);
    }
    /**
     * @return {?}
     */
    adjustWidth() {
        const /** @type {?} */ tWidth = this.tabs.nativeElement.clientWidth;
        const /** @type {?} */ tlistWidth = this.tabslist.nativeElement.scrollWidth;
        const /** @type {?} */ hWidth = 0;
        const /** @type {?} */ totalElWidth = tlistWidth + hWidth;
        if (totalElWidth > tWidth) {
            this.shownext = true;
        }
        else {
            this.shownext = false;
        }
        if (this.fullPageTabs === true) {
            if (totalElWidth > tWidth && this.fullPageTabs) {
                this.shownext = true;
            }
            else {
                this.singleTabWidth = totalElWidth / this.totalTabs;
            }
        }
        this.onAdjustHeight();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.tabLocalData && this.tabLocalData.length > 0) {
            this.tabPreviewData = JSON.parse(JSON.stringify(this.tabLocalData));
            this.tabCollection = this.tabLocalData;
        }
        else {
            this.tabCollection = [];
            this.tabCollection = this.queryTabs.toArray();
        }
        this.tabNodeProperties();
        // To add action in tab
        this.actionComp = this.queryAction.toArray();
        if (this.actionComp.length > 0) {
            this.actionComp[0].checkActionComponent();
        }
        this.tabPositionClass = this.findTabStyleClass();
    }
    /**
     * @param {?} title
     * @param {?} amexiocolor
     * @param {?} closable
     * @param {?} component
     * @return {?}
     */
    addDynamicTab(title, amexiocolor, closable, component) {
        // get a component factory for our TabComponent
        const /** @type {?} */ tpCF = this.componentFactoryResolver.resolveComponentFactory(AmexioTabPillComponent);
        const /** @type {?} */ tp = this.target.createComponent(tpCF);
        // set the according properties on our component instance
        const /** @type {?} */ instance = /** @type {?} */ (tp.instance);
        instance.title = title;
        instance.active = true;
        instance.closable = closable;
        instance['tabpillinstance'] = this.target;
        if (instance.amexiocolor === '') {
            instance.amexiocolor = 'amexio-top-tab-black';
        }
        else {
            instance.amexiocolor = 'amexio-top-tab-' + amexiocolor;
        }
        // create dynamic component
        const /** @type {?} */ dynCF = this.componentFactoryResolver.resolveComponentFactory(component);
        const /** @type {?} */ dynCmp = tp.instance.target.createComponent(dynCF);
        // Push new tab and select it.
        this.dummyArray.push(tp);
        this.tabCollection.push(tp.instance);
        this.selectTab(tp.instance);
        this.adjustWidth();
        return dynCmp.instance;
    }
    /**
     * @return {?}
     */
    closeAllTabs() {
        this.tabCollection.forEach((tabs) => {
            if (tabs.closable || this.closable) {
                this.closeTab(tabs);
            }
        });
    }
    /**
     * @return {?}
     */
    closeAll() {
        this.tabCollection.forEach((tabs) => {
            this.closeTab(tabs);
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    closeTabs(data) {
        const /** @type {?} */ tabList = [];
        this.tabCollection.forEach((tabs) => {
            tabs.active = false;
            data.forEach((opt) => {
                if (opt.toLowerCase() !== tabs.title.toLowerCase() && (tabs.closable || this.closable)) {
                    this.closeTab(tabs);
                }
                else {
                    tabList.push(tabs);
                    this.asignTabPillClass(tabs);
                }
            });
        });
        tabList[tabList.length - 1].active = true;
        this.asignTabPillClass(tabList[tabList.length - 1]);
    }
    /**
     * @param {?} input
     * @return {?}
     */
    setActiveTab(input) {
        let /** @type {?} */ flag = false;
        if (typeof input === 'string') {
            this.tabCollection.forEach((tabs) => {
                tabs.tabPillClass = '';
                if (input.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                    tabs.active = true;
                    flag = true;
                }
                else {
                    tabs.active = false;
                }
                this.asignTabPillClass(tabs);
            });
        }
        else if (typeof input === 'number') {
            this.tabCollection.forEach((tabs, index) => {
                tabs.tabPillClass = '';
                if (index + 1 === input) {
                    tabs.active = true;
                    flag = true;
                }
                else {
                    tabs.active = false;
                }
                this.asignTabPillClass(tabs);
            });
        }
        return flag;
    }
    /**
     * @param {?} disabledTabInput
     * @return {?}
     */
    setDisableTabs(disabledTabInput) {
        const /** @type {?} */ flag = false;
        if (disabledTabInput.length > 0) {
            disabledTabInput.forEach((ele) => {
                if (typeof ele === 'string') {
                    this.disableTabByString(flag, ele);
                }
                else if (typeof ele === 'number') {
                    this.disableTabByNumber(flag, ele);
                }
            });
        }
        return flag;
    }
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    disableTabByString(flag, ele) {
        this.tabCollection.forEach((tabs) => {
            tabs.tabPillClass = '';
            if (ele.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                tabs.disabled = true;
                flag = true;
            }
            this.asignTabPillClass(tabs);
        });
    }
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    disableTabByNumber(flag, ele) {
        this.tabCollection.forEach((tabs, index) => {
            tabs.tabPillClass = '';
            if (index + 1 === ele) {
                tabs.active = true;
                flag = true;
            }
            else {
                tabs.active = false;
            }
            this.asignTabPillClass(tabs);
        });
    }
    /**
     * @param {?} disabledTabInput
     * @return {?}
     */
    setEnableTabs(disabledTabInput) {
        const /** @type {?} */ flag = false;
        if (disabledTabInput.length > 0) {
            disabledTabInput.forEach((ele) => {
                if (typeof ele === 'string') {
                    this.enableTabByString(flag, ele);
                }
                else if (typeof ele === 'number') {
                    this.enableTabByNumber(flag, ele);
                }
            });
        }
        return flag;
    }
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    enableTabByString(flag, ele) {
        this.tabCollection.forEach((tabs) => {
            tabs.tabPillClass = '';
            if (ele.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                tabs.disabled = false;
                flag = true;
            }
            this.asignTabPillClass(tabs);
        });
    }
    /**
     * @param {?} flag
     * @param {?} ele
     * @return {?}
     */
    enableTabByNumber(flag, ele) {
        this.tabCollection.forEach((tabs, index) => {
            tabs.tabPillClass = '';
            if (index + 1 === ele) {
                tabs.disabled = false;
                flag = true;
            }
            this.asignTabPillClass(tabs);
        });
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    selectTab(tab) {
        // deactivate all tabs
        this.tabCollection.forEach((tab1) => {
            tab1.active = false;
        });
        tab.active = true;
        this.tabCollection.forEach((tab1) => {
            this.asignTabPillClass(tab1);
        });
    }
    /**
     * @return {?}
     */
    tabNodeProperties() {
        const /** @type {?} */ tabWidth = this.tabCollection.length;
        for (let /** @type {?} */ i = 0; i < tabWidth; i++) {
            if (this.tabPosition === 'top') {
                this.tabCollection[i].amexiocolor = TOP_COMPONENT_CLASS_MAP[this.tabCollection[i].amexiocolor];
            }
            else {
                this.tabCollection[i].amexiocolor = BOTTOM_COMPONENT_CLASS_MAP[this.tabCollection[i].amexiocolor];
            }
            if (this.closable) {
                if (this.tabCollection[i].closable === null || this.tabCollection[i].closable === true) {
                    this.tabCollection[i].closable = true;
                }
                else if (this.tabCollection[i].closable === false) {
                    this.tabCollection[i].closable = false;
                }
            }
            this.asignTabPillClass(this.tabCollection[i]);
        }
    }
    /**
     * @param {?} tab
     * @param {?} index
     * @return {?}
     */
    onTabClick(tab, index) {
        if (!tab.disabled && !tab.header) {
            for (const /** @type {?} */ i of this.tabCollection) {
                if (i === tab) {
                    i['active'] = true;
                    i['index'] = index;
                    this.asignTabPillClass(tab);
                    this.onClick.emit(tab);
                }
                else {
                    i['active'] = false;
                    i['tabPillClass'] = '';
                }
            }
            this.tabCollection.forEach((tab1) => {
                this.asignTabPillClass(tab1);
            });
        }
    }
    /**
     * @return {?}
     */
    onArrowRight() {
        if (this.prevtabindex > -1) {
            this.tabCollection[this.prevtabindex]['isSelected'] = false;
        }
        this.currtabindex++;
        this.prevtabindex = this.currtabindex;
        if (this.currtabindex >= this.tabCollection.length) {
            this.currtabindex = 0;
            this.prevtabindex = 0;
        }
        const /** @type {?} */ currentTab = this.tabCollection[this.currtabindex];
        this.commonFocus(currentTab);
    }
    /**
     * @return {?}
     */
    onArrowLeft() {
        if (this.prevtabindex > -1) {
            this.tabCollection[this.prevtabindex]['isSelected'] = false;
        }
        this.prevtabindex--;
        if (this.prevtabindex === -1) {
            this.prevtabindex = this.tabCollection.length - 1;
            this.currtabindex = -1;
        }
        this.tabCollection[this.prevtabindex]['isSelected'] = true;
        const /** @type {?} */ currentTab = this.tabCollection[this.prevtabindex];
        this.commonFocus(currentTab);
        if (this.prevtabindex === 0) {
            this.currtabindex = 0;
        }
    }
    /**
     * @return {?}
     */
    onHomeClick() {
        const /** @type {?} */ currentTab = this.tabCollection[0];
        this.commonFocus(currentTab);
    }
    /**
     * @return {?}
     */
    onEndClick() {
        const /** @type {?} */ currentTab = this.tabCollection[this.tabCollection.length - 1];
        this.commonFocus(currentTab);
    }
    /**
     * @param {?} currentTab
     * @return {?}
     */
    commonFocus(currentTab) {
        currentTab['isSelected'] = true;
        const /** @type {?} */ tablk = document.getElementById(currentTab.tablk);
        tablk.focus();
    }
    /**
     * @return {?}
     */
    next() {
        const /** @type {?} */ nxt = this.tabs.nativeElement;
        nxt.scrollLeft = nxt.scrollLeft + 200;
        if ((nxt.scrollWidth - nxt.offsetWidth - nxt.scrollLeft) <= 0) {
            this.shownext = false;
        }
        this.showprev = true;
    }
    /**
     * @return {?}
     */
    previous() {
        const /** @type {?} */ prev = this.tabs.nativeElement;
        prev.scrollLeft = prev.scrollLeft - 200;
        if (prev.scrollLeft === 0) {
            this.showprev = false;
        }
        this.shownext = true;
    }
    /**
     * @param {?} tabNode
     * @return {?}
     */
    closeTab(tabNode) {
        const /** @type {?} */ newTab = [];
        let /** @type {?} */ index = 0;
        let /** @type {?} */ tabHighlightIndex = 0;
        this.tabCollection.forEach((tab, i) => {
            tab.active = false;
            if (tab.tabId === tabNode.tabId) {
                tabHighlightIndex = index;
                if (tab.hasOwnProperty('tabpillinstance')) {
                    tab.target.remove();
                }
                else {
                    this.tabDomRemove(tab);
                }
            }
            else if (tab.tabId !== tabNode.tabId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex === newTab.length) {
            tabHighlightIndex--;
        }
        this.tabCollection = newTab;
        if (tabHighlightIndex > -1) {
            this.activateTab(newTab[tabHighlightIndex].tabId);
        }
        else {
            this.activateTab(null);
        }
        if (this.tabCollection.length === 1) {
            this.closable = false;
        }
        if (newTab.length === 1) {
            newTab[0].closable = false;
        }
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    tabDomRemove(tab) {
        const /** @type {?} */ removeNode = document.getElementById(tab.tabId).parentNode;
        const /** @type {?} */ parentRefNode = removeNode.parentNode;
        parentRefNode.removeChild(removeNode);
    }
    /**
     * @param {?} tabId
     * @return {?}
     */
    activateTab(tabId) {
        if (tabId !== null) {
            this.tabCollection.forEach((tab) => {
                tab.active = false;
                if (tab.tabId === tabId) {
                    tab.active = true;
                }
                this.asignTabPillClass(tab);
            });
        }
    }
    /**
     * @param {?} tabData
     * @return {?}
     */
    asignTabPillClass(tabData) {
        tabData.tabPillClass = '';
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && tabData.active && (this.tabPosition === 'top')) {
            tabData.tabPillClass = 'activetab';
        }
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'bottomActivetab';
        }
        if (tabData.disabled) {
            tabData.tabPillClass = 'disabled-tab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'top') && tabData.active && !this.activeBGColor) {
            tabData.tabPillClass = 'activecolortab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'top') && tabData.active && this.activeBGColor) {
            tabData.tabPillClass = 'activebgcolortab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'activebottomcolortab';
        }
    }
    /**
     * @return {?}
     */
    findTabStyleClass() {
        if (this.headeralign === 'right' && !this.fullPageTabs) {
            return 'tabposition-right';
        }
        if (this.headeralign === 'left' && !this.fullPageTabs) {
            return 'tabposition-left';
        }
        if (this.fullPageTabs === true) {
            return 'equally-align-tabs';
        }
    }
    /**
     * @return {?}
     */
    onAdjustHeight() {
        if (this.bodyheight) {
            let /** @type {?} */ h = (window.innerHeight / 100) * this.bodyheight;
            if (this.tabs && this.tabs.nativeElement && this.tabs.nativeElement.offsetHeight) {
                h = h - this.tabs.nativeElement.offsetHeight;
            }
            if (this.bodyheight === 100) {
                h = h - 40;
            }
            this.minHeight = h;
            this.height = h;
        }
    }
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} id
     * @return {?}
     */
    loadContextMenu(event, row, id) {
        this.tempSelectedFlag(this.tabCollection);
        this.mouseLocation.left = event.clientX;
        this.mouseLocation.top = event.clientY;
        row.active = true;
        this.getContextMenu();
        this.posixUp = this.getListPosition(id);
        if (this.contextmenu && this.contextmenu.length > 0) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.rightClickRowData = row;
    }
    /**
     * @param {?} tabs
     * @return {?}
     */
    tempSelectedFlag(tabs) {
        tabs.forEach((tab) => {
            if (tab.active) {
                tab.active = false;
            }
        });
    }
    /**
     * @return {?}
     */
    getContextMenu() {
        if (this.defaultContextMenu) {
            const /** @type {?} */ obj = { text: 'Close All', icon: 'fa fa-close', disable: false };
            const /** @type {?} */ obj2 = { text: this.closeOthersConst, icon: 'fa fa-close', seperator: false, disabled: false };
            let /** @type {?} */ tmpflag = true;
            for (const /** @type {?} */ i of this.contextmenu) {
                if (i.text === 'Close All' || i.text === this.closeOthersConst) {
                    tmpflag = false;
                }
            }
            if (tmpflag) {
                this.contextmenu.push(obj, obj2);
            }
            this.contextMenuFlag = true;
            this.addListner();
        }
        else if (this.contextmenu && this.contextmenu.length > 0) {
            this.contextMenuFlag = true;
            this.addListner();
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        let /** @type {?} */ temptab;
        this.tabCollection.forEach((obj) => {
            if (obj.active) {
                temptab = obj;
            }
        });
        if (Data.nodeData.active) {
            temptab = Data;
        }
        if (Data.menuData.text === 'Close All') {
            this.closeAllTabs();
        }
        if (Data.menuData.text === this.closeOthersConst) {
            this.closeOtherTabs(temptab);
        }
        this.rightClick.emit(Data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    closeOtherTabs(data) {
        this.tabCollection.forEach((tabs) => {
            if (data.nodeData.title.toLowerCase() !== tabs.title.toLowerCase() && (tabs.closable || this.closable)) {
                this.closeTab(tabs);
            }
        });
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.contextMenuFlag = false;
            if (!this.contextMenuFlag) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListner();
        super.ngOnDestroy();
    }
    /**
     * @param {?} input
     * @return {?}
     */
    showTab(input) {
        if (typeof input === 'string') {
            this.tabCollection.forEach((tabs) => {
                if (input.trim().toLowerCase() !== tabs.title.trim().toLowerCase()) {
                    tabs.hide = true;
                    tabs['showflag'] = true;
                    tabs.active = false;
                }
                else {
                    tabs.hide = false;
                    tabs['showflag'] = false;
                    tabs.active = true;
                }
                this.asignTabPillClass(tabs);
            });
        }
        else if (typeof input === 'number') {
            this.tabCollection.forEach((tabs, index) => {
                if (index !== input) {
                    tabs.hide = true;
                    tabs['showflag'] = true;
                    tabs.active = false;
                }
                else {
                    tabs.hide = false;
                    tabs['showflag'] = false;
                    tabs.active = true;
                }
            });
        }
    }
    /**
     * @param {?} input
     * @return {?}
     */
    hideTab(input) {
        if (typeof input === 'string') {
            this.tabCollection.forEach((tabs, index) => {
                if (input.trim().toLowerCase() === tabs.title.trim().toLowerCase() && tabs.active) {
                    const /** @type {?} */ i = index + 1;
                    tabs.hide = false;
                    this.tabCollection[i].active = true;
                    const /** @type {?} */ newTab = this.tabCollection[i];
                    tabs.active = false;
                    tabs['showflag'] = true;
                    this.asignTabPillClass(newTab);
                }
                else if (input.trim().toLowerCase() === tabs.title.trim().toLowerCase() && !tabs.active) {
                    tabs.hide = true;
                    tabs['showflag'] = true;
                }
            });
        }
        else if (typeof input === 'number') {
            this.tabCollection.forEach((tabs, index) => {
                if (index !== input) {
                    tabs.hide = true;
                    tabs['showflag'] = false;
                }
                else {
                    tabs.hide = false;
                    tabs['showflag'] = true;
                }
            });
        }
    }
    /**
     * @param {?} input
     * @param {?} flag
     * @return {?}
     */
    disableTab(input, flag) {
        if (typeof input === 'string') {
            this.tabCollection.forEach((tabs) => {
                if (input.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                    tabs.disabled = true;
                    flag = true;
                }
                this.asignTabPillClass(tabs);
            });
        }
        else if (typeof input === 'number') {
            this.tabCollection.forEach((tabs, index) => {
                if (index === input) {
                    tabs.disabled = true;
                    flag = true;
                }
                this.asignTabPillClass(tabs);
            });
        }
        else if (typeof input === 'object') {
            this.disabledsplitmethod(input, flag);
        }
    }
    /**
     * @param {?} input
     * @param {?} flag
     * @return {?}
     */
    disabledsplitmethod(input, flag) {
        input.forEach((element) => {
            if (typeof element === 'string') {
                this.tabCollection.forEach((tabs) => {
                    if (element.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                        tabs.disabled = true;
                        flag = true;
                    }
                    this.asignTabPillClass(tabs);
                });
            }
            else if (typeof element === 'number') {
                this.tabCollection.forEach((tabs, index) => {
                    if (index === element) {
                        tabs.disabled = true;
                        flag = true;
                    }
                    this.asignTabPillClass(tabs);
                });
            }
        });
    }
    /**
     * @return {?}
     */
    getCurrentTab() {
        let /** @type {?} */ currentindex;
        this.tabCollection.forEach((tabs, index) => {
            if (tabs.active === true) {
                currentindex = index;
            }
        });
        return currentindex;
    }
    /**
     * @param {?} input
     * @return {?}
     */
    deleteTab(input) {
        if (typeof input === 'string') {
            this.tabCollection.forEach((tabs) => {
                if (input.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                    this.closeTab(tabs);
                }
            });
        }
        else if (typeof input === 'number') {
            this.tabCollection.forEach((tabs, index) => {
                if (index === input) {
                    this.closeTab(tabs);
                }
            });
        }
        else if (typeof input === 'object') {
            this.deletetypeObject(input);
        }
    }
    /**
     * @param {?} input
     * @return {?}
     */
    deletetypeObject(input) {
        input.forEach((element) => {
            if (typeof element === 'string') {
                this.tabCollection.forEach((tabs) => {
                    if (element.trim().toLowerCase() === tabs.title.trim().toLowerCase()) {
                        this.closeTab(tabs);
                    }
                });
            }
            else if (typeof element === 'number') {
                this.tabCollection.forEach((tabs, index) => {
                    if (element === index) {
                        this.closeTab(tabs);
                    }
                });
            }
        });
    }
    /**
     * @param {?} input
     * @param {?} replacetab
     * @return {?}
     */
    replaceTab(input, replacetab) {
        this.tabCollection.forEach((tabs, index) => {
            if (input === index) {
                tabs.title = replacetab;
            }
        });
    }
}
AmexioTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tab-view',
                template: `
    <div class="tabwrapper">
        <div *ngIf="showprev" [ngClass]="{'tabnavigation float-right tabnavigation-bottom-left':tabPosition=='bottom', 'tabnavigation float-left':tabPosition=='top'}" (click)="previous()">
            <amexio-c-icon key="tab_previous"></amexio-c-icon>
        </div>
        <div *ngIf="shownext" [ngClass]="{'tabnavigation float-right tabnavigation-bottom-right':tabPosition=='bottom','tabnavigation float-right':tabPosition=='top'}" (click)="next()">
            <amexio-c-icon key="tab_next"></amexio-c-icon>
        </div>

        <div #tab class="tab"  role="tablist" aria-labelledby="Tablist" [ngClass]="{'bottomTab':tabPosition == 'bottom'}">

            <div #tabslist class="tablistitems {{tabPositionClass}}">
                <!-- HEADER -->

                <div class="tablink" style="padding-bottom:0%" *ngIf="(this.action == true || header) && (fullPageTabs == false)">
                    <div class="table">
                        <div class="tablerow">
                            <div class="tablecol">
                                {{header}}
                            </div>
                            <div class="tablecol">
                                <ng-content select="amexio-tab-action"></ng-content>
                            </div>
                        </div>
                    </div>
                </div>



                <div>
                    <div *ngFor="let tabnode of tabCollection, let index = index" class="tablink {{tabnode.amexiocolor+ ' '+tabnode.tabPillClass}}" 
                    [style.width.px]="singleTabWidth"  (contextmenu)="loadContextMenu($event,tabnode, tab)">
                        <div class="table1" id="{{tabnode.tablk}}" tabindex="1" attr.aria-controls="{{tabnode.tabId}}" role="tab" (click)="onTabClick(tabnode, index)" [ngStyle]="{'display': tabnode.showflag ? 'none':'table-cell'}"
                        (keyup.arrowright)="onArrowRight()" (keyup.arrowleft)="onArrowLeft()" (keyup.enter)="onTabClick(tabnode, index)" (keyup.home)="onHomeClick()" 
                        (keyup.end)="onEndClick()">
                            <div class="tablerow">
                                <div *ngIf="tabnode.icon" class="tablecol">
                                    <amexio-c-icon *ngIf="tabnode.icon" [customclass]="tabnode.icon"></amexio-c-icon>
                                </div>
                                <div class="tablecol">
                                    {{tabnode.title}}
                                </div>
                                <div *ngIf="tabnode.closable" class="tablecol">
                                    <amexio-c-icon key="tab_close" (onClick)="closeTab(tabnode)"></amexio-c-icon>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="tabcontent" [attr.id]="componentId" [ngStyle]="{'height.px' : height,'overflow-y' : height!= null ? 'auto' : '','min-height.px' : minHeight}">
        <ng-content></ng-content>
        <ng-template #target></ng-template>
    </div>


    <ng-container *ngIf="contextMenuFlag">
        <base-contextmenu [base-context-menu]="contextmenu" [mouse-location-top]="mouseLocation.top" [mouse-location-left]="mouseLocation.left" [is-FlagShow]="contextMenuFlag" [right-click-data]="rightClickRowData" (onRightClick)="rightClickDataEmit($event)"
            [position-up]="posixUp">
        </base-contextmenu>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
AmexioTabComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ComponentFactoryResolver },
    { type: Renderer2 }
];
AmexioTabComponent.propDecorators = {
    closable: [{ type: Input }],
    headeralign: [{ type: Input, args: ['header-align',] }],
    action: [{ type: Input }],
    typeActionAlign: [{ type: Input, args: ['action-type-align',] }],
    fullPageTabs: [{ type: Input, args: ['divide-header-equally',] }],
    tabPosition: [{ type: Input, args: ['tab-position',] }],
    header: [{ type: Input }],
    bodyheight: [{ type: Input, args: ['body-height',] }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    defaultContextMenu: [{ type: Input, args: ['default-context-menu',] }],
    activeBGColor: [{ type: Input, args: ['active-bg-color',] }],
    rightClick: [{ type: Output }],
    tabs: [{ type: ViewChild, args: ['tab', { read: ElementRef },] }],
    tabAction: [{ type: ViewChild, args: ['tabAction', { read: ElementRef },] }],
    headerWidth: [{ type: ViewChild, args: ['headerWidth', { read: ElementRef },] }],
    headerName: [{ type: ViewChild, args: ['headerName', { read: ElementRef },] }],
    tabslist: [{ type: ViewChild, args: ['tabslist', { read: ElementRef },] }],
    actionProperty: [{ type: ViewChild, args: ['actionProperty', { read: ElementRef },] }],
    queryTabs: [{ type: ContentChildren, args: [AmexioTabPillComponent,] }],
    target: [{ type: ViewChild, args: ['target', { read: ViewContainerRef },] }],
    queryAction: [{ type: ContentChildren, args: [AmexioTabActionComponent, { descendants: true },] }],
    onClick: [{ type: Output }],
    tabLocalData: [{ type: Input, args: ['tabLocalData',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/1/17.
*/
class AmexioVerticalTabComponent {
    /**
     * @param {?} render
     * @param {?} componentFactoryResolver
     */
    constructor(render, componentFactoryResolver) {
        this.render = render;
        this.componentFactoryResolver = componentFactoryResolver;
        /*
        Events
        name : onClick
        datatype : none
        version : 4.0 onwards
        default :none
        description : Callback to invoke on activated tab event.
        */
        this.onClick = new EventEmitter();
        this.dummyArray = [];
        this.componentId = '';
        this.tabPosition = 'top';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = Math.floor(Math.random() * 90000) + 10000 + '_tabc';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.tabCollection = this.queryTabs.toArray();
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    onTabClick(tab) {
        if (!tab.disabled && !tab.header) {
            for (const /** @type {?} */ i of this.tabCollection) {
                if (i === tab) {
                    i['active'] = true;
                    this.asignTabPillClass(tab);
                    this.onClick.emit(tab);
                }
                else {
                    i['active'] = false;
                    i['tabPillClass'] = '';
                }
            }
            this.tabCollection.forEach((tab1) => {
                this.asignTabPillClass(tab1);
            });
        }
    }
    /**
     * @return {?}
     */
    findTabStyleClass() {
        if (this.tabPosition === 'top') {
            return 'tabposition-top';
        }
        if (this.tabPosition === 'bottom') {
            return 'tabposition-bottom';
        }
    }
    /**
     * @return {?}
     */
    closeAllTabs() {
        this.tabCollection.forEach((tabs) => {
            if (tabs.closable === true || this.closable === true) {
                this.closeTab(tabs);
            }
        });
    }
    /**
     * @param {?} tabNode
     * @return {?}
     */
    closeTab(tabNode) {
        const /** @type {?} */ newTab = [];
        let /** @type {?} */ index = 0;
        let /** @type {?} */ tabHighlightIndex = 0;
        this.tabCollection.forEach((tab, i) => {
            tab.active = false;
            if (tab.tabId === tabNode.tabId) {
                tabHighlightIndex = index;
                if (tab.hasOwnProperty('tabpillinstance')) {
                    tab.target.remove();
                }
                else {
                    this.tabDomRemove(tab);
                }
            }
            else if (tab.tabId !== tabNode.tabId) {
                newTab.push(tab);
            }
            index++;
        });
        if (tabHighlightIndex === newTab.length) {
            tabHighlightIndex--;
        }
        this.tabCollection = newTab;
        if (tabHighlightIndex > -1) {
            this.activateTab(newTab[tabHighlightIndex].tabId);
        }
        else {
            this.activateTab(null);
        }
        if (this.tabCollection.length === 1) {
            this.closable = false;
        }
        if (newTab.length === 1) {
            newTab[0].closable = false;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    closeTabs(data) {
        const /** @type {?} */ tabList = [];
        this.tabCollection.forEach((tabs) => {
            tabs.active = false;
            data.forEach((opt) => {
                if (opt.toLowerCase() !== tabs.title.toLowerCase() && (tabs.closable === true || this.closable === true)) {
                    this.closeTab(tabs);
                }
                else {
                    tabList.push(tabs);
                    this.asignTabPillClass(tabs);
                }
            });
        });
        tabList[tabList.length - 1].active = true;
        this.asignTabPillClass(tabList[tabList.length - 1]);
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    tabDomRemove(tab) {
        const /** @type {?} */ removeNode = document.getElementById(tab.tabId).parentNode;
        const /** @type {?} */ parentRefNode = removeNode.parentNode;
        parentRefNode.removeChild(removeNode);
    }
    /**
     * @param {?} title
     * @param {?} amexiocolor
     * @param {?} closable
     * @param {?} component
     * @return {?}
     */
    addDynamicTab(title, amexiocolor, closable, component) {
        // get a component factory for our TabComponent
        const /** @type {?} */ tpCF = this.componentFactoryResolver.resolveComponentFactory(AmexioTabPillComponent);
        const /** @type {?} */ tp = this.target.createComponent(tpCF);
        // set the according properties on our component instance
        const /** @type {?} */ instance = /** @type {?} */ (tp.instance);
        instance.title = title;
        instance.active = true;
        instance.closable = closable;
        instance['tabpillinstance'] = this.target;
        if (instance.amexiocolor === '') {
            instance.amexiocolor = 'amexio-top-tab-black';
        }
        else {
            instance.amexiocolor = 'amexio-top-tab-' + amexiocolor;
        }
        // create dynamic component
        const /** @type {?} */ dynCF = this.componentFactoryResolver.resolveComponentFactory(component);
        const /** @type {?} */ dynCmp = tp.instance.target.createComponent(dynCF);
        // Push new tab and select it.
        this.dummyArray.push(tp);
        this.tabCollection.push(tp.instance);
        this.selectTab(tp.instance);
        return dynCmp.instance;
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    selectTab(tab) {
        // deactivate all tabs
        this.tabCollection.forEach((tab1) => {
            tab1.active = false;
        });
        tab.active = true;
        this.tabCollection.forEach((tab1) => {
            this.asignTabPillClass(tab1);
        });
    }
    /**
     * @param {?} tabData
     * @return {?}
     */
    asignTabPillClass(tabData) {
        tabData.tabPillClass = '';
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && tabData.active && (this.tabPosition === 'top')) {
            tabData.tabPillClass = 'activetab';
        }
        if ((!tabData.amexiocolor || tabData.amexiocolor === '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'bottomActivetab';
        }
        if (tabData.disabled) {
            tabData.tabPillClass = 'disabled-tab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'top') && tabData.active) {
            tabData.tabPillClass = 'activecolortab';
        }
        if ((tabData.amexiocolor !== '') && (this.tabPosition === 'bottom') && tabData.active) {
            tabData.tabPillClass = 'activebottomcolortab';
        }
    }
    /**
     * @param {?} tabId
     * @return {?}
     */
    activateTab(tabId) {
        this.tabCollection.forEach((tab) => {
            tab.active = false;
        });
    }
}
AmexioVerticalTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-vertical-tab-view',
                template: `
    <div class="vertical-table">
        <div class="vertical-tablerow" style="height:580px">
            <div class="vertical-tablecol verticalalign-tableft" [ngClass]="{'tabposition-top': (tabPosition==='top'),'tabposition-bottom':(tabPosition==='bottom')}">
                <div #tab class="verticalnavtab verticalnavtab-left">
                    <ul>
                        <li *ngFor="let tabnode of tabCollection">
                            <div class="defaultnode" [ngClass]="{'leftactivetab':tabnode.active,'disabled-tab':tabnode.disabled}" (click)="onTabClick(tabnode)" [ngStyle]="{'color': tabnode.amexiocolor}">
                                <span *ngIf="tabnode.icon" [ngClass]="tabnode.icon" style="padding-right:8px" aria-hidden="true"></span>
                                <span>{{tabnode.title}}</span>
                                <span *ngIf="closable" class="tablecol">
                    <amexio-c-icon key="tab_close" (onClick)="closeTab(tabnode)" style="padding-left:5px;float:right"></amexio-c-icon>
                  </span>
                            </div>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="vertical-tablecol verticalalign-tabcontent">
                <div class="tabcontent" [attr.id]="componentId">
                    <ng-content></ng-content>
                    <ng-template #target></ng-template>
                </div>
            </div>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioVerticalTabComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ComponentFactoryResolver }
];
AmexioVerticalTabComponent.propDecorators = {
    tabs: [{ type: ViewChild, args: ['tab', { read: ElementRef },] }],
    queryTabs: [{ type: ContentChildren, args: [AmexioTabPillComponent,] }],
    target: [{ type: ViewChild, args: ['target', { read: ViewContainerRef },] }],
    closable: [{ type: Input }],
    tabPosition: [{ type: Input }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexiotimelineeventComponent {
    constructor() {
        this.timelineclass = 'timeline-item';
        /*
          Properties
          name :contentborder
          datatype :string
          version : 4.2onwards
          default : false
          description : This will specify the content border in timeline.
          */
        this.contentborder = true;
        this.alignment = 'center';
    }
}
AmexiotimelineeventComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-timeline-event',
                template: `
    <div 

    tabindex="0"
    attr.aria-label="{{alignment}}"

    class="timeline-badge "  
    [ngClass]="{'timeline-badge-center': (alignment === 'center')
      , 'timeline-badge-left': (alignment === 'right')
      , 'timeline-badge-right': (alignment === 'left')}"
      >
    <amexio-c-icon [customclass]="icon"></amexio-c-icon>
    </div>
    <div 
    tabindex="1"
    attr.aria-label="{{contentalignment}}"
    class="timeline-panel" [ngClass]="{'timeline-panel-border':contentborder,
     'timeline-panel-float-right': (contentalignment == 'right'),
     'timeline-panel-float-left': (contentalignment == 'left'),
     'timeline-panel-center': (alignment === 'center'),
     'timeline-panel-right': (alignment === 'right'),
     'timeline-panel-left': (alignment === 'left')}">
    <div 
    tabindex="1"
    *ngIf="label"><b>{{label}}</b></div>

    <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexiotimelineeventComponent.ctorParameters = () => [];
AmexiotimelineeventComponent.propDecorators = {
    timelineclass: [{ type: HostBinding, args: ['attr.class',] }],
    label: [{ type: Input, args: ['label',] }],
    icon: [{ type: Input, args: ['icon',] }],
    contentborder: [{ type: Input, args: ['content-border',] }],
    contentalignment: [{ type: Input, args: ['content-alignment',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioTimeLineModel {
    /**
     * @param {?} timelineevents
     * @param {?} contentalignment
     * @param {?} alignment
     */
    constructor(timelineevents, contentalignment, alignment) {
        this.timelineevents = timelineevents;
        this.alignment = alignment;
        this.contentalignment = contentalignment;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexiotimelineComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
        this.alignment = 'center';
        const /** @type {?} */ that = this;
        this.matchMediaService.OnPhone((mediaQueryList) => {
            that.mobileOrTabletMode();
        });
        this.matchMediaService.OnTablet((mediaQueryList) => {
            that.mobileOrTabletMode();
        });
        this.matchMediaService.OnDesktop((mediaQueryList) => {
            that.desktopMode();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.timelineevents = this.querylist.toArray();
        this.initContentAlignment();
    }
    /**
     * @return {?}
     */
    initContentAlignment() {
        if (this.contentalignment) {
            this.alignment = this.contentalignment;
        }
        let /** @type {?} */ hasContentAlignment = true;
        this.timelineevents.forEach((timeline) => {
            if (timeline.contentalignment) {
                hasContentAlignment = false;
            }
        });
        if (hasContentAlignment) {
            this.timelineevents.forEach((timeline, index) => {
                if (this.contentalignment) {
                    timeline.contentalignment = this.contentalignment;
                }
                else {
                    timeline.contentalignment = ((index % 2) === 0) ? 'right' : 'left';
                }
                timeline.alignment = this.alignment;
            });
        }
        this.timelineModel = new AmexioTimeLineModel(JSON.parse(JSON.stringify(this.timelineevents)), this.contentalignment, this.alignment);
    }
    /**
     * @return {?}
     */
    mobileOrTabletMode() {
        this.alignment = 'right';
        this.timelineevents.forEach((timeline, index) => {
            timeline.contentalignment = 'right';
            timeline.alignment = this.alignment;
        });
    }
    /**
     * @return {?}
     */
    desktopMode() {
        this.alignment = this.timelineModel.alignment;
        this.contentalignment = this.timelineModel.contentalignment;
        this.timelineevents.forEach((timeline, index) => {
            const /** @type {?} */ originalTimelineEvent1 = this.timelineModel.timelineevents[index];
            timeline.contentalignment = originalTimelineEvent1.contentalignment;
            timeline.alignment = originalTimelineEvent1.alignment;
        });
    }
}
AmexiotimelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-timeline',
                template: `
    <div class='timeline' [ngClass]="{'timelinecenter': (alignment == 'center'), 
                                    'timelineleft': (alignment == 'left'), 
                                    'timelineright': (alignment == 'right')}">
      <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexiotimelineComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexiotimelineComponent.propDecorators = {
    querylist: [{ type: ContentChildren, args: [AmexiotimelineeventComponent,] }],
    contentalignment: [{ type: Input, args: ['content-alignment',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright [2019] [Metamagic]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by ketangote on 12/18/17.
 */
class AmexioWindowPaneComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        /*
           Properties
           name : vertical-position
           datatype : string
           version : 4.1 onwards
           default : none
           description : Postion of window vertically: top or bottom or center.
           This attribute is ignored if user specify position explicitly
           (using position-top/position-bottom/position-left/position-right)
           */
        this.verticalposition = 'center';
        /*
           Properties
           name : close-on-escape
           datatype : string
           version : 4.2onwards
           default : false
           description : Enables And Disables the Escape button.
           */
        this.closeonescape = true;
        this.showChange = new EventEmitter();
        /*
           Properties
           name : maximize
           datatype : boolean
           version : 4.0 onwards
           default :false
           description : User can maximize the window to full screen.
           */
        this.maximize = false;
        /*
           Properties
           name : closable
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : User can close the window.
           */
        this.closable = true;
        /*
           Properties
           name : header
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : it is flag that decides header visibility
           */
        this.header = true;
        this.window = ' window-';
        this.width = '90%';
        this.nodeRightClick = new EventEmitter();
        this.rightClick = new EventEmitter();
        this.close = new EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        if (this.closable) {
            this.showWindow = false;
            this.show = false;
            this.showChange.emit(false);
            this.close.emit(this.showWindow);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setVerticlePosition();
        this.setHorizontalPosition();
        if (this.maximize) {
            this.dummyWidth = this.width;
            this.isFullWindow = true;
            this.maximumWindowStyle = this.setMaximizeClass(this.isFullWindow);
        }
        if (this.showWindow) {
            this.show = this.showWindow;
        }
    }
    /**
     * @param {?} isFullWindow
     * @return {?}
     */
    setMaximizeClass(isFullWindow) {
        this.isFullWindow = isFullWindow;
        if (isFullWindow) {
            this.width = '100%';
            return {
                'margin-top': '0', 'height': '100%',
            };
        }
        else {
            this.width = this.dummyWidth;
            return {
                'margin-top': '1%', 'height': '96%',
            };
        }
    }
    /**
     * @return {?}
     */
    setVerticlePosition() {
        switch (this.verticalposition) {
            case 'top': {
                this.verticalposition = 'flex-start';
                break;
            }
            case 'center': {
                this.verticalposition = 'center';
                break;
            }
            case 'bottom': {
                this.verticalposition = 'flex-end';
                break;
            }
            default: {
                this.verticalposition = 'center';
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    setHorizontalPosition() {
        switch (this.horizontalposition) {
            case 'left': {
                this.horizontalposition = 'flex-start';
                break;
            }
            case 'center': {
                this.horizontalposition = 'center';
                break;
            }
            case 'right': {
                this.horizontalposition = 'flex-end';
                break;
            }
            default: {
                this.horizontalposition = 'center';
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.amexioFooter && this.footer) {
            this.amexioFooter.toArray().forEach((footer) => {
                footer.footer = this.footer;
                footer.setFooterAlignment(this.footeralign);
            });
        }
        if (this.amexioHeader && this.header) {
            this.amexioHeader.toArray()[0].closeable = this.closable;
            if (this.maximize) {
                this.amexioHeader.toArray()[0].setMaximizeData(this.maximize, this.isFullWindow);
                this.amexioHeader.toArray()[0].maximizeBehaiour.subscribe((max) => {
                    this.maximumWindowStyle = this.setMaximizeClass(max);
                });
            }
            this.amexioHeader.toArray()[0].setMaterialDesignStatus(this.materialDesign);
            this.amexioHeader.toArray()[0].closeableBehaiour.subscribe((close) => {
                this.onCloseClick();
            });
        }
        if (this.amexioBody && this.bodyHeight) {
            this.amexioBody.toArray()[0].height = this.bodyHeight + '%';
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['show']) {
            this.setShowFlag(changes["show"].currentValue);
        }
        if (changes['showWindow']) {
            this.setShowFlag(changes["showWindow"].currentValue);
        }
    }
    /**
     * @param {?} changedValue
     * @return {?}
     */
    setShowFlag(changedValue) {
        this.show = changedValue;
        if (this.show && this.closeonescape) {
            this.globalListenFunc = this.renderer.listen('document', 'keyup.esc', (e) => {
                this.showWindow = false;
                this.show = false;
                this.showChange.emit(false);
                this.close.emit(this.showWindow);
            });
        }
        else if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
    /**
     * @return {?}
     */
    getContextMenu() {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    loadContextMenu(rightClickData) {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.mouseLocation.left = rightClickData.event.clientX;
            this.mouseLocation.top = rightClickData.event.clientY;
            this.getContextMenu();
            this.posixUp = this.getListPosition(rightClickData.ref);
            rightClickData.event.preventDefault();
            rightClickData.event.stopPropagation();
            this.rightClickNodeData = rightClickData.data;
            this.nodeRightClick.emit(rightClickData);
        }
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        this.rightClick.emit(Data);
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.flag = false;
            if (!this.flag) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListner();
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
}
AmexioWindowPaneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-window',
                template: `

    <div #id *ngIf="show" class="amexio-root-window"  [style.justify-content]="horizontalposition">
      <div class="amexio-root-window-content"
           (contextmenu)="loadContextMenu({event:$event,ref:id})"
           [style.justify-content]="verticalposition"
           [ngStyle]="maximumWindowStyle"
           [ngClass]="{'content-max-height': (maximize && isFullWindow)}"
           [@animation]="{value: 'visible', params: {transitionParams: transitionOptions}}"
           [style.width]="width">
        <ng-content></ng-content>
      </div>
    </div>

    <ng-container *ngIf="flag">
      <base-contextmenu style=" z-index: 5; position: absolute;" [base-context-menu]="contextmenu" [mouse-location-top]="mouseLocation.top"
                        [mouse-location-left]="mouseLocation.left" [is-FlagShow]="flag" [right-click-data]="nodeRightClick"
                        (onRightClick)="rightClickDataEmit($event)" [position-up]="posixUp">
      </base-contextmenu>
    </ng-container>
  `,
                animations: [
                    trigger('animation', [
                        state('void', style({
                            transform: 'translate3d(0, 25%, 0) scale(0.9)',
                            opacity: 0,
                        })),
                        state('visible', style({
                            transform: 'none',
                            opacity: 1,
                        })),
                        transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioWindowPaneComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioWindowPaneComponent.propDecorators = {
    verticalposition: [{ type: Input, args: ['vertical-position',] }],
    horizontalposition: [{ type: Input, args: ['horizontal-position',] }],
    closeonescape: [{ type: Input, args: ['close-on-escape',] }],
    top: [{ type: Input, args: ['position-top',] }],
    footeralign: [{ type: Input, args: ['footer-align',] }],
    showWindow: [{ type: Input, args: ['show-window',] }],
    materialDesign: [{ type: Input, args: ['material-design',] }],
    show: [{ type: Input }],
    windowHeader: [{ type: ViewChild, args: ['windowHeader', { read: ElementRef },] }],
    showChange: [{ type: Output }],
    bodyHeight: [{ type: Input, args: ['body-height',] }],
    maximize: [{ type: Input }],
    closable: [{ type: Input }],
    header: [{ type: Input }],
    footer: [{ type: Input }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    width: [{ type: Input, args: ['width',] }],
    nodeRightClick: [{ type: Output }],
    rightClick: [{ type: Output }],
    amexioHeader: [{ type: ContentChildren, args: [AmexioHeaderComponent,] }],
    amexioFooter: [{ type: ContentChildren, args: [AmexioFooterComponent,] }],
    amexioBody: [{ type: ContentChildren, args: [AmexioBodyComponent,] }],
    close: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioWindowHeaderComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioWindowHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-window-header', template: `
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioWindowHeaderComponent.ctorParameters = () => [];
AmexioWindowHeaderComponent.propDecorators = {
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by manisha on 7/6/18.
*/
class AmexioSearchAdvanceComponent {
    constructor() {
        this.title = 'Advance Search';
        this.formwidth = 0;
        this.advanceSearchFlag = false;
    }
    /**
     * @return {?}
     */
    closeSearchForm() {
        this.advanceSearchFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioSearchAdvanceComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-searchbox-options',
                template: `
  <form [attr.aria-expanded]="advanceSearchFlag" class="advancesearchform"
  *ngIf="advanceSearchFlag"  [style.width]="formwidth+'px'">
    <label tabindex = "0" class="search-form-label" [attr.aria-labellledby]="title">
        {{title}}
    </label>
    <span tabindex = "0"  aria-label="close form button"
     class="fa fa-window-close fa-1x close-icon"
     (keyup.esc)="closeSearchForm()"
     (keyup.enter)="closeSearchForm()" (click)="closeSearchForm()"></span>
    <hr class="hrclass">
             <ng-content></ng-content>
</form>
`,
            },] },
];
/** @nocollapse */
AmexioSearchAdvanceComponent.ctorParameters = () => [];
AmexioSearchAdvanceComponent.propDecorators = {
    title: [{ type: Input }],
    formwidth: [{ type: Input, args: ['form-width',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
 * @template T
 */
class BaseFormValidator extends EventBaseComponent {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} _cd
     */
    constructor(renderer, element, _cd) {
        super(renderer, element, _cd);
        this.renderer = renderer;
        this.element = element;
        this._cd = _cd;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class SearchboxtoolComponent extends BaseFormValidator {
    /**
     * @param {?} element
     * @param {?} dataService
     * @param {?} renderer
     * @param {?} _cd
     */
    constructor(element, dataService, renderer, _cd) {
        super(renderer, element, _cd);
        this.element = element;
        this.dataService = dataService;
        this.renderer = renderer;
        /*
           Properties
           name : title
           datatype : string
           version : 4.2 onwards
           default : none
           description : sets title to advance search form
           */
        this.title = 'Advance Search';
        /*
           Properties
           name : width
           datatype : number
           version : 4.2 onwards
           default : none
           description : Sets width to auto recommendation list.
           */
        this.width = 500;
        /*
           Events
           name : keyup
           description : Fires when keyup event occurs
           */
        this.keyup = new EventEmitter();
        /*
           Events
           name : onSearchItemClick
           description : Fires when search item is selected
           */
        this.onSearchItemClick = new EventEmitter();
        /*
           Events
           name : onSearchClick
           description : Fires when search button is clicked
           */
        this.onSearchClick = new EventEmitter();
        this.searchformString = '';
        this.caretFlag = false;
        this.isListFlag = false;
        this.searchFlag = false;
        this.searchTextBox = false;
        this.selectedValue = '';
        this.advanceSearchFlag = false;
        this.selectedindex = -1;
        this.scrollposition = 30;
        this.enableAdvanceSearch = false;
        this.keystrokeflag = false;
        this.isadvsearchbtnpressed = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.advanceSearchRef.formwidth = this.width;
        this.enableAdvnSearch = this.advanceSearchRef.advanceSearchFlag;
        this.enableAdvanceSearch = true;
        if (this.advanceSearchRef) {
            this.enableAdvanceSearch = true;
            if (this.advanceSearchRef.title) {
                this.advanceButtonLabel = this.advanceSearchRef.title;
            }
            else if (!this.advanceSearchRef.title || this.advanceSearchRef.title === '') {
                this.advanceButtonLabel = 'Advance Search';
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.displayfield + Math.floor(Math.random() * 1000 + 999);
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.previousData) !== JSON.stringify(this.data)) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    }
    /**
     * @return {?}
     */
    onSelectClick() {
        this.advanceSearchFlag = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputClick(event) {
        this.searchFlag = true;
        this.onBaseFocusEvent({});
        const /** @type {?} */ keyword = event.target.value;
        this.viewData = [];
        this.isListFlag = false;
        if (keyword != null && keyword !== ' ') {
            const /** @type {?} */ search_term = keyword.toLowerCase();
            this.localData.forEach((item) => {
                this.tempOnInputClick(item, search_term);
            });
            this.keyup.emit(event);
        }
        // logic for arrow keys and enter key press
        // 40=down-arrow and 38=up-arrow and 13=enter
        if (event.keyCode === 40 || event.keyCode === 38 || event.keyCode === 13) {
            // if key pressed is up down or enter then process accordingly
            // call function for process
            this.navigateKeys(event);
        }
        if (!this.selectedValue || this.selectedValue === '') {
            this.viewData = [];
            this.isListFlag = false;
        }
    }
    /**
     * @param {?} item
     * @param {?} search_term
     * @return {?}
     */
    tempOnInputClick(item, search_term) {
        for (const [key, value] of Object.entries(item)) {
            let /** @type {?} */ val;
            val = value;
            this.a = key;
            // For New Input enable-filter
            if (item && (this.enablefilter) && (val.startsWith(search_term))
                && item !== null && item[this.displayfield]) {
                this.isListFlag = true;
                this.viewData.push(item);
            }
            else {
                if ((!this.enablefilter) && item !== null && val.startsWith(search_term)
                    && item[this.displayfield].toLowerCase().startsWith(search_term)) {
                    this.isListFlag = true;
                    this.viewData.push(item);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (this.selectedValue.length > 0) {
            const /** @type {?} */ keyword = this.selectedValue;
            this.viewData = [];
            this.isListFlag = false;
            if (keyword != null && keyword !== ' ') {
                const /** @type {?} */ search_term = keyword.toLowerCase();
                this.localData.forEach((item1) => {
                    this.tempOnInputClick(item1, search_term);
                });
                this.searchFlag = true;
                this.onBaseFocusEvent({});
                this.keyup.emit(event);
            }
            this.selectedValueOnFocus();
        }
    }
    /**
     * @return {?}
     */
    selectedValueOnFocus() {
        if (!this.selectedValue || this.selectedValue === '') {
            this.viewData = [];
            this.isListFlag = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateKeys(event) {
        if (this.selectedindex > this.viewData.length) {
            this.selectedindex = 0;
        }
        if (event.keyCode === 40 ||
            event.keyCode === 38
                && this.selectedindex < this.viewData.length) {
            this.navigateKeysCondition(event);
        }
        if (event.keyCode === 13 && this.viewData[this.selectedindex]) {
            this.onItemSelect(this.viewData[this.selectedindex]);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateKeysCondition(event) {
        let /** @type {?} */ prevselectedindex = -1;
        if (this.selectedindex === -1) {
            this.selectedindex = 0;
        }
        else {
            prevselectedindex = this.selectedindex;
            if (event.keyCode === 40) {
                // mtd 1 start
                if (this.selectedindex >= this.viewData.length - 1) {
                    this.selectedindex = 0;
                }
                else {
                    this.selectedindex++;
                }
                // mtd 1 ends
                if ((this.selectedindex > 5)) {
                    this.dropdownitems.nativeElement.scroll(0, this.scrollposition);
                    this.scrollposition = this.scrollposition + 30;
                }
            }
            else if (event.keyCode === 38) {
                this.eventKeyCodeCondition();
            }
        }
        if (this.viewData[this.selectedindex]) {
            this.viewData[this.selectedindex].selected = true;
            this.setAriaActiveDescendant(this.selectedindex);
        }
        if (this.viewData[prevselectedindex]) {
            this.viewData[prevselectedindex].selected = false;
        }
    }
    /**
     * @return {?}
     */
    eventKeyCodeCondition() {
        this.selectedindex--;
        if (this.selectedindex === -1) {
            this.selectedindex = this.viewData.length - 1;
            this.setAriaActiveDescendant(this.selectedindex);
        }
        if (this.scrollposition >= 0 && this.selectedindex > 1) {
            this.dropdownitems.nativeElement.scroll(1, this.scrollposition);
            this.scrollposition = this.scrollposition - 30;
        }
        if (this.selectedindex === 1) {
            this.scrollposition = 30;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearchButtonClick(event) {
        this.onSearchClick.emit(event);
    }
    /**
     * @return {?}
     */
    selectCssClass() {
        if (this.viewData.length > 5) {
            return 'dropdown-list scroll';
        }
        else {
            return 'dropdown-list';
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onItemSelect(item) {
        this.value = item[this.valuefield];
        this.selectedValue = item[this.displayfield];
        this.searchFlag = this.onBaseBlurEvent({});
        this.onSearchItemClick.emit(item);
    }
    /**
     * @return {?}
     */
    advanceSearch() {
        this.isadvsearchbtnpressed = !this.isadvsearchbtnpressed;
        this.searchformString = 'advance search form opened';
        this.advanceSearchRef.advanceSearchFlag = true;
        this.advanceSearchFlag = true;
        this.searchFlag = this.onBaseBlurEvent({});
    }
    /**
     * @return {?}
     */
    closeSearchForm() {
        this.advanceSearchFlag = false;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            if (dr != null) {
                for (const /** @type {?} */ ir of dr) {
                    responsedata = responsedata[dr[ir]];
                }
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        // Check if key is added?
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[dr[ir]];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewData = responsedata;
        this.generateIndex();
        this.localData = JSON.parse(JSON.stringify(this.viewData));
    }
    /**
     * @return {?}
     */
    closeOnEscape() {
        this.viewData = [];
    }
    /**
     * @return {?}
     */
    closeFormOnEscape() {
        this.advanceSearchRef.closeSearchForm();
        this.viewData = [];
        this.advanceSearchFlag = false;
        this.selectedindex = -1;
    }
    /**
     * @return {?}
     */
    generateIndex() {
        this.viewData.forEach((element, index) => {
            element['index'] = this.componentId + 'listitem' + index;
        });
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setAriaActiveDescendant(rowindex) {
        if (this.viewData.length > 0) {
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute('aria-activedescendant', this.viewData[rowindex].index);
        }
        else if (this.displayValue.length < 1) {
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute('aria-activedescendant', 'listitem');
        }
    }
    /**
     * @return {?}
     */
    focustolast() {
        if (this.viewData.length > 0) {
            this.viewData[this.selectedindex].selected = false;
            this.selectedindex = this.viewData.length - 1;
            this.viewData[this.selectedindex].selected = true;
            this.setAriaActiveDescendant(this.selectedindex);
        }
    }
    /**
     * @return {?}
     */
    focustofirst() {
        if (this.viewData.length > 0) {
            this.viewData[this.selectedindex].selected = false;
            this.selectedindex = 0;
            this.viewData[this.selectedindex].selected = true;
            this.setAriaActiveDescendant(this.selectedindex);
        }
    }
}
SearchboxtoolComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-searchbox',
                template: `
    <div (keyup.esc)="closeOnEscape()">
      <div 
      tabindex="1"
      (keyup.end)="focustolast()" (keyup.home)="focustofirst()" 
      class="input-group">
        <!-- input div -->
        <div class="input-group-prepend" >
          <input id="{{componentId}}" type="text" 
          aria-haspopup="true" aria-label="Search input box" [attr.aria-expanded]="isListFlag" 
          class="form-control"
            (keyup)="onInputClick($event)" #inp [(ngModel)]="selectedValue" [attr.placeholder]="placeholder" 
            (click)="onSelectClick()"
            (focus)="onFocus()"  >
        </div>
        <!-- search btn -->
        <div   aria-label="search button" class="input-group-text-search " (click)="onSearchButtonClick($event)">
          <em class="fa fa-search iconColor">
          </em>
        </div>
      </div>
      <!-- first div ends here -->

      <!-- dropdown list and advance search btn -->
      <form [ngStyle]="dropdownstyle" class="dropdownposition">
        <ng-container *ngIf="!advanceSearchFlag">
          <ul role ="menu" tabindex="1" #dropdownitems [style.width]="width+'px'" 
          class="search-dropdown-list" [ngClass]="selectCssClass()">

            <li role = "menuitem" tabindex="1" role="menuitem" class="search-list-items " 
            [ngClass]="{'search-list-items-selected':item.selected}" *ngFor="let item of viewData"
              id="{{item.index}}"
            (click)="onItemSelect(item)">
              <div style="white-space: nowrap;display: inline;">{{item[displayfield]}}</div>
            </li>
          </ul>
          <!-- adv button ng-container -->
          <ng-container *ngIf="viewData.length > 0">
              <!-- <ng-container *ngIf="viewData.length > 0"> -->
            <div [style.width]="width+'px'" class="advancesearchbuttondiv">
              <button role="button" class="fa fa-search btncolor" [style.width]="width+'px'" class="advancesearchbtn fa fa-search" 
              (click)="advanceSearch()" (keyup.enter) = "advanceSearch()" >
                {{advanceButtonLabel}}
              </button>
            </div>
            <!-- {{isadvsearchbtnpressed}} -->
          </ng-container>

        </ng-container>
      </form>
      <!-- advance search form with ng content -->
      <div (keyup.esc)="closeFormOnEscape()" [ngStyle]="{'block': advanceSearchRef.advanceSearchFlag ? 'block' : 'none'}">
        <ng-content></ng-content>
      </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
SearchboxtoolComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CommonDataService },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
SearchboxtoolComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    title: [{ type: Input }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    width: [{ type: Input }],
    enablefilter: [{ type: Input, args: ['enable-global-filter',] }],
    keyup: [{ type: Output }],
    onSearchItemClick: [{ type: Output }],
    onSearchClick: [{ type: Output }],
    advanceSearchRef: [{ type: ContentChild, args: [AmexioSearchAdvanceComponent,] }],
    dropdownitems: [{ type: ViewChild, args: ['dropdownitems', { read: ElementRef },] }],
    inp: [{ type: ViewChild, args: ['inp', { read: ElementRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 13/12/17.
*/
class AmexioButtonDropDownItemComponent {
    constructor() {
        /*
        Events
        name : onItemClick
        datatype : none
        version : none
        default : none
        description : Fire when button-dropdown item button/link click
        */
        this.onItemClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioButtonDropDownItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-dropdown-item', template: '',
            },] },
];
/** @nocollapse */
AmexioButtonDropDownItemComponent.ctorParameters = () => [];
AmexioButtonDropDownItemComponent.propDecorators = {
    label: [{ type: Input }],
    badge: [{ type: Input, args: ['badge',] }],
    disabled: [{ type: Input }],
    icon: [{ type: Input }],
    onClickRoute: [{ type: Input }],
    onItemClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 13/12/17.
*/
class AmexioButtonDropdownComponent extends BaseFormValidator {
    /**
     * @param {?} element
     * @param {?} renderer
     * @param {?} _cd
     */
    constructor(element, renderer, _cd) {
        super(renderer, element, _cd);
        this.element = element;
        this.dropdownItemData = [];
        /*
          Events
          name : click
          datatype :  none
          version : none
          default : none
          description : Fire when button-dropdown item button/link click
          */
        this.click = new EventEmitter();
        /*
        Events
        name : getLinkData
        datatype :  none
        version : none
        default : none
        description : Fire when button-dropdown item button/link click
        */
        this.getLinkData = new EventEmitter();
        this.ispressed = false;
        this.selected = false;
        this.flag = false;
        this.activedescendant = 'aria-activedescendant';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._buttonGroupLocalData = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get buttonGroupLocalData() {
        return this._buttonGroupLocalData;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.label + Math.floor(Math.random() * 1000 + 999);
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.buttonGroupPreviewData) !== JSON.stringify(this.buttonGroupLocalData)) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.dropdownItemData = this.buttonGroupLocalData;
        }
    }
    /**
     * @param {?} array
     * @return {?}
     */
    generateIndex(array) {
        this.dropdownItemData.forEach((element, index) => {
            element['index'] = this.componentId + 'listitem' + index;
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.buttonGroupPreviewData = JSON.parse(JSON.stringify(this.buttonGroupLocalData));
            this.dropdownItemData = this.buttonGroupLocalData;
            this.createDropdownItemConfig(this.dropdownItemData);
        }
        else {
            this.createDropdownItemConfig(this.buttons.toArray());
        }
        this.componentLoaded = true;
    }
    /**
     * @param {?} btnCollection
     * @return {?}
     */
    createDropdownItemConfig(btnCollection) {
        const /** @type {?} */ itemRefArray = btnCollection;
        for (const /** @type {?} */ itemConfig of itemRefArray) {
            const /** @type {?} */ data = {
                label: itemConfig.label,
                disabled: itemConfig.disabled,
                onItemClick: itemConfig.onItemClick,
                iconStyleClass: itemConfig.iconStyleClass,
                icon: itemConfig.icon,
                badge: itemConfig.badge,
                selected: false,
                onClickRoute: itemConfig.onClickRoute,
            };
            data.iconStyleClass = data.icon;
            this.dropdownItemData.push(data);
        }
        if (itemRefArray.length === this.dropdownItemData.length) {
            this.generateIndex(this.dropdownItemData);
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onClick(elem) {
        this.ispressed = !this.ispressed;
        this.openContent = !this.openContent;
        if (this.openContent) {
            this.onBaseFocusEvent({});
        }
        else {
            this.openContent = this.onBaseBlurEvent(elem);
        }
        this.posixUp = this.getListPosition(elem);
        this.click.emit();
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onEnterClick(elem) {
        this.flag = true;
        this.dropdownItemData[0].selected = true;
        this.ispressed = !this.ispressed;
        if (this.openContent) {
            this.onBaseFocusEvent({});
        }
        else {
            this.openContent = this.onBaseBlurEvent(elem);
        }
        this.posixUp = this.getListPosition(elem);
        this.click.emit();
        const /** @type {?} */ divid = document.getElementById(this.componentId);
        divid.setAttribute(this.activedescendant, this.dropdownItemData[0].index);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onClickEscape(elem) {
        this.openContent = false;
        this.hide();
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onSpaceClick(elem) {
        this.onEnterClick(elem);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onHomeClick(elem) {
        if (this.flag) {
            this.buttonindex1 = this.findbuttonindex();
            if (this.buttonindex1 < (this.dropdownItemData.length - 1)) {
                this.onHomeClickSelected();
            }
            else if (this.buttonindex1 === this.dropdownItemData.length - 1) {
                this.onHomeClickSelected();
            }
        }
    }
    /**
     * @return {?}
     */
    onHomeClickSelected() {
        this.dropdownItemData[this.buttonindex1].selected = false;
        this.dropdownItemData[0].selected = true;
        const /** @type {?} */ divid = document.getElementById(this.componentId);
        divid.setAttribute(this.activedescendant, this.dropdownItemData[0].index);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onEndClick(elem) {
        if (this.flag) {
            this.buttonindex1 = this.findbuttonindex();
            if (this.buttonindex1 < (this.dropdownItemData.length - 1)) {
                this.onEndClickSelected();
            }
            else if (this.buttonindex1 === this.dropdownItemData.length - 1) {
                this.onEndClickSelected();
            }
        }
    }
    /**
     * @return {?}
     */
    onEndClickSelected() {
        this.dropdownItemData[this.buttonindex1].selected = false;
        this.dropdownItemData[this.dropdownItemData.length - 1].selected = true;
        const /** @type {?} */ divid = document.getElementById(this.componentId);
        divid.setAttribute(this.activedescendant, this.dropdownItemData[this.dropdownItemData.length - 1].index);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onclickDown(elem) {
        if (this.flag) {
            this.buttonindex1 = this.findbuttonindex();
            if (this.buttonindex1 < (this.dropdownItemData.length - 1)) {
                this.dropdownItemData[this.buttonindex1].selected = false;
                this.dropdownItemData[this.buttonindex1 + 1].selected = true;
                const /** @type {?} */ divid = document.getElementById(this.componentId);
                divid.setAttribute(this.activedescendant, this.dropdownItemData[this.buttonindex1 + 1].index);
            }
            else if (this.buttonindex1 === this.dropdownItemData.length - 1) {
                this.dropdownItemData[this.buttonindex1].selected = false;
                this.dropdownItemData[0].selected = true;
                const /** @type {?} */ divid = document.getElementById(this.componentId);
                divid.setAttribute(this.activedescendant, this.dropdownItemData[0].index);
            }
        }
        else {
            this.dropdownstyle = { visibility: 'visible' };
            this.dropdownItemData[0].selected = true;
            const /** @type {?} */ divid = document.getElementById(this.componentId);
            divid.setAttribute(this.activedescendant, this.dropdownItemData[0].index);
            this.flag = true;
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onclickUp(elem) {
        if (this.flag) {
            this.buttonindex1 = this.findbuttonindex();
            if ((this.buttonindex1 < (this.dropdownItemData.length - 1)) && this.buttonindex1 !== 0) {
                this.onClickUpSelected();
            }
            else if (this.buttonindex1 === (this.dropdownItemData.length - 1)) {
                this.onClickUpSelected();
            }
            else if (this.buttonindex1 === 0) {
                this.dropdownItemData[this.dropdownItemData.length - 1].selected = true;
                this.dropdownItemData[this.buttonindex1].selected = false;
                const /** @type {?} */ divid = document.getElementById(this.componentId);
                divid.setAttribute(this.activedescendant, this.dropdownItemData[this.dropdownItemData.length - 1].index);
            }
        }
        else {
            this.dropdownstyle = { visibility: 'visible' };
            this.dropdownItemData[this.dropdownItemData.length - 1].selected = true;
            const /** @type {?} */ divid = document.getElementById(this.componentId);
            divid.setAttribute(this.activedescendant, this.dropdownItemData[this.dropdownItemData.length - 1].index);
            this.flag = true;
        }
    }
    /**
     * @return {?}
     */
    onClickUpSelected() {
        this.dropdownItemData[this.buttonindex1].selected = false;
        this.dropdownItemData[this.buttonindex1 - 1].selected = true;
        const /** @type {?} */ divid = document.getElementById(this.componentId);
        divid.setAttribute(this.activedescendant, this.dropdownItemData[this.buttonindex1 - 1].index);
    }
    /**
     * @return {?}
     */
    findbuttonindex() {
        let /** @type {?} */ buttonindex;
        this.dropdownItemData.forEach((element, index) => {
            if (element.selected === true) {
                buttonindex = index;
            }
        });
        return buttonindex;
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ dropdownHeight = 325; // must be same in dropdown.scss
        if (window.screen.height - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} eve
     * @return {?}
     */
    onblur(eve) {
        this.openContent = this.onBaseBlurEvent(eve);
    }
    /**
     * @param {?} clickEvent
     * @param {?} itemData
     * @return {?}
     */
    btnItemClick(clickEvent, itemData) {
        if (this.buttonGroupLocalData && this.buttonGroupLocalData.length > 0) {
            this.getLinkData.emit({ event: clickEvent, parentRef: this, data: itemData });
        }
        else {
            if (!itemData.disabled) {
                itemData.onItemClick.emit(clickEvent);
                this.openContent = !this.openContent;
                this.onBaseBlurEvent(event);
            }
        }
    }
}
AmexioButtonDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-dropdown',
                template: `
    <div class="button-group" #rootDiv>
        <button id={{componentId}} role="button" aria-haspopup="true" aria-label="" [attr.aria-expanded]="openContent" tabindex="1" aria-controls="menulist" class="button-dropdown-main" (blur)="onblur($event)" (click)="onClick(rootDiv)" (keyup.enter)="onEnterClick(rootDiv)"
            (keyup.esc)="onClickEscape(rootDiv)" (keyup.end)="onEndClick(rootDiv)" (keyup.home)="onHomeClick(rootDiv)" (keyup.space)="onSpaceClick(rootDiv)" (keyup.arrowdown)="onclickDown(rootDiv)" (keyup.arrowup)="onclickUp(rootDiv)" #btnRef [ngClass]="{'button-default': size=='default' || size ==null,
                'button-small': size=='small',
                'button-large' : size=='large',
                'button-primary' : type == 'primary' || type == null || type == 'theme-color',
                'button-success' : type == 'success' || type == 'green',
                'button-danger' : type=='danger' || type == 'red',
                'button-warning' : type=='warning' ||  type == 'yellow'}">
          <amexio-c-icon style="float:right;" key="button_caret-down"></amexio-c-icon>
          <span [attr.disabled]="disabled ? true: null">{{label}} &nbsp;&nbsp;</span>
          <!--<i class="fa fa-caret-down" style="float:right;" ></i>-->
        </button>
        <div class="button-dropdown" role="menu" [ngClass]="{'button-dropdown-up' : posixUp}" [@changeState]="dropdownstyle.visibility" [ngStyle]="dropdownstyle">
            <div id="{{itemData.index}}" role="option" tabindex="1" *ngFor="let itemData of dropdownItemData let index = index">
                <div [ngClass]="{'button-default': size=='default' || size ==null,'button-small': size=='small','button-large' : size=='large'}">
                    <div [ngStyle]="{'cursor': itemData.disabled ? 'not-allowed':'pointer'}" (click)="btnItemClick($event,itemData)">
                        <amexio-c-icon style="padding-right: 5px;" [customclass]="itemData.iconStyleClass"></amexio-c-icon>
                        <span [ngClass]="{'button-group-list-items':itemData.selected}" [attr.disabled]="itemData.disabled ? true: null">{{itemData.label}}&nbsp;&nbsp;</span>
                        <!--<i [class]="itemData.iconStyleClass" aria-hidden="true" style="float:right;" ></i>-->
                        <ng-container *ngIf="itemData.badge">
                            <span class="btn-dropdown-badge">{{itemData.badge}}</span>
                        </ng-container>
                    </div>
                </div>
            </div>
        </div>
    </div>
  `,
                animations: [
                    trigger('changeState', [
                        state('visible', style({})),
                        state('hidden', style({
                            height: '0px',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioButtonDropdownComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
AmexioButtonDropdownComponent.propDecorators = {
    btnReference: [{ type: ViewChild, args: ['btnRef',] }],
    label: [{ type: Input }],
    buttons: [{ type: ContentChildren, args: [AmexioButtonDropDownItemComponent,] }],
    data: [{ type: Input, args: ['buttonGroupLocalData',] }],
    type: [{ type: Input }],
    disabled: [{ type: Input }],
    size: [{ type: Input }],
    badge: [{ type: Input, args: ['badge',] }],
    click: [{ type: Output }],
    getLinkData: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 13/12/17.
*/
class AmexioSpiltButtonDropdownComponent {
    constructor() {
        this.dropdownItemData = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.createDropdownItemConfig();
    }
    /**
     * @return {?}
     */
    createDropdownItemConfig() {
        let /** @type {?} */ itemRefArray = [];
        itemRefArray = this.buttons.toArray();
        for (const /** @type {?} */ itemConfig of itemRefArray) {
            const /** @type {?} */ data = {
                label: itemConfig.label,
                disabled: itemConfig.disabled,
                onItemClick: itemConfig.onItemClick,
                iconStyleClass: itemConfig.iconStyleClass,
                icon: itemConfig.icon,
                onClickRoute: itemConfig.onClickRoute,
            };
            data.iconStyleClass = data.icon;
            this.dropdownItemData.push(data);
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        this.openContent = !this.openContent;
    }
    /**
     * @param {?} event
     * @param {?} itemData
     * @return {?}
     */
    itemClick(event, itemData) {
        itemData.onItemClick.emit(event);
    }
    /**
     * @return {?}
     */
    getBackgroundColor() {
        let /** @type {?} */ colorCode;
        if (this.type === 'primary' || this.type === 'theme-color') {
            colorCode = '#0275d8';
        }
        else if (this.type === 'success' || this.type === 'green') {
            colorCode = '#5cb85c';
        }
        else if (this.type === 'danger' || this.type === 'red') {
            colorCode = '#d9534f';
        }
        else if (this.type === 'warning' || this.type === 'yellow') {
            colorCode = '#f0ad4e';
        }
        return {
            'background-color': colorCode,
        };
    }
}
AmexioSpiltButtonDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-btn-split-dropdown', template: `
    <div class="dropdown-button" [ngStyle]="getBackgroundColor()">
      <button class="button" [attr.disabled]="disabled ? true: null"
              [ngClass]="{'button-default': size=='default' || size ==null,
              'button-small': size=='small','button-large' : size=='large',
              'button-primary' : type == 'primary' || type == null,
              'button-success' : type == 'success',' button-danger' : type=='danger',
              'button-warning' : type=='warning'}">
        {{label}}
      </button>
      <button class="button"
              [ngClass]="{'button-default': size=='default' || size ==null,
              'button-small': size=='small',
              'button-large' : size=='large',
              'button-primary' : type == 'primary' || type == null || type == 'theme-color',
              'button-success' : type == 'success' || type == 'green',
              'button-danger' : type=='danger' || type == 'red',
              'button-warning' : type=='warning' ||  type == 'yellow'}">
              (click)="onClick()"><i class="fa fa-chevron-down" aria-hidden="true"></i></button>
      <div class="dropdown-button-content" [ngStyle]="{'display' : openContent ? 'block' : 'none'}">
        <ul class="dropdown-list">
          <ng-container *ngFor="let itemData of dropdownItemData">
            <li class="list-items" [ngClass]="{'disabled':itemData.disabled}" (click)="itemClick($event,itemData)">
            <ng-container *ngIf="itemData.icon!=null">
              <!--<i [class]="itemData.iconStyleClass" aria-hidden="true"></i>-->
              <amexio-c-icon style="padding-right: 5px;" [customclass]="itemData.iconStyleClass"></amexio-c-icon>
            </ng-container>{{itemData.label}}
            </li>
          </ng-container>
        </ul>
      </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioSpiltButtonDropdownComponent.ctorParameters = () => [];
AmexioSpiltButtonDropdownComponent.propDecorators = {
    label: [{ type: Input }],
    badge: [{ type: Input, args: ['badge',] }],
    buttons: [{ type: ContentChildren, args: [AmexioButtonDropDownItemComponent,] }],
    type: [{ type: Input }],
    disabled: [{ type: Input }],
    size: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
const noop$7 = () => {
};
class CheckboxComponent {
    /**
     * @param {?} checkboxGroup
     */
    constructor(checkboxGroup) {
        this.checkboxGroup = checkboxGroup;
        this.onTouchedCallback = noop$7;
        this.onChangeCallback = noop$7;
        this.tabFocus = false;
    }
    /**
     * @return {?}
     */
    toggleCheck() {
        if (!this.checked) {
            this.checkboxGroup.add(this.value);
        }
        else {
            this.checkboxGroup.remove(this.value);
        }
        this.checked = !this.checked;
    }
    /**
     * @return {?}
     */
    isChecked() {
        return this.checked || this.checkboxGroup.contains(this.value);
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.tabFocus = false;
        this.onTouchedCallback();
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.tabFocus = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('checkbox', this.name);
        setTimeout(() => {
            if (this.checked) {
                this.checkboxGroup.add(this.value);
            }
        }, 200);
    }
    /**
     * @param {?} inputType
     * @param {?} name
     * @return {?}
     */
    createCompId(inputType, name) {
        return inputType + '_' + name + '_' + Math.floor(Math.random() * 1000 + 999);
    }
}
CheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'checkbox',
                template: `
    <label [attr.aria-checked]="checked"
           for="{{componentId}}"
           class="input-box-container" 
           [ngClass]="{'disable-component' : disabled || disabled}">
    {{label}}
    <input type="checkbox"  
           style="top:0; left:0"
           class="form-control" 
           [attr.tabindex]="disabled ? -1 : 0"
           id="{{componentId}}"
           (focus)="onFocus()"
           (blur)="onBlur()"
           [ngClass]="{'checkbox-disable' : disabled}" 
           [checked]="checked" 
           [attr.aria-disabled]="disabled"
           (click)="toggleCheck()">
    <span class="input-box-checkbox-label"  [ngClass]="{'focusOnCheckbox':tabFocus}"></span>
    </label>
  `,
            },] },
];
/** @nocollapse */
CheckboxComponent.ctorParameters = () => [
    { type: AmexioCheckBoxGroupComponent, decorators: [{ type: Host }] }
];
CheckboxComponent.propDecorators = {
    label: [{ type: Input }],
    value: [{ type: Input }],
    name: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioChipComponent {
    constructor() {
        /*
        Properties
        name : icon
        datatype :
        version : 5.3.1 onwards
        default :
        description : The icon is for determining of icon.
        */
        this.icon = '';
        /*
        Properties
        name : closeable
        datatype :
        version : 5.3.1onwards
        default :
        description : The closeable is for closing particular chip.
        */
        /*
        Properties
        name : color
        datatype :
        version : 5.3.1onwards
        default :
        description : The color is for determining color of particular chip.
        */
        this.fontcolor = 'red';
        /*
            Events
            name :  closeClick
            datatype : none
            version : none
            default : none
            description : It will fire only on selection of checkbox and gives you selected record data.
            */
        this.closeClick = new EventEmitter();
        /*
           Events
           name :  labelClick
           datatype : none
           version : none
           default : none
           description : It will fire only on selection of checkbox and gives you selected record data.
           */
        this.labelClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onCloseClick(event) {
        this.closeClick.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onLabelClick(event) {
        this.labelClick.emit(event);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioChipComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chip',
                template: `
    <div class="chips" id="{{index}}" attr.aria-label="{{label}}" style="cursor: pointer;" [ngStyle]="{'background-color': color,'filter': selected ? 'contrast(70%)':''}">
      <amexio-c-icon [customclass]="icon"></amexio-c-icon>
      <amexio-label (click)="onLabelClick($event)">
        <ng-container *ngIf="!label">
        <span [style.color]="fontcolor" style="cursor: pointer;" [ngStyle]="{'padding-left': icon ? '10px':'0px'}">
          {{item[displayfield]}}
        </span>
      </ng-container>
      <ng-container *ngIf="label">
        <span [style.color]="fontcolor" style="cursor: pointer;" [ngStyle]="{'padding-left': icon ? '10px':'0px'}">
          {{label}}
        </span>
      </ng-container>
      </amexio-label>
      <span class="badge" *ngIf="badge">{{badge}}</span>
      <span *ngIf="closable">
        <i class="fa fa-times" style="cursor: pointer; margin-left:10px" (click)="onCloseClick($event)"></i>
      </span>
    </div>
  `,
                styles: [`

  `],
            },] },
];
/** @nocollapse */
AmexioChipComponent.ctorParameters = () => [];
AmexioChipComponent.propDecorators = {
    icon: [{ type: Input, args: ['icon',] }],
    label: [{ type: Input, args: ['label',] }],
    color: [{ type: Input, args: ['color',] }],
    badge: [{ type: Input, args: ['badge',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    item: [{ type: Input, args: ['item',] }],
    closable: [{ type: Input, args: ['closable',] }],
    closeClick: [{ type: Output }],
    labelClick: [{ type: Output }],
    index: [{ type: Input, args: ['index',] }],
    selected: [{ type: Input, args: ['selected',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioChipsComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        /*
            Events
            name : selectedRowData
            datatype : none
            version : none
            default : none
            description : It will fire only on selection of checkbox and gives you selected record data.
            */
        this.selectedchipsData = new EventEmitter();
        this.closeClick = new EventEmitter();
        this.chipindex = -1;
        this.prevchipindex = -1;
        this.obj = {};
        this.componentId = 'chips' + Math.floor(Math.random() * 1000 + 999);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chipCollection = this.queryChips.toArray();
        if (this.chipCollection.length > 0) {
            this.data = this.chipCollection;
        }
        this.generateIndex();
        this.listenChipOutClick();
    }
    /**
     * @return {?}
     */
    listenChipOutClick() {
        this.documentClickListener = this.renderer
            .listen('document', 'click', (event) => {
            if (this.data.length > 0) {
                this.data.forEach((element, index) => {
                    if (this.data[index]['selected'] === true) {
                        this.data[index]['selected'] = false;
                        this.chipindex = -1;
                        this.prevchipindex = -1;
                    }
                });
            }
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onCloseChipsClick(item) {
        if (this.chipindex > -1) {
            this.data[this.chipindex]['selected'] = false;
        }
        if (this.data.length > 0) {
            this.data.forEach((element, index) => {
                if (element.label === item.label) {
                    this.data.splice(index, 1);
                }
            });
            this.emitCloseData(item);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    emitCloseData(item) {
        const /** @type {?} */ cloneNode = JSON.parse(JSON.stringify(item));
        delete cloneNode['index'];
        if (this.chipCollection.length > 0) {
            this.obj['icon'] = item.icon;
            this.obj['label'] = item.label;
            this.obj['badge'] = item.badge;
            this.obj['closable'] = item.closable;
            this.obj['color'] = item.color;
            this.closeClick.emit(this.obj);
        }
        else {
            this.closeClick.emit(cloneNode);
        }
    }
    /**
     * @param {?} item
     * @param {?} chipdata
     * @return {?}
     */
    closeFocusedChip(item, chipdata) {
        let /** @type {?} */ closeindex;
        let /** @type {?} */ emitdata;
        this.obj = {};
        if (this.data.length > 0) {
            chipdata.forEach((element, index) => {
                if (chipdata[index]['selected'] === true) {
                    emitdata = element;
                    this.chiplabel = chipdata[index]['label'] + 'closed';
                    this.data.splice(index, 1);
                    closeindex = index;
                }
            });
            this.obj['icon'] = emitdata.icon;
            this.obj['label'] = emitdata.label;
            this.obj['badge'] = emitdata.badge;
            this.obj['closable'] = emitdata.closable;
            this.obj['color'] = emitdata.color;
            this.closeChip(closeindex);
            this.emitSelectedLabel(chipdata);
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    emitSelectedLabel(item) {
        const /** @type {?} */ cloneNode = JSON.parse(JSON.stringify(item));
        delete cloneNode['index'];
        if (this.chipCollection.length > 0) {
            this.obj['icon'] = item.icon;
            this.obj['label'] = item.label;
            this.obj['badge'] = item.badge;
            this.obj['closable'] = item.closable;
            this.obj['color'] = item.color;
            this.selectedchipsData.emit(this.obj);
        }
        else {
            this.selectedchipsData.emit(cloneNode);
        }
    }
    /**
     * @return {?}
     */
    generateIndex() {
        this.data.forEach((element, index) => {
            element['index'] = this.componentId + 'chip' + index;
            element['selected'] = false;
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onchipsKeyup(event) {
        if (this.data.length > 0) {
            this.navigateChips(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateChips(event) {
        if (event.keyCode === 37) {
            this.leftArrowKeyNavigation(event);
        }
        else if (event.keyCode === 39) {
            this.rightArrowKeyNavigation(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    leftArrowKeyNavigation(event) {
        if (this.prevchipindex > -1) {
            this.data[this.prevchipindex]['selected'] = false;
        }
        this.prevchipindex--;
        if (this.prevchipindex === -1) {
            this.prevchipindex = this.data.length - 1;
            this.chipindex = -1;
        }
        this.setAriaActiveDescendant(this.prevchipindex);
        if (this.prevchipindex === 0) {
            this.chipindex = 0;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    rightArrowKeyNavigation(event) {
        if (this.prevchipindex > -1) {
            this.data[this.prevchipindex]['selected'] = false;
        }
        this.chipindex++;
        this.prevchipindex = this.chipindex;
        if (this.chipindex >= this.data.length) {
            this.chipindex = 0;
            this.prevchipindex = 0;
        }
        this.setAriaActiveDescendant(this.chipindex);
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setAriaActiveDescendant(rowindex) {
        this.data[rowindex]['selected'] = true;
        const /** @type {?} */ inputid = document.getElementById(this.componentId);
        inputid.setAttribute('aria-activedescendant', this.data[rowindex]['index']);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focusToLastChip(event) {
        if (this.prevchipindex > -1) {
            this.data[this.prevchipindex]['selected'] = false;
        }
        this.prevchipindex = this.data.length - 1;
        this.chipindex = -1;
        this.setAriaActiveDescendant(this.prevchipindex);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focusToFirstChip(event) {
        if (this.prevchipindex > -1) {
            this.data[this.prevchipindex]['selected'] = false;
        }
        this.chipindex = 0;
        this.prevchipindex = 0;
        this.setAriaActiveDescendant(this.chipindex);
    }
    /**
     * @param {?} closeindex
     * @return {?}
     */
    closeChip(closeindex) {
        if (closeindex !== 0) {
            this.chipindex = closeindex - 1;
            this.prevchipindex = closeindex - 1;
            this.setAriaActiveDescendant(closeindex - 1);
        }
        else {
            this.chipindex = closeindex;
            this.prevchipindex = closeindex;
            this.setAriaActiveDescendant(closeindex);
        }
    }
}
AmexioChipsComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chips',
                template: `
    <span id="{{componentId}}" tabindex="0" role="listbox" (keyup.end)="focusToLastChip($event)" (keyup.home)="focusToFirstChip($event)"
        (keyup)="onchipsKeyup($event)" (keydown.control.x)="closeFocusedChip($event, data)">
        <span role="option" tabindex="0" *ngFor="let item of data" id="{{item.index}}" attr.aria-label="{{item.label}}">
            <amexio-chip [item]="item" [index]="item.index" [selected]="item.selected" [display-field]="displayfield"
                [icon]="item.icon" [label]="item.label" [badge]="item.badge" [closable]="item.closable" [font-color]="item.fontcolor"
                [color]="item.color" (closeClick)="onCloseChipsClick(item)" (labelClick)="emitSelectedLabel(item)">
            </amexio-chip>
        </span>
    </span>
  `,
                styles: [`

  `],
            },] },
];
/** @nocollapse */
AmexioChipsComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioChipsComponent.propDecorators = {
    queryChips: [{ type: ContentChildren, args: [AmexioChipComponent,] }],
    data: [{ type: Input, args: ['data',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    selectedchipsData: [{ type: Output }],
    closeClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCreditCardModel {
    constructor() {
        this.owner = '';
        this.cvv = null;
        this.cardnumber = null;
        this.expMonth = 1;
        this.expYear = 2018;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by Ankita
*/
const noop$8 = () => {
};
class AmexioCreditcardComponent {
    constructor() {
        /*
          Properties
          name : yearcount
          datatype : string
          version : 5.2.3onwards
          default :
          description : the minexp will set the dropdown to user defined dropdown.
          */
        this.yearcount = 12;
        /*
         Properties
         name : showlabel
         datatype : boolean
         version : 5.2.3onwards
         default :
         description : the showlabel will set the label of creditcard.
         */
        this.showlabel = 'false';
        this.isNameValid = false;
        this.isCvvValid = false;
        this.visaEagerReg = /^4/;
        this.visaReg = /^4\d{12}(\d{3}|\d{6})?$/;
        this.mastropattern = /^(?:5[06789]\d\d|(?!6011[0234])(?!60117[4789])(?!60118[6789])(?!60119)(?!64[456789])(?!65)6\d{3})\d{8,15}$/;
        this.masttroeagerPattern = /^(5(018|0[23]|[68])|6[37]|60111|60115|60117([56]|7[56])|60118[0-5]|64[0-3]|66)/;
        this.masterpattern = /^5[1-5]\d{14}$/;
        this.mastereagerPattern = /^5[1-5]/;
        this.isFullCardValid = false;
        this.cvvRegex = /^[0-9]{3,4}$/;
        this.year = new Date();
        this.yearList = [];
        this.eagarValue = '';
        this.fullPatternValue = '';
        this.onTouchedCallback = noop$8;
        this.onChangeCallback = noop$8;
        if (this.template === 'single-column') {
            this.templateFlag = true;
        }
        else if (this.template === 'double-column') {
            this.templateFlag = false;
        }
        this.creditCardModel = new AmexioCreditCardModel();
        this.dummyMonth = '0' + this.creditCardModel.expMonth;
        this.dateData = [
            {
                month: '01',
            },
            {
                month: '02',
            },
            {
                month: '03',
            },
            {
                month: '04',
            },
            {
                month: '05',
            },
            {
                month: '06',
            },
            {
                month: '07',
            },
            {
                month: '08',
            },
            {
                month: '09',
            },
            {
                month: '10',
            },
            {
                month: '11',
            },
            {
                month: '12',
            },
        ];
        this.cardGroupData = [
            {
                iconName: 'fa fa-cc-visa',
                key: 'eagerflagvisa',
                color: 'black',
            },
            {
                iconName: 'fa fa-cc-mastercard',
                key: 'mastereagerPattern',
                color: 'black',
            },
            {
                iconName: 'fa fa-credit-card',
                key: 'masttroeagerPattern',
                color: 'black',
            },
        ];
    }
    /**
     * @param {?} modelValue
     * @return {?}
     */
    writeValue(modelValue) {
        if (modelValue) {
            this.creditCardModel = modelValue;
            this.onChangeCardNumber(this.creditCardModel.cardnumber);
            this.onChangeMonth('0' + this.creditCardModel.expMonth);
            this.isCvvValid = this.cvvRegex.test(this.creditCardModel.cvv);
            this.cardRegexMap.forEach((value, key) => {
                const /** @type {?} */ isEagarValid = value.test(this.dummyCreditCardNumber);
                if (isEagarValid) {
                    this.eagarflag = isEagarValid;
                    this.eagarValue = key;
                }
            });
            this.validEagerCard = this.eagarValue;
            this.switchCaseMethod();
            this.onCheckValidation();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeCardNumber(event) {
        this.dummyCreditCardNumber = this.creditCardNumberSpaceRemove(event);
        const /** @type {?} */ concatCardNumber = this.replaceSpace(this.dummyCreditCardNumber);
        this.cardPatternMap.forEach((value, key) => {
            // Condition for Full String Regex
            this.isValidFullString = value.test(concatCardNumber);
            if (this.isValidFullString) {
                this.fullPatternflag = this.isValidFullString;
                this.fullPatternValue = key;
            }
        });
        this.validPatternCard = this.fullPatternValue;
        this.creditCardModel.cardnumber = +concatCardNumber;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} inp
     * @return {?}
     */
    onNameClick(inp) {
        if (inp.model.length > 0) {
            this.isNameValid = true;
        }
        else {
            this.isNameValid = false;
        }
    }
    /**
     * @param {?} inpcvv
     * @return {?}
     */
    onClick(inpcvv) {
        this.isCvvValid = this.cvvRegex.test(inpcvv.model);
    }
    /**
     * @param {?} inp
     * @return {?}
     */
    onInput(inp) {
        // Condition for null check
        if (inp.model !== '') {
            let /** @type {?} */ isValidFullString;
            let /** @type {?} */ fullPatternValue = '';
            const /** @type {?} */ concatValue = this.replaceSpace(inp.model);
            this.cardPatternMap.forEach((value, key) => {
                // Condition for Full String Regex
                isValidFullString = value.test(concatValue);
                if (isValidFullString) {
                    fullPatternValue = key;
                }
            });
            this.validPatternCard = fullPatternValue;
            let /** @type {?} */ eagarValue = '';
            this.cardRegexMap.forEach((value, key) => {
                const /** @type {?} */ isEagarValid = value.test(concatValue);
                if (isEagarValid) {
                    eagarValue = key;
                }
            });
            this.validEagerCard = eagarValue;
        }
        else {
            this.validEagerCard = '';
        }
        this.switchCaseMethod();
        this.onCheckValidation();
        if (inp.model !== '') {
            this.cardNumberValue = this.creditCardNumberSpaceRemove(inp.model);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    replaceSpace(value) {
        let /** @type {?} */ newString = '';
        if (value) {
            const /** @type {?} */ stringArray = value.split(' ');
            if (stringArray) {
                stringArray.forEach((element) => {
                    newString = newString.concat(element);
                });
            }
        }
        return newString;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cardRegexMap = new Map();
        this.cardPatternMap = new Map();
        this.cardRegexMap.set('eagerflagvisa', this.visaEagerReg);
        this.cardRegexMap.set('mastereagerPattern', this.mastereagerPattern);
        this.cardRegexMap.set('masttroeagerPattern', this.masttroeagerPattern);
        this.cardPatternMap.set('visaReg', this.visaReg);
        this.cardPatternMap.set('masterpattern', this.masterpattern);
        this.cardPatternMap.set('mastropattern', this.mastropattern);
        this.cardName = '';
        this.currentYear = this.year.getFullYear();
        if (this.template === 'single-column') {
            this.templateFlag = true;
        }
        else if (this.template === 'double-column') {
            this.templateFlag = false;
        }
        for (let /** @type {?} */ i = 0; i < this.yearcount; i++) {
            this.yearList.push(this.currentYear + i);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    creditCardNumberSpaceRemove(value) {
        if (value) {
            value = value.toString();
            const /** @type {?} */ v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
            const /** @type {?} */ matches = v.match(/\d{4,16}/g);
            const /** @type {?} */ match = matches && matches[0] || '';
            const /** @type {?} */ parts = [];
            let /** @type {?} */ len;
            let /** @type {?} */ i;
            for (i = 0, len = match.length; i < len; i += 4) {
                parts.push(match.substring(i, i + 4));
            }
            if (parts.length) {
                return parts.join(' ');
            }
            else {
                return value;
            }
        }
    }
    /**
     * @return {?}
     */
    switchCaseMethod() {
        switch (this.validEagerCard) {
            case 'eagerflagvisa':
                this.cardName = 'fa fa-cc-visa';
                break;
            case 'mastereagerPattern':
                this.cardName = 'fa fa-cc-mastercard';
                break;
            case 'masttroeagerPattern':
                this.cardName = 'fa fa-credit-card';
                break;
            case '':
                this.cardName = '';
                break;
            default:
                this.cardName = '';
                break;
        }
    }
    /**
     * @return {?}
     */
    onCheckValidation() {
        this.cardGroupData.forEach((element) => {
            if (element.key === this.validEagerCard) {
                element.color = 'blue';
            }
            else {
                element.color = 'black';
            }
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeMonth(event) {
        this.dummyMonth = event;
        this.creditCardModel.expMonth = +this.dummyMonth;
    }
}
AmexioCreditcardComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-creditcard',
                template: `
    <!-- <pre><code>{{creditCardModel|json}}</code></pre> -->
    <ng-container *ngIf="templateFlag">

            <div class="creditCardFormSglCol">
                <div class="imageSglCol">
                    <i *ngFor="let cardimage of cardGroupData" [style.color]="cardimage.color" [attr.class]="cardimage.iconName" style="font-size:50px">
                    </i>
                </div>
                <div class="ownerdetailsSglCol">
                    <label *ngIf="showlabel">CARD HOLDER NAME</label>
                    <div class="ownerSglCol">
                        <input [ngClass]="{'input-control-success':isNameValid,'input-control-failure':(!isNameValid && inpowner.touched)}" type="text" placeholder="CARD HOLDER NAME"
                            #inpowner="ngModel" class="input-control" [(ngModel)]="creditCardModel.owner" (keyup)="onNameClick(inpowner)">
                    </div>
                </div>
        
                <div class="cardNumberSglCol">
                    <label *ngIf="showlabel">CARD NUMBER</label>
                    <input type="text" placeholder="CARD NUMBER" maxlength="19" class="input-control" [ngModel]="dummyCreditCardNumber" (ngModelChange)="onChangeCardNumber($event)"
                    [value]="cardNumberValue" #inp="ngModel" [ngClass]="{'input-control-success':validPatternCard,'input-control-failure':(!validPatternCard && (inp.dirty || inp.touched))}" (keyup)="onInput(inp)"
                    />
                </div>
                <label *ngIf="showlabel">EXP DATE</label>
                <div class="expiration-dateSglCol">
                    <div class="monthSglCol">
                        <select [ngModel]="dummyMonth" (ngModelChange)="onChangeMonth($event)" placeholder="MM" style="padding:10px">
                            <option *ngFor="let months of dateData">{{months.month}}</option>
                        </select>
                    </div>
                    <div class="dateSglCol">
                        <select [(ngModel)]="creditCardModel.expYear" yearControl="yearControl" style="padding:10px" placeholder="YY">
                            <option *ngFor="let year of yearList">{{year}}</option>
                        </select>
                    </div>
                </div>
                <div class="cvvSglCol">
                    <label *ngIf="showlabel">CVV</label>
                    <input #inpcvv="ngModel" [ngClass]="{'input-control-success':isCvvValid,'input-control-failure':(!isCvvValid && inpcvv.touched)}"
                        type="password" placeholder="CVV" maxlength="3" class="input-control" [(ngModel)]="creditCardModel.cvv" (keyup)="onClick(inpcvv)">
                </div>
            </div>
            </ng-container>
            <br>
            <ng-container *ngIf="!templateFlag">
            <div class="creditCardForm">
                <div class="owner">
                    <label *ngIf="showlabel">CARD HOLDER NAME</label>
                    <input [ngClass]="{'input-control-success':isNameValid,'input-control-failure':(!isNameValid && inpowner.touched)}" type="text" placeholder="CARD HOLDER NAME"
                       #inpowner="ngModel" class="input-control" [(ngModel)]="creditCardModel.owner" (keyup)="onNameClick(inpowner)">
                </div>
                <div [ngClass]="{'image-label':showlabel==true,'image':showlabel==false}">
                    <i *ngFor="let cardimage of cardGroupData" [style.color]="cardimage.color" [attr.class]="cardimage.iconName" style="font-size:40px"></i>
                </div>
        
        
                <div class="cardNumber">
                    <label *ngIf="showlabel">CARD NUMBER</label>
                    <input type="text" placeholder="CARD NUMBER" maxlength="19" class="input-control" [ngModel]="dummyCreditCardNumber" (ngModelChange)="onChangeCardNumber($event)"
                    [value]="cardNumberValue"   #inp="ngModel" [ngClass]="{'input-control-success':validPatternCard,'input-control-failure':(!validPatternCard && (inp.dirty || inp.touched))}" (keyup)="onInput(inp)" />
                </div>
        
                <div [ngClass]="{'expiration-date-label':showlabel==true,'expiration-date':showlabel==false}" >
                    <label *ngIf="showlabel">EXP DATE</label>
                    <div class="exp-month-date-label">
                        <div class="month">
                            <select [ngModel]="dummyMonth" (ngModelChange)="onChangeMonth($event)" style="padding:10px" placeholder="MM">
                                <option *ngFor="let months of dateData">{{months.month}}</option>
                            </select>
                        </div>
                        <div class="date">
                            <select [(ngModel)]="creditCardModel.expYear" yearControl="yearControl" style="padding:10px" placeholder="YY">
                                <option *ngFor="let year of yearList">{{year}}</option>
                            </select>
                        </div>
                    </div>
        
                </div>
        
                <div class="cvv">
                    <label *ngIf="showlabel">CVV</label>
                    <input #inpcvv="ngModel" [ngClass]="{'input-control-success':isCvvValid,'input-control-failure':(!isCvvValid && (inpcvv.dirty ||inpcvv.touched))}"
                        type="password" placeholder="CVV" maxlength="3" class="input-control" [(ngModel)]="creditCardModel.cvv" (keyup)="onClick(inpcvv)">
                </div>
            </div>
            </ng-container>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioCreditcardComponent), multi: true,
                    }],
                styles: [`

  `],
            },] },
];
/** @nocollapse */
AmexioCreditcardComponent.ctorParameters = () => [];
AmexioCreditcardComponent.propDecorators = {
    yearcount: [{ type: Input, args: ['year-count',] }],
    showlabel: [{ type: Input, args: ['show-label',] }],
    template: [{ type: Input, args: ['template',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DarkmodeComponent {
    constructor() {
        this.size = 'medium';
        this.themesdata = [];
        this.themeStyles = [];
        this.themesdata = [
            {
                varName: '--appBackground',
                darkValue: '#121212',
                themeValue: '#f5f5f5',
            },
            {
                varName: '--appForegroundColor',
                darkValue: '#f5f5f5',
                themeValue: '#121212',
            },
            {
                varName: '--componentBGColor',
                darkValue: '#121212',
                themeValue: '#ffffff',
            },
            {
                varName: '--componentFontColor',
                darkValue: '#ffffff',
                themeValue: '#121212',
            },
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onToggleClick(event) {
        this.themeStyles = [];
        this.themesdata.forEach((obj) => {
            const /** @type {?} */ varObj = {
                name: '',
                value: '',
            };
            if (event) {
                varObj.name = obj.varName;
                varObj.value = obj.darkValue;
            }
            else {
                varObj.name = obj.varName;
                varObj.value = obj.themeValue;
            }
            this.themeStyles.push(varObj);
        });
        this.themeStyles.forEach((style) => {
            document.documentElement.style.setProperty(style.name, style.value);
        });
    }
}
DarkmodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-darkmode',
                template: `
      <amexio-toggle
      [field-label]="fieldLabel" [size]="size" [type]="type" [shape]="shape" (onChange)="onToggleClick($event)">
      </amexio-toggle>
    `,
            },] },
];
/** @nocollapse */
DarkmodeComponent.ctorParameters = () => [];
DarkmodeComponent.propDecorators = {
    fieldLabel: [{ type: Input, args: ['field-label',] }],
    shape: [{ type: Input, args: ['shape',] }],
    type: [{ type: Input, args: ['type',] }],
    size: [{ type: Input, args: ['size',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
 * @template T
 */
class ListBaseDatepickerComponent extends AmexioFormValidator {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} cd
     */
    constructor(renderer, element, cd) {
        super();
        this.renderer = renderer;
        this.element = element;
        this.cd = cd;
        this.self = false;
        this.itemClick = false;
        this.hide();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focus(event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'visible' };
        this.bindDocumentClickListener();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    blur(event) {
        this.itemClicked();
    }
    /**
     * @return {?}
     */
    itemClicked() {
        this.itemClick = true;
        this.hide();
        this.unbindDocumentClickListener();
        this.clearClicks();
    }
    /**
     * @return {?}
     */
    bindDocumentClickListener() {
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer
                .listen('document', 'click', (event) => this.handleDocumentListener(event));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleDocumentListener(event) {
        if (!this.self && !this.itemClick) {
            this.hide();
            this.unbindDocumentClickListener();
        }
        this.clearClicks();
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    clearClicks() {
        this.self = false;
        this.itemClick = false;
    }
    /**
     * @return {?}
     */
    unbindDocumentClickListener() {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.dropdownstyle = { visibility: 'hidden' };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
const noop$9 = () => {
};
class AmexioDateTimePickerComponent extends ListBaseDatepickerComponent {
    /**
     * @param {?} element
     * @param {?} cdf
     * @param {?} renderer
     */
    constructor(element, cdf, renderer) {
        super(renderer, element, cdf);
        this.element = element;
        this.cdf = cdf;
        /*
          Properties
          name : field-label
          datatype : string
          version : 5.5.5 onwards
          default :
          description :The label of this field
          */
        this.placeholder = '';
        /*
           Properties
           name : disabled
           datatype : boolean
           version : 4.1.5 onwards
           default : false
           description : Disable Date/Time Picker field
           */
        this.disabled = false;
        /*
           Properties
           name : diabled-date
           datatype :  any
           version : 4.2 onwards
           default : none
           description : sets disabled dates range
           */
        this.diabledDate = [];
        /*
           Properties
           name : inline-datepicker
           datatype :  boolean
           version : 4.2 onwards
           default : none
           description : sets inline calender
           */
        this.inlineDatepicker = false;
        /*
           Properties
           name : dropdown-datepicker
           datatype :  boolean
           version : 4.2 onwards
           default : none
           description : sets dropdown datepicker
           */
        this.dropdownDatepicker = false;
        /*
           Properties
           name : required
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : Flag to allow blank field or not
           */
        this.required = false;
        /*
           Events
           name : blur
           description : On blur event
           */
        // @Output() blur: EventEmitter<any> = new EventEmitter<any>();
        /*
           Properties
           name : change
           description : On field value change event
           */
        this.change = new EventEmitter();
        /*
           Properties
           name : input
           description : On input event field.
           */
        this.input = new EventEmitter();
        /*
           Properties
           name : focus
           description : On field focus event
           */
        // @Output() focus: EventEmitter<any> = new EventEmitter<any>();
        this.inputtabindex = 0;
        this.daystabindex = -1;
        this.drop = false;
        this.tempFlag = true;
        this.hostFlag = false;
        this.isComponentValid = new EventEmitter();
        this.backArrowFlag = false;
        this.forwardArrowFlag = false;
        this.okispressed = false;
        this.cancelispressed = false;
        this.innerValue = '';
        this.onTouchedCallback = noop$9;
        this.onChangeCallback = noop$9;
        this.viewmode = '1';
        this.yearList1 =
            [{ year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
            ];
        // generate yearlist1 ids
        this.yearList1.forEach((yearlist1element) => {
            yearlist1element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.yearList2 = [{ year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }];
        // generate yearlist2 ids
        this.yearList2.forEach((yearlist2element) => {
            yearlist2element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.monthList1 = [
            { name: 'Jan', flag: false, num: 4, fullname: 'January' },
            { name: 'Feb', flag: false, fullname: 'febuary' },
            { name: 'Mar', flag: false, fullname: 'march' },
            { name: 'Apr', flag: false, fullname: 'april' },
            { name: 'May', flag: false, fullname: 'may' },
            { name: 'Jun', flag: false, fullname: 'june' },
        ];
        // generate id for monthlist1
        this.monthList1.forEach((monthlist1element) => {
            monthlist1element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.monthList2 = [
            { name: 'Jul', flag: false, fullname: 'july' },
            { name: 'Aug', flag: false, fullname: 'august' },
            { name: 'Sep', flag: false, fullname: 'september' },
            { name: 'Oct', flag: false, fullname: 'october' },
            { name: 'Nov', flag: false, fullname: 'november' },
            { name: 'Dec', flag: false, fullname: 'december' },
        ];
        // generate id for monthlist 2
        this.monthList2.forEach((monthlist2element) => {
            monthlist2element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.minDate = '';
        this.maxDate = '';
        this.elementId = new Date().getTime() + '';
        this.selectedDate = new Date();
        this.currrentDate = new Date();
        this.curYear = this.currrentDate.getFullYear();
        let /** @type {?} */ i = 0;
        let /** @type {?} */ j = 0;
        for (i = 4; i >= 0; i--) {
            this.yearList1[j].year = this.curYear - i;
            j++;
        }
        j = 0;
        for (i = 1; i <= 5; i++) {
            this.yearList2[j].year = this.curYear + i;
            j++;
        }
        this.daysTitle = [];
        this.daysArray = [];
        this.timepicker = false;
        this.hrs = this.currrentDate.getHours();
        this.min = this.currrentDate.getMinutes();
        this.initDaysTitle();
        this.createDaysForCurrentMonths(this.currrentDate);
        this.monthList1.forEach((tmpElement) => {
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.inlineDatepicker) {
            this.showToolTip = true;
            this.dropdownstyle = { visibility: 'visible' };
        }
        this.isValid = !this.required;
        this.isComponentValid.emit(!this.required);
        if (this.dateformat != null) {
            this.dateformat = 'dd/MM/yyyy';
        }
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.minMaxDateFound();
        } // main if ends
        // logic for disabling yrs before min and after max
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            const /** @type {?} */ min = new Date(this.minDate);
            const /** @type {?} */ max = new Date(this.maxDate);
            this.yearList1.forEach((element) => {
                this.disableMinMaxYear(element, min, max);
            });
            this.yearList2.forEach((element) => {
                this.disableMinMaxYear(element, min, max);
            });
        }
    }
    /**
     * @return {?}
     */
    initDaysTitle() {
        this.daysTitle.push({ text: 'Mo' });
        this.daysTitle.push({ text: 'Tu' });
        this.daysTitle.push({ text: 'We' });
        this.daysTitle.push({ text: 'Th' });
        this.daysTitle.push({ text: 'Fr' });
        this.daysTitle.push({ text: 'Sa' });
        this.daysTitle.push({ text: 'Su' });
    }
    /**
     * @param {?} selectedPeriod
     * @return {?}
     */
    createDaysForCurrentMonths(selectedPeriod) {
        this.daysArray = [];
        const /** @type {?} */ date = new Date(selectedPeriod.getFullYear(), selectedPeriod.getMonth(), 1, 0, 0, 0, 0); // Starting at the 1st of the month
        const /** @type {?} */ extras = (date.getDay() + 6) % 7; // How many days of the last month do we need to include?
        date.setDate(date.getDate() - extras); // Skip back to the previous monday
        while (this.daysArray.length < 6) {
            const /** @type {?} */ rowDays = [];
            for (let /** @type {?} */ i = 0; i < 7; i++) {
                const /** @type {?} */ day = {
                    date: null, selected: false, isCurrentMonth: null, isDisabled: false,
                };
                day.date = new Date(date.getTime());
                day.isCurrentMonth = (date.getMonth() === selectedPeriod.getMonth());
                day['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
                day['fulldate'] = (day.date).getDate() + ' ' +
                    this.getFullMonthName(day.date) + ' ' + (day.date).getFullYear() +
                    ' ' + this.getFullDayName(day.date);
                if (this.dateModel && (date.getMonth() === this.dateModel.getMonth()) &&
                    (date.getDate() === this.dateModel.getDate())) {
                    day.selected = true;
                }
                else if ((date.getMonth() === this.currrentDate.getMonth()) &&
                    (date.getDate() === this.currrentDate.getDate())) {
                    if (this.dateModel) {
                        day.selected = false;
                        day['tabindex'] = -1;
                    }
                    else {
                        day.selected = true;
                        day['tabindex'] = 1;
                    }
                }
                rowDays.push(day);
                date.setDate(date.getDate() + 1);
            }
            this.daysArray.push(rowDays);
        }
    }
    /**
     * @param {?} recevieddate
     * @return {?}
     */
    getFullMonthName(recevieddate) {
        const /** @type {?} */ months = ['January', 'Febuary', 'March', 'April', 'May',
            'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        const /** @type {?} */ datemonth = recevieddate.getMonth();
        let /** @type {?} */ monthString = '';
        months.forEach((element, index) => {
            if (datemonth === index) {
                monthString = element;
            }
        });
        return monthString;
    }
    /**
     * @param {?} receiveddate
     * @return {?}
     */
    getFullDayName(receiveddate) {
        const /** @type {?} */ weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday',
            'Thursday', 'Friday', 'Saturday'];
        const /** @type {?} */ day = receiveddate.getDay();
        let /** @type {?} */ dayname = '';
        weekdays.forEach((element, index) => {
            if (day === index) {
                dayname = element;
            }
        });
        return dayname;
    }
    /**
     * @param {?} dateObj
     * @param {?} event
     * @return {?}
     */
    onDateClick(dateObj, event) {
        if (dateObj.isDisabled === false) {
            this.change.emit(dateObj.date);
            if (this.inlineDatepicker === false) {
                super.itemClicked();
            }
            this.hostFlag = true;
            this.selectedDate = dateObj.date;
            this.selectedDate.setHours(this.hrs);
            this.selectedDate.setMinutes(this.min);
            this.resetSelection(dateObj.date);
            this.dateModel = this.selectedDate;
            this.value = this.selectedDate;
            this.isValid = true;
            this.isComponentValid.emit(true);
            if (this.inlineDatepicker) {
                this.showToolTip = true;
            }
            else {
                this.showToolTip = !this.showToolTip;
            }
        }
        else {
            event.stopPropagation();
        }
    }
    /**
     * @param {?} dateObj
     * @return {?}
     */
    resetSelection(dateObj) {
        for (const /** @type {?} */ i of this.daysArray) {
            for (const /** @type {?} */ j of i) {
                const /** @type {?} */ day = j;
                if (day.date.getTime() === dateObj.getTime()) {
                    day.selected = true;
                }
                else {
                    day.selected = false;
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInput(event) {
        if (event.target.value != null && event.target.value !== '') {
            const /** @type {?} */ timeValue = event.target.value.split(':');
            if (timeValue != null) {
                const /** @type {?} */ hrs = parseInt(timeValue[0].trim(), 10);
                const /** @type {?} */ mins = parseInt(timeValue[1].trim(), 10);
                this.selectedDate.setHours(hrs);
                this.selectedDate.setMinutes(mins);
                this.hrs = hrs;
                this.min = mins;
                this.value = this.selectedDate;
                event.stopPropagation();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextMonth(event) {
        this.setDateData('plus', 1, event);
        this.disableddays(this.diabledDate);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevMonth(event) {
        this.setDateData('minus', 1, event);
        this.disableddays(this.diabledDate);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextYear(event) {
        this.setDateData1('plus', 12, event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevYear(event) {
        this.setDateData1('minus', 12, event);
    }
    /**
     * @param {?} state1
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    setDateData(state1, mon, event) {
        const /** @type {?} */ d = new Date(this.currrentDate.getFullYear(), this.currrentDate.getMonth(), this.currrentDate.getDate());
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        // checks if selected date is within maximum range of month
        if (state1 === 'plus') {
            this.setPlusData(d, max, mon);
        }
        else if (state1 === 'minus') {
            this.setMinusData(d, min, mon);
        }
        this.currrentDate = d;
        this.initDate();
        event.stopPropagation();
    }
    /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    setPlusData(d, max, mon) {
        if (this.maxDate.length > 0) {
            if (d.getFullYear() === max.getFullYear()) {
                this.setMaxFullYear(d, max, mon);
            }
            else {
                // logic to chk if year is valid
                if (d.getFullYear() <= max.getFullYear()) {
                    d.setMonth(d.getMonth() + mon);
                }
            }
        }
        else {
            // outer ends
            d.setMonth(d.getMonth() + mon);
        } // checks if selected date is within minimum range of month
    }
    /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    setMaxFullYear(d, max, mon) {
        if ((d.getMonth() !== max.getMonth()) && d.getFullYear() <= max.getFullYear() && d.getMonth() <= max.getMonth()) {
            d.setMonth(d.getMonth() + mon);
        }
    }
    /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    setMinusData(d, min, mon) {
        if (this.minDate.length > 0) {
            if (d.getFullYear() === min.getFullYear()) {
                this.setMinFullYear(d, min, mon);
            }
            else {
                d.setMonth(d.getMonth() - mon);
            }
        }
        else {
            d.setMonth(d.getMonth() - mon);
        }
    }
    /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    setMinFullYear(d, min, mon) {
        if ((d.getMonth() !== min.getMonth()) && d.getFullYear() >= min.getFullYear() && d.getMonth() >= min.getMonth()) {
            // logic to chk if year is valid
            d.setMonth(d.getMonth() - mon);
        }
    }
    /**
     * @param {?} state1
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    setDateData1(state1, mon, event) {
        const /** @type {?} */ d = new Date(this.currrentDate.getFullYear(), this.currrentDate.getMonth(), this.currrentDate.getDate());
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        // checks if selected date is within maximum range of year
        if (state1 === 'plus') {
            if (this.maxDate.length > 0) {
                if (d.getFullYear() <= max.getFullYear() - 1) {
                    d.setMonth(d.getMonth() + mon);
                }
            }
            else {
                d.setMonth(d.getMonth() + mon);
            } // checks if selected date is within minimum range of year
        }
        else if (state1 === 'minus') {
            if (this.minDate.length > 0) {
                if (d.getFullYear() >= min.getFullYear() + 1) {
                    d.setMonth(d.getMonth() - mon);
                }
            }
            else {
                d.setMonth(d.getMonth() - mon);
            }
        }
        this.currrentDate = d;
        this.initDate();
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    setToday() {
        this.currrentDate = new Date();
        this.initDate();
        this.showToolTip = !this.showToolTip;
    }
    /**
     * @return {?}
     */
    initDate() {
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.currrentDate);
        this.daysArray.forEach((dayrow, outerindex) => {
            dayrow.forEach((element, innerindex) => {
                if (this.currrentDate === new Date(element.date)) {
                    const /** @type {?} */ itemid = this.daysArray[outerindex][innerindex];
                    document.getElementById(itemid['id']).focus();
                }
            });
        });
        this.selectedDate = this.currrentDate;
        this.dateModel = this.selectedDate;
        this.value = this.selectedDate;
        this.innerValue = '';
    }
    /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    plus(type, event) {
        if (type === 'min') {
            if (this.min === 59) {
                this.min = -1;
                this.hrs++;
            }
            this.min++;
        }
        if (type === 'hrs') {
            this.hrs++;
        }
        if (this.hrs === 24) {
            this.hrs = 0;
        }
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        this.change.emit(this.value);
        event.stopPropagation();
    }
    /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    minus(type, event) {
        if (type === 'min') {
            if (this.min === 0) {
                this.min = 60;
                this.hrs--;
            }
            this.min--;
        }
        if (type === 'hrs') {
            this.hrs--;
        }
        if (this.hrs === 0) {
            this.hrs = 23;
        }
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        this.change.emit(this.value);
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onTouchedCallback();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== '') {
            if (value !== this.innerValue) {
                this.validateWriteValue(value);
            }
        }
        else {
            this.dateModel = '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    validateWriteValue(value) {
        this.innerValue = value;
        if (this.innerValue instanceof Date || ('number' === typeof this.innerValue)) {
            if (('number' === typeof this.innerValue)) {
                this.innerValue = new Date(this.innerValue);
            }
            this.dateModel = this.innerValue;
            this.currrentDate = this.dateModel;
            this.selectedDate = this.currrentDate;
            this.createDaysForCurrentMonths(this.dateModel);
            if (this.required) {
                this.isValid = true;
            }
        }
        else {
            this.negateisValid();
        }
    }
    /**
     * @return {?}
     */
    negateisValid() {
        this.isValid = false;
        this.hrs = 0;
        this.min = 0;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onFocus(elem) {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocusOut(value) {
        if (isNaN(Date.parse(value.value))) {
            this.isValid = false;
            value.value = '';
        }
        else {
            this.value = Date.parse(value.value);
            this.isValid = true;
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    openPicker(elem) {
        this.inputtabindex = -1;
        this.daystabindex = 1;
        if (this.disabled === false) {
            super.focus(elem);
            this.hostFlag = false;
            this.pickerele = elem;
            if (this.inlineDatepicker) {
                this.showToolTip = this.inlineDatepicker;
                this.setFocus();
            }
            else {
                this.showToolTip = true;
            }
            this.posixUp = this.getListPosition(elem);
            const /** @type {?} */ visibility = this.dropdownstyle.visibility;
            this.dropdownstyle = JSON.parse(JSON.stringify(this.positionClass));
            this.dropdownstyle.visibility = visibility;
            this.dropdownstyle.position = 'fixed';
            this.disableddays(this.diabledDate);
            this.setFocus();
        }
    }
    /**
     * @return {?}
     */
    setFocus() {
        setTimeout(() => {
            // focus code starts
            this.daysArray.forEach((row, index) => {
                row.forEach((day, innerindex) => {
                    if (day.selected) {
                        document.getElementById(day.id).focus();
                    }
                });
            });
        }, 0);
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ dropdownHeight = 350; // must be same in dropdown.scss
        if (window.innerHeight - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
            this.positionClass = {
                top: ((elementRef.getBoundingClientRect().top - dropdownHeight) + elementRef.getBoundingClientRect().height) + 'px',
            };
            return true;
        }
        else {
            this.positionClass = {
                top: (elementRef.getBoundingClientRect().top + elementRef.getBoundingClientRect().height) + 'px',
            };
            return false;
        }
    }
    /**
     * @return {?}
     */
    onSelect() {
        this.showToolTip = false;
    }
    /**
     * @param {?} days
     * @return {?}
     */
    validateDays(days) {
        const /** @type {?} */ max = new Date(this.maxDate);
        const /** @type {?} */ min = new Date(this.minDate);
        // check1: if min max is null return false
        if (this.maxDate.length <= 0 && this.minDate.length <= 0) {
            return false;
        }
        if ((this.maxDate.length > 0 && this.minDate.length <= 0) ||
            (this.maxDate.length > 0 && this.minDate.length > 0)) {
            this.validateMaxDate(days, max);
        }
        if ((this.maxDate.length <= 0 && this.minDate.length > 0) || (this.maxDate.length > 0 && this.minDate.length > 0)) {
            // 3
            if (days.getDate() < min.getDate() &&
                days.getMonth() === min.getMonth() && days.getFullYear() === min.getFullYear()) {
                return true;
                // 4
            }
            else if (days.getMonth() < min.getMonth() && days.getFullYear() === min.getFullYear()) {
                return true;
            }
        }
        this.disableddays(this.diabledDate);
    }
    /**
     * @param {?} days
     * @param {?} max
     * @return {?}
     */
    validateMaxDate(days, max) {
        // check if days greater than max return
        // 1
        if (days.getDate() > max.getDate() &&
            days.getMonth() >= max.getMonth() && days.getFullYear() >= max.getFullYear()) {
            return true;
            // 2
        }
        else if (days.getMonth() > max.getMonth() && days.getFullYear() === max.getFullYear()) {
            return true;
        }
    }
    /**
     * @param {?} dates
     * @return {?}
     */
    disableddays(dates) {
        if (dates) {
            dates.forEach((element) => {
                const /** @type {?} */ From = new Date(element.from);
                const /** @type {?} */ To = new Date(element.to);
                this.daysArray.forEach((element2) => {
                    element2.forEach((element1) => {
                        if (element1.date.getFullYear() <= To.getFullYear() && element1.date.getMonth()
                            <= To.getMonth() && element1.date.getDate() <= To.getDate() && element1.date.getFullYear() >= From.getFullYear() &&
                            element1.date.getMonth() >= From.getMonth() &&
                            element1.date.getDate() >= From.getDate()) {
                            element1.isDisabled = true;
                        }
                    });
                });
            });
        }
    }
    /**
     * @return {?}
     */
    dropdownDatePicker() {
        this.monthList1.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.monthList2.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.yearList1.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.yearList2.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.hostFlag = true;
        this.tempFlag = false;
        this.drop = true;
        super.focus({});
        this.okispressed = false;
        this.cancelispressed = false;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    elementFlagMethod(element) {
        if (element.flag) {
            element.flag = false;
        }
    }
    /**
     * @return {?}
     */
    negateDrop() {
        this.cancelispressed = true;
        this.hostFlag = true;
        this.drop = false;
        this.showToolTip = true;
        this.tempFlag = true;
    }
    /**
     * @param {?} month
     * @return {?}
     */
    getDropdownMonth(month) {
        this.monthList1.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.monthList2.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.monthList1.forEach((element) => {
            this.chkMonth(element, month);
        });
        this.monthList2.forEach((element) => {
            this.chkMonth(element, month);
        });
        switch (month.name) {
            case 'Jan':
                this.monthNo = 0;
                break;
            case 'Feb':
                this.monthNo = 1;
                break;
            case 'Mar':
                this.monthNo = 2;
                break;
            case 'Apr':
                this.monthNo = 3;
                break;
            case 'May':
                this.monthNo = 4;
                break;
            case 'Jun':
                this.monthNo = 5;
                break;
            case 'Jul':
                this.monthNo = 6;
                break;
            case 'Aug':
                this.monthNo = 7;
                break;
            case 'Sep':
                this.monthNo = 8;
                break;
            case 'Oct':
                this.monthNo = 9;
                break;
            case 'Nov':
                this.monthNo = 10;
                break;
            case 'Dec':
                this.monthNo = 11;
                break;
            default:
                break;
        }
        super.focus({});
    }
    /**
     * @param {?} element
     * @param {?} month
     * @return {?}
     */
    chkMonth(element, month) {
        if (element.name === month.name) {
            element.flag = true;
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    yearFlagNegate(element) {
        this.elementFlagMethod(element);
    }
    /**
     * @param {?} element
     * @param {?} year
     * @return {?}
     */
    yearFlag(element, year) {
        if (element.year === year.year) {
            element.flag = true;
        }
    }
    /**
     * @param {?} year
     * @return {?}
     */
    getDropdownYear(year) {
        this.yearList1.forEach((element) => {
            // negate dropdown year flag
            this.yearFlagNegate(element);
        });
        this.yearList2.forEach((element) => {
            // negate dropdown year flag
            this.yearFlagNegate(element);
        });
        this.yearList1.forEach((element) => {
            this.yearFlag(element, year);
        });
        this.yearList2.forEach((element) => {
            this.yearFlag(element, year);
        });
        this.yearNo = year.year;
        super.focus({});
    }
    /**
     * @return {?}
     */
    navigateDropdown() {
        this.okispressed = true;
        this.hostFlag = true;
        this.selectedDate = new Date();
        if (this.yearNo != null && this.monthNo != null) {
            this.selectedDate.setFullYear(this.yearNo);
            this.selectedDate.setMonth(this.monthNo);
        }
        else if (this.yearNo != null && this.monthNo === null) {
            this.selectedDate.setFullYear(this.yearNo);
        }
        else if (this.yearNo === null && this.monthNo != null) {
            this.selectedDate.setMonth(this.monthNo);
        }
        this.drop = false;
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.selectedDate);
        this.disableddays(this.diabledDate);
        this.tempFlag = true;
        this.cdf.detectChanges();
        this.yearList1.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.yearList2.forEach((element) => {
            this.elementFlagMethod(element);
        });
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.selectedDate);
        this.disableddays(this.diabledDate);
        super.focus({});
    }
    /**
     * @return {?}
     */
    cancelDropdown() {
        this.drop = false;
        this.showToolTip = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    arrowClickBack(event) {
        let /** @type {?} */ i;
        // disable flag logic
        this.disableYearFlag();
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            // arrow click logic
            this.backArrow();
        }
        else {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year - 10;
                this.yearList2[i].year = this.yearList2[i].year - 10;
            } // for ends
        } // main else ends
        // disable flag logic
        this.disableYearFlag();
        // rechking arrow flags after reinitialization of yrlist1 & 2
        this.rechkYearFlag();
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    backArrow() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach((element) => {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear() && element.year !== min.getFullYear()) {
                this.forwardArrowFlag = true;
                this.backArrowFlag = false;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = false;
            }
        });
        // resets Arrow Flag
        this.resetYearFlag();
    }
    /**
     * @param {?} element
     * @param {?} min
     * @return {?}
     */
    alterBackArrow(element, min) {
        if (element.year === min.getFullYear()) {
            this.backArrowFlag = true;
        }
    }
    /**
     * @return {?}
     */
    resetArrowFlag() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList2.forEach((element) => {
            this.alterBackArrow(element, min);
            if (element.year === max.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.forwardArrowFlag = true;
            }
        });
    }
    /**
     * @return {?}
     */
    resetYearFlag() {
        let /** @type {?} */ i;
        if (!this.backArrowFlag) {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year - 10;
                this.yearList2[i].year = this.yearList2[i].year - 10;
                this.yearList1[i].disabled = false;
                this.yearList2[i].disabled = false;
            }
        } /* if ends */
    }
    /**
     * @param {?} element
     * @return {?}
     */
    alterBackForwardArrow(element) {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        if (element.year === min.getFullYear()) {
            this.backArrowFlag = true;
        }
        if (element.year === max.getFullYear() ||
            (element.year === min.getFullYear() && element.year === max.getFullYear())) {
            this.forwardArrowFlag = true;
        }
    }
    /**
     * @return {?}
     */
    forwardArrow() {
        let /** @type {?} */ i;
        // chk yearlist1
        this.chkYearList1();
        this.yearList2.forEach((element) => {
            this.alterBackForwardArrow(element);
        });
        if (!this.forwardArrowFlag) {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year + 10;
                this.yearList2[i].year = this.yearList2[i].year + 10;
                this.yearList1[i].disabled = false;
                this.yearList2[i].disabled = false;
            } // for ends
        } // if ends
    }
    /**
     * @return {?}
     */
    chkYearList1() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach((element) => {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = true;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = false;
            }
            if (element.year === max.getFullYear()) {
                this.forwardArrowFlag = true;
            }
        });
    }
    /**
     * @return {?}
     */
    rechkYearFlag() {
        this.yearList1.forEach((element) => {
            const /** @type {?} */ min = new Date(this.minDate);
            const /** @type {?} */ max = new Date(this.maxDate);
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear()) {
                this.forwardArrowFlag = true;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = false;
            }
        });
        this.yearList2.forEach((element) => {
            this.alterBackForwardArrow(element);
        });
    }
    /**
     * @param {?} element
     * @return {?}
     */
    yearFlagDisable(element) {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        if (element.year < min.getFullYear() || element.year > max.getFullYear()) {
            element.disabled = true;
        } // if ends
    }
    /**
     * @return {?}
     */
    disableYearFlag() {
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.yearList1.forEach((element) => {
                this.yearFlagDisable(element);
            }); // for ends
            this.yearList2.forEach((element) => {
                this.yearFlagDisable(element);
            }); // for ends
        } // outer if ends
    }
    /**
     * @param {?} event
     * @return {?}
     */
    arrowClickForward(event) {
        let /** @type {?} */ i;
        // disable flag logic
        this.disableYearFlag();
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.forwardArrow();
        }
        else {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year + 10;
                this.yearList2[i].year = this.yearList2[i].year + 10;
            }
        }
        // disable flag logic
        this.disableYearFlag();
        // rechking arrow flags after reinitialization of yrlist1 & 2
        this.rechkYearFlag();
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    minMaxDateFound() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach((element) => {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear()) {
                this.forwardArrowFlag = true;
            }
        });
        this.yearList2.forEach((element) => {
            if (element.year === min.getFullYear()) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.forwardArrowFlag = true;
            }
        });
    }
    /**
     * @param {?} element
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    disableMinMaxYear(element, min, max) {
        if (element.year < min.getFullYear() || element.year > max.getFullYear()) {
            element.disabled = true;
        }
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return (this.value || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowright(day, month, event) {
        let /** @type {?} */ currentindex;
        let /** @type {?} */ ismonthchanged = false;
        let /** @type {?} */ drindex;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day['id'] === element['id']) {
                    if (index < dayrow.length - 1) {
                        currentindex = index + 1;
                        drindex = dayrowindex;
                    }
                    else {
                        if ((dayrowindex === (month.length - 1)) && (index === (dayrow.length - 1))) {
                            this.nextMonth(event);
                            ismonthchanged = true;
                        }
                        else {
                            currentindex = 0;
                            drindex = dayrowindex + 1;
                        }
                    }
                }
            });
        });
        this.refactoredRightArrow(ismonthchanged, month, drindex, currentindex);
    }
    /**
     * @param {?} ismonthchanged
     * @param {?} month
     * @param {?} drindex
     * @param {?} currentindex
     * @return {?}
     */
    refactoredRightArrow(ismonthchanged, month, drindex, currentindex) {
        if (!ismonthchanged) {
            this.refactoredFocus(month, drindex, currentindex);
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} month
     * @param {?} drindex
     * @param {?} currentindex
     * @return {?}
     */
    refactoredFocus(month, drindex, currentindex) {
        let /** @type {?} */ itemid;
        itemid = month[drindex][currentindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowleft(day, month, event) {
        let /** @type {?} */ currentindex;
        let /** @type {?} */ drindex;
        let /** @type {?} */ ismonthchanged = false;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day['id'] === element['id']) {
                    if (index > 0) {
                        currentindex = index - 1;
                        drindex = dayrowindex;
                    }
                    else {
                        if (dayrowindex === 0 && index === 0) {
                            this.prevMonth(event);
                            ismonthchanged = true;
                        }
                        else {
                            drindex = dayrowindex - 1;
                            currentindex = 6;
                        }
                    }
                }
            });
        });
        this.refactoredarrow(ismonthchanged, month, drindex, currentindex);
    }
    /**
     * @param {?} ismonthchanged
     * @param {?} month
     * @param {?} drindex
     * @param {?} currentindex
     * @return {?}
     */
    refactoredarrow(ismonthchanged, month, drindex, currentindex) {
        let /** @type {?} */ itemid;
        if (!ismonthchanged) {
            itemid = month[drindex][currentindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowup(day, month, event) {
        let /** @type {?} */ isfirstrow = false;
        let /** @type {?} */ drindex;
        let /** @type {?} */ currentindex;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day.id === element.id) {
                    if (dayrowindex === 0) {
                        isfirstrow = true;
                        this.prevMonth(event);
                    }
                    else {
                        drindex = dayrowindex - 1;
                        currentindex = index;
                    }
                }
            });
        });
        if (!isfirstrow) {
            let /** @type {?} */ itemid;
            itemid = this.daysArray[drindex][currentindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowdown(day, month, event) {
        let /** @type {?} */ islastrow = false;
        let /** @type {?} */ drindex;
        let /** @type {?} */ currentindex;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day.id === element.id) {
                    if (dayrowindex === (month.length - 1)) {
                        islastrow = true;
                        this.nextMonth(event);
                    }
                    else {
                        drindex = dayrowindex + 1;
                        currentindex = index;
                    }
                }
            });
        });
        if (!islastrow) {
            let /** @type {?} */ itemid;
            itemid = this.daysArray[drindex][currentindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} currentmonth
     * @return {?}
     */
    dropdownListOneArrowDown(currentmonth) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ islast = false;
        this.monthList1.forEach((element, index) => {
            if (element.id === currentmonth.id) {
                if (index !== (this.monthList1.length - 1)) {
                    focusindex = index + 1;
                }
                else {
                    islast = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!islast) {
            itemid = this.monthList1[focusindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            itemid = this.monthList2[0];
            document.getElementById(itemid['id']).focus();
        }
    }
    /**
     * @param {?} currentmonth
     * @return {?}
     */
    dropdownListOneArrowUp(currentmonth) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ isfirst = false;
        this.monthList1.forEach((elementmonthList1, index) => {
            if (elementmonthList1.id === currentmonth.id) {
                if (index > 0) {
                    focusindex = index - 1;
                }
                else {
                    isfirst = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!isfirst) {
            itemid = this.monthList1[focusindex];
        }
        else {
            itemid = this.monthList2[this.monthList2.length - 1];
        }
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} currentmonth
     * @return {?}
     */
    dropdownListTwoArrowDown(currentmonth) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ islast = false;
        this.monthList2.forEach((element, index) => {
            if (element.id === currentmonth.id) {
                if (index !== (this.monthList2.length - 1)) {
                    focusindex = index + 1;
                }
                else {
                    islast = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!islast) {
            itemid = this.monthList2[focusindex];
        }
        else {
            itemid = this.monthList1[0];
        }
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} currentmonth
     * @return {?}
     */
    dropdownListTwoArrowUp(currentmonth) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ isfirst = false;
        this.monthList2.forEach((element, index) => {
            if (element.id === currentmonth.id) {
                if (index > 0) {
                    focusindex = index - 1;
                }
                else {
                    isfirst = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!isfirst) {
            itemid = this.monthList2[focusindex];
        }
        else {
            itemid = this.monthList1[this.monthList1.length - 1];
        }
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} currentyear
     * @return {?}
     */
    yearList1ArrowDown(currentyear) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ islast = false;
        this.yearList1.forEach((element, index) => {
            if (element.id === currentyear.id) {
                if (index !== (this.yearList1.length - 1)) {
                    focusindex = index + 1;
                }
                else {
                    islast = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!islast) {
            itemid = this.yearList1[focusindex];
        }
        else {
            itemid = this.yearList2[0];
        }
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} currentyear
     * @return {?}
     */
    yearList2ArrowDown(currentyear) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ islast = false;
        this.yearList2.forEach((element, index) => {
            if (element.id === currentyear.id) {
                if (index !== (this.yearList2.length - 1)) {
                    focusindex = index + 1;
                }
                else {
                    islast = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!islast) {
            itemid = this.yearList2[focusindex];
        }
        else {
            itemid = this.yearList1[0];
        }
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} currentyear
     * @return {?}
     */
    yearList1ArrowUp(currentyear) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ isfirst = false;
        this.yearList1.forEach((elementyearList1, index) => {
            if (elementyearList1.id === currentyear.id) {
                if (index !== 0) {
                    focusindex = index - 1;
                }
                else {
                    isfirst = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!isfirst) {
            itemid = this.yearList1[focusindex];
        }
        else {
            itemid = this.yearList2[this.yearList2.length - 1];
        }
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} currentyear
     * @return {?}
     */
    yearList2ArrowUp(currentyear) {
        let /** @type {?} */ focusindex;
        let /** @type {?} */ isfirst = false;
        this.yearList2.forEach((element, index) => {
            if (element.id === currentyear.id) {
                if (index !== 0) {
                    focusindex = index - 1;
                }
                else {
                    isfirst = true;
                }
            }
        });
        let /** @type {?} */ itemid;
        if (!isfirst) {
            itemid = this.yearList2[focusindex];
        }
        else {
            itemid = this.yearList1[this.yearList1.length - 1];
        }
        document.getElementById(itemid['id']).focus();
    }
}
AmexioDateTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-date-time-picker',
                template: `
    <div id="maindiv">
        <div   tabindex="{{inputtabindex}}" (keyup.enter)="openPicker(rootDiv)" aria-label="datetimepicker push button" 
       class="inputgroup" 
        *ngIf="!inlineDatepicker"
        #rootDiv>
  
            <label>
                {{fieldlabel}}
            </label>
  
            <ng-container *ngIf="datepicker && !timepicker">
                    <!-- (change)="change.emit()"  -->
                <input tabindex="-1" type="text" #pickerDt value="{{dateModel|date:dateformat}}" 
                [attr.disabled]="disabled ? true: null" [required]="required ? true: null"
                    (blur)="onBlur()" (focus)="onFocus(rootDiv)" 
                    (focusout)="onFocusOut(pickerDt)" 
                    class="input-control"
                    [ngStyle]="{'cursor': readonly ? 'not-allowed':'pointer'}" [attr.placeholder]="placeholder" />
            </ng-container>
  
            <ng-container *ngIf="timepicker">
                <input type="text" [(ngModel)]="selectedDate" value="{{selectedDate|date:dateformat}} {{hrs + ' : ' + min}}" [attr.disabled]="disabled ? true: null"
                    [attr.required]="required ? true: null" (blur)="onBlur()" (focus)="onFocus(rootDiv)" (input)="onInput($event)"
                    (change)="change.emit()" class="input-control" [ngStyle]="{'cursor': readonly ? 'not-allowed':'pointer'}" [attr.placeholder]="placeholder"
                />
            </ng-container>
  
            <div class="drodown-caret-down" [ngStyle]="{'cursor':disabled ? 'not-allowed' : 'pointer'}" (click)="openPicker(rootDiv)">
                <ng-container *ngIf="timepicker">
                    <span  tabindex="1" (keyup.enter)="openPicker(rootDiv)" aria-label="timepicker push button" >
                    <amexio-c-icon key="datepicker-clock-icon"></amexio-c-icon>
                    </span>
                </ng-container>
                <ng-container *ngIf="!timepicker">
                    <span>
                             <amexio-c-icon key="datepicker_calendar"></amexio-c-icon>
                    </span>
               
                </ng-container>
  
            </div>
  
  
        </div>
   

        <div  
         [@changeState]="dropdownstyle.visibility"
         [ngStyle]="dropdownstyle"  
        [ngClass]="{'datetimepicker1':inlineDatepicker , 'datetimepicker':!inlineDatepicker}">
            <!-- datepicker starts -->
            <span aria-label="datepicker window opened ">
                <div aria-label="datetimepicker header" class="datetimepickertopbar" aria-label="datepicker header" [ngStyle]="{'display': datepicker ? 'block' : 'none'}">
                    <ul>
                        <li class="prev">
                            <span tabindex="1" aria-label="previous year push button" (keyup.enter)="prevYear($event)">
                                <amexio-c-icon key="datepicker_previous_fast" (onClick)="prevYear($event)"></amexio-c-icon>
                            </span>
                            <span tabindex="1" aria-label="previous month push button " (keyup.enter)="prevMonth($event)">
                                <amexio-c-icon key="datepicker_previous" (onClick)="prevMonth($event)"></amexio-c-icon>
                            </span>
                        </li>
                        <li class="next">
                            <span tabindex="1" aria-label="next month push button" (keyup.enter)="nextMonth($event)">
                                <amexio-c-icon key="datepicker_next" (onClick)="nextMonth($event)"></amexio-c-icon>
                            </span>
                            <span tabindex="1" aria-label="next year push button" (keyup.enter)="nextYear($event)">
                                <amexio-c-icon key="datepicker_next_fast" (onClick)="nextYear($event)"></amexio-c-icon>
                            </span>
                        </li>
                        <li>
                            <span *ngIf="dropdownDatepicker">
                                  <span  style="cursor:pointer" (click)="dropdownDatePicker()">
                                    {{selectedDate | date:'MMMM'}}
                                    <br>
                                    <span class="title">{{selectedDate | date:'y'}}</span>
                                </span>
                                <span tabindex="1" aria-label="dropdown datepicker push button" (keyup.enter)="dropdownDatePicker()" (onClick)=" dropdownDatePicker()" style="cursor:pointer">
                                    <amexio-c-icon key="dropdown_caret" (onClick)="dropdownDatePicker()"></amexio-c-icon>
                                </span>
                             </span>
  
                            <span *ngIf="!dropdownDatepicker">
                                {{selectedDate | date:'MMMM'}}
                                <br>
                                <span class="title" style="cursor:auto">{{selectedDate | date:'y'}}</span>
                            </span>
  
                        </li>
                    </ul>
                </div>
                <div *ngIf="!drop">
                    <ul class="weekdays" [ngStyle]="{'display': datepicker ? 'block' : 'none'}">
                        <li *ngFor="let dayTitle of daysTitle">{{dayTitle.text}}</li>
                    </ul>
  
                    <ul id="{{daystabindex}}" class="days" [ngStyle]="{'display': datepicker ? 'block' : 'none'}">
  
                        <ng-container *ngFor="let dayArray of daysArray">
                            <li  [ngStyle]="{'cursor': day.isDisabled ? 'not-allowed' : 'pointer'}"
                                *ngFor="let day of dayArray" (click)="onDateClick(day, $event)" [ngClass]="{'date1':validateDays(day.date) , 'date1':day.isDisabled , 'notclickable':isDisabled}">
                                <span [attr.tabindex]="(day.selected ? 1: -1)" id="{{day.id}}" 
                                (keyup.arrowleft)="arrowleft(day,daysArray,$event)"
                                 (keyup.arrowright)="arrowright(day,daysArray,$event)"
                                 (keyup.arrowdown)="arrowdown(day,daysArray,$event)"
                                 (keyup.arrowup) = "arrowup(day,daysArray,$event)"
                                 (keyup.enter) = "onDateClick(day, $event)"
                                attr.aria-label="{{day.fulldate}}" (click)="onDateClick(day, $event)" class="day"   
                                [ngClass]="{'active':day.selected, 'currentMonth':day.isCurrentMonth, 'notCurrentMonth':!day.isCurrentMonth,'invaliddays':validateDays(day.date), 'disabled':day.isDisabled}">
                                    {{ day.date | date:'d' }}
                                 </span>
                            </li>
                        </ng-container>
  
  
                        <li (keyup.enter)="setToday()" class="date-today">
                            <amexio-button type="primary" label="TODAY" (onClick)="setToday()" size="small"></amexio-button>
                        </li>
  
  
                    </ul>
                </div>
            </span>
            <!--datepicker ends  -->
            <table aria-label="timepicker window opened" tabindex="1" class="table" [ngStyle]="{'display': timepicker ? 'block' : 'none'}" style="cursor : pointer;text-align: center;padding: 5px;">
                <!--if picker is true-->
                <tr style="padding: 10px;">
                    <td colspan="2"></td>
                    <td tabindex="1" aria-label="increment hour push button" (keyup.enter)="plus('hrs', $event)" (click)="plus('hrs', $event);">&#9650;</td>
                    <td></td>
                    <td tabindex="1" aria-label="increment minute push button" (keyup.enter)="plus('min', $event)" (click)="plus('min', $event);">&#9650;</td>
                    <td colspan="2"></td>
                </tr>
                <tr tabindex="1" attr.aria-label="{{hrs}} hours {{min}} minutes" >
                    <td colspan="2"></td>
                    <td>{{hrs}}</td>
                    <td>:</td>
                    <td>{{min}}</td>
                    <td colspan="2">
                    </td>
                </tr>
                <tr>
                    <td colspan="2"></td>
                    <td tabindex="1" (keyup.enter)="minus('hrs', $event)" aria-label="decrement hour push button"  (click)="minus('hrs', $event);">&#9660;</td>
                    <td></td>
                    <td tabindex="1" (keyup.enter)="minus('min', $event)" aria-label="decrement min push button" (click)="minus('min', $event);">&#9660;</td>
                    <td colspan="2">
                    </td>
                </tr>
  
            </table>
  
            <!--dropdown datepicker -->
            <div [ngStyle]="positionClass" class="datedropdown" *ngIf="drop && !timepicker">
  
                <div class="dropdiv1">
                   <span  tabindex="1" aria-label="month list" >
               
                    <span  class="dropspan1">
                        <ul class="dropul1">
                            <li tabindex="1" 
                            id={{month.id}}
                            class="li4" (click)="getDropdownMonth(month)" 
                            *ngFor="let month of monthList1"
                             attr.aria-label="{{month.fullname}}"
                            (keyup.arrowdown)="dropdownListOneArrowDown(month)"
                            (keyup.arrowup)="dropdownListOneArrowUp(month)"
                            >
                                <span [ngClass]="{'change4':month.flag}"> {{month.name}}</span>
                            </li>
  
                        </ul>
                    </span>
  
                    <span class="dropspan2">
                        <ul class="dropul2">
                            <li class="li4" 
                            tabindex="1"
                             id={{month.id}}
                            (click)="getDropdownMonth(month)" 
                            *ngFor="let month of monthList2"
                            attr.aria-label="{{month.fullname}}"
                            (keyup.arrowdown)="dropdownListTwoArrowDown(month)"
                            (keyup.arrowup)="dropdownListTwoArrowUp(month)"
                            >
                                <span [ngClass]="{'change4':month.flag}"> {{month.name}}</span>
                            </li>
  
                        </ul>
                    </span>
  
                    </span>
  
                    <span tabindex="1" aria-label="year list">
  
                    <span class="dropspan1">
                        <ul class="dropul1">
                            <li tabindex="1" (keyup.enter)="arrowClickBack($event)"  id="prevyearbutton" aria-label="previous year list push button" [ngClass]="{ 'disablearrow':backArrowFlag}" class="dropiconpadding" (click)="arrowClickBack()">
                                <amexio-c-icon key="paginator_first" (onClick)="arrowClickBack($event)"></amexio-c-icon>
                            </li>
                            <li tabindex="1" (keyup.arrowdown)="yearList1ArrowDown(year)" 
                            (keyup.arrowup) = "yearList1ArrowUp(year)"
                            id="{{year.id}}"  
                            [ngClass]="{ 'disablearrow':year.disabled}" class="li4" 
                            (click)="getDropdownYear(year)" *ngFor="let year of yearList1">
                                <span [ngClass]="{'change4':year.flag && !year.disabled}">
                                    {{year.year}}
                                </span>
                            </li>
  
  
                        </ul>
                    </span>
  
                    <span class="dropspan4">
                        <ul class="dropul2">
  
                            <li tabindex="1" (keyup.enter)="arrowClickForward($event)"  id="nextyearbutton" aria-label="next year list push button" [ngClass]="{ 'disablearrow':forwardArrowFlag}" class="dropiconpadding" (click)="arrowClickForward()">
                                <amexio-c-icon key="paginator_last" (onClick)="arrowClickForward($event)"></amexio-c-icon>
                            </li>
                            <li tabindex="1" (keyup.arrowdown)="yearList2ArrowDown(year)"
                            (keyup.arrowup) = "yearList2ArrowUp(year)"
                            id="{{year.id}}" [ngClass]="{ 'disablearrow ':year.disabled}" class="li4" (click)="getDropdownYear(year)" *ngFor="let year of yearList2">
                                <span [ngClass]="{'change4':year.flag && !year.disabled}">
                                    {{year.year}}
                                </span>
                            </li>
  
                        </ul>
                    </span>
  
                </span>
                </div>
                <div class="btndiv1">
                    <span class="dropbtnspan">
                        <button tabindex="1" role="button" [attr.aria-pressed]="okispressed"
                        (click)="navigateDropdown()" class="datedropbtn">
                            ok
                        </button>
                        <button tabindex="1" role="button" [attr.aria-pressed]="cancelispressed" class="datedropbtn" (click)="negateDrop()">
                            cancel
                        </button>
                    </span>
                </div>
            </div>
        </div>
      </div>
  `,
                animations: [
                    trigger('changeState', [
                        state('visible', style({
                            transform: 'scale(1)',
                        })),
                        state('hidden', style({
                            transform: 'scale(0)',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioDateTimePickerComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioDateTimePickerComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioDateTimePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Renderer2 }
];
AmexioDateTimePickerComponent.propDecorators = {
    dateformat: [{ type: Input, args: ['date-format',] }],
    datepicker: [{ type: Input, args: ['date-picker',] }],
    timepicker: [{ type: Input, args: ['time-picker',] }],
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    readonly: [{ type: Input, args: ['read-only',] }],
    minDate: [{ type: Input, args: ['min-date',] }],
    maxDate: [{ type: Input, args: ['max-date',] }],
    diabledDate: [{ type: Input, args: ['disabled-date',] }],
    inlineDatepicker: [{ type: Input, args: ['inline-datepicker',] }],
    dropdownDatepicker: [{ type: Input, args: ['dropdown-datepicker',] }],
    required: [{ type: Input }],
    change: [{ type: Output }],
    input: [{ type: Output }],
    isComponentValid: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 Component Name : Amexio  Dropdown Menu
 Component Selector : <amexio-drop-down-menu-items>
 Component Description : Amexio Dropdown component with various modes and configurations .
 */
class AmexioDropDownitemsComponent {
    constructor() {
        /*
           Properties
           name : add-seperator
           datatype :  boolean
           version : 4.2 onwards
           default : false
           description : add divider to the dropdown menu list
           */
        this.onClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.iconalign && this.labelalign
            && this.iconalign.toLowerCase() === this.labelalign.toLowerCase()) {
            this.iconalign = null;
            this.labelalign = null;
        }
        else if (this.iconalign && this.iconalign === 'left') {
            this.labelalign = 'right';
            this.iconalign = null;
        }
        else if (this.iconalign && this.iconalign === 'right') {
            this.labelalign = null;
        }
    }
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    onItemClick(clickEvent) {
        this.toggle = false;
        const /** @type {?} */ e = {
            event: clickEvent,
            this: this,
        };
        this.onClick.emit(e);
    }
}
AmexioDropDownitemsComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-drop-down-menu-item',
                template: `
    <div *ngIf="!(icon && label)"  class="dropdowndivider" style="padding-bottom: 5px;">
      <ng-content></ng-content>
    </div>
    <a  *ngIf=" (icon || label)"   (click)="onItemClick($event)" id={{index}}  [ngStyle]="{'background': selected ? '#ffcccc':''}"  [ngClass]="{'dropdowndivider':separator}">

      <ng-container *ngIf="icon">
        <em [style.float]="iconalign" [ngClass]="icon"></em>
      </ng-container>

      <ng-container *ngIf="label">
        <span [style.float]="labelalign" style="padding: 5px;">
          {{label}}
        </span>
      </ng-container>
    </a>
  `,
            },] },
];
AmexioDropDownitemsComponent.propDecorators = {
    label: [{ type: Input }],
    icon: [{ type: Input }],
    labelalign: [{ type: Input, args: ['label-align',] }],
    iconalign: [{ type: Input, args: ['icon-align',] }],
    separator: [{ type: Input, args: ['separator',] }],
    index: [{ type: Input, args: ['index',] }],
    selected: [{ type: Input, args: ['selected',] }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioDropDownMenuComponent {
    /**
     * @param {?} element
     * @param {?} matchMediaService
     */
    constructor(element, matchMediaService) {
        this.element = element;
        this.matchMediaService = matchMediaService;
        this.xposition = false;
        /*
           Properties
           name : menu icon
           datatype : string
           version : 4.2 onwards
           default :
           description : icon on menu
           */
        this.downArrowIcon = true;
        /*
           Properties
           name : transparent
           datatype : string
           version : 4.2 onwards
           default :
           description : transparent style for menu
           */
        this.transparent = false;
        this.dropdownmenuindex = -1;
        this.prevdropdownmenuindex = -1;
        this.onClick = new EventEmitter();
        this.optionsCollection = [];
        this.iconalign = 'left';
        this.padding = '5px 10px';
        this.componentId = 'dropdownmenu' + Math.floor(Math.random() * 1000 + 999);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.data) {
            this.data.forEach((node) => {
                if (!node.iconalign && this.iconalign) {
                    node.iconalign = this.iconalign;
                }
                if (!node.labelalign) {
                    node.labelalign = 'left';
                }
            });
            this.generateIndex(this.data);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.optionsCollection = this.dropdowns.toArray();
        this.optionsCollection.forEach((node) => node.onClick.subscribe((eventdata) => {
            this.toggle = false;
        }));
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    onElementOutClick(targetElement) {
        let /** @type {?} */ parentFound = false;
        while (targetElement !== null && !parentFound) {
            if (targetElement === this.element.nativeElement) {
                parentFound = true;
            }
            targetElement = targetElement.parentElement;
        }
        if (!parentFound) {
            this.toggle = false;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showDropDownContent(event) {
        if (this.dropdownmenuindex > -1) {
            this.data[this.dropdownmenuindex]['selected'] = false;
        }
        this.toggle = !this.toggle;
        this.top = event.target.getBoundingClientRect().top + 25;
        if ((this.matchMediaService.browserWindow().innerWidth - event.clientX) < 200) {
            this.xposition = true;
        }
        else {
            this.xposition = false;
        }
        const /** @type {?} */ inputid = document.getElementById(this.componentId);
        inputid.setAttribute('aria-activedescendant', 'dropdownitem');
        this.dropdownmenuindex = -1;
        this.prevdropdownmenuindex = -1;
    }
    /**
     * @param {?} childposition
     * @param {?} parentIconPosition
     * @return {?}
     */
    getIconPosition(childposition, parentIconPosition) {
        if (childposition.hasOwnProperty('iconalign') && childposition.iconalign !== '') {
            if (childposition.iconalign === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (parentIconPosition === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDropDownMenuClick(event) {
        this.toggle = false;
        this.onClick.emit(event);
    }
    /**
     * @param {?} childPosition
     * @param {?} parentLabelPosition
     * @return {?}
     */
    getLabelPosition(childPosition, parentLabelPosition) {
        if (childPosition.hasOwnProperty('labelalign') && childPosition.labelalign !== '') {
            if (childPosition.labelalign === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (parentLabelPosition === 'right') {
                return true;
            }
            else {
                return false;
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    generateIndex(data) {
        data.forEach((element, index) => {
            element['index'] = this.componentId + 'dropdownmenuitem' + index;
            element['selected'] = false;
        });
    }
    /**
     * @param {?} item
     * @return {?}
     */
    navigateOptions(item) {
        if (item.keyCode === 38) {
            this.upArrowKeyNavigation(item);
        }
        else if (item.keyCode === 40) {
            this.downArrowKeyNavigation(item);
        }
        else if (item.keyCode === 13 && this.dropdownmenuindex > -1) {
            const /** @type {?} */ emitdata = this.createEmitObject(this.data[this.dropdownmenuindex]);
            const /** @type {?} */ e = {
                event: item,
                this: emitdata,
            };
            this.onClick.emit(e);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    upArrowKeyNavigation(event) {
        if (this.prevdropdownmenuindex > -1) {
            this.data[this.prevdropdownmenuindex]['selected'] = false;
        }
        this.prevdropdownmenuindex--;
        if (this.prevdropdownmenuindex === -1) {
            this.prevdropdownmenuindex = this.data.length - 1;
            this.dropdownmenuindex = -1;
        }
        this.setAriaActiveDescendant(this.prevdropdownmenuindex);
        if (this.prevdropdownmenuindex === 0) {
            this.dropdownmenuindex = 0;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    downArrowKeyNavigation(event) {
        if (this.prevdropdownmenuindex > -1) {
            this.data[this.prevdropdownmenuindex]['selected'] = false;
        }
        this.dropdownmenuindex++;
        this.prevdropdownmenuindex = this.dropdownmenuindex;
        if (this.dropdownmenuindex >= this.data.length) {
            this.dropdownmenuindex = 0;
            this.prevdropdownmenuindex = 0;
        }
        this.setAriaActiveDescendant(this.dropdownmenuindex);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    createEmitObject(object) {
        const /** @type {?} */ obj = {};
        if (object['icon']) {
            obj['icon'] = object['icon'];
        }
        if (object['label']) {
            obj['label'] = object['label'];
        }
        if (object['labelalign']) {
            obj['labelalign'] = object['labelalign'];
        }
        if (object['iconalign']) {
            obj['iconalign'] = object['iconalign'];
        }
        if (object['separator']) {
            obj['separator'] = object['separator'];
        }
        return obj;
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setAriaActiveDescendant(rowindex) {
        this.data[rowindex]['selected'] = true;
        const /** @type {?} */ inputid = document.getElementById(this.componentId);
        inputid.setAttribute('aria-activedescendant', this.data[rowindex]['index']);
    }
}
AmexioDropDownMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-drop-down-menu',
                template: `

    <div  tabindex="1" id="{{componentId}}" 
    [attr.aria-expanded]="toggle"
    [attr.aria-label]="title"
     role="menu"
    (keyup)="navigateOptions($event)"
    (keyup.enter) ="showDropDownContent($event)"
    (click)="showDropDownContent($event)" class="dropdown-menu" 
    [style.padding]="padding"
    [ngStyle]="{'background-color':(transparent)?'unset':'null'}">
    <span >
    <em *ngIf="icon" style="padding-right: 5px;" [ngClass]="icon">&nbsp;</em>{{title}}&nbsp;</span>
    <ng-container *ngIf="downArrowIcon">
    <em *ngIf="!toggle"  class="fa fa-angle-down "></em>
    <em *ngIf="toggle"  class="fa fa-angle-up "></em>
    </ng-container>

    </div>
    <div  *ngIf="toggle" class="dropdown-menu-content"
    [style.height]="height"   [ngClass]="{'menu-right':xposition}">

    <ng-content></ng-content>
    <div  >
    <span  role="option" tabindex="1"  *ngFor="let node of data"   id="{{node.index}}"  >
    <amexio-drop-down-menu-item   
                              (onClick)="onDropDownMenuClick($event)"  
                              [icon-align]="node.iconalign"
                              [label-align]="node.labelalign"
                              [label]="node.label"
                              [separator]="node.separator"
                              [icon]="node.icon"
                              [index]="node.index" 
                              [selected]="node.selected">
    </amexio-drop-down-menu-item>
    </span>
    </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioDropDownMenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DeviceQueryService }
];
AmexioDropDownMenuComponent.propDecorators = {
    dropDownMenuLocalData: [{ type: Input }],
    data: [{ type: Input }],
    title: [{ type: Input }],
    icon: [{ type: Input }],
    iconalign: [{ type: Input, args: ['icon-align',] }],
    padding: [{ type: Input }],
    downArrowIcon: [{ type: Input, args: ['down-arrow-icon',] }],
    transparent: [{ type: Input }],
    height: [{ type: Input }],
    onClick: [{ type: Output }],
    dropdowns: [{ type: ContentChildren, args: [AmexioDropDownitemsComponent,] }],
    onElementOutClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }, { type: HostListener, args: ['document: touchstart', ['$event.target'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioEmailInputComponent extends ValueAccessorBase {
    constructor() {
        super();
        /*
           Properties
           name : has-label
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : Flag to set label
           */
        this.hasLabel = true;
        /*
           Properties
           name : pattern
           datatype : string
           version : 4.0 onwards
           default :
           description : Apply Reg-ex to the field
           */
        this.emailpattern = /\S+@\S+\.\S+/;
        /*
           Events
           name : onBlur
           datatype : any
           version : 4.0 onwards
           default :
           description : On blur event
           */
        this.onBlur = new EventEmitter();
        /*
           Events
           name : input
           datatype : any
           version : none
           default :
           description : 	On input event field.
           */
        this.input = new EventEmitter();
        /*
           Events
           name : focus
           datatype : any
           version : none
           default :
           description : On focus event field.
           */
        this.focus = new EventEmitter();
        /*
           Events
           name : change
           datatype : any
           version : none
           default :
           description : On field value change event
           */
        this.change = new EventEmitter();
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pattern(value) {
        if (value != null) {
            this._pattern = value;
            this.regEx = new RegExp(this._pattern);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('emailinput', this.name);
        this.name = this.generateName(this.name, this.fieldlabel, 'emailinput');
    }
    /**
     * @return {?}
     */
    onblur() {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.showToolTip = true;
        this.focus.emit(this.value);
    }
    /**
     * @return {?}
     */
    onInput() {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    }
    /**
     * @return {?}
     */
    onChangeEv() {
        this.change.emit(this.value);
    }
    /**
     * @return {?}
     */
    isFieldValid() {
        return (!this.allowblank && this.emailpattern.test(this.value)) || this.allowblank;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioEmailInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-email-input',
                template: `

    <div class="inputgroup">

      <label *ngIf="hasLabel"  role="email" for="{{componentId}}" id="{{componentId}}" [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
        {{fieldlabel}}
      </label> 

      <input type="email" 

            role="email" 
            tabindex="1"
            id="{{componentId}}" 
            name="emailText"
            attr.aria-labelledby="{{componentId}}"
            aria-describedby="emailDes"
            [attr.aria-disabled]="disabled ? true: null"
            [attr.aria-required]="!allowblank"
            [attr.aria-invalid]="!isValid "



        
             class="input-control"
             [ngClass]="model.touched ? allowblank ? '' : (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''"
             [(ngModel)]="value"
             (blur)="onblur()"
             (focus)="onFocus()"
             (input)="onInput()"
             (change)="onChangeEv()"
             [name]="name"
             [pattern]="regEx"
             [attr.placeholder]="placeholder"
             [attr.disabled] = "disabled ? true: null"
             [required]="!allowblank"/>

             <ng-container *ngIf="iconfeedback">
              <span class="input-control-feedback">
                  <span *ngIf="!isValid && model.touched"><em class="fa fa-times"></em></span>
                  <span *ngIf="isValid && model.touched"><em class="fa fa-check"></em></span>
              </span>
          </ng-container>
    
          <input-help *ngIf="showToolTip && enablepopover"
          id="emailDes" 
          role="tooltip"
          [error-msg]="errormsg" 
          [min-msg]="minmsg" 
          [max-msg]="maxmsg"
          >
          </input-help>
     
          <span class="inputfieldbar"></span>
        </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioEmailInputComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioEmailInputComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioEmailInputComponent.ctorParameters = () => [];
AmexioEmailInputComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    hasLabel: [{ type: Input, args: ['has-label',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    model: [{ type: ViewChild, args: [NgModel,] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    pattern: [{ type: Input, args: ['pattern',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    onBlur: [{ type: Output }],
    input: [{ type: Output }],
    focus: [{ type: Output }],
    change: [{ type: Output }],
    name: [{ type: Input, args: ['name',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioFileUploadComponent {
    /**
     * @param {?} dataService
     */
    constructor(dataService) {
        this.dataService = dataService;
        /*
           Events
           name : onRemove
           datatype : any
           version : none
           default :
           description : On remove click event
           */
        this.onRemove = new EventEmitter();
        this.onFileUpload = new EventEmitter();
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.uploadedFiles = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @param {?} bytes
     * @param {?} decimals
     * @return {?}
     */
    formatBytes(bytes, decimals) {
        if (bytes === 0) {
            return '0 Bytes';
        }
        const /** @type {?} */ k = 1024;
        const /** @type {?} */ dm = decimals || 2;
        // tslint:disable-next-line:one-variable-per-declaration
        const /** @type {?} */ sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const /** @type {?} */ i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFileDrop(event) {
        event.preventDefault();
        this.dropClass = '';
        const /** @type {?} */ dt = event.dataTransfer;
        if (dt.items) {
            // Use DataTransferItemList interface to access the file(s)
            // tslint:disable-next-line:prefer-for-of
            for (let /** @type {?} */ i = 0; i < dt.items.length; i++) {
                if (dt.items[i].kind === 'file') {
                    const /** @type {?} */ f = dt.items[i].getAsFile();
                    this.uploadFile(f, true);
                }
            }
        }
        else {
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        event.preventDefault();
        this.dropClass = 'drop';
    }
    /**
     * @param {?} filedata
     * @param {?} index
     * @return {?}
     */
    closeFile(filedata, index) {
        this.onRemove.emit({ fileData: filedata });
        this.uploadedFiles.splice(index, 1);
    }
    /**
     * @param {?} event
     * @param {?} singleFile
     * @return {?}
     */
    uploadFile(event, singleFile) {
        if (singleFile) {
            const /** @type {?} */ formData = new FormData();
            formData.append(this.paramname, event);
            if (this.httpmethod && this.httpurl) {
                this.dataService
                    .uploadFile(this.httpurl, this.httpmethod, formData)
                    .subscribe((response) => {
                    this.responseData = response;
                }, (error) => {
                    this.error.emit(error);
                }, () => {
                    this.success.emit(this.responseData);
                });
            }
            this.uploadedFiles.push({
                name: event.name,
                size: this.formatBytes(event.size, 2),
            });
        }
        else {
            this.serviceCall(event);
        }
        this.onFileUpload.emit(this.uploadedFiles);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    serviceCall(event) {
        const /** @type {?} */ fileList = event.target.files != null ? event.target.files : event;
        const /** @type {?} */ formData = new FormData();
        if (fileList) {
            // tslint:disable-next-line:prefer-for-of
            for (let /** @type {?} */ i = 0; i < fileList.length; i++) {
                if (!this.paramname) {
                    this.paramname = 'file';
                }
                formData.append(this.paramname, fileList[i]);
            }
            this.uploadService(formData);
            if (fileList.length === 1) {
                const /** @type {?} */ fsize = this.formatBytes(fileList[0].size, 2);
                this.uploadedFiles.push({ name: fileList[0].name, size: fsize });
            }
            else if (fileList.length > 1) {
                // tslint:disable-next-line:prefer-for-of
                for (let /** @type {?} */ i = 0; i < fileList.length; i++) {
                    const /** @type {?} */ fsize = this.formatBytes(fileList[i].size, 2);
                    this.uploadedFiles.push({ name: fileList[i].name, size: fsize });
                }
            }
        }
    }
    /**
     * @param {?} formData
     * @return {?}
     */
    uploadService(formData) {
        this.dataService.uploadFile(this.httpurl, this.httpmethod, formData)
            .subscribe((response) => {
            this.responseData = response;
        }, (error) => { }, () => {
        });
    }
}
AmexioFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-fileupload',
                template: `
    <div class='input-group' *ngIf='!droppable'>
        <ng-container *ngIf='fieldlabel'>
            <label for="fileName">{{fieldlabel}}</label>
        </ng-container>
        <ng-container *ngIf='!fieldlabel'>
            <label for="fileName">Choose File</label>
        </ng-container>
        <input type='file' aria-controls="fileUpload" id="fileName" class='input-control' [attr.accept]='filetype' (change)='uploadFile($event,false)' [attr.multiple]='multiplefile' #inp>
    </div>
    <ng-container *ngIf='droppable'>
        <ng-container *ngIf='fieldlabel'>
            <label for="dragFileName">{{fieldlabel}}</label>
        </ng-container>
        <ng-container *ngIf='!fieldlabel'>
            <label for="dragFileName">Drag and Drop Files below</label>
        </ng-container>
        <div class='upload-drop-zone {{dropClass}}' aria-controls="dragFileUpload" id="dragFileName" (drop)='onFileDrop($event)' (dragover)='onDragOver($event)' (dragleave)='dropClass = "";' #drpZone>
            Just drag and drop files here
        </div>
    </ng-container>

    <div class='file-upload-box' style='width: 100%'>
        <li *ngFor='let file of uploadedFiles ; let index = index' class='file-upload-info'>
            <span class='uploaded-file-name'>({{file.name}} &nbsp; &nbsp; ({{file.size}}) )</span>
            <amexio-c-icon key='tab_close' class='close-icon' (onClick)='closeFile(file,index)'>
            </amexio-c-icon>
        </li>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioFileUploadComponent.ctorParameters = () => [
    { type: CommonDataService }
];
AmexioFileUploadComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    filetype: [{ type: Input, args: ['file-type',] }],
    multiplefile: [{ type: Input, args: ['multiple-file',] }],
    paramname: [{ type: Input, args: ['param-name',] }],
    droppable: [{ type: Input }],
    onRemove: [{ type: Output }],
    onFileUpload: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 26/2/2018.
*/
class AmexioFloatingButtonComponent {
    constructor() {
        /*
          Properties
          name : block
          datatype : none
          version : 4.1 onwards
          default : none
          description : Display button as round or square
          */
        this.block = 'circle';
        /*
          Properties
          name : color
          datatype : string
          version : 5.5.4 onwards
          default : white color
          description : sets icon color.
          */
        this.iconcolor = 'white';
        /*
           Properties
           name : bg-color
           datatype : string
           version : 5.5.4 onwards
           default : none
           description : sets background color of floating button.
           */
        this.bgcolor = '';
        /*
          Properties
          name : relative
          datatype : boolean
          version : 4.1 onwards
          default : none
          description : Place floating button at relative position
          */
        this.relative = false;
        /*
          Events
          name : onClick
          datatype : any
          version : none
          default : none
          description : Event is fired when button is click
          */
        this.onClick = new EventEmitter();
        /*
           Properties
           name : absolute
           datatype : boolean
           version : 5.5.5 onwards
           default : none
           description : Place floating button at absolute position
           */
        this.absolute = false;
        this.absoluteposition = false;
        this.ispressed = false;
        this.bgcolorflag = false;
        this.floatingButtonCss = ' floatingbutton-';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('floatingBtn');
        this.addCSSClasses();
    }
    /**
     * @return {?}
     */
    addCSSClasses() {
        if (this.top || this.bottom || this.right || this.left) {
            this.absoluteposition = true;
        }
        this.positionclass = '';
        if (this.relative && !this.absolute) {
            this.positionclass = ' floatingbutton-relative ';
            this.top = '';
            this.left = '';
            this.right = '';
            this.bottom = '';
        }
        else if (this.absolute) {
            this.positionclass = 'floatingbutton-absolute ';
        }
        else {
            this.positionclass = ' floatingbutton-fixed ';
        }
        if (!this.absoluteposition && !this.relative) {
            this.btnPositionCss();
        }
        if (this.block === 'circle') {
            this.setCricle();
        }
        else if (this.block === 'square') {
            this.positionclass = this.positionclass + ' floatingbutton-square';
        }
        if (this.bgcolor.length > 1) {
            this.bgcolorflag = true;
            this.type = 'default';
            this.getPositionClass();
        }
        else {
            this.getPositionClass();
        }
        return this.positionclass;
    }
    /**
     * @return {?}
     */
    getPositionClass() {
        this.positionclass = this.disabled ? this.positionclass + this.floatingButtonCss + this.type + '-disabled' :
            this.positionclass + this.floatingButtonCss + this.type;
    }
    /**
     * @return {?}
     */
    setCricle() {
        if (this.size && (this.size === 'large' || this.size === 'small')) {
            this.positionclass = this.positionclass + ' floatingbutton-circle-' + this.size;
        }
        else {
            this.positionclass = this.positionclass + ' floatingbutton-circle';
        }
        this.label = '';
    }
    /**
     * @return {?}
     */
    btnPositionCss() {
        if (this.verticalposition === null) {
            this.verticalposition = 'top';
        }
        else if (this.horizontalposition === null) {
            this.horizontalposition = 'right';
        }
        this.positionclass = this.positionclass + this.floatingButtonCss +
            this.verticalposition + this.floatingButtonCss + this.horizontalposition +
            ' floatingbutton-default';
    }
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    buttonClick(clickEvent) {
        this.ispressed = !this.ispressed;
        if (!this.disabled) {
            this.onClick.emit({ thisObj: this, event: clickEvent });
        }
    }
    /**
     * @param {?} event1
     * @return {?}
     */
    togglebtn(event1) {
        this.ispressed = !this.ispressed;
        if (!this.disabled) {
            this.onClick.emit({ thisObj: this, event: event1 });
        }
    }
    /**
     * @param {?} inputType
     * @return {?}
     */
    createCompId(inputType) {
        return inputType + '_' + Math.floor(Math.random() * 1000 + 999);
    }
}
AmexioFloatingButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-floating-button',
                template: `
    <div [ngClass]="{floatingbtntooltip: tooltip}">
        <div class="floatingbutton" title="" role="button" tabindex="1" [attr.aria-pressed]="ispressed" attr.aria-describedby="{{componentId}}" (keyup.enter)="togglebtn($event)" (keyup.space)="togglebtn($event)" [ngClass]="addCSSClasses()" [ngStyle]="{'top':top,'bottom':bottom,'left':left,'right':right, 'background-color': bgcolorflag ? bgcolor : ''}"
            (click)="buttonClick($event)">
            <!-- attr.color="iconcolor" -->
            <amexio-c-icon *ngIf="icon" [customclass]="icon" [color]="iconcolor">
            </amexio-c-icon>
            {{label}}

        </div>
        <span id="{{componentId}}" role="tooltip" *ngIf="tooltip" class="floatingbtntooltiptext">{{tooltip}}</span>

    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
AmexioFloatingButtonComponent.ctorParameters = () => [];
AmexioFloatingButtonComponent.propDecorators = {
    verticalposition: [{ type: Input, args: ['vertical-position',] }],
    horizontalposition: [{ type: Input, args: ['horizontal-position',] }],
    top: [{ type: Input, args: ['position-top',] }],
    bottom: [{ type: Input, args: ['position-bottom',] }],
    left: [{ type: Input, args: ['position-left',] }],
    right: [{ type: Input, args: ['position-right',] }],
    label: [{ type: Input, args: ['label',] }],
    block: [{ type: Input, args: ['block',] }],
    icon: [{ type: Input, args: ['icon',] }],
    iconcolor: [{ type: Input, args: ['color',] }],
    bgcolor: [{ type: Input, args: ['bg-color',] }],
    type: [{ type: Input, args: ['type',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    relative: [{ type: Input, args: ['relative',] }],
    onClick: [{ type: Output }],
    size: [{ type: Input, args: ['size',] }],
    tooltip: [{ type: Input, args: ['tool-tip',] }],
    absolute: [{ type: Input, args: ['absolute',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 26/2/2018.
*/
class AmexioFloatingGroupButtonComponent extends ListBaseDatepickerComponent {
    /**
     * @param {?} elementref
     * @param {?} cdf
     * @param {?} renderer
     */
    constructor(elementref, cdf, renderer) {
        super(renderer, elementref, cdf);
        this.elementref = elementref;
        this.cdf = cdf;
        /*
          Properties
          name : relative
          datatype : boolean
          version : 4.1 onwards
          default : none
          description : Place floating buttong at relative position
          */
        this.relative = false;
        /*
          Events
          name : onClick
          datatype : any
          version : none
          default : none
          description : Event is fired when button is click
          */
        this.onClick = new EventEmitter();
        this.togglefloatinggroup = false;
        this.ispressed = false;
        this.color = 'red-color';
        this.datacount = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dropdownstyle = { visibility: 'hidden' };
        if (this.data && this.data.length > 0) {
            this.datacount = this.data.length;
            this.data.forEach((node, index) => {
                if (!node['type']) {
                    node['type'] = this.type;
                    node['index'] = index;
                    node['typeclass'] = 'floatingbutton-' + this.type;
                }
                else {
                    node['index'] = index;
                    node['typeclass'] = 'floatingbutton-' + node['type'];
                }
                this.addCssToBtnGroup();
            });
        }
    }
    /**
     * @return {?}
     */
    addCssToBtnGroup() {
        if (this.data && this.data.length > 0) {
            this.data.forEach((node) => {
                if (this.size && (this.size === 'large')) {
                    node['typeclass'] = node['typeclass'] + ' floatingbutton-circle-' + this.size;
                }
                if (this.size && (this.size === 'small')) {
                    node['typeclass'] = node['typeclass'] + ' floatingbutton-circle-' + this.size;
                }
                if ((this.size !== 'large') && (this.size !== 'small')) {
                    node['typeclass'] = node['typeclass'] + ' floatingbutton-circle';
                }
            });
        }
    }
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    buttonClick(clickEvent) {
        this.ispressed = !this.ispressed;
        const /** @type {?} */ x = clickEvent.currentTarget.getBoundingClientRect().left;
        const /** @type {?} */ y = clickEvent.currentTarget.getBoundingClientRect().top;
        if (!this.disabled) {
            if (this.size === 'small' && this.floatinggroupposition === 'bottom') {
                this.floatinggroupxposition = (x) + 'px';
                this.floatinggroupyposition = (y + 34) + 'px';
            }
            if (this.size === 'large' && this.floatinggroupposition === 'bottom') {
                this.floatinggroupxposition = (x) + 'px';
                this.floatinggroupyposition = (y + 108) + 'px';
            }
            if (((this.size !== 'large') && (this.size !== 'small')) && this.floatinggroupposition === 'bottom') {
                this.floatinggroupxposition = (x) + 'px';
                this.floatinggroupyposition = (y + 70) + 'px';
            }
            this.floatingBtnGroupTopPostion(event);
            this.toggleVisibility();
            this.togglefloatinggroup = !this.togglefloatinggroup;
            this.onClick.emit({ thisObj: this, event: clickEvent });
        }
    }
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    floatingBtnGroupTopPostion(clickEvent) {
        const /** @type {?} */ x = clickEvent.currentTarget.getBoundingClientRect().left;
        const /** @type {?} */ y = clickEvent.currentTarget.getBoundingClientRect().top;
        if (this.size === 'small' && this.floatinggroupposition === 'top') {
            this.floatinggroupxposition = (x) + 'px';
            this.floatinggroupyposition = (y - (38 * this.datacount)) + 'px';
        }
        if (this.size === 'large' && this.floatinggroupposition === 'top') {
            this.floatinggroupxposition = (x) + 'px';
            this.floatinggroupyposition = (y - (108 * this.datacount)) + 'px';
        }
        if (((this.size !== 'large') && (this.size !== 'small')) && this.floatinggroupposition === 'top') {
            this.floatinggroupxposition = (x) + 'px';
            this.floatinggroupyposition = (y - (80 * this.datacount)) + 'px';
        }
    }
    /**
     * @return {?}
     */
    toggleVisibility() {
        if (this.dropdownstyle.visibility === 'visible') {
            super.itemClicked();
        }
        else {
            const /** @type {?} */ event = '';
            super.focus(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFloatingButtonClick(event) {
        this.buttonClick(event.event);
    }
    /**
     * @param {?} node
     * @param {?} clickEvent
     * @return {?}
     */
    onButtonClick(node, clickEvent) {
        this.toggleVisibility();
        this.togglefloatinggroup = !this.togglefloatinggroup;
        this.onClick.emit({ this: node, parent: this, event: clickEvent });
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowDown(ref) {
        let /** @type {?} */ trefid;
        const /** @type {?} */ refId = (parseInt(ref.id, 10));
        if (refId === (this.data.length - 1)) {
            trefid = 0;
        }
        else {
            trefid = refId + 1;
        }
        document.getElementById((trefid).toString()).focus();
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowUp(ref) {
        let /** @type {?} */ trefid;
        const /** @type {?} */ refId = (parseInt(ref.id, 10));
        if (refId === 0) {
            trefid = this.data.length - 1;
        }
        else {
            trefid = refId - 1;
        }
        document.getElementById((trefid).toString()).focus();
    }
}
AmexioFloatingGroupButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-floating-group-button',
                template: `
 
 
 
 
     <div id="parentdiv" role="menu" [attr.aria-expanded]="togglefloatinggroup"
     tabindex="-1" [attr.aria-pressed]="ispressed">
       <amexio-floating-button 
           (onClick)="onFloatingButtonClick($event)"
           [vertical-position]="verticalposition" 
           [horizontal-position]="horizontalposition"
           [icon]="icon" 
           [type]="type" 
           [disabled]="disabled"
           [size]="size"
           [relative]="relative"
           [position-top]="top"
           [position-bottom]="bottom"
           [position-left]="left" 
           [position-right]="right">
       </amexio-floating-button>
    </div>


    <div 

       class="floatinggroup" 
       *ngIf="togglefloatinggroup"
       tabindex="-1"
       [ngStyle]="{'top':floatinggroupyposition, 'left':floatinggroupxposition}">

       <div #ref attr.id="{{node.index}}" role="button" attr.aria-label="{{node.label}}" role="options"
        class="floatinggroupitems" style= "text-align:center;"

           tabindex="1" *ngFor="let node of data" (keyup.enter)="onButtonClick(node,$event)" (keyup.arrowdown)="arrowDown(ref,node)"
           (keyup.arrowup)="arrowUp(ref,node)">
           <div *ngIf="node.icon" role="tooltip"  [ngClass]="node.typeclass" (click)="onButtonClick(node,$event)">
               <amexio-c-icon [customclass]="node.icon">
               </amexio-c-icon>
           </div>
       </div>
    </div> 
  `,
            },] },
];
/** @nocollapse */
AmexioFloatingGroupButtonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Renderer2 }
];
AmexioFloatingGroupButtonComponent.propDecorators = {
    verticalposition: [{ type: Input, args: ['vertical-position',] }],
    horizontalposition: [{ type: Input, args: ['horizontal-position',] }],
    top: [{ type: Input, args: ['position-top',] }],
    size: [{ type: Input, args: ['size',] }],
    bottom: [{ type: Input, args: ['position-bottom',] }],
    left: [{ type: Input, args: ['position-left',] }],
    right: [{ type: Input, args: ['position-right',] }],
    icon: [{ type: Input, args: ['icon',] }],
    type: [{ type: Input, args: ['type',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    relative: [{ type: Input, args: ['relative',] }],
    floatinggroupposition: [{ type: Input, args: ['floating-group-position',] }],
    data: [{ type: Input, args: ['data',] }],
    onClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
const noop$10 = () => {
};
class AmexioMultipleDatePickerComponent extends ListBaseDatepickerComponent {
    /**
     * @param {?} element
     * @param {?} cdf
     * @param {?} renderer
     */
    constructor(element, cdf, renderer) {
        super(renderer, element, cdf);
        this.element = element;
        this.cdf = cdf;
        /*
           Properties
           name : date-picker
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : Enable/Disable Date Picker
           */
        this.datepicker = true;
        /*
          Properties
          name : field-label
          datatype : string
          version : 5.5.5 onwards
          default :
          description :The label of this field
          */
        this.placeholder = '';
        /*
           Properties
           name : disabled
           datatype : boolean
           version : 4.1.5 onwards
           default : false
           description : Disable Date/Time Picker field
           */
        this.disabled = false;
        /*
           Properties
           name : diabled-date
           datatype :  any
           version : 4.2 onwards
           default : none
           description : sets disabled dates range
           */
        this.diabledDate = [];
        /*
           Properties
           name : inline-datepicker
           datatype :  boolean
           version : 4.2 onwards
           default : none
           description : sets inline calender
           */
        this.inlineDatepicker = false;
        /*
           Properties
           name : dropdown-datepicker
           datatype :  boolean
           version : 4.2 onwards
           default : none
           description : sets dropdown datepicker
           */
        this.dropdownDatepicker = false;
        /*
           Properties
           name : required
           datatype : boolean
           version : 4.0 onwards
           default : false
           description : Flag to allow blank field or not
           */
        this.required = false;
        this.itterablemontharray = [];
        this.montharray = [];
        /*
           Events
           name : blur
           description : On blur event
           */
        // @Output() blur: EventEmitter<any> = new EventEmitter<any>();
        /*
           Properties
           name : change
           description : On field value change event
           */
        this.change = new EventEmitter();
        /*
           Properties
           name : input
           description : On input event field.
           */
        this.input = new EventEmitter();
        /*
           Properties
           name : focus
           description : On field focus event
           */
        // @Output() focus: EventEmitter<any> = new EventEmitter<any>();
        this.inputtabindex = 0;
        this.daystabindex = -1;
        this.drop = false;
        this.tempFlag = true;
        this.hostFlag = false;
        this.count = 0;
        this.isComponentValid = new EventEmitter();
        this.backArrowFlag = false;
        this.forwardArrowFlag = false;
        this.okispressed = false;
        this.cancelispressed = false;
        this.innerValue = '';
        this.onTouchedCallback = noop$10;
        this.onChangeCallback = noop$10;
        this.viewmode = '1';
        this.yearList1 =
            [{ year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
                { year: 0, flag: false, disabled: false },
            ];
        // generate yearlist1 ids
        this.yearList1.forEach((yearlist1element) => {
            yearlist1element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.yearList2 = [{ year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }, { year: 0, flag: false, disabled: false },
            { year: 0, flag: false, disabled: false }];
        // generate yearlist2 ids
        this.yearList2.forEach((yearlist2element) => {
            yearlist2element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.monthList1 = [
            { name: 'Jan', flag: false, num: 4, fullname: 'January' },
            { name: 'Feb', flag: false, fullname: 'febuary' },
            { name: 'Mar', flag: false, fullname: 'march' },
            { name: 'Apr', flag: false, fullname: 'april' },
            { name: 'May', flag: false, fullname: 'may' },
            { name: 'Jun', flag: false, fullname: 'june' },
        ];
        // generate id for monthlist1
        this.monthList1.forEach((monthlist1element) => {
            monthlist1element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.monthList2 = [
            { name: 'Jul', flag: false, fullname: 'july' },
            { name: 'Aug', flag: false, fullname: 'august' },
            { name: 'Sep', flag: false, fullname: 'september' },
            { name: 'Oct', flag: false, fullname: 'october' },
            { name: 'Nov', flag: false, fullname: 'november' },
            { name: 'Dec', flag: false, fullname: 'december' },
        ];
        // generate id for monthlist 2
        this.monthList2.forEach((monthlist2element) => {
            monthlist2element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
        });
        this.minDate = '';
        this.maxDate = '';
        this.elementId = new Date().getTime() + '';
        this.selectedDate = new Date();
        this.currrentDate = new Date();
        this.curYear = this.currrentDate.getFullYear();
        let /** @type {?} */ i = 0;
        let /** @type {?} */ j = 0;
        for (i = 4; i >= 0; i--) {
            this.yearList1[j].year = this.curYear - i;
            j++;
        }
        j = 0;
        for (i = 1; i <= 5; i++) {
            this.yearList2[j].year = this.curYear + i;
            j++;
        }
        this.daysTitle = [];
        this.daysArray = [];
        this.completeDaysArray = [];
        this.timepicker = false;
        this.hrs = this.currrentDate.getHours();
        this.min = this.currrentDate.getMinutes();
        this.initDaysTitle();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.calculateScreenWidth();
        let /** @type {?} */ i;
        for (i = 1; i <= this.numberofmonths; i++) {
            this.itterablemontharray.push(i);
        }
        if (this.inlineDatepicker) {
            this.showToolTip = true;
            this.dropdownstyle = { visibility: 'visible' };
        }
        this.isValid = !this.required;
        this.isComponentValid.emit(!this.required);
        if (this.dateformat != null) {
            this.dateformat = 'dd/MM/yyyy';
        }
        const /** @type {?} */ d = new Date(this.currrentDate);
        for (i = 0; i < this.numberofmonths; i++) {
            const /** @type {?} */ obj = {};
            if (i === 0) {
                d.setMonth(d.getMonth());
            }
            else {
                d.setMonth(d.getMonth() + 1);
            }
            obj['date'] = new Date(d);
            this.createDaysForCurrentMonths(d);
            obj['montharray'] = this.daysArray;
            obj['month'] = this.getFullMonthName(d);
            obj['year'] = d.getFullYear();
            this.completeDaysArray.push(obj);
        }
    }
    /**
     * @return {?}
     */
    initDaysTitle() {
        this.daysTitle.push({ text: 'Mo' });
        this.daysTitle.push({ text: 'Tu' });
        this.daysTitle.push({ text: 'We' });
        this.daysTitle.push({ text: 'Th' });
        this.daysTitle.push({ text: 'Fr' });
        this.daysTitle.push({ text: 'Sa' });
        this.daysTitle.push({ text: 'Su' });
    }
    /**
     * @param {?} selectedPeriod
     * @return {?}
     */
    createDaysForCurrentMonths(selectedPeriod) {
        this.daysArray = [];
        const /** @type {?} */ date = new Date(selectedPeriod.getFullYear(), selectedPeriod.getMonth(), 1, 0, 0, 0, 0); // Starting at the 1st of the month
        const /** @type {?} */ extras = (date.getDay() + 6) % 7; // How many days of the last month do we need to include?
        date.setDate(date.getDate() - extras); // Skip back to the previous monday
        while (this.daysArray.length < 6) {
            const /** @type {?} */ rowDays = [];
            for (let /** @type {?} */ i = 0; i < 7; i++) {
                const /** @type {?} */ day = {
                    date: null, selected: false, isCurrentMonth: null, isDisabled: false,
                };
                day.date = new Date(date.getTime());
                day.isCurrentMonth = (date.getMonth() === selectedPeriod.getMonth());
                day['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
                day['fulldate'] = (day.date).getDate() + ' ' +
                    this.getFullMonthName(day.date) + ' ' + (day.date).getFullYear() +
                    ' ' + this.getFullDayName(day.date);
                if (this.dateModel && (date.getMonth() === this.dateModel.getMonth()) &&
                    (date.getDate() === this.dateModel.getDate())) {
                    day.selected = true;
                }
                else if ((date.getMonth() === this.currrentDate.getMonth()) &&
                    (date.getDate() === this.currrentDate.getDate())) {
                    if (this.dateModel) {
                        day.selected = false;
                        day['tabindex'] = -1;
                    }
                    else {
                        day.selected = true;
                        day['tabindex'] = 1;
                    }
                }
                rowDays.push(day);
                date.setDate(date.getDate() + 1);
            }
            this.daysArray.push(rowDays);
        }
    }
    /**
     * @param {?} recevieddate
     * @return {?}
     */
    getFullMonthName(recevieddate) {
        const /** @type {?} */ months = ['January', 'Febuary', 'March', 'April', 'May',
            'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        const /** @type {?} */ datemonth = recevieddate.getMonth();
        let /** @type {?} */ monthString = '';
        months.forEach((element, index) => {
            if (datemonth === index) {
                monthString = element;
            }
        });
        return monthString;
    }
    /**
     * @param {?} receiveddate
     * @return {?}
     */
    getFullDayName(receiveddate) {
        const /** @type {?} */ weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday',
            'Thursday', 'Friday', 'Saturday'];
        const /** @type {?} */ day = receiveddate.getDay();
        let /** @type {?} */ dayname = '';
        weekdays.forEach((element, index) => {
            if (day === index) {
                dayname = element;
            }
        });
        return dayname;
    }
    /**
     * @param {?} operation
     * @param {?} event
     * @return {?}
     */
    updateMonthList(operation, event) {
        this.dropdownstyle = { visibility: 'visible' };
        event.stopPropagation();
        if (operation === 'plus') {
            // call plus function
            this.incrementMonthList(event);
        }
        if (operation === 'minus') {
            // call minus function
            this.decrementMonthList(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    incrementMonthList(event) {
        this.completeDaysArray.forEach((singleDayArray) => {
            // date updation
            const /** @type {?} */ d = new Date(singleDayArray.date);
            d.setMonth(d.getMonth() + this.numberofmonths);
            this.createDaysForCurrentMonths(d);
            singleDayArray.date = d;
            singleDayArray.montharray = this.daysArray;
            singleDayArray.month = this.getFullMonthName(d);
            singleDayArray.year = d.getFullYear();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    decrementMonthList(event) {
        this.completeDaysArray.forEach((singleDayArray) => {
            // date updation
            const /** @type {?} */ d = new Date(singleDayArray.date);
            d.setMonth(d.getMonth() - this.numberofmonths);
            this.createDaysForCurrentMonths(d);
            singleDayArray.date = d;
            singleDayArray.montharray = this.daysArray;
            singleDayArray.month = this.getFullMonthName(d);
            singleDayArray.year = d.getFullYear();
        });
    }
    /**
     * @param {?} dateObj
     * @param {?} event
     * @return {?}
     */
    onDateClick(dateObj, event) {
        if (dateObj.isDisabled === false) {
            this.change.emit(dateObj.date);
            if (this.inlineDatepicker === false) {
                super.itemClicked();
            }
            this.hostFlag = true;
            this.selectedDate = dateObj.date;
            this.selectedDate.setHours(this.hrs);
            this.selectedDate.setMinutes(this.min);
            this.resetSelection(dateObj.date);
            this.dateModel = this.selectedDate;
            this.value = this.selectedDate;
            this.isValid = true;
            this.isComponentValid.emit(true);
            if (this.inlineDatepicker) {
                this.showToolTip = true;
            }
            else {
                this.showToolTip = !this.showToolTip;
            }
        }
        else {
            event.stopPropagation();
        }
    }
    /**
     * @param {?} dateObj
     * @return {?}
     */
    resetSelection(dateObj) {
        for (const /** @type {?} */ i of this.daysArray) {
            for (const /** @type {?} */ j of i) {
                const /** @type {?} */ day = j;
                if (day.date.getTime() === dateObj.getTime()) {
                    day.selected = true;
                }
                else {
                    day.selected = false;
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInput(event) {
        if (event.target.value != null && event.target.value !== '') {
            const /** @type {?} */ timeValue = event.target.value.split(':');
            if (timeValue != null) {
                const /** @type {?} */ hrs = parseInt(timeValue[0].trim(), 10);
                const /** @type {?} */ mins = parseInt(timeValue[1].trim(), 10);
                this.selectedDate.setHours(hrs);
                this.selectedDate.setMinutes(mins);
                this.hrs = hrs;
                this.min = mins;
                this.value = this.selectedDate;
                event.stopPropagation();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextMonth(event) {
        this.setVisibility();
        this.setDateData('plus', 1, event);
    }
    /**
     * @return {?}
     */
    setVisibility() {
        this.dropdownstyle = { visibility: 'visible' };
        this.disableddays(this.diabledDate);
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevMonth(event) {
        this.setVisibility();
        this.setDateData('minus', 1, event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    nextYear(event) {
        this.setDateData1('plus', 12, event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    prevYear(event) {
        this.setDateData1('minus', 12, event);
    }
    /**
     * @param {?} state1
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    setDateData(state1, mon, event) {
        const /** @type {?} */ d = new Date(this.currrentDate.getFullYear(), this.currrentDate.getMonth(), this.currrentDate.getDate());
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        // checks if selected date is within maximum range of month
        if (state1 === 'plus') {
            this.setPlusData(d, max, mon);
        }
        else if (state1 === 'minus') {
            this.setMinusData(d, min, mon);
        }
        this.currrentDate = d;
        this.initDate();
        event.stopPropagation();
    }
    /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    setPlusData(d, max, mon) {
        if (this.maxDate.length > 0) {
            if (d.getFullYear() === max.getFullYear()) {
                this.setMaxFullYear(d, max, mon);
            }
            else {
                // logic to chk if year is valid
                if (d.getFullYear() <= max.getFullYear()) {
                    d.setMonth(d.getMonth() + mon);
                }
            }
        }
        else {
            // outer ends
            d.setMonth(d.getMonth() + mon);
        } // checks if selected date is within minimum range of month
    }
    /**
     * @param {?} d
     * @param {?} max
     * @param {?} mon
     * @return {?}
     */
    setMaxFullYear(d, max, mon) {
        if ((d.getMonth() !== max.getMonth()) && d.getFullYear() <= max.getFullYear() && d.getMonth() <= max.getMonth()) {
            d.setMonth(d.getMonth() + mon);
        }
    }
    /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    setMinusData(d, min, mon) {
        if (this.minDate.length > 0) {
            if (d.getFullYear() === min.getFullYear()) {
                this.setMinFullYear(d, min, mon);
            }
            else {
                d.setMonth(d.getMonth() - mon);
            }
        }
        else {
            d.setMonth(d.getMonth() - mon);
        }
    }
    /**
     * @param {?} d
     * @param {?} min
     * @param {?} mon
     * @return {?}
     */
    setMinFullYear(d, min, mon) {
        if ((d.getMonth() !== min.getMonth()) && d.getFullYear() >= min.getFullYear() && d.getMonth() >= min.getMonth()) {
            // logic to chk if year is valid
            d.setMonth(d.getMonth() - mon);
        }
    }
    /**
     * @param {?} state1
     * @param {?} mon
     * @param {?} event
     * @return {?}
     */
    setDateData1(state1, mon, event) {
        const /** @type {?} */ d = new Date(this.currrentDate.getFullYear(), this.currrentDate.getMonth(), this.currrentDate.getDate());
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        // checks if selected date is within maximum range of year
        if (state1 === 'plus') {
            if (this.maxDate.length > 0) {
                if (d.getFullYear() <= max.getFullYear() - 1) {
                    d.setMonth(d.getMonth() + mon);
                }
            }
            else {
                d.setMonth(d.getMonth() + mon);
            } // checks if selected date is within minimum range of year
        }
        else if (state1 === 'minus') {
            if (this.minDate.length > 0) {
                if (d.getFullYear() >= min.getFullYear() + 1) {
                    d.setMonth(d.getMonth() - mon);
                }
            }
            else {
                d.setMonth(d.getMonth() - mon);
            }
        }
        this.currrentDate = d;
        this.initDate();
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    setToday() {
        this.currrentDate = new Date();
        this.initDate();
        this.showToolTip = !this.showToolTip;
    }
    /**
     * @return {?}
     */
    initDate() {
        this.daysArray = [];
        this.createDaysForCurrentMonths(this.currrentDate);
        this.daysArray.forEach((dayrow, outerindex) => {
            dayrow.forEach((element, innerindex) => {
                if (this.currrentDate === new Date(element.date)) {
                    const /** @type {?} */ itemid = this.daysArray[outerindex][innerindex];
                    document.getElementById(itemid['id']).focus();
                }
            });
        });
        this.selectedDate = this.currrentDate;
        this.dateModel = this.selectedDate;
        this.value = this.selectedDate;
        this.innerValue = '';
    }
    /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    plus(type, event) {
        if (type === 'min') {
            if (this.min === 59) {
                this.min = -1;
                this.hrs++;
            }
            this.min++;
        }
        if (type === 'hrs') {
            this.hrs++;
        }
        if (this.hrs === 24) {
            this.hrs = 0;
        }
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        this.change.emit(this.value);
        event.stopPropagation();
    }
    /**
     * @param {?} type
     * @param {?} event
     * @return {?}
     */
    minus(type, event) {
        if (type === 'min') {
            if (this.min === 0) {
                this.min = 60;
                this.hrs--;
            }
            this.min--;
        }
        if (type === 'hrs') {
            this.hrs--;
        }
        if (this.hrs === 0) {
            this.hrs = 23;
        }
        this.selectedDate.setHours(this.hrs);
        this.selectedDate.setMinutes(this.min);
        this.value = this.selectedDate;
        this.isValid = true;
        this.isComponentValid.emit(true);
        this.change.emit(this.value);
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onTouchedCallback();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== '') {
            if (value !== this.innerValue) {
                this.validateWriteValue(value);
            }
        }
        else {
            this.dateModel = '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    validateWriteValue(value) {
        this.innerValue = value;
        if (this.innerValue instanceof Date || ('number' === typeof this.innerValue)) {
            if (('number' === typeof this.innerValue)) {
                this.innerValue = new Date(this.innerValue);
            }
            this.dateModel = this.innerValue;
            this.currrentDate = this.dateModel;
            this.selectedDate = this.currrentDate;
            this.createDaysForCurrentMonths(this.dateModel);
            if (this.required) {
                this.isValid = true;
            }
        }
        else {
            this.negateisValid();
        }
    }
    /**
     * @return {?}
     */
    negateisValid() {
        this.isValid = false;
        this.hrs = 0;
        this.min = 0;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onFocus(elem) {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onFocusOut(value) {
        if (isNaN(Date.parse(value.value))) {
            this.isValid = false;
            value.value = '';
        }
        else {
            this.value = Date.parse(value.value);
            this.isValid = true;
        }
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    openPicker(elem) {
        this.inputtabindex = -1;
        this.daystabindex = 1;
        if (this.disabled === false) {
            super.focus(elem);
            this.hostFlag = false;
            this.pickerele = elem;
            if (this.inlineDatepicker) {
                this.showToolTip = this.inlineDatepicker;
                this.setFocus();
            }
            else {
                this.showToolTip = true;
            }
            const /** @type {?} */ visibility = this.dropdownstyle.visibility;
            this.dropdownstyle.visibility = visibility;
            this.dropdownstyle.position = 'fixed';
            this.disableddays(this.diabledDate);
            this.setFocus();
        }
    }
    /**
     * @return {?}
     */
    setFocus() {
        setTimeout(() => {
            // focus code starts
            this.daysArray.forEach((row, index) => {
                row.forEach((day, innerindex) => {
                    if (day.selected) {
                        document.getElementById(day.id).focus();
                    }
                });
            });
        }, 0);
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
    }
    /**
     * @return {?}
     */
    onSelect() {
        this.showToolTip = false;
    }
    /**
     * @param {?} days
     * @return {?}
     */
    validateDays(days) {
        // check1: if min max is null return false
        if (this.maxDate.length <= 0 && this.minDate.length <= 0) {
            return false;
        }
    }
    /**
     * @param {?} dates
     * @return {?}
     */
    disableddays(dates) {
        if (dates) {
            dates.forEach((element) => {
                const /** @type {?} */ From = new Date(element.from);
                const /** @type {?} */ To = new Date(element.to);
                this.daysArray.forEach((element2) => {
                    element2.forEach((element1) => {
                        if (element1.date.getFullYear() <= To.getFullYear() && element1.date.getMonth()
                            <= To.getMonth() && element1.date.getDate() <= To.getDate() && element1.date.getFullYear() >= From.getFullYear() &&
                            element1.date.getMonth() >= From.getMonth() &&
                            element1.date.getDate() >= From.getDate()) {
                            element1.isDisabled = true;
                        }
                    });
                });
            });
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    elementFlagMethod(element) {
        if (element.flag) {
            element.flag = false;
        }
    }
    /**
     * @return {?}
     */
    negateDrop() {
        this.cancelispressed = true;
        this.hostFlag = true;
        this.drop = false;
        this.showToolTip = true;
        this.tempFlag = true;
    }
    /**
     * @param {?} element
     * @param {?} month
     * @return {?}
     */
    chkMonth(element, month) {
        if (element.name === month.name) {
            element.flag = true;
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    yearFlagNegate(element) {
        this.elementFlagMethod(element);
    }
    /**
     * @param {?} element
     * @param {?} year
     * @return {?}
     */
    yearFlag(element, year) {
        if (element.year === year.year) {
            element.flag = true;
        }
    }
    /**
     * @return {?}
     */
    cancelDropdown() {
        this.drop = false;
        this.showToolTip = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    arrowClickBack(event) {
        let /** @type {?} */ i;
        // disable flag logic
        this.disableYearFlag();
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            // arrow click logic
            this.backArrow();
        }
        else {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year - 10;
                this.yearList2[i].year = this.yearList2[i].year - 10;
            } // for ends
        } // main else ends
        // disable flag logic
        this.disableYearFlag();
        // rechking arrow flags after reinitialization of yrlist1 & 2
        this.rechkYearFlag();
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    backArrow() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach((element) => {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear() && element.year !== min.getFullYear()) {
                this.forwardArrowFlag = true;
                this.backArrowFlag = false;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = false;
            }
        });
        // resets Arrow Flag
        this.resetYearFlag();
    }
    /**
     * @param {?} element
     * @param {?} min
     * @return {?}
     */
    alterBackArrow(element, min) {
        if (element.year === min.getFullYear()) {
            this.backArrowFlag = true;
        }
    }
    /**
     * @return {?}
     */
    resetArrowFlag() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList2.forEach((element) => {
            this.alterBackArrow(element, min);
            if (element.year === max.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.forwardArrowFlag = true;
            }
        });
    }
    /**
     * @return {?}
     */
    resetYearFlag() {
        let /** @type {?} */ i;
        if (!this.backArrowFlag) {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year - 10;
                this.yearList2[i].year = this.yearList2[i].year - 10;
                this.yearList1[i].disabled = false;
                this.yearList2[i].disabled = false;
            }
        } /* if ends */
    }
    /**
     * @param {?} element
     * @return {?}
     */
    alterBackForwardArrow(element) {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        if (element.year === min.getFullYear()) {
            this.backArrowFlag = true;
        }
        if (element.year === max.getFullYear() ||
            (element.year === min.getFullYear() && element.year === max.getFullYear())) {
            this.forwardArrowFlag = true;
        }
    }
    /**
     * @return {?}
     */
    forwardArrow() {
        let /** @type {?} */ i;
        // chk yearlist1
        this.chkYearList1();
        this.yearList2.forEach((element) => {
            this.alterBackForwardArrow(element);
        });
        if (!this.forwardArrowFlag) {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year + 10;
                this.yearList2[i].year = this.yearList2[i].year + 10;
                this.yearList1[i].disabled = false;
                this.yearList2[i].disabled = false;
            } // for ends
        } // if ends
    }
    /**
     * @return {?}
     */
    chkYearList1() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach((element) => {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = true;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = false;
            }
            if (element.year === max.getFullYear()) {
                this.forwardArrowFlag = true;
            }
        });
    }
    /**
     * @return {?}
     */
    rechkYearFlag() {
        this.yearList1.forEach((element) => {
            const /** @type {?} */ min = new Date(this.minDate);
            const /** @type {?} */ max = new Date(this.maxDate);
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear()) {
                this.forwardArrowFlag = true;
            }
            if (element.year !== min.getFullYear() && element.year !== max.getFullYear()) {
                this.forwardArrowFlag = false;
                this.backArrowFlag = false;
            }
        });
        this.yearList2.forEach((element) => {
            this.alterBackForwardArrow(element);
        });
    }
    /**
     * @param {?} element
     * @return {?}
     */
    yearFlagDisable(element) {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        if (element.year < min.getFullYear() || element.year > max.getFullYear()) {
            element.disabled = true;
        } // if ends
    }
    /**
     * @return {?}
     */
    disableYearFlag() {
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.yearList1.forEach((element) => {
                this.yearFlagDisable(element);
            }); // for ends
            this.yearList2.forEach((element) => {
                this.yearFlagDisable(element);
            }); // for ends
        } // outer if ends
    }
    /**
     * @param {?} event
     * @return {?}
     */
    arrowClickForward(event) {
        let /** @type {?} */ i;
        // disable flag logic
        this.disableYearFlag();
        if (this.minDate.length > 0 || this.maxDate.length > 0) {
            this.forwardArrow();
        }
        else {
            for (i = 0; i < 5; i++) {
                this.yearList1[i].year = this.yearList1[i].year + 10;
                this.yearList2[i].year = this.yearList2[i].year + 10;
            }
        }
        // disable flag logic
        this.disableYearFlag();
        // rechking arrow flags after reinitialization of yrlist1 & 2
        this.rechkYearFlag();
        event.stopPropagation();
    }
    /**
     * @return {?}
     */
    minMaxDateFound() {
        const /** @type {?} */ min = new Date(this.minDate);
        const /** @type {?} */ max = new Date(this.maxDate);
        this.yearList1.forEach((element) => {
            if (element.year === min.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear()) {
                this.forwardArrowFlag = true;
            }
        });
        this.yearList2.forEach((element) => {
            if (element.year === min.getFullYear()) {
                this.backArrowFlag = true;
            }
            if (element.year === max.getFullYear() ||
                (element.year === min.getFullYear() && element.year === max.getFullYear())) {
                this.forwardArrowFlag = true;
            }
        });
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return (this.value || !this.required) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowright(day, month, event) {
        let /** @type {?} */ currentindex;
        let /** @type {?} */ ismonthchanged = false;
        let /** @type {?} */ drindex;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day['id'] === element['id']) {
                    if (index < dayrow.length - 1) {
                        currentindex = index + 1;
                        drindex = dayrowindex;
                    }
                    else {
                        if ((dayrowindex === (month.length - 1)) && (index === (dayrow.length - 1))) {
                            this.nextMonth(event);
                            ismonthchanged = true;
                        }
                        else {
                            currentindex = 0;
                            drindex = dayrowindex + 1;
                        }
                    }
                }
            });
        });
        this.refactoredRightArrow(ismonthchanged, month, drindex, currentindex);
    }
    /**
     * @param {?} ismonthchanged
     * @param {?} month
     * @param {?} drindex
     * @param {?} currentindex
     * @return {?}
     */
    refactoredRightArrow(ismonthchanged, month, drindex, currentindex) {
        if (!ismonthchanged) {
            this.refactoredFocus(month, drindex, currentindex);
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} month
     * @param {?} drindex
     * @param {?} currentindex
     * @return {?}
     */
    refactoredFocus(month, drindex, currentindex) {
        let /** @type {?} */ itemid;
        itemid = month[drindex][currentindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowleft(day, month, event) {
        let /** @type {?} */ currentindex;
        let /** @type {?} */ drindex;
        let /** @type {?} */ ismonthchanged = false;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day['id'] === element['id']) {
                    if (index > 0) {
                        currentindex = index - 1;
                        drindex = dayrowindex;
                    }
                    else {
                        if (dayrowindex === 0 && index === 0) {
                            this.prevMonth(event);
                            ismonthchanged = true;
                        }
                        else {
                            drindex = dayrowindex - 1;
                            currentindex = 6;
                        }
                    }
                }
            });
        });
        this.refactoredarrow(ismonthchanged, month, drindex, currentindex);
    }
    /**
     * @param {?} ismonthchanged
     * @param {?} month
     * @param {?} drindex
     * @param {?} currentindex
     * @return {?}
     */
    refactoredarrow(ismonthchanged, month, drindex, currentindex) {
        let /** @type {?} */ itemid;
        if (!ismonthchanged) {
            itemid = month[drindex][currentindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowup(day, month, event) {
        let /** @type {?} */ isfirstrow = false;
        let /** @type {?} */ drindex;
        let /** @type {?} */ currentindex;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day.id === element.id) {
                    if (dayrowindex === 0) {
                        isfirstrow = true;
                        this.prevMonth(event);
                    }
                    else {
                        drindex = dayrowindex - 1;
                        currentindex = index;
                    }
                }
            });
        });
        if (!isfirstrow) {
            let /** @type {?} */ itemid;
            itemid = this.daysArray[drindex][currentindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} event
     * @return {?}
     */
    arrowdown(day, month, event) {
        let /** @type {?} */ islastrow = false;
        let /** @type {?} */ drindex;
        let /** @type {?} */ currentindex;
        month.forEach((dayrow, dayrowindex) => {
            dayrow.forEach((element, index) => {
                if (day.id === element.id) {
                    if (dayrowindex === (month.length - 1)) {
                        islastrow = true;
                        this.nextMonth(event);
                    }
                    else {
                        drindex = dayrowindex + 1;
                        currentindex = index;
                    }
                }
            });
        });
        if (!islastrow) {
            let /** @type {?} */ itemid;
            itemid = this.daysArray[drindex][currentindex];
            document.getElementById(itemid['id']).focus();
        }
        else {
            this.setFocus();
        }
    }
    /**
     * @return {?}
     */
    calculateScreenWidth() {
        const /** @type {?} */ screenwidth = window.screen.width;
        this.count = (screenwidth / 290);
    }
}
AmexioMultipleDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-multiple-date-picker',
                template: `
    <!--this div contains fieldlabel inputbox and icon -->
    <div tabindex="{{inputtabindex}}" (keyup.enter)="openPicker(rootDiv)" aria-label="datetimepicker push button" class="inputgroup"
        *ngIf="!inlineDatepicker" #rootDiv>

        <label>
            {{fieldlabel}}
        </label>
        <!-- datepicker input -->
        <ng-container *ngIf="datepicker && !timepicker">
            <input tabindex="-1" type="text" #pickerDt value="{{dateModel|date:dateformat}}" [attr.disabled]="disabled ? true: null"
                [required]="required ? true: null" (blur)="onBlur()" (focusout)="onFocusOut(pickerDt)" class="input-control" [ngStyle]="{'cursor': readonly ? 'not-allowed':'pointer'}"
                [attr.placeholder]="placeholder" />
        </ng-container>

        <div class="drodown-caret-down" [ngStyle]="{'cursor':disabled ? 'not-allowed' : 'pointer'}" (click)="openPicker(rootDiv)">
            <!-- datepicker icon -->
            <ng-container *ngIf="!timepicker">
                <span>
                    <amexio-c-icon key="datepicker_calendar"></amexio-c-icon>
                </span>

            </ng-container>

        </div>


    </div>

    <div [@changeState]="dropdownstyle.visibility" [ngStyle]="dropdownstyle">

        <table>

            <tr>
                <td style="display: inline-flex; flex-flow: wrap">

                    <div tabindex="1" aria-label="previous month list" role="button" style="padding: 125px 0px; cursor:pointer; opacity:0.7"
                        class="float-left" (click)="updateMonthList('minus',$event)" (keyup.enter)="updateMonthList('minus',$event)">

                        <amexio-floating-button [size]="'small'" [relative]="true" [icon]="'fa fa-angle-left'" [type]="'theme-color'">
                        </amexio-floating-button>
                    </div>

                    <ng-container *ngFor="let itemdaysArray of  completeDaysArray; index as i">

                        <span [ngStyle]="{'padding-left': ((i+1) > count) ? '28px':'0px'}">

                            <span style="position: relative;" [ngClass]="{'datetimepicker':!inlineDatepicker}">
                                <!-- datepicker starts -->
                                <span aria-label="datepicker window opened ">
                                    <!-- datepicker header starts and contains: 4 angles drop icon and title -->
                                    <div aria-label="datetimepicker header" class="datetimepickertopbar" aria-label="datepicker header" [ngStyle]="{'display': datepicker ? 'block' : 'none'}">
                                        <ul>

                                            <li>

                                                <span *ngIf="!dropdownDatepicker">
                                                    <!-- {{itemdaysArray.month}} -->
                                                    {{itemdaysArray.date | date:'MMMM'}}

                                                    <br>
                                                    <span class="title" style="cursor:auto">
                                                        {{itemdaysArray.date | date:'y'}}
                                                        <!-- {{itemdaysArray.year}} -->
                                                    </span>
                                                </span>

                                            </li>
                                        </ul>
                                    </div>


                                    <div *ngIf="!drop">
                                        <ul class="weekdays" [ngStyle]="{'display': datepicker ? 'block' : 'none'}">
                                            <li *ngFor="let dayTitle of daysTitle">{{dayTitle.text}}</li>
                                        </ul>

                                        <ul id="{{daystabindex}}" class="days" [ngStyle]="{'display': datepicker ? 'block' : 'none'}">

                                            <ng-container *ngFor="let dayArray of itemdaysArray.montharray">
                                                <li [ngStyle]="{'cursor': day.isDisabled ? 'not-allowed' : 'pointer'}" *ngFor="let day of dayArray" (click)="onDateClick(day, $event)"
                                                    [ngClass]="{'date1':validateDays(day.date) , 'date1':day.isDisabled , 'notclickable':isDisabled}">
                                                    <span [attr.tabindex]="(day.selected ? 1: -1)" id="{{day.id}}" (keyup.arrowleft)="arrowleft(day,daysArray,$event)" (keyup.arrowright)="arrowright(day,daysArray,$event)"
                                                        (keyup.arrowdown)="arrowdown(day,daysArray,$event)" (keyup.arrowup)="arrowup(day,daysArray,$event)"
                                                        (keyup.enter)="onDateClick(day, $event)" attr.aria-label="{{day.fulldate}}"
                                                        (click)="onDateClick(day, $event)" class="day" [ngClass]="{'active':day.selected, 'currentMonth':day.isCurrentMonth, 'notCurrentMonth':!day.isCurrentMonth,'invaliddays':validateDays(day.date), 'disabled':day.isDisabled}">
                                                        {{ day.date | date:'d' }}
                                                    </span>
                                                </li>
                                            </ng-container>



                                        </ul>
                                    </div>
                                </span>
                                <!--datepicker ends  -->

                            </span>

                        </span>
                        <!-- </ng-container> -->
                    </ng-container>


                    <div tabindex="1" aria-label="next month list" role="button" style="padding: 125px 0px; cursor:pointer; opacity:0.7" class="float-right"
                        (click)="updateMonthList('plus',$event)" (keyup.enter)="updateMonthList('plus',$event)">

                        <amexio-floating-button [size]="'small'" [relative]="true" [icon]="'fa fa-angle-right'" [type]="'theme-color'">
                        </amexio-floating-button>

                    </div>
                </td>
            </tr>
        </table>
    </div>
  `,
                animations: [
                    trigger('changeState', [
                        state('visible', style({
                            transform: 'scale(1)',
                        })),
                        state('hidden', style({
                            transform: 'scale(0)',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioMultipleDatePickerComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioMultipleDatePickerComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioMultipleDatePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Renderer2 }
];
AmexioMultipleDatePickerComponent.propDecorators = {
    dateformat: [{ type: Input, args: ['date-format',] }],
    datepicker: [{ type: Input, args: ['date-picker',] }],
    timepicker: [{ type: Input, args: ['time-picker',] }],
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    readonly: [{ type: Input, args: ['read-only',] }],
    minDate: [{ type: Input, args: ['min-date',] }],
    maxDate: [{ type: Input, args: ['max-date',] }],
    diabledDate: [{ type: Input, args: ['disabled-date',] }],
    inlineDatepicker: [{ type: Input, args: ['inline-datepicker',] }],
    dropdownDatepicker: [{ type: Input, args: ['dropdown-datepicker',] }],
    numberofmonths: [{ type: Input, args: ['number-of-months',] }],
    required: [{ type: Input }],
    change: [{ type: Output }],
    input: [{ type: Output }],
    isComponentValid: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioPasswordComponent extends ValueAccessorBase {
    constructor() {
        super();
        this.isValid = false;
        /*
          Properties
          name : has-label
          datatype : boolean
          version : 4.0 onwards
          default : false
          description : flag to set label
          */
        this.haslabel = true;
        /*
          Events
          name : onBlur
          datatype : any
          version : 4.0 onwards
          default :
          description : On blur event
          */
        this.onBlur = new EventEmitter();
        /*
        Events
        name : input
        datatype : any
        version : none
        default :
        description : 	On input event field.
        */
        this.input = new EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On focus event field.
        */
        this.focus = new EventEmitter();
        /*
        Events
        name : change
        datatype : any
        version : none
        default :
        description : On field value change event
        */
        this.change = new EventEmitter();
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pattern(value) {
        if (value != null) {
            this.regEx = new RegExp(this.pattern);
        }
    }
    /**
     * @return {?}
     */
    onblur() {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.showToolTip = true;
        this.focus.emit(this.value);
    }
    /**
     * @return {?}
     */
    onInput() {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    }
    /**
     * @return {?}
     */
    onChangeEv() {
        this.change.emit(this.value);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('passwordinput', this.name);
        this.isValid = this.isFieldValid();
        this.name = this.generateName(this.name, this.fieldlabel, 'passwordinput');
    }
    /**
     * @return {?}
     */
    isFieldValid() {
        return (!this.allowblank && (this.value && ((this.value.length >= this.minlength) && this.value.length > 0)) ||
            (!this.minlength && this.value && this.value.length > 0)) || this.allowblank;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioPasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-password-input',
                template: `



    <div class="inputgroup">

      <label *ngIf="haslabel"  role="password" id="{{componentId}}"  for="{{componentId}}"  [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
          {{fieldlabel}}
      </label>

      <input type="password" 

            role="password" 
            tabindex="1"
            id="{{componentId}}" 
            name="passwordText"
            attr.aria-labelledby="{{componentId}}"
            aria-describedby="passwordDec"
            [attr.aria-required]="!allowblank"
            [attr.aria-invalid]="!isValid "

        
             class="input-control"
             [ngClass]="model.touched ? allowblank ? '' : (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''"
             [(ngModel)]="value"
             (blur)="onblur()" 
             (focus)="onFocus()" 
             (input)="onInput()" 
             (change)="onChangeEv()"
             [name]="name" 
             [pattern]="regEx"
             [attr.placeholder]="placeholder" 
             [maxlength]="maxlength" 
             [minlength]="minlength"
             [attr.disabled]="disabled ? true: null"
             [required]="!allowblank" />


      <ng-container *ngIf="iconfeedback">
          <span class="input-control-feedback">
              <span *ngIf="!isValid && model.touched"><em class="fa fa-times"></em></span>
              <span *ngIf="isValid && model.touched"><em class="fa fa-check"></em></span>
          </span>
      </ng-container>

      <input-help *ngIf="showToolTip && enablepopover" 

      id = "passwordDec"
      role="tooltip"

      [error-msg]="errormsg" 
      [max-error-msg]="maxerrormsg"
      [min-error-msg]="minerrormsg"
      [min-length]="minlength"
      [max-length]="maxlength"
      [min-msg]="minmsg" 
      [max-msg]="maxmsg"
      >
      </input-help>

      <span class="inputfieldbar"></span>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioPasswordComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioPasswordComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioPasswordComponent.ctorParameters = () => [];
AmexioPasswordComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    minlength: [{ type: Input, args: ['min-length',] }],
    maxlength: [{ type: Input, args: ['max-length',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    minerrormsg: [{ type: Input, args: ['min-error-msg',] }],
    maxerrormsg: [{ type: Input, args: ['max-error-msg',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    pattern: [{ type: Input, args: ['pattern',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    onBlur: [{ type: Output }],
    input: [{ type: Output }],
    focus: [{ type: Output }],
    change: [{ type: Output }],
    model: [{ type: ViewChild, args: [NgModel,] }],
    name: [{ type: Input, args: ['name',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioRangeSliderComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?} ngZone
     * @param {?} cd
     */
    constructor(el, renderer, ngZone, cd) {
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.cd = cd;
        this.handleValues = [];
        this.dragData = false;
        this.sliderHandleClick = false;
        this.handleIndex = 0;
        this.animate = false;
        this.disabled = false;
        this.min = 0;
        this.orientation = 'horizontal';
        this.range = false;
        this.fullRange = false;
        this.onChange = new EventEmitter();
        this.onSlideEnd = new EventEmitter();
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.writeValue([0, this.maxRange]);
    }
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    onMouseMove(event, index) {
        if (this.disabled) {
            return;
        }
        this.dragData = true;
        this.updateDomData();
        this.sliderHandleClick = true;
        this.handleIndex = index;
        this.bindDragListeners();
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSlideBarClick(event) {
        if (this.disabled) {
            return;
        }
        if (!this.sliderHandleClick) {
            this.updateDomData();
            this.handleChange(event);
        }
        this.sliderHandleClick = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleChange(event) {
        const /** @type {?} */ handleValue = this.calculateHandleValue(event);
        this.setValueFromHandle(event, handleValue);
    }
    /**
     * @return {?}
     */
    bindDragListeners() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.dragListener) {
                this.dragListener = this.renderer.listen('document', 'mousemove', (event) => {
                    if (this.dragData) {
                        this.ngZone.run(() => {
                            this.handleChange(event);
                        });
                    }
                });
            }
            if (!this.mouseupListener) {
                this.checkMouseUpListener();
            }
        });
    }
    /**
     * @return {?}
     */
    checkMouseUpListener() {
        this.mouseupListener = this.renderer.listen('document', 'mouseup', (event) => {
            if (this.dragData) {
                this.dragData = false;
                this.ngZone.run(() => {
                    if (this.range) {
                        this.onSlideEnd.emit({ originalEvent: event, values: this.values });
                    }
                    else {
                        this.onSlideEnd.emit({ originalEvent: event, value: this.value });
                    }
                });
            }
        });
    }
    /**
     * @return {?}
     */
    unbindDragListeners() {
        if (this.dragListener) {
            this.dragListener();
        }
        if (this.mouseupListener) {
            this.mouseupListener();
        }
    }
    /**
     * @param {?} event
     * @param {?} handleValue
     * @return {?}
     */
    setValueFromHandle(event, handleValue) {
        const /** @type {?} */ newValue = this.getValueFromHandle(handleValue);
        if (this.range) {
            if (this.step) {
                this.handleStepChange(newValue, this.values[this.handleIndex]);
            }
            else {
                this.handleValues[this.handleIndex] = handleValue;
                this.updateValue(newValue, event);
            }
        }
        else {
            if (this.step) {
                this.handleStepChange(newValue, this.value);
            }
            else {
                this.handleValue = handleValue;
                this.updateValue(newValue, event);
            }
        }
    }
    /**
     * @param {?} newValue
     * @param {?} oldValue
     * @return {?}
     */
    handleStepChange(newValue, oldValue) {
        const /** @type {?} */ diff = (newValue - oldValue);
        let /** @type {?} */ val = oldValue;
        if (diff < 0) {
            val = oldValue + Math.ceil(newValue / this.step - oldValue / this.step) * this.step;
        }
        else if (diff > 0) {
            val = oldValue + Math.floor(newValue / this.step - oldValue / this.step) * this.step;
        }
        this.updateValue(val);
        this.updateHandleValue();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.handleValues = [0, this.maxRange];
        if (this.range) {
            this.values = value || [0, this.maxRange];
        }
        else {
            this.value = value || 0;
        }
        this.updateHandleValue();
        this.cd.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setDisabledState(val) {
        this.disabled = val;
    }
    /**
     * @return {?}
     */
    get rangeStartLeft() {
        return (this.isVertical() ? 'auto' : this.handleValues[0] + '%');
    }
    /**
     * @return {?}
     */
    get rangeStartBottom() {
        return this.isVertical() ? this.handleValues[0] + '%' : 'auto';
    }
    /**
     * @return {?}
     */
    get rangeEndLeft() {
        return (this.isVertical() ? 'auto' : this.handleValues[1] + '%');
    }
    /**
     * @return {?}
     */
    get rangeEndBottom() {
        return this.isVertical() ? this.handleValues[1] + '%' : 'auto';
    }
    /**
     * @return {?}
     */
    isVertical() {
        return this.orientation === 'vertical';
    }
    /**
     * @return {?}
     */
    updateDomData() {
        const /** @type {?} */ rect = this.el.nativeElement.children[0].getBoundingClientRect();
        this.initX = rect.left + this.getWindowScrollLeft();
        this.initY = rect.top + this.getWindowScrollTop();
        this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        this.barHeight = this.el.nativeElement.children[0].offsetHeight;
    }
    /**
     * @return {?}
     */
    getWindowScrollTop() {
        const /** @type {?} */ doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
    /**
     * @return {?}
     */
    getWindowScrollLeft() {
        const /** @type {?} */ doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    calculateHandleValue(event) {
        if (this.orientation === 'horizontal') {
            return ((event.pageX - this.initX) * 100) / (this.barWidth);
        }
        else {
            return (((this.initY + this.barHeight) - event.pageY) * 100) / (this.barHeight);
        }
    }
    /**
     * @return {?}
     */
    updateHandleValue() {
        this.max = this.maxRange;
        if (this.range) {
            this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);
            this.handleValues[1] = (this.values[1] > this.max ? this.maxRange : this.values[1] - this.min) * 100 / (this.max - this.min);
        }
        else {
            if (this.value < this.min) {
                this.handleValue = 0;
            }
            else if (this.value > this.max) {
                this.handleValue = this.maxRange;
            }
            else {
                this.handleValue = (this.value - this.min) * this.maxRange / (this.max - this.min);
            }
        }
    }
    /**
     * @param {?} val
     * @param {?=} event
     * @return {?}
     */
    updateValue(val, event) {
        if (this.range) {
            this.updateValueMethodDivided(val, event);
        }
        else {
            if (val < this.min) {
                val = this.min;
                this.handleValue = 0;
            }
            else if (val > this.max) {
                val = this.max;
                this.handleValue = 100;
            }
            this.value = this.getNormalizedValue(val);
            this.onChange.emit({ event1: event, value2: this.value });
        }
        this.onModelChange(this.values);
    }
    /**
     * @param {?} val
     * @param {?=} event
     * @return {?}
     */
    updateValueMethodDivided(val, event) {
        let /** @type {?} */ value = val;
        if (this.handleIndex === 0) {
            if (value < this.min) {
                value = this.min;
                this.handleValues[0] = 0;
            }
            else if (value > this.values[1]) {
                value = this.values[1];
                this.handleValues[0] = this.handleValues[1];
            }
        }
        else {
            if (value > this.max) {
                value = this.max;
                this.handleValues[1] = 100;
            }
            else if (value < this.values[0]) {
                value = this.values[0];
                this.handleValues[1] = this.handleValues[0];
            }
        }
        this.values[this.handleIndex] = this.getNormalizedValue(value);
        this.onChange.emit({ event1: event, values2: this.values });
    }
    /**
     * @param {?} handleValue
     * @return {?}
     */
    getValueFromHandle(handleValue) {
        return (this.max - this.min) * (handleValue / 100) + this.min;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getDecimalsCount(value) {
        if (value && Math.floor(value) !== value) {
            return value.toString().split('.')[1].length || 0;
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getNormalizedValue(val) {
        const /** @type {?} */ decimalsCount = this.getDecimalsCount(this.step);
        if (decimalsCount > 0) {
            return +val.toFixed(decimalsCount);
        }
        else {
            return Math.floor(val);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unbindDragListeners();
    }
}
AmexioRangeSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-value-range',
                template: `
    <div [ngStyle]="style" [class]="styleClass" [ngClass]="{'amexio-slider amexio-slider-widget amexio-slider-widget-content ui-corner-all':true,
    'ui-state-disabled':disabled,
    'amexio-slider-horizontal':orientation == 'horizontal',
    'amexio-slider-vertical':orientation == 'vertical',
    'amexio-slider-animate':animate}"
        (click)="onSlideBarClick($event)">

        <span *ngIf=" range && orientation == 'horizontal'" class="amexio-slider-range amexio-slider-widget-header ui-corner-all"
            [ngStyle]="{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}">
        </span>

        <span *ngIf="range && orientation == 'vertical'" class="amexio-slider-range amexio-slider-widget-header ui-corner-all"
            [ngStyle]="{'bottom':handleValues[0] + '%',height: (handleValues[1] - handleValues[0] + '%')}">
        </span>




        <span *ngIf="range" (mousedown)="onMouseMove($event,0)" [style.transition]="dragData ? 'none': null" class="amexio-slider-handle ui-state-default ui-corner-all ui-clickable "
            [ngStyle]="{'left': rangeStartLeft, 'bottom': rangeStartBottom}" [ngClass]="{'amexio-slider-handle-active':handleIndex==0,
        'rectangle-css' :type == 'rectangle',
        'circle-css' :type == 'circle',
        'square-css' :type == 'square'}">
            {{values[0]}}
        </span>


        <span *ngIf="range" (mousedown)="onMouseMove($event,1)" [style.transition]="dragData ? 'none': null" class="amexio-slider-handle ui-state-default ui-corner-all ui-clickable"
            [ngStyle]="{'left': rangeEndLeft, 'bottom': rangeEndBottom}" [ngClass]="{'amexio-slider-handle-active':handleIndex==1, 
        'rectangle-css' :type == 'rectangle',
        'circle-css' :type == 'circle',
        'square-css' :type == 'square'}">


            <span style="margin-bottom: 30px;">
                {{values[1]}}
            </span>

        </span>
    </div>
  `,
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioRangeSliderComponent), multi: true },
                ],
            },] },
];
/** @nocollapse */
AmexioRangeSliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone },
    { type: ChangeDetectorRef }
];
AmexioRangeSliderComponent.propDecorators = {
    animate: [{ type: Input }],
    disabled: [{ type: Input }],
    min: [{ type: Input, args: ['min',] }],
    max: [{ type: Input, args: ['max',] }],
    orientation: [{ type: Input, args: ['orientation',] }],
    step: [{ type: Input, args: ['step-value',] }],
    range: [{ type: Input }],
    maxRange: [{ type: Input, args: ['max-range',] }],
    style: [{ type: Input }],
    type: [{ type: Input, args: ['type',] }],
    styleClass: [{ type: Input }],
    onChange: [{ type: Output }],
    onSlideEnd: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoadRecaptchaService {
    constructor() {
    }
    /**
     * @return {?}
     */
    loadScript() {
        const /** @type {?} */ script = document.createElement('script');
        script.innerHTML = '';
        script.src = 'https://www.google.com/recaptcha/api.js?render=explicit';
        script.async = true;
        script.defer = true;
        return script;
    }
}
LoadRecaptchaService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LoadRecaptchaService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by dattaram on 12/9/18.
*/
class RecaptchaComponent {
    /**
     * @param {?} _loadRecaptchaService
     */
    constructor(_loadRecaptchaService) {
        this._loadRecaptchaService = _loadRecaptchaService;
        this.onSuccess = new EventEmitter();
        this.onFailure = new EventEmitter();
        this.responseStructure = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId =
            +Math.floor(Math.random() * 90000) + 10000 + 'google';
        const /** @type {?} */ script = this._loadRecaptchaService.loadScript();
        const /** @type {?} */ body = /** @type {?} */ (document.body);
        script.onload = () => {
            grecaptcha.ready(() => {
                this.rendercaptcha();
            });
        };
        body.appendChild(script);
    }
    /**
     * @return {?}
     */
    rendercaptcha() {
        grecaptcha.render(this.componentId, {
            sitekey: this.sitekey, callback: (response) => {
                if (response && response.length > 0) {
                    this.responseStructure['success'] = true;
                    this.responseStructure['response'] = response;
                    this.onSuccess.emit(this.responseStructure);
                }
                else {
                    this.responseStructure['success'] = false;
                    this.responseStructure['response'] = '';
                    this.onFailure.emit(this.responseStructure);
                }
            },
        });
    }
}
RecaptchaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-google-recaptcha',
                template: `
    <div class="g-recaptcha" [attr.id]="componentId">
    </div>
  `,
            },] },
];
/** @nocollapse */
RecaptchaComponent.ctorParameters = () => [
    { type: LoadRecaptchaService }
];
RecaptchaComponent.propDecorators = {
    sitekey: [{ type: Input, args: ['site-key',] }],
    onSuccess: [{ type: Output }],
    onFailure: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 29/1/18.
*/
class DomHandler {
    constructor() {
        this.calculatedScrollbarWidth = null;
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    addClass(element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    addMultipleClasses(element, className) {
        if (element.classList) {
            const /** @type {?} */ styles = className.split(' ');
            for (const /** @type {?} */ i of styles) {
                element.classList.add([i]);
            }
        }
        else {
            const /** @type {?} */ styles = className.split(' ');
            for (const /** @type {?} */ i of styles) {
                element.className += ' ' + [i];
            }
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    removeClass(element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    hasClass(element, className) {
        if (element.classList) {
            return element.classList.contains(className);
        }
        else {
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    siblings(element) {
        return Array.prototype.filter.call(element.parentNode.children, (child) => {
            return child !== element;
        });
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    find(element, selector) {
        return element.querySelectorAll(selector);
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    findSingle(element, selector) {
        return element.querySelector(selector);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    index(element) {
        const /** @type {?} */ children = element.parentNode.childNodes;
        let /** @type {?} */ num = 0;
        for (const /** @type {?} */ i of children) {
            if (i === element) {
                return num;
            }
            if (i.nodeType === 1) {
                num++;
            }
        }
        return -1;
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    relativePosition(element, target) {
        const /** @type {?} */ elementDimensions = (element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight } :
            this.getHiddenElementDimensions(element));
        const /** @type {?} */ targetHeight = target.offsetHeight;
        const /** @type {?} */ targetWidth = target.offsetWidth;
        const /** @type {?} */ targetOffset = target.getBoundingClientRect();
        const /** @type {?} */ viewport = this.getViewport();
        let /** @type {?} */ top;
        let /** @type {?} */ left;
        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {
            top = -1 * (elementDimensions.height);
            if (targetOffset.top + top < 0) {
                top = 0;
            }
        }
        else {
            top = targetHeight;
        }
        if ((targetOffset.left + elementDimensions.width) > viewport.width) {
            left = targetWidth - elementDimensions.width;
        }
        else {
            left = 0;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    absolutePosition(element, target) {
        const /** @type {?} */ elementDimensions = (element.offsetParent ? { width: element.offsetWidth, height: element.offsetHeight }
            : this.getHiddenElementDimensions(element));
        const /** @type {?} */ elementOuterHeight = elementDimensions.height;
        const /** @type {?} */ elementOuterWidth = elementDimensions.width;
        const /** @type {?} */ targetOuterHeight = target.offsetHeight;
        const /** @type {?} */ targetOuterWidth = target.offsetWidth;
        const /** @type {?} */ targetOffset = target.getBoundingClientRect();
        const /** @type {?} */ windowScrollTop = this.getWindowScrollTop();
        const /** @type {?} */ windowScrollLeft = this.getWindowScrollLeft();
        const /** @type {?} */ viewport = this.getViewport();
        let /** @type {?} */ top;
        let /** @type {?} */ left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
                top = 0 + windowScrollTop;
            }
        }
        else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
        }
        if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width) {
            left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;
        }
        else {
            left = targetOffset.left + windowScrollLeft;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getHiddenElementOuterHeight(element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        const /** @type {?} */ elementHeight = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementHeight;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getHiddenElementOuterWidth(element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        const /** @type {?} */ elementWidth = element.offsetWidth;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementWidth;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getHiddenElementDimensions(element) {
        const /** @type {?} */ dimensions = {};
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return dimensions;
    }
    /**
     * @param {?} container
     * @param {?} item
     * @return {?}
     */
    scrollInView(container, item) {
        const /** @type {?} */ borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
        const /** @type {?} */ borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        const /** @type {?} */ paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
        const /** @type {?} */ paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        const /** @type {?} */ containerRect = container.getBoundingClientRect();
        const /** @type {?} */ itemRect = item.getBoundingClientRect();
        const /** @type {?} */ offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        const /** @type {?} */ scroll = container.scrollTop;
        const /** @type {?} */ elementHeight = container.clientHeight;
        const /** @type {?} */ itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
            container.scrollTop = scroll + offset;
        }
        else if ((offset + itemHeight) > elementHeight) {
            container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
    }
    /**
     * @param {?} element
     * @param {?} duration
     * @return {?}
     */
    fadeIn(element, duration) {
        element.style.opacity = 0;
        let /** @type {?} */ last = +new Date();
        let /** @type {?} */ opacity = 0;
        const /** @type {?} */ tick = () => {
            opacity = +element.style.opacity.replace(',', '.') + (new Date().getTime() - last) / duration;
            element.style.opacity = opacity;
            last = +new Date();
        };
        tick();
    }
    /**
     * @param {?} element
     * @param {?} ms
     * @return {?}
     */
    fadeOut(element, ms) {
        let /** @type {?} */ opacity = 1;
        const /** @type {?} */ interval = 50;
        const /** @type {?} */ duration = ms;
        const /** @type {?} */ gap = interval / duration;
        const /** @type {?} */ fading = setInterval(() => {
            opacity = opacity - gap;
            if (opacity <= 0) {
                opacity = 0;
                clearInterval(fading);
            }
            element.style.opacity = opacity;
        }, interval);
    }
    /**
     * @return {?}
     */
    getWindowScrollTop() {
        const /** @type {?} */ doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
    /**
     * @return {?}
     */
    getWindowScrollLeft() {
        const /** @type {?} */ doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    matches(element, selector) {
        const /** @type {?} */ p = Element.prototype;
        const /** @type {?} */ f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p.msMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };
        return f.call(element, selector);
    }
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    getOuterWidth(el, margin) {
        let /** @type {?} */ width = el.offsetWidth;
        if (margin) {
            const /** @type {?} */ style = getComputedStyle(el);
            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getHorizontalPadding(el) {
        const /** @type {?} */ style = getComputedStyle(el);
        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getHorizontalMargin(el) {
        const /** @type {?} */ style = getComputedStyle(el);
        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    innerWidth(el) {
        let /** @type {?} */ width = el.offsetWidth;
        const /** @type {?} */ style = getComputedStyle(el);
        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    width(el) {
        let /** @type {?} */ width = el.offsetWidth;
        const /** @type {?} */ style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getInnerHeight(el) {
        let /** @type {?} */ height = el.offsetHeight;
        const /** @type {?} */ style = getComputedStyle(el);
        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
        return height;
    }
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    getOuterHeight(el, margin) {
        let /** @type {?} */ height = el.offsetHeight;
        if (margin) {
            const /** @type {?} */ style = getComputedStyle(el);
            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getHeight(el) {
        let /** @type {?} */ height = el.offsetHeight;
        const /** @type {?} */ style = getComputedStyle(el);
        height -= (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom)
            + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth));
        return height;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getWidth(el) {
        let /** @type {?} */ width = el.offsetWidth;
        const /** @type {?} */ style = getComputedStyle(el);
        width -= (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) +
            parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth));
        return width;
    }
    /**
     * @return {?}
     */
    getViewport() {
        const /** @type {?} */ win = window;
        const /** @type {?} */ d = document;
        const /** @type {?} */ e = d.documentElement;
        const /** @type {?} */ g = d.getElementsByTagName('body')[0];
        const /** @type {?} */ w = win.innerWidth || e.clientWidth || g.clientWidth;
        const /** @type {?} */ h = win.innerHeight || e.clientHeight || g.clientHeight;
        return { width: w, height: h };
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getOffset(el) {
        const /** @type {?} */ rect = el.getBoundingClientRect();
        return {
            top: rect.top + document.body.scrollTop,
            left: rect.left + document.body.scrollLeft,
        };
    }
    /**
     * @return {?}
     */
    getUserAgent() {
        return navigator.userAgent;
    }
    /**
     * @return {?}
     */
    isIE() {
        const /** @type {?} */ ua = window.navigator.userAgent;
        const /** @type {?} */ msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return true;
        }
        const /** @type {?} */ trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            return true;
        }
        const /** @type {?} */ edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return true;
        }
        // other browser
        return false;
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    appendChild(element, target) {
        if (this.isElement(target)) {
            target.appendChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.appendChild(element);
        }
        else {
            throw new Error('Cannot append ' + target + ' to ' + element);
        }
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    removeChild(element, target) {
        if (this.isElement(target)) {
            target.removeChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.removeChild(element);
        }
        else {
            throw new Error('Cannot remove ' + element + ' from ' + target);
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isElement(obj) {
        return (typeof HTMLElement === 'object' ? obj instanceof HTMLElement :
            obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string');
    }
    /**
     * @return {?}
     */
    calculateScrollbarWidth() {
        if (this.calculatedScrollbarWidth !== null) {
            return this.calculatedScrollbarWidth;
        }
        const /** @type {?} */ scrollDiv = document.createElement('div');
        scrollDiv.className = 'ui-scrollbar-measure';
        document.body.appendChild(scrollDiv);
        const /** @type {?} */ scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
    }
    /**
     * @param {?} element
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    invokeElementMethod(element, methodName, args) {
        (element)[methodName].apply(element, args);
    }
    /**
     * @return {?}
     */
    clearSelection() {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                window.getSelection().empty();
            }
            else if (window.getSelection().removeAllRanges &&
                window.getSelection().rangeCount > 0 &&
                window.getSelection().getRangeAt(0).getClientRects().length > 0) {
                window.getSelection().removeAllRanges();
            }
        }
        else if (document['selection'] && document['selection'].empty) {
            try {
                document['selection'].empty();
            }
            catch (/** @type {?} */ error) {
                // ignore IE bug
            }
        }
    }
    /**
     * @return {?}
     */
    getBrowser() {
        if (!this.browser) {
            const /** @type {?} */ matched = this.resolveUserAgent();
            this.browser = {};
            if (matched.browser) {
                this.browser[matched.browser] = true;
                this.browser['version'] = matched.version;
            }
            if (this.browser['chrome']) {
                this.browser['webkit'] = true;
            }
            else if (this.browser['webkit']) {
                this.browser['safari'] = true;
            }
        }
        return this.browser;
    }
    /**
     * @return {?}
     */
    resolveUserAgent() {
        const /** @type {?} */ ua = navigator.userAgent.toLowerCase();
        const /** @type {?} */ match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];
        return {
            browser: match[1] || '',
            version: match[2] || '0',
        };
    }
}
DomHandler.zindex = 1000;
DomHandler.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 29/1/18.
*/
class AmexioSliderComponent {
    /**
     * @param {?} el
     * @param {?} domHandler
     * @param {?} renderer
     * @param {?} ngZone
     */
    constructor(el, domHandler, renderer, ngZone) {
        this.el = el;
        this.domHandler = domHandler;
        this.renderer = renderer;
        this.ngZone = ngZone;
        /*
        Properties
        name : min-value
        datatype : number
        version : 4.0 onwards
        default :
        description : Min slider value
        */
        this.min = 0;
        /*
        Properties
        name : max-value
        datatype : number
        version : 4.0 onwards
        default :
        description : Max slider value
        */
        this.max = 100;
        /*
        Properties
        name : orientation
        datatype : string
        version : 4.0 onwards
        default : horizontal
        description : Vertical or Horizontal Orientation of slider
        */
        this.orientation = 'horizontal';
        /*
        Events
        name : onChange
        datatype : any
        version : 4.0 onwards
        default :
        description : Triggers when slider is moved
        */
        this.onChange = new EventEmitter();
        /*
        Events
        name : onSlideEnd
        datatype : any
        version : 4.0 onwards
        default :
        description : Triggers when slider reaches the end
        */
        this.onSlideEnd = new EventEmitter();
        this.handleIndex = 0;
        this.handleValues = [];
        this.sliderFocus = false;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.componentId = 'slider' + '_' + Math.floor(Math.random() * 1000 + 999);
    }
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    onMouseDown(event, index) {
        if (this.disabled) {
            return;
        }
        this.dragging = true;
        this.updateDomData();
        this.sliderHandleClick = true;
        this.handleIndex = index;
        this.bindDragListeners();
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    onTouchStart(event, index) {
        const /** @type {?} */ touchobj = event.changedTouches[0];
        this.startHandleValue = (this.range) ? this.handleValues[index] : this.handleValue;
        this.dragging = true;
        this.handleIndex = index;
        if (this.orientation === 'horizontal') {
            this.startx = parseInt(touchobj.clientX, 10);
            this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        }
        else {
            this.starty = parseInt(touchobj.clientY, 10);
            this.barHeight = this.el.nativeElement.children[0].offsetHeight;
        }
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @param {?=} index
     * @return {?}
     */
    onTouchMove(event, index) {
        const /** @type {?} */ touchobj = event.changedTouches[0];
        let /** @type {?} */ handleValue = 0;
        if (this.orientation === 'horizontal') {
            handleValue = Math.floor(((parseInt(touchobj.clientX, 10) - this.startx) * 100) / (this.barWidth)) + this.startHandleValue;
        }
        else {
            handleValue = Math.floor(((this.starty - parseInt(touchobj.clientY, 10)) * 100) / (this.barHeight)) + this.startHandleValue;
        }
        this.setValueFromHandle(event, handleValue);
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBarClick(event) {
        if (this.disabled) {
            return;
        }
        if (!this.sliderHandleClick) {
            this.updateDomData();
            this.handleChange(event);
        }
        this.sliderHandleClick = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleChange(event) {
        const /** @type {?} */ handleValue = this.calculateHandleValue(event);
        this.setValueFromHandle(event, handleValue);
    }
    /**
     * @return {?}
     */
    bindDragListeners() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.dragListener) {
                this.dragListener = this.renderer.listen('document', 'mousemove', (event) => {
                    if (this.dragging) {
                        this.ngZone.run(() => {
                            this.handleChange(event);
                        });
                    }
                });
            }
            if (!this.mouseupListener) {
                this.mouseupListener = this.renderer.listen('document', 'mouseup', (event) => {
                    this.mouseUpListMethod();
                });
            }
        });
    }
    /**
     * @return {?}
     */
    mouseUpListMethod() {
        if (this.dragging) {
            this.dragging = false;
            this.ngZone.run(() => {
                if (this.range) {
                    this.onSlideEnd.emit({ originalEvent: event, values: this.values });
                }
                else {
                    this.onSlideEnd.emit({ originalEvent: event, value: this.value });
                }
            });
        }
    }
    /**
     * @return {?}
     */
    unbindDragListeners() {
        if (this.dragListener) {
            this.dragListener();
        }
        if (this.mouseupListener) {
            this.mouseupListener();
        }
    }
    /**
     * @param {?} event
     * @param {?} handleValue
     * @return {?}
     */
    setValueFromHandle(event, handleValue) {
        const /** @type {?} */ newValue = this.getValueFromHandle(handleValue);
        if (this.range) {
            if (this.step) {
                this.handleStepChange(newValue, this.values[this.handleIndex]);
            }
            else {
                this.handleValues[this.handleIndex] = handleValue;
                this.updateValue(newValue, event);
            }
        }
        else {
            if (this.step) {
                this.handleStepChange(newValue, this.value);
            }
            else {
                this.handleValue = handleValue;
                this.updateValue(newValue, event);
            }
        }
    }
    /**
     * @param {?} newValue
     * @param {?} oldValue
     * @return {?}
     */
    handleStepChange(newValue, oldValue) {
        const /** @type {?} */ diff = (newValue - oldValue);
        let /** @type {?} */ val = oldValue;
        if (diff < 0) {
            val = oldValue + Math.ceil((newValue - oldValue) / this.step) * this.step;
        }
        else if (diff > 0) {
            val = oldValue + Math.floor((newValue - oldValue) / this.step) * this.step;
        }
        this.updateValue(val);
        this.updateHandleValue();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.range) {
            this.values = value || [0, 0];
        }
        else {
            this.value = value || 0;
        }
        this.updateHandleValue();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setDisabledState(val) {
        this.disabled = val;
    }
    /**
     * @return {?}
     */
    get rangeStartLeft() {
        return this.isVertical() ? 'auto' : this.handleValues[0] + '%';
    }
    /**
     * @return {?}
     */
    get rangeStartBottom() {
        return this.isVertical() ? this.handleValues[0] + '%' : 'auto';
    }
    /**
     * @return {?}
     */
    get rangeEndLeft() {
        return this.isVertical() ? 'auto' : this.handleValues[1] + '%';
    }
    /**
     * @return {?}
     */
    get rangeEndBottom() {
        return this.isVertical() ? this.handleValues[1] + '%' : 'auto';
    }
    /**
     * @return {?}
     */
    isVertical() {
        return this.orientation === 'vertical';
    }
    /**
     * @return {?}
     */
    updateDomData() {
        const /** @type {?} */ rect = this.el.nativeElement.children[0].getBoundingClientRect();
        this.initX = rect.left + this.domHandler.getWindowScrollLeft();
        this.initY = rect.top + this.domHandler.getWindowScrollTop();
        this.barWidth = this.el.nativeElement.children[0].offsetWidth;
        this.barHeight = this.el.nativeElement.children[0].offsetHeight;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    calculateHandleValue(event) {
        if (this.orientation === 'horizontal') {
            return ((event.pageX - this.initX) * 100) / (this.barWidth);
        }
        else {
            return (((this.initY + this.barHeight) - event.pageY) * 100) / (this.barHeight);
        }
    }
    /**
     * @return {?}
     */
    updateHandleValue() {
        if (this.range) {
            this.handleValues[0] = (this.values[0] < this.min ? 0 : this.values[0] - this.min) * 100 / (this.max - this.min);
            this.handleValues[1] = (this.values[1] > this.max ? 100 : this.values[1] - this.min) * 100 / (this.max - this.min);
        }
        else {
            if (this.value < this.min) {
                this.handleValue = 0;
            }
            else if (this.value > this.max) {
                this.handleValue = 100;
            }
            else {
                this.handleValue = (this.value - this.min) * 100 / (this.max - this.min);
            }
        }
    }
    /**
     * @param {?} val
     * @param {?=} valueEvent
     * @return {?}
     */
    updateValue(val, valueEvent) {
        if (this.range) {
            let /** @type {?} */ value = val;
            if (this.handleIndex === 0) {
                if (value < this.min) {
                    value = this.min;
                    this.handleValues[0] = 0;
                }
                else if (value > this.values[1]) {
                    value = this.values[1];
                    this.handleValues[0] = this.handleValues[1];
                }
            }
            else {
                if (value > this.max) {
                    value = this.max;
                    this.handleValues[1] = 100;
                }
                else if (value < this.values[0]) {
                    value = this.values[0];
                    this.handleValues[1] = this.handleValues[0];
                }
            }
            this.values[this.handleIndex] = Math.floor(value);
            this.onModelChange(this.values);
            this.onChange.emit({ event: valueEvent, values: this.values });
        }
        else {
            this.updateValueNoRange(val, valueEvent);
        }
    }
    /**
     * @param {?} val
     * @param {?=} valueEvent
     * @return {?}
     */
    updateValueNoRange(val, valueEvent) {
        if (val < this.min) {
            val = this.min;
            this.handleValue = 0;
        }
        else if (val > this.max) {
            val = this.max;
            this.handleValue = 100;
        }
        this.value = Math.floor(val);
        this.onModelChange(this.value);
        this.onChange.emit({ event: valueEvent, value: this.value });
    }
    /**
     * @param {?} handleValue
     * @return {?}
     */
    getValueFromHandle(handleValue) {
        return (this.max - this.min) * (handleValue / 100) + this.min;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unbindDragListeners();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyLeftDown(event) {
        if (!this.step) {
            this.step = 10;
            this.step = this.max / this.step;
        }
        else if (!this.max && !this.step && !this.min) {
            this.step = this.max / this.step;
        }
        this.handleValue = this.handleValue - this.step;
        this.setValueFromHandle(event, this.handleValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyRightUp(event) {
        if (!this.step) {
            this.step = 10;
            this.step = this.max / this.step;
        }
        else if (!this.max && !this.step && !this.min) {
            this.step = this.max / this.step;
        }
        this.handleValue = this.handleValue + this.step;
        this.setValueFromHandle(event, this.handleValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyHome(event) {
        if (!this.step) {
            this.step = 10;
            this.step = this.max / this.step;
        }
        else if (!this.max && !this.step && !this.min) {
            this.step = this.max / this.step;
        }
        this.handleValue = this.min;
        this.setValueFromHandle(event, this.handleValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyEnd(event) {
        if (!this.step) {
            this.step = 10;
            this.step = this.max / this.step;
        }
        else if (!this.max && !this.step && !this.min) {
            this.step = this.max / this.step;
        }
        this.handleValue = this.max;
        this.setValueFromHandle(event, this.handleValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyPageUp(event) {
        this.handleValue = this.handleValue + 10;
        this.setValueFromHandle(event, this.handleValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyPageDown(event) {
        this.handleValue = this.handleValue - 10;
        this.setValueFromHandle(event, this.handleValue);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocus(event) {
        this.sliderFocus = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        this.sliderFocus = false;
    }
}
AmexioSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-slider',
                template: `
    <div id="{{componentId}}" [ngStyle]="style" [class]="styleClass" [ngClass]="{'ui-slider ui-widget ui-widget-content ui-corner-all':true,'disable-component':disabled,
      'ui-slider-horizontal':orientation == 'horizontal',
      'ui-slider-vertical':orientation == 'vertical','ui-slider-animate':animate}"
        (click)="onBarClick($event)" (onFocus)="onFocus($event)" (onBlur)="onBlur($event)">
        <div role="slider" [tabindex]="disabled ? -1 : 0" attr.aria-labelledby="{{componentId}}" [attr.aria-valuenow]="handleValue"
            style="color:red" id="idRedValue" [ngClass]="{'focusOnSlider':sliderFocus}" [attr.aria-valuemin]="min"
            [attr.aria-valuemax]="max" (keydown.arrowdown)="onKeyLeftDown($event)" (keydown.arrowup)="onKeyRightUp($event)"
            (keydown.arrowright)="onKeyRightUp($event)" (keydown.arrowleft)="onKeyLeftDown($event)" (keydown.home)="onKeyHome($event)"
            (keydown.end)="onKeyEnd($event)" (focus)="onFocus($event)" (blur)="onBlur($event)" [ngClass]="{'focusOnSlider':sliderFocus}"
            (keydown.pageup)="onKeyPageUp($event)" (keydown.pagedown)="onKeyPageDown($event)"></div>
        <span *ngIf="range && orientation == 'horizontal'" class="ui-slider-range ui-widget-header ui-corner-all" [ngStyle]="{'left':handleValues[0] + '%',width: (handleValues[1] - handleValues[0] + '%')}"></span>
        <span *ngIf="range && orientation == 'vertical'" class="ui-slider-range ui-widget-header ui-corner-all" [ngStyle]="{'bottom':handleValues[0] + '%',height:
           (handleValues[1] - handleValues[0] + '%')}"></span>
        <span *ngIf="!range && orientation=='vertical'" class="ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all"
            [ngStyle]="{'height': handleValue + '%'}"></span>
        <span *ngIf="!range && orientation=='horizontal'" class="ui-slider-range ui-slider-range-min ui-widget-header ui-corner-all"
            [ngStyle]="{'width': handleValue + '%'}"></span>
        <span *ngIf="!range" class="ui-slider-handle ui-state-default ui-corner-all ui-clickable" (mousedown)="onMouseDown($event)"
            (touchstart)="onTouchStart($event)" (touchmove)="onTouchMove($event)" (touchend)="dragging=false"
            [style.transition]="dragging ? 'none': null" [ngStyle]="{'left': orientation == 'horizontal' ? handleValue + '%' : null,
                  'bottom': orientation == 'vertical' ? handleValue + '%' : null}"></span>
        <span *ngIf="range" (mousedown)="onMouseDown($event,0)" (touchstart)="onTouchStart($event,0)" (touchmove)="onTouchMove($event,0)"
            (touchend)="dragging=false" setValueFromHandle(event,this.slidevar); [style.transition]="dragging ? 'none': null"
            class="ui-slider-handle ui-state-default ui-corner-all ui-clickable" [ngStyle]="{'left': rangeStartLeft, 'bottom': rangeStartBottom}"
            [ngClass]="{'ui-slider-handle-active':handleIndex==0}"></span>
        <span *ngIf="range" (mousedown)="onMouseDown($event,1)" (touchstart)="onTouchStart($event,1)" (touchmove)="onTouchMove($event,1)"
            (touchend)="dragging=false" [style.transition]="dragging ? 'none': null" class="ui-slider-handle ui-state-default ui-corner-all ui-clickable"
            [ngStyle]="{'left': rangeEndLeft, 'bottom': rangeEndBottom}" [ngClass]="{'ui-slider-handle-active':handleIndex==1}"></span>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioSliderComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioSliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DomHandler },
    { type: Renderer2 },
    { type: NgZone }
];
AmexioSliderComponent.propDecorators = {
    animate: [{ type: Input }],
    disabled: [{ type: Input }],
    min: [{ type: Input, args: ['min-value',] }],
    max: [{ type: Input, args: ['max-value',] }],
    orientation: [{ type: Input }],
    step: [{ type: Input, args: ['step-value',] }],
    range: [{ type: Input }],
    style: [{ type: Input }],
    styleClass: [{ type: Input, args: ['style-class',] }],
    onChange: [{ type: Output }],
    onSlideEnd: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioSpinnerComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        /*
          Events
          name : show
          datatype : boolean
          version : none
          default : true
          description : if show  is true than and only than the spinner is enable, if false then it is disable.
          */
        this.show = true;
        this.relative = false;
        this.spinnerVertialCss = 'spinner-vertical-';
        this.spinnerHorizontalCss = ' spinner-horizontal-';
        this.spinnerRelativeCss = 'spinnerCss-relative';
        this.alpha = '0.2';
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set color(v) {
        const /** @type {?} */ ischanges = (this._color !== v);
        this._color = v;
        if (ischanges) {
            this.assignColor();
        }
    }
    /**
     * @return {?}
     */
    get color() {
        return this._color;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.assignColor();
        this.positionChangeClass();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.positionChangeClass();
    }
    /**
     * @return {?}
     */
    positionChangeClass() {
        if (this.relative) {
            this.positionSpinnerClass = this.spinnerRelativeCss;
        }
        else {
            if (this.verticalposition === null) {
                this.verticalposition = 'top';
            }
            else if (this.horizontalposition === null) {
                this.horizontalposition = 'right';
            }
            this.positionSpinnerClass = this.spinnerVertialCss + this.verticalposition + this.spinnerHorizontalCss + this.horizontalposition;
        }
    }
    /**
     * @return {?}
     */
    assignColor() {
        if (this.type === 'spinnerround' && this.color) {
            let /** @type {?} */ newColor;
            const /** @type {?} */ r = parseInt(this.color.slice(1, 3), 16);
            const /** @type {?} */ g = parseInt(this.color.slice(3, 5), 16);
            const /** @type {?} */ b = parseInt(this.color.slice(5, 7), 16);
            if (this.alpha) {
                newColor = `rgba(${r}, ${g}, ${b}, ${this.alpha})`;
            }
            else {
                newColor = `rgba(${r}, ${g}, ${b})`;
            }
            const /** @type {?} */ inlinecss = 'margin: 60px auto;font-size: 10px;position: relative;text-indent: -9999em;border-top: 1.1em solid ' + newColor +
                '; border-right: 1.1em solid ' + newColor +
                ';border-left: 1.1em solid ;-webkit-transform: translateZ(0);-ms-transform: translateZ(0);border-bottom: 1.1em solid ' + newColor +
                ';transform: translateZ(0);  -webkit-animation: load8 1.1s infinite linear;animation: load8 1.1s infinite linear;';
            const /** @type {?} */ inlinecssafter = ' border-radius: 50%; width: 10em; height: 10em;';
            this.insertStyleSheetRule('.dynamicclass { ' + inlinecss + inlinecssafter + '}');
            this.insertStyleSheetRule('@-webkit-keyframes load8 { 0% {  -webkit-transform: rotate(0deg);  transform: rotate(0deg);} ' +
                '100%{-webkit-transform: rotate(360deg); transform: rotate(360deg);} }');
            this.renderer.addClass(this.element.nativeElement, 'dynamicclass');
        }
    }
    /**
     * @param {?} ruleText
     * @return {?}
     */
    insertStyleSheetRule(ruleText) {
        const /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            const /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        const /** @type {?} */ sheet = sheets[sheets.length - 1];
        sheet.insertRule(ruleText, sheet.rules ? sheet.rules.length : sheet.cssRules.length);
    }
}
AmexioSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-spinner',
                template: `
    <div class="spinner-sm" [ngClass]="positionSpinnerClass">

            <div #loadindicator [ngStyle]="{'display': show ? 'block': 'none'}"
             [style.color]='color' [style.font-size]='size'
                    [ngClass]="{
            'rectangle-bounces' :type == 'rectanglebounce',
            'rings' :type == 'ring',
            'half-circles' :type == 'halfcircle',
            'fading-circles' :type == 'fadingcircle',
            'ball-spins' :type == 'ballspin',
            'fire-spins' :type == 'firespin',
            'three-bounces' :type == 'threebounce',
            'spinner-rounds' :type == 'spinnerround'}
            ">
            </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioSpinnerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioSpinnerComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }],
    color: [{ type: Input, args: ['color',] }],
    show: [{ type: Input }],
    verticalposition: [{ type: Input, args: ['vertical-position',] }],
    horizontalposition: [{ type: Input, args: ['horizontal-position',] }],
    size: [{ type: Input, args: ['size',] }],
    relative: [{ type: Input, args: ['relative',] }],
    element: [{ type: ViewChild, args: ['loadindicator',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 20/12/17.
*/
class AmexioTagsInputComponent extends EventBaseComponent {
    /**
     * @param {?} displayFieldService
     * @param {?} dataService
     * @param {?} element
     * @param {?} renderer
     * @param {?} _cd
     */
    constructor(displayFieldService, dataService, element, renderer, _cd) {
        super(renderer, element, _cd);
        this.displayFieldService = displayFieldService;
        this.dataService = dataService;
        this.element = element;
        this.renderer = renderer;
        /*
         Properties
         name : has-label
         datatype : boolean
         version : 4.0 onwards
         default : false
         description : flag to set label
         */
        this.haslabel = true;
        /*
         Events
         name : input
         datatype : any
         version : none
         default :
         description :	On input event field.
         */
        this.input = new EventEmitter();
        /*
        Events
        name : onChange
        datatype : any
        version : none
        default :
        description : on change event
        */
        this.onChange = new EventEmitter();
        /*
        Events
        name : focus
        datatype : any
        version : none
        default :
        description : On field focus event
        */
        this.focus = new EventEmitter();
        this.onSelections = [];
        this.activeindex = 0;
        this.selectedindex = -1;
        this.scrollposition = 30;
        this.maskloader = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.setData(this._data);
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    } /*
     Properties
     name : data-reader
     datatype : string
     version : 4.0 onwards
     default :
     description : Key in JSON datasource for records
     */
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('taginput', this.displayfield);
        if (this.placeholder === '' || this.placeholder === null) {
            this.placeholder = 'Choose Option';
        }
        if (!this.triggerchar) {
            this.triggerchar = 1;
        }
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateKey(event) {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focusToLastElement(event) {
        this.filteredResult[this.selectedindex].selected = false;
        this.selectedindex = this.filteredResult.length - 1;
        this.filteredResult[this.filteredResult.length - 1].selected = true;
        this.setAriaActiveDescendant(this.selectedindex);
        this.setScrollToList(this.selectedindex);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focusToFirstElement(event) {
        this.filteredResult[this.selectedindex].selected = false;
        this.selectedindex = 0;
        this.filteredResult[0].selected = true;
        this.setAriaActiveDescendant(this.selectedindex);
        this.setScrollToList(this.selectedindex);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeOnEScapeList(event) {
        this.showToolTip = false;
        this.hide();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUp(event) {
        this.filteredResult = [];
        this.showToolTip = false;
        const /** @type {?} */ keyword = event.target.value;
        if (keyword !== null && keyword !== ' ' && keyword.length >= this.triggerchar) {
            const /** @type {?} */ search_term = keyword.toLowerCase();
            this.viewData.forEach((item) => {
                if (item != null && this.displayFieldService.findValue(this.key, item).toLowerCase().startsWith(search_term)) {
                    this.filteredResult.push(item);
                }
            });
            if (this.filteredResult.length > 0) {
                this.showToolTip = true;
                this.onBaseFocusEvent({});
            }
            else {
                this.showToolTip = this.onBaseBlurEvent({});
            }
        }
        if (event.keyCode === 40 || event.keyCode === 38 || event.keyCode === 13) {
            this.navigateUsingKey(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    navigateUsingKey(event) {
        if (this.selectedindex > this.filteredResult.length) {
            this.selectedindex = 0;
        }
        if (event.keyCode === 40 || event.keyCode === 38 && this.selectedindex < this.filteredResult.length) {
            this.keyUpDownMethod(event);
        }
        if (event.keyCode === 13 && this.filteredResult[this.selectedindex]) {
            this.onItemSelect(this.filteredResult[this.selectedindex], this.selectedindex);
        }
        this.setScrollToList(this.selectedindex);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyUpDownMethod(event) {
        if (!this.showToolTip) {
            this.showToolTip = true;
        }
        let /** @type {?} */ prevselectedindex = -1;
        prevselectedindex = this.selectedindex;
        if (event.keyCode === 40) {
            this.selectedindex++;
        }
        else if (event.keyCode === 38) {
            this.selectedindex--;
        }
        if (this.filteredResult[this.selectedindex]) {
            this.filteredResult[this.selectedindex].selected = true;
            this.setAriaActiveDescendant(this.selectedindex);
        }
        if (this.filteredResult[prevselectedindex]) {
            this.filteredResult[prevselectedindex].selected = false;
            this.toNavigateFirstAndLastOption();
        }
    }
    /**
     * @return {?}
     */
    toNavigateFirstAndLastOption() {
        if (this.selectedindex === -1) {
            this.selectedindex = this.filteredResult.length - 1;
            this.filteredResult[this.filteredResult.length - 1].selected = true;
        }
        else if (this.selectedindex === this.filteredResult.length) {
            this.selectedindex = 0;
            this.filteredResult[this.selectedindex].selected = true;
        }
        this.setAriaActiveDescendant(this.selectedindex);
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setAriaActiveDescendant(rowindex) {
        if (this.filteredResult.length > 0) {
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute('aria-activedescendant', this.filteredResult[rowindex].index);
        }
        else if (this.displayValue.length < 1) {
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute('aria-activedescendant', 'listitem');
        }
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setScrollToList(rowindex) {
        const /** @type {?} */ listitems = this.element.nativeElement.getElementsByClassName('list-items')[rowindex];
        if (listitems) {
            listitems.scrollIntoView({ behavior: 'smooth' });
        }
    }
    /**
     * @param {?} activerow
     * @return {?}
     */
    showAllData(activerow) {
        let /** @type {?} */ i = 0;
        this.viewData.forEach((item) => {
            if (item != null) {
                if (i === activerow) {
                    item.active = true;
                    this.currentActive = item;
                }
                else {
                    item.active = false;
                }
                item.activerow = activerow;
                this.filteredResult.push(item);
            }
            i++;
        });
        if (this.filteredResult.length > 0) {
            this.showToolTip = true;
        }
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    onItemSelect(row, index) {
        this.value = row[this.valuefield];
        this.displayFieldService.findValue(this.displayfield, row);
        this.setValue(row, {}, index);
        this.showToolTip = false;
    }
    /**
     * @param {?} input
     * @return {?}
     */
    onInput(input) {
        if (this.selectedindex > -1) {
            this.filteredResult[this.selectedindex].selected = false;
        }
        this.selectedindex = -1;
        this.input.emit();
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onFocus(elem) {
        this.inpHandle.nativeElement.placeholder = '';
        this.onBaseFocusEvent({});
        this.posixUp = this.getListPosition(elem);
        this.focus.emit(this.value);
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ dropdownHeight = 325;
        // must be same in dropdown.scss
        if (elementRef) {
            if (window.screen.height - (elementRef.getBoundingClientRect().bottom) < dropdownHeight) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewData = responsedata;
        this.generateIndex(this.viewData);
        this.maskloader = false;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    generateIndex(data) {
        data.forEach((element, index) => {
            element['index'] = this.componentId + 'listitem' + index;
        });
    }
    /**
     * @param {?} value
     * @param {?} ref
     * @param {?} index
     * @return {?}
     */
    setValue(value, ref, index) {
        this.inpHandle.nativeElement.value = '';
        this.onSelections.push(value);
        this.onChange.emit(this.onSelections);
        if (this.onSelections.length > 0) {
            this.isValid = true;
        }
        this.hide();
        if (index) {
            this.filteredResult[index].selected = false;
        }
        this.selectedindex = -1;
        this.showToolTip = false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    removePill(item) {
        let /** @type {?} */ indexToRemove = null;
        this.onSelections.forEach((selectedVal, index) => {
            if (selectedVal === item) {
                indexToRemove = index;
            }
        });
        this.onSelections.splice(indexToRemove, 1);
        if (this.onSelections.length === 0) {
            this.isValid = false;
        }
        this.onChange.emit(this.onSelections);
    }
    /**
     * @return {?}
     */
    checkValidity() {
        return this.isValid;
    }
}
AmexioTagsInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tag-input',
                template: `
    <div class="inputgroup" #rootDiv (keyup.esc)="closeOnEScapeList($event)">

      <label *ngIf="haslabel" for="{{componentId}}" [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
        {{fieldlabel}}
      </label>

      <div class="tag-input" [ngClass]="{'loading-mask' : maskloader}">
        <div class="tag" *ngFor="let item of onSelections">
          <amexio-display-field [data]="item" [data-index]="key"></amexio-display-field>
          <span class="closebtn" (click)="removePill(item)">&times;</span>
        </div>
        <input id="{{componentId}}" aria-autocomplete="list" role="combobox" [attr.aria-expanded]="showToolTip" type="text" class="input-control"
          [ngClass]="{'input-control-error' : inp.invalid && (inp.dirty || inp.touched),'input-control-success' : inp.valid && (inp.dirty || inp.touched)}"
          (focus)="onFocus(rootDiv)" (input)="onInput(inp)" (keyup)="onKeyUp($event)" (keyup.end)="focusToLastElement($event)"
          (keyup.home)="focusToFirstElement($event)" [attr.placeholder]="placeholder" [attr.disabled]="disabled ? true: null" [required]="allowblank ? true: null"
          #inp />
      </div>


      <span #dropdownitems class="dropdown" [@changeState]="dropdownstyle.visibility" [ngClass]="{'dropdown-up' : posixUp}" [ngStyle]="dropdownstyle"
        #tagDropRef>
        <ul role="list" class="dropdown-list">
          <li tabindex="1" role="listitem" class="list-items" [ngClass]="{'list-items-selected':item.selected}" *ngFor="let item of filteredResult"
            id="{{item.index}}" (click)="setValue(item,inp)">
            <div>
              <amexio-display-field [data]="item" [data-index]="displayfield"></amexio-display-field>
            </div>
          </li>
        </ul>
      </span>
    </div>


    <span *ngIf="iconfeedback && (inp.invalid && (inp.dirty || inp.touched) || inp.valid)" class="input-control-feedback">
      <span *ngIf="inp.invalid && (inp.dirty || inp.touched)">&#9888;</span>
      <span *ngIf="inp.valid && (inp.dirty || inp.touched)"> &#10004;</span>
    </span>
  `,
                animations: [
                    trigger('changeState', [
                        state('visible', style({
                            'max-height': '200px',
                        })),
                        state('hidden', style({
                            'max-height': '0px',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioTagsInputComponent.ctorParameters = () => [
    { type: DisplayFieldService },
    { type: CommonDataService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
AmexioTagsInputComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    data: [{ type: Input, args: ['data',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    key: [{ type: Input }],
    triggerchar: [{ type: Input, args: ['trigger-char',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    input: [{ type: Output }],
    onChange: [{ type: Output }],
    focus: [{ type: Output }],
    inpHandle: [{ type: ViewChild, args: ['inp',] }],
    tagDropRef: [{ type: ViewChild, args: ['tagDropRef',] }],
    dropdownitems: [{ type: ViewChild, args: ['dropdownitems', { read: ElementRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioTextAreaComponent extends ValueAccessorBase {
    constructor() {
        super();
        /*
        Events
        name : onBlur
        datatype : any
        version : 4.0 onwards
        default :
        description : On blur event
        */
        this.onBlur = new EventEmitter();
        /*
         Events
         name : input
         datatype : any
         version : none
         default :
         description : 	On input event field.
         */
        this.input = new EventEmitter();
        /*
         Events
         name : focus
         datatype : any
         version : none
         default :
         description : On focus event field.
         */
        this.focus = new EventEmitter();
        /*
         Events
         name : change
         datatype : any
         version : none
         default :
         description : On field value change event
         */
        this.change = new EventEmitter();
        /*
        Properties
        name : has-label
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : flag to set label
        */
        this.haslabel = true;
        this.isValid = false;
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    get pattern() {
        return this._pattern;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pattern(value) {
        if (value != null) {
            this._pattern = value;
            this.regEx = new RegExp(this._pattern);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = this.createCompId('textareainput', this.name);
        this.name = this.generateName(this.name, this.fieldlabel, 'textareainput');
    }
    /**
     * @return {?}
     */
    onBlurEvent() {
        this.showToolTip = false;
        this.onBlur.emit(this.value);
    }
    /**
     * @return {?}
     */
    onFocusEvent() {
        this.showToolTip = true;
        this.focus.emit(this.value);
    }
    /**
     * @return {?}
     */
    onInputEvent() {
        this.isValid = this.isFieldValid();
        this.input.emit(this.value);
    }
    /**
     * @return {?}
     */
    onChangeEv() {
        this.change.emit(this.value);
    }
    /**
     * @return {?}
     */
    isFieldValid() {
        return (!this.allowblank && (this.value && (this.value.length > 0)) ||
            (this.value && this.value.length > 0)) || this.allowblank;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return this.isFieldValid() ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioTextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-textarea-input',
                template: `

    <div class="inputgroup">

      <label *ngIf="haslabel" role="textarea" for="{{componentId}}" id="{{componentId}}"  [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
        {{fieldlabel}}
      </label>
 
      <textarea type="text"

            role="text" 
            tabindex="1"
            id="{{componentId}}" 
            name="areaText"
            attr.aria-labelledby="{{componentId}}"
            aria-describedby="textAreaDes"
            aria-multiline="true"
            [attr.aria-required]="!allowblank"
            [attr.aria-invalid]="!isValid "

         

             class="input-control"
             [(ngModel)]="value"
             [ngClass]="model.touched ? allowblank ? '' : (isValid && model.touched) ? 'input-control-success' : 'input-control-error' :''" 
             (blur)="onBlurEvent()"
             (focus)="onFocusEvent()"
             (input)="onInputEvent()"
             [name]="name"
             [pattern]="regEx"
             [attr.placeholder]="placeholder"
             [attr.rows]="rows"
             [attr.cols]="columns"
             [attr.disabled] = "disabled ? true: null"
             [required]="!allowblank">
      </textarea>

      <ng-container *ngIf="iconfeedback">
          <span class="input-control-feedback">
            <span *ngIf="!isValid && model.touched"><em class="fa fa-times"></em></span>
          <span *ngIf="isValid && model.touched"><em class="fa fa-check"></em></span>
          </span>
      </ng-container>

      <input-help *ngIf="showToolTip && enablepopover" 
            id="textAreaDes"
            role="tooltip"
            [error-msg]="errormsg" 
            [min-msg]="minmsg" 
            [max-msg]="maxmsg"
            [max-error-msg]="maxerrormsg"
            [min-error-msg]="minerrormsg" >
      </input-help>

      <span class="inputfieldbar"></span>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioTextAreaComponent), multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioTextAreaComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioTextAreaComponent.ctorParameters = () => [];
AmexioTextAreaComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    rows: [{ type: Input }],
    columns: [{ type: Input }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    onBlur: [{ type: Output }],
    input: [{ type: Output }],
    focus: [{ type: Output }],
    change: [{ type: Output }],
    minerrormsg: [{ type: Input, args: ['min-error-msg',] }],
    maxerrormsg: [{ type: Input, args: ['max-error-msg',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    disabled: [{ type: Input }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    pattern: [{ type: Input, args: ['pattern',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    name: [{ type: Input, args: ['name',] }],
    model: [{ type: ViewChild, args: [NgModel,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class ToolbaroneComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ToolbaroneComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-toolbar-item',
                template: `
  <div tabindex="1" [ngClass]="{'toolbaritemseperatorright':(seperatorposition === 'right'),
  'toolbaritemseperatorleft':(seperatorposition === 'left')}">
  <ng-content></ng-content>
  </div>
   `,
            },] },
];
/** @nocollapse */
ToolbaroneComponent.ctorParameters = () => [];
ToolbaroneComponent.propDecorators = {
    seperatorposition: [{ type: Input, args: ['seperator-position',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class ToolbarComponent {
    constructor() {
        this.className = 'toolbar-header';
        /*
          Events
          name : onClick
          datatype : none
          version : none
          default : none
          description : Callback to invoke on activated tab event.
          */
        this.onClick = new EventEmitter();
        this.toolbarposition = 'top';
        this.seperator = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.toolCollection = this.queryTool.toArray();
        for (const /** @type {?} */ i of this.toolCollection) {
            [i]['position'] = this.getToolbaritemposition([i]['position']);
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    getToolbaritemposition(position) {
        if (position === 'right') {
            return 'main-right';
        }
        if (position === 'left') {
            return 'main-left';
        }
        if (position === 'center') {
            return 'main-center';
        }
        if (position === '') {
            return 'main-center';
        }
    }
    /**
     * @param {?} tool
     * @return {?}
     */
    onToolClick(tool) {
        if (!tool.disabled) {
            for (const /** @type {?} */ i of this.toolCollection) {
                if ([i] === tool) {
                    [i]['active'] = true;
                    this.onClick.emit(tool);
                }
                else {
                    [i]['active'] = false;
                }
            }
        }
    }
    /**
     * @param {?} toolnode
     * @return {?}
     */
    getSeperatotClass(toolnode) {
        let /** @type {?} */ cssName = '';
        if (this.seperator) {
            cssName = 'seperator-line';
        }
        cssName = cssName + toolnode.position;
        return cssName;
    }
    /**
     * @return {?}
     */
    getToolbarPosition() {
        if (this.toolbarposition === 'top') {
            return '';
        }
        if (this.toolbarposition === 'right') {
            return '';
        }
        if (this.toolbarposition === 'bottom') {
            return '';
        }
    }
}
ToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-toolbar',
                template: `


    <div tabindex="1" class="toolbar">
        <div class="topnavmainbar">
            <div class="toolbar-item">
                <ng-content select="[position-left]"></ng-content>
                <ng-content select="amexio-panel-header"></ng-content>
                <ng-content select="amexio-form-header"></ng-content>
                <ng-content select="amexio-window-header"></ng-content>
            </div>
            <div class="toolbar-item">
                <ng-content select="[position-center]"></ng-content>
            </div>
            <div class="toolbar-item">
                <ng-content select="[position-right]"></ng-content>
            </div>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
ToolbarComponent.ctorParameters = () => [];
ToolbarComponent.propDecorators = {
    className: [{ type: HostBinding, args: ['attr.class',] }],
    seperator: [{ type: Input, args: ['seperator',] }],
    toolbarposition: [{ type: Input, args: ['toolbar-position',] }],
    onClick: [{ type: Output }],
    tabLocalData: [{ type: Input }],
    queryTool: [{ type: ContentChildren, args: [ToolbaroneComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToolBarActionComponent {
    constructor() {
        /*
          Events
          name : navLinkClick
          datatype : any
          version : none
          default : none
          description : Fire when nav item is clicked,
          This event is fired when nav item type is defined as 'link/button/menu'
        
          */
        this.navLinkClick = new EventEmitter();
        this.actionComponent = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} clickEvent
     * @return {?}
     */
    onClick(clickEvent) {
        const /** @type {?} */ node = {
            title: this.title,
            type: this.type,
        };
        this.navLinkClick.emit({ data: node, event: clickEvent });
    }
    /**
     * @return {?}
     */
    checkActionComponent() {
        this.dropdown = this.queryDropDown.toArray();
        if (this.dropdown.length > 0) {
            this.actionComponent = 'dropdown';
            this.dropdown[0].fieldlabel = '';
        }
        this.button = this.queryButton.toArray();
        if (this.button.length > 0) {
            this.actionComponent = 'button';
        }
    }
}
ToolBarActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-toolbar-action',
                template: `
   <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
ToolBarActionComponent.ctorParameters = () => [];
ToolBarActionComponent.propDecorators = {
    queryDropDown: [{ type: ContentChildren, args: [AmexioDropDownComponent, { descendants: true },] }],
    queryButton: [{ type: ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
    queryLabel: [{ type: ContentChildren, args: [AmexioLabelComponent, { descendants: true },] }],
    type: [{ type: Input }],
    title: [{ type: Input }],
    navLinkClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
 * @template T
 */
class BaseInput extends ValueAccessorBase {
    /**
     * @param {?} event
     * @return {?}
     */
    onBaseInputFocus(event) {
        this.checkValidity();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBaseInput(event) {
        this.checkValidity();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur2(event) {
        this.checkValidity();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBaseInputChange(event) {
        this.checkValidity();
    }
    /**
     * @return {?}
     */
    checkValidity() {
    }
    /**
     * @return {?}
     */
    validateOnInit() {
        return true;
    }
    /**
     * @return {?}
     */
    isVali1d() {
        return true;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
 * @template T
 */
class ListBaseComponent extends BaseInput {
    /**
     * @param {?} renderer
     * @param {?} element
     * @param {?} cd
     */
    constructor(renderer, element, cd) {
        super();
        this.renderer = renderer;
        this.element = element;
        this.cd = cd;
        this.self = false;
        this.itemClick = false;
        this.hide();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFocusEvent(event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'visible' };
        this.bindDocumentClickListener();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    blur(event) {
        this.itemClicked();
    }
    /**
     * @return {?}
     */
    itemClicked() {
        this.itemClick = true;
        this.hide();
        this.unbindDocumentClickListener();
        this.clearClicks();
    }
    /**
     * @return {?}
     */
    bindDocumentClickListener() {
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer
                .listen('document', 'click', (event) => this.handleDocumentListener(event));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleDocumentListener(event) {
        if (!this.self && !this.itemClick) {
            this.hide();
            this.unbindDocumentClickListener();
        }
        this.clearClicks();
        this.cd.markForCheck();
    }
    /**
     * @return {?}
     */
    clearClicks() {
        this.self = false;
        this.itemClick = false;
    }
    /**
     * @return {?}
     */
    unbindDocumentClickListener() {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.dropdownstyle = { visibility: 'hidden' };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 11/21/17
*/
class AmexioTypeAheadComponent extends ListBaseComponent {
    /**
     * @param {?} displayFieldService
     * @param {?} dataService
     * @param {?} element
     * @param {?} renderer
     * @param {?} cd
     */
    constructor(displayFieldService, dataService, element, renderer, cd) {
        super(renderer, element, cd);
        this.displayFieldService = displayFieldService;
        this.dataService = dataService;
        this.element = element;
        this.displayValue = '';
        this.onBlur = new EventEmitter();
        this.onInputOutput = new EventEmitter();
        this.onFocusOutput = new EventEmitter();
        this.change = new EventEmitter();
        this.onClick = new EventEmitter();
        this.isComponentValid = new EventEmitter();
        this.rowindex = 0;
        this.maskloader = true;
        this.ariaListExpand = false;
        this.filterarray = [];
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set fieldlabel(v) {
        if (v != null && v.length > 0) {
            this._fieldlabel = v;
            this.initComponent();
        }
    }
    /**
     * @return {?}
     */
    get fieldlabel() {
        return this._fieldlabel;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set haslabel(v) {
        this._haslabel = v;
    }
    /**
     * @return {?}
     */
    get haslabel() {
        return this._haslabel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.setData(this._data);
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set key(v) {
        this._key = v;
        this.displayfield = this._key;
    }
    /**
     * @return {?}
     */
    get key() {
        return this._key;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.dropdown = this.dropdownlist.toArray();
        setTimeout(() => {
            this.dropdown.forEach((dropdown) => {
                dropdown.template = this.bodyTemplate;
            });
        }, 200);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["placeholder"] && !changes["placeholder"].isFirstChange()) {
            this.placeholder = changes["placeholder"].currentValue;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.generateName(this.name, this.fieldlabel, 'typeaheadinput');
        this.componentId = this.createCompId('typeahead', this.displayfield);
        if (!this.valuefield) {
            this.valuefield = this.displayfield;
        }
        this.isValid = this.allowblank;
        this.isComponentValid.emit(this.allowblank);
        if (this.placeholder === '' || this.placeholder == null) {
            this.placeholder = 'Choose Option';
        }
        if (!this.triggerchar) {
            this.triggerchar = 1;
        }
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    generateIndex() {
        this.viewdata.value.forEach((element, index) => {
            element['index'] = this.componentId + 'listitem' + index;
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeOnEScapeKey(event) {
        this.ariaListExpand = false;
        this.hide();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    input(event) {
        this.filterarray = [];
        let /** @type {?} */ value;
        this.displayValue = event.target.value;
        this.rowindex = 0;
        if (this.displayValue.length >= 0 && !this.self && this.displayValue.length >= this.triggerchar) {
            this.dropdownstyle = { visibility: 'visible' };
            this.ariaListExpand = true;
            this.bindDocumentClickListener();
        }
        else {
            this.dropdownstyle = { visibility: 'hidden' };
            this.ariaListExpand = false;
        }
        this.onInputOutput.emit(event);
        if (this.displayValue.length > 0) {
            if (this.displayValue === this.displayValue.toUpperCase()) {
                value = this.displayValue.toLowerCase();
            }
            else {
                value = this.displayValue;
            }
            this.viewdata.value.forEach((element) => {
                if ((this.displayFieldService.findValue(this.displayfield, element).toLowerCase()).startsWith(value)) {
                    this.filterarray.push(element);
                }
            });
        }
    }
    /**
     * @return {?}
     */
    focustoLast() {
        this.rowindex = this.filterarray.length - 1;
        this.setScrollToList(this.rowindex);
        this.setAriaActiveDescendant(this.rowindex);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    focus(event) {
        this.self = true;
        this.dropdownstyle = { visibility: 'hidden' };
        this.bindDocumentClickListener();
        this.onFocusOutput.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyup(event) {
        const /** @type {?} */ keycode = event.keyCode;
        if (keycode === 40) {
            this.rowindex++;
        }
        else if (keycode === 38) {
            this.rowindex--;
        }
        else if (keycode === 40 || keycode === 38) {
            this.rowindex = 0;
        }
        if (this.rowindex < 0) {
            this.rowindex = this.filterarray.length - 1;
        }
        else if (this.rowindex >= this.filterarray.length) {
            this.rowindex = 0;
        }
        this.setAriaActiveDescendant(this.rowindex);
        if (keycode === 13) {
            const /** @type {?} */ data = this.dropdown[0].selectedItem();
            this.value = data[0].attributes['valuefield'].value;
            this.displayValue = data[0].attributes['displayfield'].value;
            this.itemClicked();
            this.isComponentValid.emit(true);
        }
        else if (keycode === 40 || keycode === 38) {
            this.dropdown[0].scroll(this.rowindex);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    blur(event) {
        super.blur(event);
        const /** @type {?} */ userinput = event.target.value;
        const /** @type {?} */ listitems = this.viewdata.value;
        listitems.forEach((item) => {
            if ((this.displayFieldService.findValue(this.displayfield, item) + '').toLowerCase() === userinput.toLowerCase()) {
                this.displayValue = this.displayFieldService.findValue(this.displayfield, item);
                this.value = item[this.valuefield];
                this.isComponentValid.emit(true);
            }
        });
        this.onBlur.emit(event);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onDropDownListItemClick(data) {
        if (this.valuefield) {
            this.value = data[this.valuefield];
        }
        else {
            this.value = this.displayFieldService.findValue(this.displayfield, data);
        }
        this.displayValue = this.displayFieldService.findValue(this.displayfield, data);
        this.onClick.emit(data);
        this.ariaListExpand = false;
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setAriaActiveDescendant(rowindex) {
        if (this.filterarray.length > 0) {
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute('aria-activedescendant', this.filterarray[rowindex].index);
        }
        else if (this.displayValue.length < 1) {
            const /** @type {?} */ inputid = document.getElementById(this.componentId);
            inputid.setAttribute('aria-activedescendant', 'listitem');
        }
    }
    /**
     * @param {?} rowindex
     * @return {?}
     */
    setScrollToList(rowindex) {
        const /** @type {?} */ listitems = this.element.nativeElement.getElementsByClassName('list-items')[rowindex];
        if (listitems) {
            listitems.scrollIntoView({ behavior: 'smooth' });
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    writeValue(v) {
        super.writeValue(v);
        if (v && this.viewdata) {
            this.showValue();
        }
    }
    /**
     * @return {?}
     */
    showValue() {
        const /** @type {?} */ listitems = this.viewdata.value;
        listitems.forEach((item) => {
            if (item[this.valuefield] === this.value) {
                this.displayValue = this.displayFieldService.findValue(this.displayfield, item);
                this.isComponentValid.emit(true);
            }
        });
    }
    /**
     * @return {?}
     */
    initComponent() {
        if (this.fieldlabel != null && this.fieldlabel.length > 0) {
            this.haslabel = true;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        if (event != null) {
            this.change.emit(event);
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewdata = of(responsedata);
        this.generateIndex();
        // SET USER SELECTION
        if (this.value != null) {
            const /** @type {?} */ valueKey = this.valuefield;
            const /** @type {?} */ displayKey = this.displayfield;
            const /** @type {?} */ val = this.value;
            this.viewdata.forEach((item) => {
                if (item[valueKey] === val) {
                    this.isValid = true;
                    this.displayValue = item[displayKey];
                }
            });
        }
        this.maskloader = false;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return ((!this.allowblank && this.value) || this.allowblank) ? null : {
            jsonParseError: {
                valid: true,
            },
        };
    }
}
AmexioTypeAheadComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-typeahead',
                template: `


    <div class="inputgroup form-group" (keyup.esc) ="closeOnEScapeKey($event)">

      <label  id="fieldlabel" for="{{componentId}}"  *ngIf="haslabel" [style.font-style]="fontstyle" [style.font-family]="fontfamily" [style.font-size]="fontsize">
        {{fieldlabel}}
      </label>

      <input type="hidden"  [(ngModel)]="value" [name]="name" #model="ngModel" required (ngModelChange)="onChange($event)">
  
      <div class="input-container" >
              <input 
                      id="{{componentId}}"
                      aria-autocomplete="list"	
                      role="combobox"
                      [attr.aria-expanded]="ariaListExpand"
                      type="text" class="input-control"
                      [ngClass]="{'input-control-error': ((model.dirty || model.touched || (value && value.length>0)) && !model.valid),
                      'input-disabled' : disabled}"
                      [required]="!allowblank" 
                      [value]="displayValue"
                      [attr.placeholder]="placeholder"
                      [attr.disabled] = "disabled ? true: null"
                      (focus)="focus($event)"
                      (input)="input($event)"
                      (keyup)="keyup($event)"
                      (blur)="blur($event)"
                      (keyup.end)="focustoLast()"
                      />
              <em *ngIf="(iconfeedback && (model.dirty || model.touched) && model.valid)" class="fa fa-check"></em>
              <em *ngIf="(iconfeedback && (model.dirty || model.touched) && !model.valid)" class="fa fa-times icon-error"></em>
      </div>
  
      <dropdown-list-item [@changeState]="dropdownstyle.visibility" class="dropdown" [ngStyle]="dropdownstyle"  
                          [data]="viewdata" [display-field]="displayfield" [value-field]="valuefield" 
                          [highlight-row]="rowindex" [display-value]="displayValue" 
                          (itemclick)="onDropDownListItemClick($event)">
      </dropdown-list-item>
    </div>
  `,
                animations: [
                    trigger('changeState', [
                        state('visible', style({
                            'max-height': '200px',
                        })),
                        state('hidden', style({
                            'max-height': '0px',
                        })),
                        transition('*=>*', animate('200ms')),
                    ]),
                ],
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: AmexioTypeAheadComponent,
                        multi: true,
                    }, {
                        provide: NG_VALIDATORS, useExisting: forwardRef(() => AmexioTypeAheadComponent), multi: true,
                    }],
            },] },
];
/** @nocollapse */
AmexioTypeAheadComponent.ctorParameters = () => [
    { type: DisplayFieldService },
    { type: CommonDataService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
AmexioTypeAheadComponent.propDecorators = {
    fieldlabel: [{ type: Input, args: ['field-label',] }],
    haslabel: [{ type: Input, args: ['has-label',] }],
    data: [{ type: Input, args: ['data',] }],
    key: [{ type: Input, args: ['key',] }],
    allowblank: [{ type: Input, args: ['allow-blank',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    placeholder: [{ type: Input, args: ['place-holder',] }],
    iconfeedback: [{ type: Input, args: ['icon-feedback',] }],
    fontstyle: [{ type: Input, args: ['font-style',] }],
    fontfamily: [{ type: Input, args: ['font-family',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    enablepopover: [{ type: Input, args: ['enable-popover',] }],
    triggerchar: [{ type: Input, args: ['trigger-char',] }],
    name: [{ type: Input }],
    disabled: [{ type: Input }],
    onBlur: [{ type: Output }],
    onInputOutput: [{ type: Output, args: ['input',] }],
    onFocusOutput: [{ type: Output, args: ['focus',] }],
    change: [{ type: Output }],
    onClick: [{ type: Output }],
    isComponentValid: [{ type: Output }],
    model: [{ type: ViewChild, args: [NgModel,] }],
    dropdownlist: [{ type: ViewChildren, args: [DropDownListComponent,] }],
    bodyTemplate: [{ type: ContentChild, args: ['amexioBodyTmpl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
class AmexioInputHelperComponent {
    constructor() {
        this.isNumberComponent = false;
        this.help = [];
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set errormsg(v) {
        this._errormsg = v;
    }
    /**
     * @return {?}
     */
    get errormsg() {
        return this._errormsg;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set minmsg(v) {
        this._minmsg = v;
    }
    /**
     * @return {?}
     */
    get minmsg() {
        return this._minmsg;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set maxmsg(v) {
        this._maxmsg = v;
    }
    /**
     * @return {?}
     */
    get maxmsg() {
        return this._maxmsg;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set minerrormsg(v) {
        this._minerrormsg = v;
    }
    /**
     * @return {?}
     */
    get minerrormsg() {
        return this._minerrormsg;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set maxerrormsg(v) {
        this._maxerrormsg = v;
    }
    /**
     * @return {?}
     */
    get maxerrormsg() {
        return this._maxerrormsg;
    }
    /**
     * @return {?}
     */
    createHelpMsg() {
        if (this.errormsg && this.errormsg.length > 0) {
            this.help.push(this.errormsg);
        }
        if (this.errormsg && this.errormsg.length > 0) {
            this.help.push(this.errormsg);
        }
        if (this.errormsg && this.errormsg.length > 0) {
            this.help.push(this.errormsg);
        }
    }
}
AmexioInputHelperComponent.decorators = [
    { type: Component, args: [{
                selector: 'input-help',
                template: `
      <div  class="input-helper dropdown tooltiptext">
          <div *ngIf="minmsg">
              {{minmsg}}
          </div>
          <div *ngIf="maxmsg">
              {{maxmsg}}
          </div>
          <div *ngIf="errormsg">
              {{errormsg}}
          </div>
          <div *ngIf="!isNumberComponent && minerrormsg">
              <b>Min Length:</b> {{minerrormsg}} 
          </div>
          <div *ngIf="!isNumberComponent && maxerrormsg">
              <b>Max Length: </b> {{maxerrormsg}} 
          </div> 
          <div *ngIf="isNumberComponent && minvalue && minvalue >0 && minerrormsg">
              <b>Min Value:</b> {{minerrormsg}} 
          </div>
          <div *ngIf="isNumberComponent && maxvalue && maxvalue >0 && maxerrormsg">
              <b>Max Value:</b> {{maxerrormsg}} 
          </div>
  
      </div>
    `,
                styles: [`
      .input-helper{overflow:auto;position:absolute;width:100%;max-height:200px;-webkit-box-shadow:0 1px 3px 0 #ced4da;box-shadow:0 1px 3px 0 #ced4da}
    `],
            },] },
];
/** @nocollapse */
AmexioInputHelperComponent.ctorParameters = () => [];
AmexioInputHelperComponent.propDecorators = {
    minlength: [{ type: Input, args: ['min-length',] }],
    maxlength: [{ type: Input, args: ['max-length',] }],
    minvalue: [{ type: Input, args: ['min-value',] }],
    maxvalue: [{ type: Input, args: ['max-value',] }],
    isNumberComponent: [{ type: Input, args: ['is-number',] }],
    errormsg: [{ type: Input, args: ['error-msg',] }],
    minmsg: [{ type: Input, args: ['min-msg',] }],
    maxmsg: [{ type: Input, args: ['max-msg',] }],
    minerrormsg: [{ type: Input, args: ['min-error-msg',] }],
    maxerrormsg: [{ type: Input, args: ['max-error-msg',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioAccordionTabComponent {
    constructor() {
        /*
          Events
          name : emittedEvent
          datatype :none
          version : none
          default : none
          description : Fires the on accordion pane click event.
          */
        this.emittedEvent = new EventEmitter();
        this.expanded = false;
        this.isSelected = false;
        this.currentstate = 'hidden';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = '' + Math.floor(Math.random() * 1000 + 999);
        this.emittedEvent.emit({ keydown: true, current: this });
    }
    /**
     * @return {?}
     */
    emitEvent() {
        if (!this.disabled) {
            this.active = !this.active;
            this.emittedEvent.emit({ keydown: false, current: this });
        }
        if (this.active) {
            this.currentstate = 'visible';
        }
        else {
            this.currentstate = 'hidden';
        }
    }
    /**
     * @return {?}
     */
    onEnterClick() {
        this.expanded = !this.expanded;
    }
    /**
     * @return {?}
     */
    onArrowDown() {
        this.emittedEvent.emit({ keydown: true, current: this });
    }
    /**
     * @return {?}
     */
    onArrowUp() {
        this.emittedEvent.emit({ keyup: true, current: this });
    }
}
AmexioAccordionTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-accordion-tab',
                template: `
    <button #btn role="button" id="{{componentId}}" tabindex="0" (click)="emitEvent()" [attr.aria-expanded]="active"
      (keyup.enter)="onEnterClick()" (keyup.arrowdown)="onArrowDown()" (keyup.arrowup)="onArrowUp()" class="{{isTransparent ? 'accordion-transparent' : 'accordion'}} {{active ? 'active-accordion' : ''}} {{disabled ? 'accordion-disable' : ''}}"
      (mouseover)="hover=true" (mouseleave)="hover=false" [ngStyle]="{color: hover==true ? bgColor : color, backgroundColor: hover==true  ? color : bgColor}">
      <div style="float: left;" *ngIf="leftIcon">
        <em class="fa {{leftIcon}}"></em>
      </div>
      <ng-container>
        {{header}}
        <div style="float: right" role="img" aria-label="close push button" tabindex="0">
          <ng-content select="amexio-accordion-header">&nbsp;</ng-content> &nbsp;
          <em *ngIf="!angleIcon" class="fa" [ngClass]="{'fa-plus' : !active,'fa-minus' : active}" aria-hidden="true"></em>
          <em *ngIf="angleIcon" class="fa" [ngClass]="{'fa-angle-down' : !active,'fa-angle-up' : active}" aria-hidden="true"></em>
        </div>
      </ng-container>
    </button>
    <div role="region" attr.aria-labelledby="{{componentId}}" tabindex="0" [@accordionState]="active ? 'visible':'hidden'"
      class="panel">
      <ng-content></ng-content>
    </div>
  `,
                animations: [
                    trigger('accordionState', [
                        state('hidden', style({
                            display: 'none',
                            height: '0px',
                        })),
                        state('visible', style({
                            display: 'block',
                            height: '*',
                        })),
                        transition('*=>hidden', animate('0ms')),
                        transition('*=>visible', animate('200ms')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioAccordionTabComponent.ctorParameters = () => [];
AmexioAccordionTabComponent.propDecorators = {
    header: [{ type: Input }],
    active: [{ type: Input }],
    emittedEvent: [{ type: Output }],
    leftIcon: [{ type: Input, args: ['left-icon',] }],
    angleIcon: [{ type: Input, args: ['angle-icon',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    data: [{ type: Input, args: ['data',] }],
    btn: [{ type: ViewChild, args: ['btn',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioAccordionComponent extends LifeCycleBaseComponent {
    constructor() {
        super();
        this.flag = false;
        this.prevaccindex = -1;
        this.accindex = -1;
        this.flag = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.accordionCollections = this.queryTabs.toArray();
        this.accordionCollections.forEach((node) => node.emittedEvent.subscribe((eventdata) => this.activateAccordionPane(eventdata)));
        this.accordionCollections.forEach((node, index) => {
            if (this.expandAll) {
                node.active = true;
            }
            else if (node.active) {
                node.active = true;
            }
            else {
                node.active = false;
            }
            if (this.isTransparent) {
                node.isTransparent = true;
            }
            if (this.angleIcon) {
                node.angleIcon = true;
            }
            if (this.color) {
                node.color = this.color;
            }
            if (this.bgColor) {
                node.bgColor = this.bgColor;
            }
            node['index'] = node.componentId;
        });
    }
    /**
     * @param {?} nodeEvent
     * @return {?}
     */
    activateAccordionPane(nodeEvent) {
        const /** @type {?} */ node = nodeEvent.current;
        if (nodeEvent.keydown) {
            this.onkeyDown();
        }
        else if (nodeEvent.keyup) {
            this.onkeyUp();
        }
        else {
            this.accordionCollections.forEach((tab) => {
                if (tab === node) {
                    tab.active = node.active;
                }
                else {
                    tab.active = false;
                }
            });
        }
    }
    /**
     * @return {?}
     */
    onkeyDown() {
        this.onPreAccIndex();
        this.accindex++;
        this.prevaccindex = this.accindex;
        if (this.accindex >= this.accordionCollections.length) {
            this.accindex = 0;
            this.prevaccindex = 0;
        }
        this.setAccoordionActive(this.accindex);
    }
    /**
     * @return {?}
     */
    onkeyUp() {
        this.onPreAccIndex();
        this.prevaccindex--;
        if (this.prevaccindex === -1) {
            this.prevaccindex = this.accordionCollections.length - 1;
            this.accindex = -1;
        }
        this.setAccoordionActive(this.prevaccindex);
        if (this.prevaccindex === 0) {
            this.accindex = 0;
        }
    }
    /**
     * @return {?}
     */
    onPreAccIndex() {
        if (this.prevaccindex > -1) {
            this.accordionCollections[this.prevaccindex]['isSelected'] = false;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setAccoordionActive(index) {
        this.accordionCollections[index]['isSelected'] = true;
        if (this.accordionCollections[index]['isSelected']) {
            this.accordionCollections[index].btn.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
AmexioAccordionComponent.decorators = [
    { type: Component, args: [{ selector: 'amexio-accordion', template: `

  <ng-content  select="amexio-accordion-tab"></ng-content>
` },] },
];
/** @nocollapse */
AmexioAccordionComponent.ctorParameters = () => [];
AmexioAccordionComponent.propDecorators = {
    expandAll: [{ type: Input, args: ['expand-all',] }],
    isTransparent: [{ type: Input, args: ['transparent',] }],
    angleIcon: [{ type: Input, args: ['angle-icon',] }],
    bgColor: [{ type: Input, args: ['background',] }],
    color: [{ type: Input, args: ['color',] }],
    queryTabs: [{ type: ContentChildren, args: [AmexioAccordionTabComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioAccordionHeaderComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioAccordionHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-accordion-header', template: `
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioAccordionHeaderComponent.ctorParameters = () => [];
AmexioAccordionHeaderComponent.propDecorators = {
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const LayoutConstant = {
    'start': 'flex-start',
    'end': 'flex-end',
    'center': 'center',
    'space-between': 'space-between',
    'space-around': 'space-around',
    'space-evenly': 'space-evenly',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioLayoutComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
        this.orientation = 'horizontal';
        this.responsiveMode = false;
        this.border = true;
        this.fit = true;
        const /** @type {?} */ that = this;
        this.matchMediaService.OnDesktop((mediaQueryList) => {
            that.handleDeviceSettings();
        });
        this.matchMediaService.OnTablet((mediaQueryList) => {
            that.handleDeviceSettings();
        });
        this.matchMediaService.OnPhone((mediaQueryList) => {
            that.handleDeviceSettings();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setLayoutDefination();
        this.handleDeviceSettings();
    }
    /**
     * @return {?}
     */
    setLayoutDefination() {
        this.setorientation();
        this.setAlignment();
        this.setBorder();
        this.setFit();
    }
    /**
     * @return {?}
     */
    setorientation() {
        this.updateOrientation(this.orientation);
    }
    /**
     * @param {?} orientationName
     * @return {?}
     */
    updateOrientation(orientationName) {
        if (orientationName && orientationName.toLowerCase() === 'vertical') {
            this.orientationDirection = 'column';
        }
        else {
            this.orientationDirection = 'row';
        }
    }
    /**
     * @return {?}
     */
    setAlignment() {
        if (this.alignment && LayoutConstant[this.alignment.toLowerCase()]) {
            this.justifyContent = LayoutConstant[this.alignment.toLowerCase()];
        }
        else {
            this.justifyContent = 'start';
        }
    }
    /**
     * @return {?}
     */
    setBorder() {
        if (this.border) {
            this.borderstyle = '1px solid #ced4da';
            this.borderboxstyle = '0 2px 2px 0 rgba(0,0,0,.14)';
        }
    }
    /**
     * @return {?}
     */
    setFit() {
        if (this.fit) {
            this.height = '100%';
        }
    }
    /**
     * @return {?}
     */
    handleDeviceSettings() {
        if (!this.responsiveMode) {
            if (this.matchMediaService.IsPhone()) {
                this.updateOrientation('vertical');
            }
            else {
                this.updateOrientation(this.orientation);
            }
        }
    }
}
AmexioLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-layout-columns',
                template: `
      <ng-content></ng-content>
    `,
                styles: [`
    :host {
        display: flex;
    }
  `],
            },] },
];
/** @nocollapse */
AmexioLayoutComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioLayoutComponent.propDecorators = {
    orientation: [{ type: Input, args: ['orientation',] }],
    responsiveMode: [{ type: Input, args: ['responsive-mode',] }],
    alignment: [{ type: Input, args: ['alignment',] }],
    border: [{ type: Input, args: ['border',] }],
    fit: [{ type: Input, args: ['fit',] }],
    orientationDirection: [{ type: HostBinding, args: ['style.flex-direction',] }],
    justifyContent: [{ type: HostBinding, args: ['style.justify-content',] }],
    borderstyle: [{ type: HostBinding, args: ['style.border',] }],
    borderboxstyle: [{ type: HostBinding, args: ['style.box-shadow',] }],
    height: [{ type: HostBinding, args: ['style.height',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioLayoutItemComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.fit) {
            this.flexgrow = 1;
        }
        if (this.padding) {
            this.lipadding = this.padding;
        }
    }
}
AmexioLayoutItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-layout-item',
                template: `
        <ng-content></ng-content>
    `,
            },] },
];
AmexioLayoutItemComponent.propDecorators = {
    fit: [{ type: Input, args: ['fit',] }],
    padding: [{ type: Input, args: ['padding',] }],
    flexgrow: [{ type: HostBinding, args: ['style.flex-grow',] }],
    lipadding: [{ type: HostBinding, args: ['style.padding',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 1/4/18.
*/
class AmexioBorderLayoutItemComponent {
    constructor() {
        this.positionClass = 'borderlayout-';
        this.role = this.positionClass;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getClassType() {
        let /** @type {?} */ pos = '';
        if (this.position.toLowerCase() === 'north') {
            pos = 'N';
        }
        else if (this.position.toLowerCase() === 'east') {
            pos = 'E';
        }
        else if (this.position.toLowerCase() === 'center') {
            pos = 'C';
        }
        else if (this.position.toLowerCase() === 'west') {
            pos = 'W';
        }
        else if (this.position.toLowerCase() === 'south') {
            pos = 'S';
        }
        this.positionClass = this.positionClass + pos;
        this.role = this.positionClass;
        return pos;
    }
}
AmexioBorderLayoutItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-borderlayout-item',
                template: `
    <div tabindex="0" attr.aria-label="borderlayoutitem{{position}}">
        <aside style="height:100%;">
            <ng-content></ng-content>
        </aside>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioBorderLayoutItemComponent.ctorParameters = () => [];
AmexioBorderLayoutItemComponent.propDecorators = {
    position: [{ type: Input }],
    role: [{ type: HostBinding, args: ['attr.class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioBorderLayoutComponent {
    constructor() {
        this.borderclass = 'borderlayout-container';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.layoutitems = this.layout.toArray();
        this.layoutitems.forEach((item) => {
            this.borderclass = this.borderclass + '-' + item.getClassType();
        });
    }
}
AmexioBorderLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-borderlayout',
                template: `
    <span tabindex="0" aria-label="borderlayout">
      <section [ngClass]="borderclass">
        <ng-content></ng-content>
      </section>
    </span>
  `,
            },] },
];
/** @nocollapse */
AmexioBorderLayoutComponent.ctorParameters = () => [];
AmexioBorderLayoutComponent.propDecorators = {
    layout: [{ type: ContentChildren, args: [AmexioBorderLayoutItemComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioBoxComponent {
    constructor() {
        /*
        Properties
        name : padding
        datatype : boolean
        version : 4.1 onwards
        default : false
        description : Padding to all sides
        */
        this.padding = false;
        /*
        Properties
        name : border-dotted
        datatype : boolean
        version : 4.1.8 onwards
        default : false
        description : Dotted border
        */
        this.borderDotted = false;
        /*
        Properties
        name : closable
        datatype : boolean
        version : 4.1.8 onwards
        default : false
        description : closable box
        */
        this.closable = false;
        this.close = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.borderColor == null) {
            this.borderColor = 'box-default';
        }
        if (this.borderColor != null && this.bgColor == null) {
            this.bgColor = this.borderColor;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeBox(event) {
        this.close = false;
        this.closable = false;
    }
}
AmexioBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-box',
                template: `
   <div for="boxText" id="{{componentId}}" class="box-content" *ngIf="close" [style.height]="height ? height:'none'" [style.width]="width ? width:'none'" [style.align]="align ? align:'none'" [ngClass]="{
   'box-default': borderColor=='default' || borderColor ==null,
   'border-topbar': border=='top',
   'border-bottombar': border =='bottom',
   'border-rightbar': border =='right',
   'border-leftbar': border =='left',
   'border-all' : border =='all',
   'border-top-bottom' : border =='top-bottom' || border =='bottom-top',
   'border-right-left' : border =='right-left' || border =='left-right',

   'bg-brown': bgColor=='brown', 
   'bg-red': bgColor=='red',
   'bg-green': bgColor=='green',
   'bg-yellow': bgColor=='yellow',
   'bg-blue': bgColor=='blue',
   'bg-purple': bgColor=='purple',
   'bg-theme-color' : bgColor =='theme-color',
   'box-transparent' : bgColor =='transparent',

   'border-theme-color' : borderColor =='theme-color',
   'border-red' : borderColor =='red',
   'border-yellow' : borderColor =='yellow',
   'border-green' : borderColor =='green',
   'border-blue' : borderColor =='blue',
   'border-brown' : borderColor =='brown',
   'border-purple' : borderColor =='purple',
   'border-transparent' : borderColor =='transparent',
   'padding' : padding,
   'border-dotted' : borderDotted
    }">
       <span *ngIf="closable" class="box-close">
    <amexio-c-icon key="tab_close" (onClick)="closeBox($event)"></amexio-c-icon>
    </span>
       <span role="tooltip" tabindex="0" id="boxText" name="boxText" attr.aria-labelledby="{{componentId}}">
     <ng-content ></ng-content>
   </span>
   </div>
 `,
            },] },
];
/** @nocollapse */
AmexioBoxComponent.ctorParameters = () => [];
AmexioBoxComponent.propDecorators = {
    border: [{ type: Input, args: ['border',] }],
    borderColor: [{ type: Input, args: ['border-color',] }],
    bgColor: [{ type: Input, args: ['background-color',] }],
    padding: [{ type: Input, args: ['padding',] }],
    height: [{ type: Input, args: ['box-height',] }],
    width: [{ type: Input, args: ['box-width',] }],
    borderDotted: [{ type: Input, args: ['border-dotted',] }],
    align: [{ type: Input, args: ['align',] }],
    closable: [{ type: Input, args: ['closable',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/18/17.
*/
class AmexioCardComponent extends LifeCycleBaseComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        /*
        Properties
        name : show
        datatype :  boolean
        version : 4.0 onwards
        default : true
        description : User can bind variable to this and hide/unhide card based on requirement..
        */
        this.show = true;
        this.nodeRightClick = new EventEmitter();
        this.rightClick = new EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.headeralign = 'left';
        this.footeralign = 'right';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // FOR HEADER PADING
        this.headerComponentList = this.amexioHeader.toArray();
        this.headerComponentList.forEach((item, currentIndex) => {
            if (item.padding) {
                this.headerPadding = item.padding;
            }
        });
        // FOR BODY PADDING
        this.bodyComponentList = this.amexioBody.toArray();
        this.bodyComponentList.forEach((item, currentIndex) => {
            if (item.padding) {
                this.bodyPadding = item.padding;
            }
        });
        // FOR FOOTER PADDING
        this.footerComponentList = this.amexioFooter.toArray();
        this.footerComponentList.forEach((item, currentIndex) => {
            if (item.padding) {
                this.footerPadding = item.padding;
            }
            item.footer = this.footer;
            item.setFooterAlignment(this.footeralign);
        });
        this.onResize();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    adjustHeight(event) {
        this.onResize();
    }
    /**
     * @return {?}
     */
    onResize() {
        if (this.bodyheight) {
            let /** @type {?} */ h = (window.innerHeight / 100) * this.bodyheight;
            if (this.cardHeader && this.cardHeader.nativeElement && this.cardHeader.nativeElement.offsetHeight) {
                h = h - this.cardHeader.nativeElement.offsetHeight;
            }
            if (this.cardFooter && this.cardFooter.nativeElement && this.cardFooter.nativeElement.offsetHeight) {
                h = h - this.cardFooter.nativeElement.offsetHeight;
            }
            if (this.bodyheight === 100) {
                h = h - 40;
            }
            this.minHeight = h;
            this.height = h;
        }
    }
    /**
     * @return {?}
     */
    getContextMenu() {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    loadContextMenu(rightClickData) {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.mouseLocation.left = rightClickData.event.clientX;
            this.mouseLocation.top = rightClickData.event.clientY;
            this.getContextMenu();
            this.posixUp = this.getListPosition(rightClickData.ref);
            rightClickData.event.preventDefault();
            rightClickData.event.stopPropagation();
            this.rightClickNodeData = rightClickData.data;
            this.nodeRightClick.emit(rightClickData);
        }
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        this.rightClick.emit(Data);
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.flag = false;
            if (!this.flag) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.removeListner();
    }
}
AmexioCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-card',
                template: `
    <div #id class="card-container" *ngIf="show" (window:resize)="onResize()" (contextmenu)="loadContextMenu({event:$event,ref:id})">
        <header #cardHeader [style.padding]="headerPadding" class="card-header" *ngIf="header"
         [ngClass]="{'flex-start':(headeralign=='left'),'flex-end':(headeralign=='right'),'flex-center':(headeralign=='center')}">
            <ng-content select="amexio-header"></ng-content>
        </header>
        <div class="card-body cardbody" [style.padding]="bodyPadding"
         [ngStyle]="{'height.px' : height,'overflow-y' : height!= null ? 'auto' : '','min-height.px' : minHeight}">
            <ng-content select="amexio-body"></ng-content>
        </div>
        <footer #cardFooter [style.padding]="footerPadding" class="card-footer" *ngIf="footer"
         [ngClass]="{'flex-start':(footeralign=='left'),'flex-end':(footeralign=='right'),'flex-center':(footeralign=='center')}">
            <ng-content select="amexio-action"></ng-content>
        </footer>
    </div>

    <ng-container *ngIf="flag">
        <base-contextmenu 
        [base-context-menu]="contextmenu" 
        [mouse-location-top]="mouseLocation.top"
        [mouse-location-left]="mouseLocation.left" 
        [is-FlagShow]="flag" 
        [right-click-data]="nodeRightClick"
        (onRightClick) ="rightClickDataEmit($event)"
        [position-up]="posixUp">
        </base-contextmenu>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
AmexioCardComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioCardComponent.propDecorators = {
    headeralign: [{ type: Input, args: ['header-align',] }],
    header: [{ type: Input }],
    footer: [{ type: Input }],
    footeralign: [{ type: Input, args: ['footer-align',] }],
    show: [{ type: Input }],
    height: [{ type: Input }],
    minHeight: [{ type: Input, args: ['min-height',] }],
    bodyheight: [{ type: Input, args: ['body-height',] }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    parentRef: [{ type: Input }],
    nodeRightClick: [{ type: Output }],
    rightClick: [{ type: Output }],
    cardHeader: [{ type: ViewChild, args: ['cardHeader', { read: ElementRef },] }],
    cardFooter: [{ type: ViewChild, args: ['cardFooter', { read: ElementRef },] }],
    amexioHeader: [{ type: ContentChildren, args: [AmexioHeaderComponent,] }],
    amexioBody: [{ type: ContentChildren, args: [AmexioBodyComponent,] }],
    amexioFooter: [{ type: ContentChildren, args: [AmexioFooterComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 8/1/18.
*/
class AmexioColumnComponent {
    constructor() {
        this.role = this.colclass;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set size(value) {
        this.size_ = value;
        this.colclass = 'flex-col flex-col-' + value;
        this.role = this.colclass;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.size_;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-column', template: `

    <div [ngStyle]="{'height':fit ? '100%':''}">
        <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioColumnComponent.ctorParameters = () => [];
AmexioColumnComponent.propDecorators = {
    role: [{ type: HostBinding, args: ['attr.class',] }],
    fit: [{ type: Input, args: ['fit',] }],
    size: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioGridLayoutService {
    constructor() {
        this.layoutData = [];
    }
    /**
     * @param {?} dataLayout
     * @return {?}
     */
    createLayout(dataLayout) {
        let /** @type {?} */ findStatus = false;
        this.count = dataLayout.count;
        const /** @type {?} */ data = dataLayout.getLayout();
        data.count = this.count;
        if (this.layoutData.length <= 0) {
            this.layoutData.push(data);
        }
        else {
            this.layoutData.forEach((obj) => {
                if (obj.name === data.name) {
                    obj[data.layoutType] = data[data.layoutType];
                    findStatus = true;
                }
            });
            if (!findStatus) {
                this.layoutData.push(data);
            }
        }
    }
    /**
     * @param {?} layoutName
     * @return {?}
     */
    getLayoutData(layoutName) {
        return this.layoutData.find((obj) => obj.name === layoutName);
    }
}
AmexioGridLayoutService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AmexioGridLayoutService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioGridItemComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
        this.hostname = this._name;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.insertStyleSheetRule('.' + this.name + '{ grid-area: ' + this.name + ' ; padding: 5px } ');
    }
    /**
     * @param {?} ruleText
     * @return {?}
     */
    insertStyleSheetRule(ruleText) {
        const /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            const /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        let /** @type {?} */ isCssAdded = false;
        for (const /** @type {?} */ sh of sheets) {
            const /** @type {?} */ sheet = sh;
            if (!isCssAdded && (sheet && sheet.href === null && sheet.rules)) {
                try {
                    sheet.insertRule(ruleText, 0);
                    isCssAdded = true;
                }
                catch (/** @type {?} */ e) {
                }
            }
        }
    }
}
AmexioGridItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-grid-item',
                template: `
          <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioGridItemComponent.ctorParameters = () => [];
AmexioGridItemComponent.propDecorators = {
    hostname: [{ type: HostBinding, args: ['class',] }],
    name: [{ type: Input, args: ['name',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridConstants {
}
GridConstants.Tablet = 'tab';
GridConstants.Desktop = 'desktop';
GridConstants.Mobile = 'mobile';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioGridComponent {
    /**
     * @param {?} _gridlayoutService
     */
    constructor(_gridlayoutService) {
        this._gridlayoutService = _gridlayoutService;
        this.isInit = false;
        this.desktopWidth = '(min-width: 1025px)';
        this.mobileWidth = '(max-width: 767px)';
        this.tabletWidth = '(min-width: 768px) and (max-width: 1024px)';
    }
    /**
     * @return {?}
     */
    get layout() {
        return this._layout;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set layout(value) {
        if (value != null) {
            this._layout = value;
            if (this.isInit) {
                this.gridInit();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.gridInit();
        this.isInit = true;
    }
    /**
     * @return {?}
     */
    gridInit() {
        this.containerClass = '';
        this.className = '';
        this.cssGenreration(this._gridlayoutService.getLayoutData(this.layout));
    }
    /**
     * @return {?}
     */
    getCssAttribute() {
        return 'display: grid;' + ' grid-gap: 5px;' + 'grid-template-columns: repeat(' + this.colCount + ', 1fr);';
    }
    /**
     * @param {?} ruleText
     * @return {?}
     */
    insertStyleSheetRuleParent(ruleText) {
        const /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            const /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        let /** @type {?} */ isCssAdded = false;
        for (const /** @type {?} */ sh of sheets) {
            const /** @type {?} */ sheet = sh;
            if (!isCssAdded && (sheet && sheet.href === null && sheet.rules)) {
                try {
                    sheet.insertRule(ruleText, 0);
                    isCssAdded = true;
                }
                catch (/** @type {?} */ e) {
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.itemCollection = this.queryItem.toArray();
    }
    /**
     * @param {?} deviceName
     * @return {?}
     */
    dataCreation(deviceName) {
        this.containerClass = '';
        deviceName.forEach((ele) => {
            this.containerClass = this.containerClass + '"' + ele.join(' ') + '"';
        });
        return this.containerClass;
    }
    /**
     * @param {?} layoutData
     * @return {?}
     */
    cssGenreration(layoutData) {
        this.colCount = layoutData.count;
        this.className = this.className + '' + layoutData.name;
        if (layoutData.desktop.length > 0) {
            this.cssGenerationCommonMethod(layoutData, this.desktopWidth, GridConstants.Desktop);
            if (layoutData.tab.length === 0) {
                this.cssGenerationCommonMethod(layoutData, this.tabletWidth, GridConstants.Desktop);
            }
            else {
                this.cssGenerationCommonMethod(layoutData, this.tabletWidth, GridConstants.Desktop);
                this.cssGenerationCommonMethod(layoutData, this.tabletWidth, GridConstants.Tablet);
            }
            if (layoutData.mobile.length === 0 && layoutData.tab.length === 0) {
                this.cssGenerationCommonMethod(layoutData, this.mobileWidth, GridConstants.Desktop);
            }
            else if (layoutData.mobile.length === 0 && layoutData.tab.length > 0) {
                this.cssGenerationCommonMethod(layoutData, this.mobileWidth, GridConstants.Tablet);
            }
            else {
                this.cssGenerationCommonMethod(layoutData, this.mobileWidth, GridConstants.Mobile);
            }
        }
        else {
            this.cssGenerationNoDesktop(layoutData);
        }
    }
    /**
     * @param {?} layoutData
     * @return {?}
     */
    cssGenerationNoDesktop(layoutData) {
        if (layoutData.tab.length > 0 && layoutData.mobile.length === 0) {
            this.cssGenerationCommonMethod(layoutData, this.desktopWidth, GridConstants.Tablet);
            this.cssGenerationCommonMethod(layoutData, this.tabletWidth, GridConstants.Tablet);
            this.cssGenerationCommonMethod(layoutData, this.mobileWidth, GridConstants.Tablet);
        }
        else if (layoutData.tab.length === 0 && layoutData.mobile.length > 0) {
            this.cssGenerationCommonMethod(layoutData, this.mobileWidth, GridConstants.Mobile);
            this.cssGenerationCommonMethod(layoutData, this.tabletWidth, GridConstants.Mobile);
            this.cssGenerationCommonMethod(layoutData, this.desktopWidth, GridConstants.Mobile);
        }
    }
    /**
     * @param {?} layoutData
     * @param {?} screenWidth
     * @param {?} deviceType
     * @return {?}
     */
    cssGenerationCommonMethod(layoutData, screenWidth, deviceType) {
        this.insertStyleSheetRuleParent('@' + 'media' + screenWidth + '{' + '.' + layoutData.name +
            '{' + this.getCssAttribute() + ' grid-template-areas: ' +
            this.dataCreation(layoutData[deviceType]) + '}' + '}');
    }
}
AmexioGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-layout-grid',
                template: `
    <div [ngClass]="className" >
          <ng-content select="amexio-grid-item"></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioGridComponent.ctorParameters = () => [
    { type: AmexioGridLayoutService }
];
AmexioGridComponent.propDecorators = {
    queryItem: [{ type: ContentChildren, args: [AmexioGridItemComponent,] }],
    layout: [{ type: Input, args: ['layout',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioRowComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
}
AmexioRowComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-row', template: `
    <div class="flex-row">
      <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioRowComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by pratik on 24/1/18.
*/
class AccordionService {
    constructor() {
        this.subject = new rxjs_5();
    }
    /**
     * @param {?} data
     * @param {?} parent
     * @return {?}
     */
    onClickEvent(data, parent) {
        this.subject.next({ data, parent });
    }
    /**
     * @return {?}
     */
    clearEvents() {
        this.subject.next();
    }
    /**
     * @return {?}
     */
    getEvents() {
        return this.subject.asObservable();
    }
}
AccordionService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*  Created by pratik on 27/11/17.
*/
const LAYOUT_COMPONENTS = [
    AmexioRowComponent,
    AmexioColumnComponent,
    AmexioGridComponent,
    AmexioGridItemComponent,
    AmexioBorderLayoutItemComponent,
    AmexioBorderLayoutComponent,
    AmexioCardComponent,
    AmexioBoxComponent,
    AmexioAccordionTabComponent,
    AmexioAccordionComponent,
    AmexioAccordionHeaderComponent,
    AmexioLayoutComponent,
    AmexioLayoutItemComponent,
];
class AmexioLayoutModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioLayoutModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService, AmexioGridLayoutService],
        };
    }
}
AmexioLayoutModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    AmexioBaseContextMenuModule,
                    AmexioCommonModule,
                ],
                exports: LAYOUT_COMPONENTS,
                declarations: LAYOUT_COMPONENTS,
                providers: [CommonDataService, DeviceQueryService, IconLoaderService, AmexioGridLayoutService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ScriptLoadService {
    constructor() { }
    /**
     * @param {?} loginProviderObj
     * @param {?=} onload
     * @return {?}
     */
    loadScript(loginProviderObj, onload) {
        const /** @type {?} */ signInJS = document.createElement('script');
        signInJS.async = true;
        signInJS.onload = onload;
        signInJS.src = loginProviderObj.url;
        if (loginProviderObj.name === 'linkedin') {
            signInJS.async = false;
            signInJS.text = ('api_key: ' + loginProviderObj.id).replace('\'', '');
        }
        if (!this.isScriptAlreadyPresent(signInJS.src)) {
            document.head.appendChild(signInJS);
        }
    }
    /**
     * @param {?} script
     * @return {?}
     */
    isScriptAlreadyPresent(script) {
        const /** @type {?} */ scripts = document.getElementsByTagName('script');
        let /** @type {?} */ isScriptLoaded;
        // tslint:disable-next-line:prefer-for-of
        for (let /** @type {?} */ i = 0; i < scripts.length; i++) {
            const /** @type {?} */ scriptData = scripts[i];
            if (scriptData.src === script) {
                isScriptLoaded = true;
                return isScriptLoaded;
            }
        }
        return isScriptLoaded;
    }
}
ScriptLoadService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ScriptLoadService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioBadgeComponent {
    constructor() {
        this.orientation = 'vertical';
        this.cClass = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.color && !this.background) {
            this.cClass = 'amexio-badge-color';
        }
    }
}
AmexioBadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-badge',
                template: `
      <div class="amexio-badge" [ngClass]="cClass" [style.background]="background" [style.color]="color" [style.top]="top" [style.left]="left" [style.right]="right" [style.bottom]="bottom" [style.height]="height" [style.width]="width" [ngStyle]="{'position': absolute ? 'absolute' : 'relative',
                      'flex-direction': (orientation === 'horizontal') ? 'row' : 'column'
                      }">
          <ng-content></ng-content>
      </div>
    `,
            },] },
];
/** @nocollapse */
AmexioBadgeComponent.ctorParameters = () => [];
AmexioBadgeComponent.propDecorators = {
    absolute: [{ type: Input, args: ['absolute',] }],
    background: [{ type: Input, args: ['background',] }],
    color: [{ type: Input, args: ['color',] }],
    top: [{ type: Input, args: ['top',] }],
    left: [{ type: Input, args: ['left',] }],
    right: [{ type: Input, args: ['right',] }],
    bottom: [{ type: Input, args: ['bottom',] }],
    orientation: [{ type: Input, args: ['orientation',] }],
    height: [{ type: Input, args: ['height',] }],
    width: [{ type: Input, args: ['width',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SocialBaseComponent {
    constructor() {
        /*
            Properties
            name : style-type
            datatype : string
            version : 5.5.3 onwards
            default : null
            description : style of component
           */
        this.styleType = 'square';
    }
}
SocialBaseComponent.propDecorators = {
    clientId: [{ type: Input, args: ['client-id',] }],
    label: [{ type: Input, args: ['label',] }],
    styleType: [{ type: Input, args: ['style-type',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoginProvider {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by sagar on 23/1/19.
  INFO: THIS CONSTANT USE FOR SOCIAL COMPONENT
*/
const SOCIAL_CONSTANT = {
    GOOGLE: 'google',
    FACEBOOK: 'facebook',
    LINKEDIN: 'linkedin',
    FACEBOOK_API_URL: 'https://connect.facebook.net/en_US/sdk.js',
    GOOGLE_GMAIL_API_URL: 'https://apis.google.com/js/platform.js',
    LINKEDIN_API_URL: 'https://platform.linkedin.com/in.js',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SocialUserInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FacebookAuthComponent extends SocialBaseComponent {
    /**
     * @param {?} scriptLoadService
     */
    constructor(scriptLoadService) {
        super();
        this.scriptLoadService = scriptLoadService;
        this.loginProviderObj = new LoginProvider();
        this.onLogin = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.styleType && this.styleType.toLowerCase() === 'circle') {
            this.isCircle = true;
        }
        if (this.styleType && this.styleType.toLowerCase() === 'square') {
            this.isCircle = false;
        }
        this.loginProviderObj.id = this.clientId;
        this.loginProviderObj.name = SOCIAL_CONSTANT.FACEBOOK;
        this.loginProviderObj.url = SOCIAL_CONSTANT.FACEBOOK_API_URL;
        this.initialize();
    }
    /**
     * @return {?}
     */
    onButtonClick() {
        this.signIn();
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.scriptLoadService.loadScript(this.loginProviderObj, () => {
                FB.init({
                    appId: this.clientId,
                    autoLogAppEvents: true,
                    cookie: true,
                    xfbml: true,
                    version: 'v2.10',
                });
                FB.AppEvents.logPageView();
                FB.getLoginStatus(function (response) {
                    if (response.status === 'connected') {
                        const /** @type {?} */ accessToken = FB.getAuthResponse()['accessToken'];
                        FB.api('/me?fields=name,email,picture', (res) => {
                            resolve(this.getUserinfo(Object.assign({}, { token: accessToken }, res)));
                        });
                    }
                });
            });
        });
    }
    /**
     * @param {?} response
     * @return {?}
     */
    getUserinfo(response) {
        const /** @type {?} */ user = new SocialUserInfo();
        user.id = response.id;
        user.name = response.name;
        user.email = response.email;
        user.token = response.token;
        user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
        if (user && user.name) {
            this.onLogin.emit(user);
        }
        return user;
    }
    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) => {
            FB.login((response) => {
                if (response.authResponse) {
                    const /** @type {?} */ accessToken = FB.getAuthResponse()['accessToken'];
                    FB.api('/me?fields=name,email,picture', (res) => {
                        resolve(this.getUserinfo(Object.assign({}, { token: accessToken }, res)));
                    });
                }
            }, { scope: 'email,public_profile' });
        });
    }
}
FacebookAuthComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'amexio-facebook-auth-provider',
                template: `
    <div class="social-button">
            <ng-container *ngIf="!isCircle && styleType != 'square'" >
                    <amexio-button [bg-color]="'#3b5998'" [color]="'#fff'" [label]="label" [tooltip]="'Facebook'" [icon]="'fa fa-facebook'" (onClick)="onButtonClick()"></amexio-button>
            </ng-container>
    
            <ng-container *ngIf="styleType == 'square'">
                    <amexio-floating-button  [block]="'square'" [bg-color]="'#3b5998'" [color]="'#fff'" [relative]="true" [type]="'default'" [icon]="'fa fa-facebook'" (onClick)="onButtonClick()"></amexio-floating-button>
            </ng-container>
    
            <ng-container *ngIf="styleType == 'circle'">
                    <amexio-floating-button [bg-color]="'#3b5998'" [color]="'#fff'" [relative]="true" [icon]="'fa fa-facebook'" [type]="'default'" (onClick)="onButtonClick()"></amexio-floating-button>
            </ng-container>
        </div>
  `,
            },] },
];
/** @nocollapse */
FacebookAuthComponent.ctorParameters = () => [
    { type: ScriptLoadService }
];
FacebookAuthComponent.propDecorators = {
    onLogin: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleAuthComponent extends SocialBaseComponent {
    /**
     * @param {?} meta
     * @param {?} scriptLoadService
     */
    constructor(meta, scriptLoadService) {
        super();
        this.meta = meta;
        this.scriptLoadService = scriptLoadService;
        this.loginProviderObj = new LoginProvider();
        this.onLogin = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loginProviderObj.id = this.clientId;
        this.loginProviderObj.name = SOCIAL_CONSTANT.GOOGLE;
        this.loginProviderObj.url = SOCIAL_CONSTANT.GOOGLE_GMAIL_API_URL;
        this.meta.addTag({
            name: 'google-signin-client_id',
            content: this.clientId,
        });
        if (this.styleType && this.styleType.toLowerCase() === 'circle') {
            this.isCircle = true;
        }
        if (!this.label && this.styleType && this.styleType.toLowerCase() !== 'circle') {
            this.label = 'GOOGLE';
        }
        this.initialize();
    }
    /**
     * @return {?}
     */
    onButtonClick() {
        this.signIn();
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.scriptLoadService.loadScript(this.loginProviderObj, () => {
                gapi.load('auth2', () => {
                    this.auth2 = gapi.auth2.init({
                        client_id: this.clientId,
                        scope: 'email',
                    });
                    this.auth2.then(() => {
                        if (this.auth2.isSignedIn.get()) {
                            resolve(this.getLoginInUserInfo());
                        }
                    });
                });
            });
        });
    }
    /**
     * @return {?}
     */
    getLoginInUserInfo() {
        const /** @type {?} */ user = new SocialUserInfo();
        const /** @type {?} */ profile = this.auth2.currentUser.get().getBasicProfile();
        const /** @type {?} */ authResponseObj = this.auth2.currentUser.get().getAuthResponse(true);
        if (profile && authResponseObj) {
            user.id = profile.getId();
            user.name = profile.getName();
            user.email = profile.getEmail();
            user.image = profile.getImageUrl();
            user.token = authResponseObj.access_token;
            user.idToken = authResponseObj.id_token;
            this.onLogin.emit(user);
        }
        return user;
    }
    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) => {
            const /** @type {?} */ promise = this.auth2.signIn();
            promise.then(() => {
                resolve(this.getLoginInUserInfo());
            });
        });
    }
}
GoogleAuthComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'amexio-google-auth-provider',
                template: `
    <div class="social-button">

        <ng-container *ngIf="!isCircle && styleType != 'square'" >
                <amexio-button [bg-color]="'#dd4b39'" [color]="'#fff'" [label]="label" [tooltip]="'Google'" [icon]="'fa fa-google'" (onClick)="onButtonClick()"></amexio-button>
        </ng-container>

        <ng-container *ngIf="styleType == 'square'">
                <amexio-floating-button  [block]="'square'" [bg-color]="'#dd4b39'" [color]="'#fff'" [relative]="true" [type]="'default'" [icon]="'fa fa-google'" (onClick)="onButtonClick()"></amexio-floating-button>
        </ng-container>

        <ng-container *ngIf="styleType == 'circle'">
                <amexio-floating-button [bg-color]="'#dd4b39'" [color]="'#fff'" [relative]="true" [icon]="'fa fa-google'" [type]="'default'" (onClick)="onButtonClick()"></amexio-floating-button>
        </ng-container>
    </div>
  `,
            },] },
];
/** @nocollapse */
GoogleAuthComponent.ctorParameters = () => [
    { type: Meta },
    { type: ScriptLoadService }
];
GoogleAuthComponent.propDecorators = {
    onLogin: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright [2019] [Metamagic]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by sagar on 23/1/19.
 * INFO: LINKEDIN AUTH COMPONENT IS USED FOR THIRD PARTY LOGIN USING LINKEDIN OAUTH API
 */
class LinkedInAuthComponent extends SocialBaseComponent {
    /**
     * @param {?} scriptLoadService
     */
    constructor(scriptLoadService) {
        super();
        this.scriptLoadService = scriptLoadService;
        this.loginProviderObj = new LoginProvider();
        this.onLogin = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.styleType && this.styleType.toLowerCase() === 'circle') {
            this.isCircle = true;
        }
        if (!this.label && this.styleType && this.styleType.toLowerCase() !== 'circle') {
            this.label = 'Linkedin';
        }
        this.loginProviderObj.id = this.clientId;
        this.loginProviderObj.name = SOCIAL_CONSTANT.LINKEDIN;
        this.loginProviderObj.url = SOCIAL_CONSTANT.LINKEDIN_API_URL;
        this.initialize();
    }
    /**
     * @return {?}
     */
    onButtonClick() {
        if (IN && IN.User.authorize()) {
            console.log('User already loggedin...');
            return;
        }
        else {
            this.signIn();
        }
    }
    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) => {
            this.scriptLoadService.loadScript(this.loginProviderObj, () => {
                IN.init({
                    api_key: this.clientId,
                    authorize: true,
                });
                IN.Event.on(IN, 'auth', () => {
                    if (IN.User.isAuthorized()) {
                        IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result((res) => {
                            resolve(this.getLoginInUserInfo(res));
                        });
                    }
                });
            });
        });
    }
    /**
     * @return {?}
     */
    onLinkedInLoad() {
        IN.Event.on(IN, 'systemReady', () => {
            IN.User.refresh();
        });
    }
    /**
     * @param {?} response
     * @return {?}
     */
    getLoginInUserInfo(response) {
        const /** @type {?} */ user = new SocialUserInfo();
        user.id = response.emailAddress;
        user.name = response.firstName + ' ' + response.lastName;
        user.email = response.emailAddress;
        user.image = response.pictureUrl;
        user.token = IN.ENV.auth.oauth_token;
        this.onLogin.emit(user);
        return user;
    }
    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) => {
            // tslint:disable-next-line:no-identical-functions
            IN.Event.on(IN, 'auth', () => {
                if (IN.User.isAuthorized()) {
                    IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result((res) => {
                        resolve(this.getLoginInUserInfo(res));
                    });
                }
            });
        });
    }
}
LinkedInAuthComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'amexio-linkedin-auth-provider',
                template: `
    <div class="social-button">

        <ng-container *ngIf="!isCircle && styleType != 'square'" >
                <amexio-button [bg-color]="'#0082ca'" [color]="'#fff'" [label]="label" [tooltip]="'Linkedin'" [icon]="'fa fa-linkedin'" (onClick)="onButtonClick()"></amexio-button>
        </ng-container>

        <ng-container *ngIf="styleType == 'square'">
                <amexio-floating-button  [block]="'square'" [bg-color]="'#0082ca'" [color]="'#fff'" [relative]="true" [type]="'default'" [icon]="'fa fa-linkedin'" (onClick)="onButtonClick()"></amexio-floating-button>
        </ng-container>

        <ng-container *ngIf="styleType == 'circle'">
                <amexio-floating-button [bg-color]="'#0082ca'" [color]="'#fff'" [relative]="true" [icon]="'fa fa-linkedin'" [type]="'default'" (onClick)="onButtonClick()"></amexio-floating-button>
        </ng-container>
    </div>
  `,
            },] },
];
/** @nocollapse */
LinkedInAuthComponent.ctorParameters = () => [
    { type: ScriptLoadService }
];
LinkedInAuthComponent.propDecorators = {
    onLogin: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioSocialComponent {
    constructor() {
        this.onLogin = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.type) {
            this.type = this.type.toLocaleLowerCase();
        }
    }
    /**
     * @param {?} socialUserInfo
     * @return {?}
     */
    onLoginClick(socialUserInfo) {
        this.onLogin.emit(socialUserInfo);
    }
}
AmexioSocialComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-login-social',
                template: `
    <ng-container *ngIf="type ==='google'">
        <amexio-google-auth-provider [client-id]="key" [label]="label" [style-type]="styleType" (onLogin)="onLoginClick($event)"></amexio-google-auth-provider>
    </ng-container>
    <ng-container *ngIf="type === 'linkedin'">
        <amexio-linkedin-auth-provider [client-id]="key" [label]="label" [style-type]="styleType" (onLogin)="onLoginClick($event)"></amexio-linkedin-auth-provider>
    </ng-container>

    <ng-container *ngIf="type === 'facebook'">
        <amexio-facebook-auth-provider [client-id]="key" [label]="label" [style-type]="styleType" (onLogin)="onLoginClick($event)"></amexio-facebook-auth-provider>
    </ng-container>
  `,
                styles: [`
  .social-button .button-default:hover {
      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .16), 0 2px 10px 0 rgba(0, 0, 0, .12)!important;
  }`],
            },] },
];
/** @nocollapse */
AmexioSocialComponent.ctorParameters = () => [];
AmexioSocialComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }],
    key: [{ type: Input, args: ['api-key',] }],
    label: [{ type: Input, args: ['label',] }],
    styleType: [{ type: Input, args: ['style-type',] }],
    onLogin: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const FORM_COMPONENTS$1 = [
    AmexioTextInputComponent,
    AmexioCheckBoxComponent,
    AmexioDropDownComponent,
    AmexioTypeAheadComponent,
    AmexioInputHelperComponent,
    AmexioRadioGroupComponent,
    AmexioEmailInputComponent,
    AmexioNumberInputComponent,
    AmexioPasswordComponent,
    AmexioTextAreaComponent,
    AmexioToggleComponent,
    AmexioRatingComponent,
    AmexioButtonComponent,
    AmexioButtonGroupComponent,
    AmexioButtonDropdownComponent,
    AmexioSpiltButtonDropdownComponent,
    AmexioButtonDropDownItemComponent,
    AmexioCheckBoxGroupComponent,
    CheckboxComponent,
    AmexioSliderComponent,
    AmexioTagsInputComponent,
    AmexioDateTimePickerComponent,
    AmexioButtonDropDownItemComponent,
    AmexioButtonDropdownComponent,
    AmexioSpiltButtonDropdownComponent,
    AmexioFileUploadComponent,
    AmexioLabelComponent,
    AmexioFloatingButtonComponent,
    AmexioFloatingGroupButtonComponent,
    AmexioDropDownitemsComponent,
    AmexioDropDownMenuComponent,
    ToolbarComponent,
    ToolbaroneComponent,
    ToolBarActionComponent,
    SearchboxtoolComponent,
    AmexioSearchAdvanceComponent,
    RecaptchaComponent,
    AmexioSpinnerComponent,
    AmexioCreditcardComponent,
    AmexioChipComponent,
    AmexioChipsComponent,
    GoogleAuthComponent,
    LinkedInAuthComponent,
    FacebookAuthComponent,
    AmexioSocialComponent,
    AmexioBadgeComponent,
    DarkmodeComponent,
    AmexioRangeSliderComponent,
    AmexioMultipleDatePickerComponent,
];
class AmexioFormsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioFormsModule,
            providers: [CommonDataService, LoadRecaptchaService, ScriptLoadService],
        };
    }
}
AmexioFormsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    AmexioLayoutModule,
                    HttpClientModule,
                    AmexioCommonModule.forRoot(),
                ],
                exports: FORM_COMPONENTS$1,
                declarations: FORM_COMPONENTS$1,
                providers: [CommonDataService, DomHandler, ScriptLoadService,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class OverlayContainerComponent {
    /**
     * @param {?} _renderer
     */
    constructor(_renderer) {
        this._renderer = _renderer;
        this.show = false;
        this.right = null;
        this.left = null;
        this.top = null;
        this.bottom = null;
        this.marginLeft = null;
        this.height = '100%';
        this.arrowClass = 'leftTopArrow';
        this.width = 'auto';
        this.bodyHeight = null;
        this.closeonescape = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    onClose() {
        this.resetData();
    }
    /**
     * @return {?}
     */
    resetData() {
        this.left = null;
        this.top = null;
        this.right = null;
        this.bottom = null;
        this.marginLeft = null;
        this.show = false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        this.resetData();
        this.show = !this.show;
        this.eventRef = event;
        if (this.show && this.closeonescape) {
            this.globalListenFunc = this._renderer.listen('document', 'keyup.esc', (e) => {
                this.show = false;
                if (this.globalListenFunc) {
                    this.globalListenFunc();
                }
            });
        }
    }
    /**
     * @return {?}
     */
    setRenderPositionClass() {
        if (this.position === 'relative') {
            this.left = null;
            this.marginLeft = null;
        }
        return {
            'bottom': this.bottom + 'px', 'margin-left': this.marginLeft + 'px',
            'right': this.right + 'px', 'margin-top': this.top + 'px',
            'left': this.left + 'px', 'width': this.width,
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onAnimationStart(event) {
        if (this.show) {
            const /** @type {?} */ positions = this.findOverlayPosition(event.element, this.eventRef.target || this.eventRef.currentTarget);
            this.top = this.eventRef.target.offsetHeight + 20;
            this.left = this.eventRef.pageX - this.eventRef.target.offsetWidth;
            this.marginLeft = this.eventRef.target.offsetWidth - this.left;
            if (positions.right) {
                this.iconPosition = {
                    left: '-8px',
                    right: '',
                };
                this.arrowClass = 'rightTopArrow';
                this.left = null;
                this.right = document.body.clientWidth - this.eventRef.pageX;
                if (positions.bottom) {
                    this.arrowClass = 'rightBottomArrow';
                    this.top = null;
                    this.bottom = Math.abs(document.body.offsetHeight - this.eventRef.pageY);
                }
            }
            else {
                this.iconPosition = {
                    right: '-8px', left: '',
                };
                this.arrowClass = 'leftTopArrow';
            }
            if (!positions.right && positions.bottom) {
                this.arrowClass = 'leftBottomArrow';
                this.top = null;
                this.bottom = Math.abs(document.body.offsetHeight - this.eventRef.pageY);
            }
            this.renderPositionClass = this.setRenderPositionClass();
            if (this.bodyHeight) {
                this.height = (window.outerHeight / 100) * this.bodyHeight + 'px';
            }
        }
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    findOverlayPosition(element, target) {
        let /** @type {?} */ rightAlign = false;
        let /** @type {?} */ bottomAlign = false;
        const /** @type {?} */ elementOuterHeight = element.offsetParent ? element.offsetHeight : '';
        const /** @type {?} */ targetOuterHeight = target.offsetHeight;
        const /** @type {?} */ targetOuterWidth = target.offsetWidth;
        const /** @type {?} */ targetOffset = target.getBoundingClientRect();
        const /** @type {?} */ windowScrollTop = this.getWindowScrollTop();
        const /** @type {?} */ windowScrollLeft = this.getWindowScrollLeft();
        const /** @type {?} */ viewport = this.getViewportDetails();
        let /** @type {?} */ top;
        let /** @type {?} */ left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
                top = 0 + windowScrollTop;
            }
            bottomAlign = true;
        }
        else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
        }
        if (targetOffset.left + targetOuterWidth + 150 > viewport.width) {
            rightAlign = true;
        }
        else {
            left = targetOffset.left + windowScrollLeft;
        }
        return { topPosi: top, leftPosi: left, right: rightAlign, bottom: bottomAlign };
    }
    /**
     * @return {?}
     */
    getWindowScrollTop() {
        const /** @type {?} */ doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
    /**
     * @return {?}
     */
    getWindowScrollLeft() {
        const /** @type {?} */ doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
    /**
     * @return {?}
     */
    getViewportDetails() {
        const /** @type {?} */ win = window;
        const /** @type {?} */ doc = document;
        const /** @type {?} */ ele = doc.documentElement;
        const /** @type {?} */ body = doc.getElementsByTagName('body')[0];
        const /** @type {?} */ widthW = win.innerWidth || ele.clientWidth || body.clientWidth;
        const /** @type {?} */ heightW = win.innerHeight || ele.clientHeight || body.clientHeight;
        return { width: widthW, height: heightW };
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
}
OverlayContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-overlay-container',
                template: `

    <ng-container *ngIf="show">
      <div #overlay class="overlayContainer {{arrowClass}}"
           [ngStyle]="renderPositionClass"
           [@animation]="{value: 'show'}"
           (@animation.start)="onAnimationStart($event)">
        <i *ngIf="closable"
           class="fa fa-times-circle-o iconClass " [ngStyle]="iconPosition"
           aria-hidden="true" (click)="onClose()"></i>
        <div class="containerClass" [style.height]="height">
          <ng-content></ng-content>
        </div>
      </div>
    </ng-container>





  
  `,
                animations: [
                    trigger('animation', [
                        state('void', style({
                            transform: 'translateY(5%)',
                            opacity: 0,
                        })),
                        state('show', style({
                            transform: 'translateY(0)',
                            opacity: 1,
                        })),
                        transition('void => show', animate('200ms')),
                        transition('show => void', animate('200ms')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
OverlayContainerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
OverlayContainerComponent.propDecorators = {
    closable: [{ type: Input, args: ['closable',] }],
    position: [{ type: Input, args: ['position',] }],
    width: [{ type: Input, args: ['width',] }],
    bodyHeight: [{ type: Input, args: ['body-height',] }],
    closeonescape: [{ type: Input, args: ['close-on-escape',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const PANE_COMPONENTS = [
    AmexioHeaderComponent,
    AmexioFooterComponent,
    AmexioBodyComponent,
    AmexioFieldSetComponent,
    AmexioWindowPaneComponent,
    AmexioWindowHeaderComponent,
    AmexioStepsComponent,
    AmexioTabPillComponent,
    AmexioTabComponent,
    AmexioVerticalTabComponent,
    AmexioRightVerticalTabComponent,
    AmexioCarouselComponent,
    AmexioTemplateDirective,
    AmexioTemplateWrapperDirective,
    StepBlockComponent,
    AmexioPanelComponent,
    AmexioPanelHeaderComponent,
    AmexiodialoguePaneComponent,
    AmexioFormComponent,
    AmexioFormActionComponent,
    AmexioFormHeaderComponent,
    AmexioFormBodyComponent,
    AmexioFormGroupDirective,
    AmexioTabActionComponent,
    AmexiotimelineComponent,
    AmexiotimelineeventComponent,
    OverlayContainerComponent,
];
class AmexioPaneModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioPaneModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService],
        };
    }
}
AmexioPaneModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    AmexioFormsModule,
                    HttpClientModule,
                    AmexioBaseContextMenuModule,
                    AmexioCommonModule,
                ],
                entryComponents: [AmexioTabPillComponent],
                exports: PANE_COMPONENTS,
                declarations: PANE_COMPONENTS,
                providers: [CommonDataService, DeviceQueryService, IconLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TitleModel {
    constructor() {
        this.centerTitle = '';
        this.previousTitle = '';
        this.nextTitle = '';
    }
    /**
     * @param {?} prev
     * @param {?} center
     * @param {?} next
     * @return {?}
     */
    setTitle(prev, center, next) {
        this.previousTitle = prev;
        this.centerTitle = center;
        this.nextTitle = next;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCarouselCEComponent {
    /**
     * @param {?} http
     * @param {?} dataService
     */
    constructor(http, dataService) {
        this.http = http;
        this.dataService = dataService;
        this.currentImageIndex = 0;
        this.titleModel = new TitleModel();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
        }
        this.positionCalculation();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.templates.forEach((item) => {
            this.itemTemplate = item.template;
        });
    }
    /**
     * @return {?}
     */
    positionCalculation() {
        if (this.templateWidth) {
            if (this.position === 'left') {
                this.positionRight = (100 - this.templateWidth);
                this.positionLeft = 0;
            }
            else if (this.position === 'right') {
                this.positionRight = 0;
                this.positionLeft = (100 - this.templateWidth);
            }
            else if (this.position === 'center') {
                this.positionLeft = ((100 - this.templateWidth) / 2);
                this.positionRight = this.positionLeft;
            }
        }
        else {
            if (this.position === 'left') {
                this.positionRight = 60;
                this.positionLeft = 0;
            }
            else if (this.position === 'right') {
                this.positionRight = 0;
                this.positionLeft = 60;
            }
            else if (this.position === 'center') {
                this.positionLeft = 30;
                this.positionRight = 30;
            }
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        // Check if key is added?
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.imageData = responsedata;
        this.titleModel.previousTitle = this.imageData[this.imageData.length - 1].title ? this.imageData[this.imageData.length - 1].title : '';
        this.titleModel.centerTitle = this.imageData[0].title ? this.imageData[0].title : '';
        this.titleModel.nextTitle = this.imageData[1].title ? this.imageData[1].title : '';
    }
    /**
     * @return {?}
     */
    dividedPreviousMethod() {
        this.imageData.forEach((element, index) => {
            if (element && element.active) {
                this.currentImageIndex = index;
            }
        });
    }
    /**
     * @return {?}
     */
    previousClick() {
        this.dividedPreviousMethod();
        if (this.currentImageIndex === 0) {
            this.previousClickMethod();
        }
        else {
            this.imageData.forEach((element, index) => {
                if (index === this.currentImageIndex - 1) {
                    const /** @type {?} */ duplicateIndex = this.currentImageIndex - 1;
                    this.imageData[duplicateIndex].active = true;
                    if (this.imageData[duplicateIndex] && this.imageData[duplicateIndex - 1] &&
                        this.imageData[duplicateIndex].title && this.imageData[duplicateIndex + 1].title) {
                        this.titleModel.setTitle(this.imageData[duplicateIndex - 1].title, this.imageData[duplicateIndex].title, this.imageData[duplicateIndex + 1].title);
                    }
                    else {
                        this.titleModel.setTitle(this.imageData[this.imageData.length - 1].title, this.imageData[0].title, this.imageData[this.currentImageIndex].title);
                    }
                }
                else {
                    this.imageData[index].active = false;
                }
            });
        }
    }
    /**
     * @return {?}
     */
    previousClickMethod() {
        this.imageData[this.currentImageIndex].active = true;
        const /** @type {?} */ lastIndex = this.imageData.length - 1;
        this.currentImageIndex = this.imageData.length - 1;
        this.imageData.forEach((element, index) => {
            if (index === this.currentImageIndex) {
                this.imageData[index].active = true;
                if (this.imageData[lastIndex] && this.imageData[lastIndex].title) {
                    this.titleModel.setTitle(this.imageData[lastIndex - 1].title, this.imageData[lastIndex].title, this.imageData[0].title);
                }
            }
            else {
                this.imageData[index]['active'] = false;
            }
        });
    }
    /**
     * @param {?} i
     * @return {?}
     */
    onPreBtnHover(i) {
        if (i === 0) {
            this.preImagePath = this.imageData[this.imageData.length - 1].imagepath;
        }
        else {
            const /** @type {?} */ ind = i - 1;
            this.preImagePath = this.imageData[ind].imagepath;
        }
    }
    /**
     * @param {?} i
     * @return {?}
     */
    onNextBtnHover(i) {
        if (i === 0) {
            const /** @type {?} */ ind = i + 1;
            this.nextImagePath = this.imageData[ind].imagepath;
        }
        else {
            const /** @type {?} */ ind = i + 1;
            if (ind === this.imageData.length) {
                this.nextImagePath = this.imageData[0].imagepath;
            }
            else {
                this.nextImagePath = this.imageData[ind].imagepath;
            }
        }
    }
    /**
     * @return {?}
     */
    nextClick() {
        this.dividedPreviousMethod();
        if (this.currentImageIndex === 0) {
            this.currentImageIndex = 1;
            this.imageData[this.currentImageIndex].active = true;
            const /** @type {?} */ nextIndex = this.currentImageIndex;
            if (this.imageData[nextIndex] && this.imageData[nextIndex].title) {
                this.titleModel.setTitle(this.imageData[nextIndex - 1].title, this.imageData[nextIndex].title, this.imageData[nextIndex + 1].title);
            }
            this.setFlag();
        }
        else {
            if (this.currentImageIndex === this.imageData.length - 1) {
                this.currentImageIndex = 0;
                this.titleModel.setTitle(this.imageData[this.imageData.length - 1].title, this.imageData[this.currentImageIndex].title, this.imageData[this.currentImageIndex + 1].title);
            }
            else {
                this.currentImageIndex++;
                const /** @type {?} */ nextIndex = this.currentImageIndex;
                if (this.currentImageIndex < this.imageData.length - 1) {
                    this.titleModel.setTitle(this.imageData[nextIndex - 1].title, this.imageData[nextIndex].title, this.imageData[nextIndex + 1].title);
                }
                else {
                    this.titleModel.setTitle(this.imageData[nextIndex - 1].title, this.imageData[nextIndex].title, this.imageData[0].title);
                }
            }
            this.setFlag();
        }
    }
    /**
     * @return {?}
     */
    setFlag() {
        this.imageData.forEach((element, index) => {
            if (index === this.currentImageIndex) {
                this.imageData[index].active = true;
            }
            else {
                this.imageData[index]['active'] = false;
            }
        });
    }
}
AmexioCarouselCEComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-carousel-ce',
                template: `
    <br />
    <div class="wrapper" #tab>
        <div *ngFor="let item of imageData ;let i=index">
            <ng-container *ngIf="item.active">

                <div class="ce-caroueslslideshow" [ngStyle]="{'visibility':item.active ? 'visible':'hidden'}">
                    <div class="ce-caroueslimages">
                        <img src={{item.imagepath}} style='height: 100%; width: 100%; object-fit: cover' />

                    </div>
                    <ng-container *ngIf="itemTemplate">
                        <div style=" position: absolute;" [style.left]="positionLeft+'%'" [style.right]="positionRight+'%'">
                            <ng-template tabindex="1" [amexioTemplateWrapper]="itemTemplate" [item]="item"></ng-template>
                        </div>

                    </ng-container>
                    <div class="ce-caroueslbar">
                        <div class="ce-caroueslnav">
                            <a class="ce-caroueslnav-prev">
                                <span>Previous</span>
                                <div (click)="previousClick(i)" (mouseenter)="onPreBtnHover(i)">
                                    <!-- <amexio-image [path]='preImagePath'>
                                    </amexio-image> -->
                                    <img src="{{preImagePath}}" style='height: 100%; width: 100%; object-fit: cover; cursor:pointer' />

                                </div>
                            </a>
                            <a class="ce-caroueslnav-next">
                                <span>Next</span>
                                <div (click)="nextClick(i)" (mouseenter)="onNextBtnHover(i)">

                                    <img src="{{nextImagePath}}" style='height: 100%; width: 100%; object-fit: cover; cursor:pointer' />

                                </div>
                            </a>
                        </div>

                        <div class="ce-caroueslnav-content">
                            <div class="ce-caroueslnav-content-prev">
                                <span> {{titleModel.previousTitle}}</span>
                            </div>
                            <div class="ce-caroueslnav-content-current">
                                <span>
                                    {{titleModel.centerTitle}}
                                </span>
                            </div>
                            <div class="ce-caroueslnav-content-next">
                                <span> {{titleModel.nextTitle}}</span>
                            </div>
                        </div>
                    </div>
                </div>
            </ng-container>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioCarouselCEComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: CommonDataService }
];
AmexioCarouselCEComponent.propDecorators = {
    data: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    templateWidth: [{ type: Input, args: ['template-width',] }],
    position: [{ type: Input, args: ['position',] }],
    templates: [{ type: ContentChildren, args: [AmexioTemplateDirective,] }],
    tabs: [{ type: ViewChild, args: ['tab', { read: ElementRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ProgressModel {
    /**
     * @param {?} firstDegree
     * @param {?} secondDegree
     * @param {?} progresscolor
     * @param {?} inactiveprogresscolor
     */
    constructor(firstDegree, secondDegree, progresscolor, inactiveprogresscolor) {
        this.firstDegree = firstDegree;
        this.secondDegree = secondDegree;
        this.progresscolor = progresscolor;
        this.inactiveprogresscolor = inactiveprogresscolor;
    }
    /**
     * @return {?}
     */
    getStyle() {
        if (parseFloat(this.firstDegree) > -90 && parseFloat(this.firstDegree) < 90) {
            return {
                'background-image': 'linear-gradient( ' + this.firstDegree + ', ' + this.progresscolor +
                    ' 50%, transparent 50%, transparent), linear-gradient(' + this.secondDegree + ', ' + this.progresscolor +
                    ' 50%,' + this.inactiveprogresscolor + ' 50%, ' + this.inactiveprogresscolor + ')',
            };
        }
        else {
            return {
                'background-image': 'linear-gradient( ' + this.firstDegree + ', ' + this.inactiveprogresscolor +
                    ' 50%, transparent 50%, transparent), linear-gradient(' + this.secondDegree + ', ' + this.progresscolor +
                    ' 50%,' + this.inactiveprogresscolor + ' 50%, ' + this.inactiveprogresscolor + ')',
            };
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioProgressCEComponent {
    constructor() {
        /*
             Properties
             name : font-size
             datatype : string
             version : 5.6.0 onwards
             default :
             description : Set size to label of progress bar.
             */
        this.size = '30px';
        /*
             Properties
             name : background-color
             datatype : string
             version : 5.6.0 onwards
             default :
             description : Set background color to the circular creative progress bar.
             */
        this.background = 'rgb(242,244,245)';
        /*
             Properties
             name : background-color
             datatype : string
             version : 5.6.0 onwards
             default :
             description : Set label color to the circular creative progress bar.
             */
        this.labelcolor = 'black';
        /*
             Properties
             name : progress-color
             datatype : string
             version : 5.6.0 onwards
             default : '#2ecc71'
             description : Set progress color to the border of creative progress bar.
             */
        this.progresscolor = '#1565c0';
        /*
             Properties
             name : inactive-progress-color
             datatype : string
             version : 5.6.0 onwards
             default : '#d0d0d0'
             description : Set inactive color to the remaining border of creative progress bar.
             */
        this.inactiveprogresscolor = '#cce2f5';
        /*
          Properties
          name : unit
          datatype : string
          version : 5.6.0 onwards
          default : '%'
          description : Set unit to the label of progress bar.
          */
        this.unit = '%';
        this.showlabel = false;
        this.showunit = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dyanmicHeightCreation();
        this.progressBarDegreeMap = new Map();
        this.progressBarDegreeMap.set('0', new ProgressModel('90deg', '90deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('1', new ProgressModel('90deg', '93.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('2', new ProgressModel('90deg', '97.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('3', new ProgressModel('90deg', '100.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('4', new ProgressModel('90deg', '104.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('5', new ProgressModel('90deg', '108deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('6', new ProgressModel('90deg', '111.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('7', new ProgressModel('90deg', '115.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('8', new ProgressModel('90deg', '118.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('9', new ProgressModel('90deg', '122.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('10', new ProgressModel('90deg', '126deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('11', new ProgressModel('90deg', '129.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('12', new ProgressModel('90deg', '133.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('13', new ProgressModel('90deg', '136.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('14', new ProgressModel('90deg', '140.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('15', new ProgressModel('90deg', '144deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('16', new ProgressModel('90deg', '147.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('17', new ProgressModel('90deg', '151.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('18', new ProgressModel('90deg', '154.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('19', new ProgressModel('90deg', '158.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('20', new ProgressModel('90deg', '162deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('21', new ProgressModel('90deg', '165.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('22', new ProgressModel('90deg', '169.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('23', new ProgressModel('90deg', '172.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('24', new ProgressModel('90deg', '176.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('25', new ProgressModel('90deg', '180deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('26', new ProgressModel('90deg', '183.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('27', new ProgressModel('90deg', '187.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('28', new ProgressModel('90deg', '190.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('29', new ProgressModel('90deg', '194.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('30', new ProgressModel('90deg', '198deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('31', new ProgressModel('90deg', '201.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('32', new ProgressModel('90deg', '205.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('33', new ProgressModel('90deg', '208.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('34', new ProgressModel('90deg', '212.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('35', new ProgressModel('90deg', '216deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('36', new ProgressModel('90deg', '219.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('37', new ProgressModel('90deg', '223.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('38', new ProgressModel('90deg', '226.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('39', new ProgressModel('90deg', '230.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('40', new ProgressModel('90deg', '234deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('41', new ProgressModel('90deg', '237.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('42', new ProgressModel('90deg', '241.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('43', new ProgressModel('90deg', '244.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('44', new ProgressModel('90deg', '248.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('45', new ProgressModel('90deg', '252deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('46', new ProgressModel('90deg', '255.6deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('47', new ProgressModel('90deg', '259.2deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('48', new ProgressModel('90deg', '262.8deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('49', new ProgressModel('90deg', '266.4deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('50', new ProgressModel('-90deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('51', new ProgressModel('-86.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('52', new ProgressModel('-82.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('53', new ProgressModel('-79.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('54', new ProgressModel('-75.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('55', new ProgressModel('-72deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('56', new ProgressModel('-68.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('57', new ProgressModel('-64.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('58', new ProgressModel('-61.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('59', new ProgressModel('-57.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('60', new ProgressModel('-54deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('61', new ProgressModel('-50.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('62', new ProgressModel('-46.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('63', new ProgressModel('-43.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('64', new ProgressModel('-39.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('65', new ProgressModel('-36deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('66', new ProgressModel('-32.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('67', new ProgressModel('-28.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('68', new ProgressModel('-25.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('69', new ProgressModel('-21.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('70', new ProgressModel('-18deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('71', new ProgressModel('-14.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('72', new ProgressModel('-10.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('73', new ProgressModel('-7.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('74', new ProgressModel('-3.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('75', new ProgressModel('0deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('76', new ProgressModel('3.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('77', new ProgressModel('7.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('78', new ProgressModel('10.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('79', new ProgressModel('14.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('80', new ProgressModel('18deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('81', new ProgressModel('21.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('82', new ProgressModel('25.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('83', new ProgressModel('28.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('84', new ProgressModel('32.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('85', new ProgressModel('36deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('86', new ProgressModel('39.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('87', new ProgressModel('43.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('88', new ProgressModel('46.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('89', new ProgressModel('50.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('90', new ProgressModel('54deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('91', new ProgressModel('57.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('92', new ProgressModel('61.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('93', new ProgressModel('64.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('94', new ProgressModel('68.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('95', new ProgressModel('72deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('96', new ProgressModel('76.6deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('97', new ProgressModel('79.2deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('98', new ProgressModel('82.8deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('99', new ProgressModel('86.4deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.set('100', new ProgressModel('90deg', '270deg', this.progresscolor, this.inactiveprogresscolor));
        this.progressBarDegreeMap.forEach((element, key) => {
            if (this.progressvalue === parseInt(key, 10)) {
                this.pStyle = element.getStyle();
            }
        });
    }
    /**
     * @return {?}
     */
    dyanmicHeightCreation() {
        if (this.width && this.width.length > 0 && this.height && this.height.length > 0) {
            this.outerWidth = this.getCal(this.width);
            this.outerHeight = this.getCal(this.height);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getCal(value) {
        return (parseInt(value, 10) + 32).toString() + 'px';
    }
}
AmexioProgressCEComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-progress-ce',
                template: `
    <!-- Radial -->
    <ng-container *ngIf="type =='radial'">
        <div class="circularProgress" [style.width]="outerWidth" [style.height]="outerHeight" [ngStyle]="pStyle">
            <div [style.background-color]="background" [style.width]="width+'px'" [style.height]="height+'px'" class="innerCircle"
                [ngClass]="type">
                <label tabindex="0" attr.aria-label="{{progressvalue}} {{unit}} {{tooltip}}" [style.font-size]="size"
                    [style.color]="labelcolor">
                    <ng-container *ngIf="showlabel">{{progressvalue }}</ng-container>
                    <ng-container *ngIf="showunit"> {{unit}}</ng-container>
                </label>
            </div>
        </div>
    </ng-container>
    <!-- Ring -->
    <ng-container *ngIf="type =='ring'">
        <div class="circularProgress" [style.width]="outerWidth" [style.height]="outerHeight" [ngStyle]="pStyle">
            <div [style.width]="width+'px'" [style.height]="height+'px'" class="innerCircle" [ngClass]="type">
                <label tabindex="0" attr.aria-label="{{progressvalue}} {{unit}} {{tooltip}}" [style.color]="labelcolor"
                    [style.font-size]="size">
                    <ng-container *ngIf="showlabel">{{progressvalue }}</ng-container>
                    <ng-container *ngIf="showunit"> {{unit}}</ng-container>
                </label>
            </div>
        </div>
    </ng-container>

    <!-- Pie -->
    <ng-container *ngIf="type =='pie'">
        <div class="circularProgress" [style.width]="outerWidth" [style.height]="outerHeight" [ngStyle]="pStyle">
            <div [style.width]="width+'px'" [style.height]="height+'px'" [ngClass]="type" class="innerCircle">
                <label tabindex="0" attr.aria-label="{{progressvalue}} {{unit}} {{tooltip}}" [style.color]="labelcolor"
                    [style.font-size]="size">
                    <ng-container *ngIf="showlabel">{{progressvalue }}</ng-container>
                    <ng-container *ngIf="showunit"> {{unit}}</ng-container>

                </label>
            </div>
        </div>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
AmexioProgressCEComponent.ctorParameters = () => [];
AmexioProgressCEComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }],
    size: [{ type: Input, args: ['font-size',] }],
    background: [{ type: Input, args: ['background-color',] }],
    labelcolor: [{ type: Input, args: ['label-color',] }],
    progresscolor: [{ type: Input, args: ['progress-color',] }],
    inactiveprogresscolor: [{ type: Input, args: ['inactive-progress-color',] }],
    unit: [{ type: Input, args: ['unit',] }],
    label: [{ type: Input, args: ['label',] }],
    height: [{ type: Input, args: ['height',] }],
    width: [{ type: Input, args: ['width',] }],
    progressvalue: [{ type: Input, args: ['progress-value',] }],
    tooltip: [{ type: Input, args: ['tooltip',] }],
    showlabel: [{ type: Input, args: ['show-label',] }],
    showunit: [{ type: Input, args: ['show-unit',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioVideoPlayerComponent {
    constructor() {
        // Internal Use Only
        this.rederVideo = true;
        this.currentVolume = 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onVolumeChange(event) {
        this.videoPlayer.nativeElement.volume = this.currentVolume = event.target.value;
    }
    /**
     * @return {?}
     */
    updateMuteUI() {
        if (this.videoPlayer.nativeElement.muted) {
            this.isMuted = true;
        }
        else {
            this.isMuted = false;
        }
    }
    /**
     * @return {?}
     */
    onPlay() {
        if (!this.isPlaying) {
            this.videoPlayer.nativeElement.play();
            this.isPlaying = true;
        }
        else {
            this.videoPlayer.nativeElement.pause();
            this.isPlaying = false;
        }
    }
    /**
     * @return {?}
     */
    onTimeUpdate() {
        const /** @type {?} */ percentage = Math.floor((100 / this.videoPlayer.nativeElement.duration) * this.videoPlayer.nativeElement.currentTime);
        this.progressBar.nativeElement.value = percentage;
        // Update the progress bar's text (for browsers that don't support the progress element)
        this.progressBar.nativeElement.innerHTML = percentage + '% played';
        if (percentage === 100) {
            this.isPlaying = false;
        }
    }
    /**
     * @return {?}
     */
    replayVideo() {
        this.resetPlayer();
        this.onPlay();
    }
    /**
     * @return {?}
     */
    resetPlayer() {
        this.videoPlayer.nativeElement.pause();
        this.progressBar.nativeElement.value = 0;
        this.videoPlayer.nativeElement.currentTime = 0;
        this.isPlaying = false;
    }
    /**
     * @return {?}
     */
    onFullScreen() {
        const /** @type {?} */ elem = this.videoPlayer.nativeElement;
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        }
        else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        }
        else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        }
    }
    /**
     * @return {?}
     */
    onMute() {
        if (!this.isMuted) {
            this.videoPlayer.nativeElement.muted = true;
            this.isMuted = true;
            this.volumebar.nativeElement.value = 0;
        }
        else {
            this.videoPlayer.nativeElement.muted = false;
            this.isMuted = false;
            this.volumebar.nativeElement.value = this.currentVolume;
        }
    }
}
AmexioVideoPlayerComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-video-player',
                template: `

      <ng-container *ngIf="rederVideo">
      <video [style.width.px]="width" controls>
          <source [attr.src]="path">
          Your browser does not support HTML5 video.
      </video>
    </ng-container>
  `,
                styles: [`
    video{width:100%;height:100%;background:#000}progress{color:#4682b4;font-size:12px;width:220px;height:16px;border:none;margin-right:10px;background:#434343;border-radius:9px;vertical-align:middle}progress::-moz-progress-bar{color:#4682b4;background:#434343}progress[value]::-webkit-progress-bar{background-color:#434343;border-radius:2px;-webkit-box-shadow:0 2px 5px rgba(0,0,0,.25) inset;box-shadow:inset 0 2px 5px rgba(0,0,0,.25)}progress[value]::-webkit-progress-value{background-color:#4682b4}@media screen and (max-width:600px){video{border:1px solid #4682b4;width:98%;height:231px;background:#000}}
  `],
            },] },
];
/** @nocollapse */
AmexioVideoPlayerComponent.ctorParameters = () => [];
AmexioVideoPlayerComponent.propDecorators = {
    path: [{ type: Input }],
    extension: [{ type: Input }],
    width: [{ type: Input }],
    rederVideo: [{ type: Input }],
    videoPlayer: [{ type: ViewChild, args: ['videoRef',] }],
    progressBar: [{ type: ViewChild, args: ['progressbar',] }],
    volumebar: [{ type: ViewChild, args: ['volumebar',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const MEDIA_COMPONENTS = [
    AmexioVideoPlayerComponent,
    AmexioImageComponent,
];
class AmexioMediaModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioMediaModule,
            providers: [CommonDataService, DeviceQueryService],
        };
    }
}
AmexioMediaModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    AmexioCommonModule,
                ],
                exports: MEDIA_COMPONENTS,
                declarations: MEDIA_COMPONENTS,
                providers: [CommonDataService, DeviceQueryService, IconLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioFormActionCEComponent {
    /**
     * @param {?} formBuilder
     */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.enableaction = false;
        this.isFormValid = false;
        this.showDialogue = false;
        this.errorMsgArray = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showErrors(event) {
        this.errorMsgArray = [];
        this.addErrorMsg();
        this.showDialogue = !this.isFormValid;
        if (!this.isFormValid) {
            this.showDialogue = true;
        }
        else {
            this.showDialogue = false;
        }
    }
    /**
     * @return {?}
     */
    closeDialogue() {
        this.showDialogue = !this.showDialogue;
    }
    /**
     * @return {?}
     */
    addErrorMsg() {
        if (this.form && this.form.status === 'INVALID') {
            for (const [key, value] of Object.entries(this.form.controls)) {
                if (value && value.status === 'INVALID') {
                    const /** @type {?} */ errorObject = {};
                    errorObject['label'] = key;
                    this.errorMsgArray.push(errorObject);
                }
            }
        }
    }
    /**
     * @param {?} form
     * @param {?} formFlag
     * @return {?}
     */
    getValidationForm(form, formFlag) {
        this.enableaction = true;
        this.formFlag = formFlag;
        this.form = form;
    }
}
AmexioFormActionCEComponent.decorators = [
    { type: Component, args: [{
                selector: 'form-action-ce',
                template: `
        <ng-container *ngIf="enableaction">  
          <span  *ngIf="!form.valid" style="padding-bottom:10px;position:relative">
                  <button class="button" [attr.title]="'click'" (click)="showErrors($event)" [ngClass]="'button-warning button-small button-round'">
                              <span class="button-text">
                                <span style="padding-right: 5px;" *ngIf="icon">
                                  <amexio-c-icon [customclass]="icon" >
                                  </amexio-c-icon>
                                </span>
          <span style="padding-right: 5px;" *ngIf="loading">
                                  <amexio-c-icon key="button-loading-icon"></amexio-c-icon>
                                </span> ?
          </span>
          </button>
          <amexio-dialogue class="dailogue-header-ce" [(show)]="showDialogue" [custom]="true" [content-align]="'left'" [closable]="false"
              [title]="'Invalid Fields'" [type]="'confirm'">

              <amexio-body *ngFor="let msg of errorMsgArray let index=index">
                  <amexio-label>{{index+1}}) {{msg.label}}</amexio-label><br>
              </amexio-body>

              <amexio-action>
                  <amexio-button type="primary" (onClick)="closeDialogue()" [label]="'OK'">
                  </amexio-button>
              </amexio-action>
          </amexio-dialogue>
          </span>
        </ng-container>  
    `,
            },] },
];
/** @nocollapse */
AmexioFormActionCEComponent.ctorParameters = () => [
    { type: FormBuilder }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCardCEActionComponent {
    /**
     * @param {?} formBuilder
     */
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.align = '';
        this.direction = 'row';
        this.cclass = '';
        this.formFlag = false;
        this.showError = false;
        this.buttons = [];
        this.isFormValid = false;
        this.showDialogue = false;
        this.errorMsgArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.bordertop) {
            this.cclass = 'card-action-border';
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.btns.length > 0) {
            this.buttons = this.btns.toArray();
        }
        else if (this.btngrp.length > 0) {
            this.buttons = this.btngrp.toArray()[0].buttons;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    checkFormValidation(data) {
        if (this.formAction && data && this.formFlag) {
            this.form = data;
            this.formAction.getValidationForm(this.form, this.formFlag);
        }
    }
}
AmexioCardCEActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-action-ce',
                template: `

    <div   [ngStyle]="{'background': ' url(' + bgimage + ') center/cover no-repeat','height': height }" [ngClass]="cclass">
        <div class="creative-footer" [style.flex-direction]="direction" [ngStyle]="{'color': color, 'background':background, 'justify-content': (align === 'start' || align === 'end') ? 'flex-'+align:align}">
            <ng-content></ng-content>
            <form-action-ce *ngIf="(formFlag && showError)"></form-action-ce>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioCardCEActionComponent.ctorParameters = () => [
    { type: FormBuilder }
];
AmexioCardCEActionComponent.propDecorators = {
    align: [{ type: Input, args: ['align',] }],
    bgimage: [{ type: Input, args: ['bg-image',] }],
    color: [{ type: Input, args: ['color',] }],
    background: [{ type: Input, args: ['background',] }],
    height: [{ type: Input, args: ['height',] }],
    bordertop: [{ type: Input, args: ['border-top',] }],
    direction: [{ type: Input, args: ['direction',] }],
    btns: [{ type: ContentChildren, args: [AmexioButtonComponent,] }],
    btngrp: [{ type: ContentChildren, args: [AmexioButtonGroupComponent,] }],
    formAction: [{ type: ViewChild, args: [AmexioFormActionCEComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCardCEBodyComponent {
    constructor() {
        this.cardclass = 'card-container-body';
        this.align = '';
    }
}
AmexioCardCEBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-body-ce',
                template: `
      <div [ngStyle]="{'justify-content': (align === 'start' || align === 'end') ? 'flex-'+align:align,'background': ' url(' + bgimage + ') center/cover no-repeat', 'color': color,'background-color':background, 'height': height }">
          <ng-content></ng-content>
      </div>
    `,
            },] },
];
AmexioCardCEBodyComponent.propDecorators = {
    cardclass: [{ type: HostBinding, args: ['attr.class',] }],
    align: [{ type: Input, args: ['align',] }],
    bgimage: [{ type: Input, args: ['bg-image',] }],
    color: [{ type: Input, args: ['color',] }],
    background: [{ type: Input, args: ['background',] }],
    height: [{ type: Input, args: ['height',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCardCEHeaderComponent {
    constructor() {
        this.align = '';
        this.verticalalign = '';
        this.direction = 'row';
        this.applyThemeColor = false;
        this.cclass = '';
        this.closeable = false;
        this.maximize = false;
        this.isFullWindow = false;
        this.closeableBehaiour = new rxjs_6(false);
        this.maximizeBehaiour = new rxjs_6(false);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.borderbottom) {
            this.cclass = 'card-header-border';
        }
        this.setIconPosition();
    }
    /**
     * @param {?} maximize
     * @param {?} isFullWindow
     * @return {?}
     */
    setMaximizeData(maximize, isFullWindow) {
        this.maximize = maximize;
        this.isFullWindow = isFullWindow;
        this.maximizeBehaiour.next(this.isFullWindow);
    }
    /**
     * @return {?}
     */
    sizeChange() {
        this.isFullWindow = !this.isFullWindow;
        this.maximizeBehaiour.next(this.isFullWindow);
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        this.closeableBehaiour.next(false);
    }
    /**
     * @return {?}
     */
    setIconPosition() {
        switch (this.verticalalign) {
            case 'top': {
                this.iconPosition = {
                    top: '0',
                    bottom: '',
                };
                break;
            }
            case 'center': {
                this.iconPosition = {
                    top: '',
                    bottom: '',
                };
                break;
            }
            case 'bottom': {
                this.iconPosition = {
                    top: '',
                    bottom: '0',
                };
                break;
            }
        }
    }
}
AmexioCardCEHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-header-ce',
                template: `

     <div  [ngClass]="cclass" class="creative-header-div" [ngStyle]="{'background': ' url(' + bgimage + ') center/cover no-repeat' }">
        <header  class="creative-header" [style.flex-direction]="direction"
        [ngStyle]="{'justify-content': (align === 'start' || align === 'end') ? 'flex-'+align:align ,
         'color': color,'background':background,'height': height}"
         [ngClass]="{'card-container-ce-theme-color': applyThemeColor}"
         >
          
                <ng-content></ng-content>
            <span *ngIf="windowFlag" class="creative-header-icon-div" [ngStyle]="iconPosition">
                <amexio-c-icon class="cursor-style" *ngIf="(isFullWindow && maximize )" [key]="'window_maximize'" (onClick)="sizeChange()"></amexio-c-icon>
                <amexio-c-icon class="cursor-style" *ngIf="(!isFullWindow && maximize )" [key]="'window_restore'" (click)="sizeChange()"></amexio-c-icon>
                <amexio-c-icon class="cursor-style" style="padding-left:5px;" *ngIf="closeable" [key]="'window_close'" (onClick)="onCloseClick()"></amexio-c-icon>
             </span> 
        </header>
    </div> 
 
 
 
  `,
                styles: [
                    `
  .cursor-style {
  cursor:pointer;
  }
  `,
                ],
            },] },
];
AmexioCardCEHeaderComponent.propDecorators = {
    align: [{ type: Input, args: ['align',] }],
    verticalalign: [{ type: Input, args: ['icon-align',] }],
    bgimage: [{ type: Input, args: ['bg-image',] }],
    color: [{ type: Input, args: ['color',] }],
    background: [{ type: Input, args: ['background',] }],
    height: [{ type: Input, args: ['height',] }],
    borderbottom: [{ type: Input, args: ['border-bottom',] }],
    direction: [{ type: Input, args: ['direction',] }],
    applyThemeColor: [{ type: Input, args: ['apply-theme-color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCardCEComponent extends LifeCycleBaseComponent {
    constructor() {
        super();
        this.windowFlag = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.color) {
            this.cclass = 'card-container-ce-color';
        }
        if (!this.background) {
            this.cclass = this.cclass + ' card-container-ce-bg-color';
        }
        this.setWiderAndNarrower();
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    /**
     * @return {?}
     */
    setWiderAndNarrower() {
        switch (this.styleType) {
            case 'wider-header':
                this.cclass = this.cclass + ' card-container-wider-header';
                break;
            case 'narrower-header':
                this.cclass = this.cclass + ' card-container-narrower-header';
                break;
            case 'wider-action':
                this.cclass = this.cclass + ' card-container-wider-action';
                break;
            case 'narrower-action':
                this.cclass = this.cclass + ' card-container-narrower-action';
                break;
            case 'wider-all':
                this.cclass = this.cclass + ' card-container-wider-header card-container-wider-action';
                break;
            case 'narrower-all':
                this.cclass = this.cclass + ' card-container-narrower-header card-container-narrower-action';
                break;
            case 'wider-header-narrower-action':
                this.cclass = this.cclass + ' card-container-wider-header card-container-narrower-action';
                break;
            case 'narrower-header-wider-action':
                this.cclass = this.cclass + ' card-container-narrower-header card-container-wider-action';
                break;
            default:
                break;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.AmexioCardCEHeaderQueryList) {
            this.amexioCardHeaderList = this.AmexioCardCEHeaderQueryList.toArray();
            
        }
        this.setCardAligementForAllInnerComponent();
    }
    /**
     * @return {?}
     */
    setCardAligementForAllInnerComponent() {
        this.amexioCardHeaderList = this.AmexioCardCEHeaderQueryList.toArray();
        if (this.amexioCardHeaderList[0]) {
            this.amexioCardHeaderList[0].windowFlag = false;
        }
        if (this.amexioCardHeaderList[0] !== undefined && !this.amexioCardHeaderList[0].align &&
            this.amexioCardHeaderList[0].align.length > 0) {
            this.amexioCardHeaderList[0].align = this.align;
        }
        this.amexioCardBodyList = this.AmexioCardCEBodyQueryList.toArray();
        if (this.amexioCardBodyList[0] !== undefined && !this.amexioCardBodyList[0].align && this.amexioCardBodyList[0].align.length > 0) {
            this.amexioCardBodyList[0].align = this.align;
        }
        this.amexioCardActionList = this.AmexioCardCEActionQueryList.toArray();
        if (this.amexioCardActionList[0] !== undefined && !this.amexioCardActionList[0].align &&
            this.amexioCardActionList[0].align.length > 0) {
            this.amexioCardActionList[0].align = this.align;
        }
        else if (this.amexioCardActionList[0] !== undefined &&
            this.amexioCardActionList[0].align === '') {
            this.amexioCardActionList[0].align = 'end';
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
AmexioCardCEComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-card-ce',
                template: `
    <div style="height:100%;" [ngStyle]="{'background': bgimage ? 'url(' + bgimage + ') center/cover no-repeat' : null}" [ngClass]="cclass">
        <div class="card-container-ce" [ngStyle]="{'justify-content': (align === 'start' || align === 'end') ? 'flex-'+align:align , 'color':color, 'background': background}">
            <ng-content></ng-content>
            <div>
            </div>
  `,
            },] },
];
/** @nocollapse */
AmexioCardCEComponent.ctorParameters = () => [];
AmexioCardCEComponent.propDecorators = {
    bgimage: [{ type: Input, args: ['bg-image',] }],
    color: [{ type: Input, args: ['color',] }],
    background: [{ type: Input, args: ['background',] }],
    height: [{ type: Input, args: ['height',] }],
    align: [{ type: Input, args: ['align',] }],
    styleType: [{ type: Input, args: ['style-type',] }],
    AmexioCardCEHeaderQueryList: [{ type: ContentChildren, args: [AmexioCardCEHeaderComponent,] }],
    AmexioCardCEBodyQueryList: [{ type: ContentChildren, args: [AmexioCardCEBodyComponent,] }],
    AmexioCardCEActionQueryList: [{ type: ContentChildren, args: [AmexioCardCEActionComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioFormCEComponent extends LifeCycleBaseComponent {
    /**
     * @param {?} formBuilder
     */
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
        this.showError = false;
        this.showErrorMsg = new EventEmitter();
        this.componentError = [];
        this.windowFlag = false;
        this.checkForm = false;
        this.isFormValid = false;
        this.showDialogue = false;
        this.errorMsgArray = [];
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.setCardAligementForAllInnerComponent();
    }
    /**
     * @return {?}
     */
    onResize() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ ngContentModels = this.models.toArray();
        const /** @type {?} */ innerModelArray = [];
        this.fb.forEach((fbnode) => {
            const /** @type {?} */ modelarray = fbnode.modelsarray;
            const /** @type {?} */ fgc = {};
            modelarray.forEach((m) => {
                fgc[m.name] = m.control;
                innerModelArray.push(m);
            });
            const /** @type {?} */ grp = this.formBuilder.group(fgc);
            this.form.form.registerControl(fbnode.group, grp);
        });
        ngContentModels.forEach((model) => {
            if (!this.isFieldPresentInParentAndChildBoth(innerModelArray, model.name)) {
                if (!model.name || model.name === null) {
                    model.name = model.valueAccessor['name'];
                }
                this.form.control.registerControl(model.name, model.control);
            }
        });
        this.clearTimeout = setTimeout(() => {
            this.form.form.updateValueAndValidity();
        }, 100);
        this.btns.toArray().forEach((btnCom) => {
            if ((btnCom.formbind === this.fname) && !btnCom.disabled) {
                this.buttons.push(btnCom);
            }
        });
        this.AmexioCardCEActionQueryList.toArray()[0].formFlag = true;
        this.AmexioCardCEActionQueryList.toArray()[0].showError = this.showError;
        this.AmexioCardCEHeaderQueryList.toArray()[0].windowFlag = false;
        this.validateForm();
        this.onResize();
        super.ngAfterViewInit();
    }
    /**
     * @param {?} innerModelArray
     * @param {?} name
     * @return {?}
     */
    isFieldPresentInParentAndChildBoth(innerModelArray, name) {
        let /** @type {?} */ isPresent = false;
        innerModelArray.forEach((innerModel) => {
            if (name === innerModel.name) {
                isPresent = true;
            }
        });
        return isPresent;
    }
    /**
     * @return {?}
     */
    validateForm() {
        if (this.form && this.form.status === 'INVALID') {
            this.disableButton(true);
        }
        else {
            this.disableButton(false);
        }
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    disableButton(flag) {
        this.buttons.forEach((btn) => {
            btn.disabled = flag;
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.validateForm();
        let /** @type {?} */ form;
        form = this.form;
        this.AmexioCardCEActionQueryList.toArray()[0].checkFormValidation(form);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        clearTimeout(this.clearTimeout);
        super.ngOnDestroy();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buttons = [];
        if (!this.color) {
            this.cclass = 'card-container-ce-color';
        }
        if (!this.background) {
            this.cclass = this.cclass + ' card-container-ce-bg-color';
        }
        this.setWiderAndNarrower();
        super.ngOnInit();
    }
    /**
     * @return {?}
     */
    setWiderAndNarrower() {
        switch (this.styleType) {
            case 'wider-header':
                this.cclass = this.cclass + ' card-container-wider-header';
                break;
            case 'narrower-header':
                this.cclass = this.cclass + ' card-container-narrower-header';
                break;
            case 'wider-action':
                this.cclass = this.cclass + ' card-container-wider-action';
                break;
            case 'narrower-action':
                this.cclass = this.cclass + ' card-container-narrower-action';
                break;
            case 'wider-all':
                this.cclass = this.cclass + ' card-container-wider-header card-container-wider-action';
                break;
            case 'narrower-all':
                this.cclass = this.cclass + ' card-container-narrower-header card-container-narrower-action';
                break;
            case 'wider-header-narrower-action':
                this.cclass = this.cclass + ' card-container-wider-header card-container-narrower-action';
                break;
            case 'narrower-header-wider-action':
                this.cclass = this.cclass + ' card-container-narrower-header card-container-wider-action';
                break;
            default:
                break;
        }
    }
    /**
     * @return {?}
     */
    setCardAligementForAllInnerComponent() {
        this.amexioCardHeaderList = this.AmexioCardCEHeaderQueryList.toArray();
        if (this.amexioCardHeaderList[0] !== undefined && !this.amexioCardHeaderList[0].align &&
            this.amexioCardHeaderList[0].align.length > 0) {
            this.amexioCardHeaderList[0].align = this.align;
        }
        this.amexioCardBodyList = this.AmexioCardCEBodyQueryList.toArray();
        if (this.amexioCardBodyList[0] !== undefined && !this.amexioCardBodyList[0].align && this.amexioCardBodyList[0].align.length > 0) {
            this.amexioCardBodyList[0].align = this.align;
        }
        this.amexioCardActionList = this.AmexioCardCEActionQueryList.toArray();
        if (this.amexioCardActionList[0] !== undefined && !this.amexioCardActionList[0].align &&
            this.amexioCardActionList[0].align.length > 0) {
            this.amexioCardActionList[0].align = this.align;
        }
        else if (this.amexioCardActionList[0] !== undefined &&
            this.amexioCardActionList[0].align === '') {
            this.amexioCardActionList[0].align = 'end';
        }
    }
}
AmexioFormCEComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-form-ce',
                template: `
      <div [ngStyle]="{'background': bgimage ? 'url(' + bgimage + ') center/cover no-repeat' : null}" [ngClass]="cclass">
          <div [ngStyle]="{'justify-content': (align === 'start' || align === 'end') ? 'flex-'+align:align , 'color':color, 'background': background}">
              <form name="fname" class="form-container-ce form-group">
                  <ng-content></ng-content>
              </form>
          <div>
      </div>
    `,
            },] },
];
/** @nocollapse */
AmexioFormCEComponent.ctorParameters = () => [
    { type: FormBuilder }
];
AmexioFormCEComponent.propDecorators = {
    fname: [{ type: Input, args: ['form-name',] }],
    showError: [{ type: Input, args: ['show-error',] }],
    showErrorMsg: [{ type: Output }],
    bgimage: [{ type: Input, args: ['bg-image',] }],
    color: [{ type: Input, args: ['color',] }],
    background: [{ type: Input, args: ['background',] }],
    height: [{ type: Input, args: ['height',] }],
    align: [{ type: Input, args: ['align',] }],
    styleType: [{ type: Input, args: ['style-type',] }],
    AmexioCardCEHeaderQueryList: [{ type: ContentChildren, args: [AmexioCardCEHeaderComponent,] }],
    AmexioCardCEBodyQueryList: [{ type: ContentChildren, args: [AmexioCardCEBodyComponent,] }],
    AmexioCardCEActionQueryList: [{ type: ContentChildren, args: [AmexioCardCEActionComponent,] }],
    btns: [{ type: ContentChildren, args: [AmexioButtonComponent, { descendants: true },] }],
    form: [{ type: ViewChild, args: [NgForm,] }],
    models: [{ type: ContentChildren, args: [NgModel, { descendants: true },] }],
    fb: [{ type: ContentChildren, args: [AmexioFormGroupDirective, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioHomePageCenterPanelComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioHomePageCenterPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-homepage-centerpanel',
                template: `
    <div class="homepage-centerpanel">
        <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioHomePageCenterPanelComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioHomePageCenterPanelComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioHomePageEastPanelComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
}
AmexioHomePageEastPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-homepage-eastpanel',
                template: `
    <div class="homepage-westpanel">
        <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioHomePageEastPanelComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioHomePageEastPanelComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioHomePageWestPanelComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioHomePageWestPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-homepage-westpanel',
                template: `
    <div class="homepage-westpanel">
        <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioHomePageWestPanelComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
AmexioHomePageWestPanelComponent.propDecorators = {
    type: [{ type: Input, args: ['type',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ViewportBackgroundComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // IMAGE
        if (this.imageTemplate) {
            this.imagePath = this.imageTemplate.path;
            this.bgCss = 'bgCss' + Math.floor(Math.random() * 1000) + 'background';
        }
        // VIDEO
        if (this.videoTemplate) {
            this.videoPath = this.videoTemplate.path;
        }
    }
}
ViewportBackgroundComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-viewport-background',
                template: `
    <!-- <div id="{{componentId}}" class="backgroundCss filterCss {{bgCss}}">
         <ng-content></ng-content>
    </div> -->
  `,
            },] },
];
/** @nocollapse */
ViewportBackgroundComponent.ctorParameters = () => [];
ViewportBackgroundComponent.propDecorators = {
    imageTemplate: [{ type: ContentChild, args: [AmexioImageComponent,] }],
    videoTemplate: [{ type: ContentChild, args: [AmexioVideoPlayerComponent,] }],
    backgroundColor: [{ type: Input, args: ['background-color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ViewportContentBodyComponent {
    constructor() {
        this.scrollable = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
ViewportContentBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-viewport-content-body',
                template: `

            <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
ViewportContentBodyComponent.ctorParameters = () => [];
ViewportContentBodyComponent.propDecorators = {
    navTemplate: [{ type: ContentChild, args: [AmexioNavBarComponent,] }],
    scrollable: [{ type: Input, args: ['scrollable',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ViewportContentComponent {
    constructor() {
        this.scrollable = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.bgImageTemplate.backgroundColor) {
            this.backgroundColor = this.bgImageTemplate.backgroundColor;
        }
        // IMAGE
        if (this.bgImageTemplate.imagePath) {
            this.backgroundCss = 'bgCss' + Math.floor(Math.random() * 1000) + 'backgound';
            this.insertStyleSheetRule('.' + this.backgroundCss + '{ background-image: url(' + this.bgImageTemplate.imagePath + ')}');
        }
        // VIDEO
        if (this.bgImageTemplate.videoPath) {
            this.bgImageTemplate.videoTemplate.rederVideo = false;
            this.bgvid = 'videoId' + Math.floor(Math.random() * 1000);
            this.tempUrl = this.bgImageTemplate.videoPath;
            this.playVideo();
        }
    }
    /**
     * @return {?}
     */
    playVideo() {
        const /** @type {?} */ media = this.videoId.nativeElement;
        media.muted = true;
        media.play();
    }
    /**
     * @param {?} ruleText
     * @return {?}
     */
    insertStyleSheetRule(ruleText) {
        const /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            const /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        const /** @type {?} */ sheet = sheets[sheets.length - 1];
        sheet.insertRule(ruleText, sheet.rules ? sheet.rules.length : sheet.cssRules.length);
    }
}
ViewportContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-viewport-content',
                template: `

    <!-- <div class="viewportContent {{backgroundCss}}" [ngStyle]="{'height':height}" onscroll="myFunction()">
        <video id="{{bgvid}}" src="{{tempUrl}}" type="video/mp4" poster loop autoplay playsinline>
        </video>
        <div class="viewportBody" [ngStyle]="{'overflow-y': internalScroll ? 'scroll' : 'hidden',
    'background-color':backgroundColor, 'height':height}">
            <ng-content select="amexio-viewport-content-body"></ng-content>

        </div>
    </div> -->



    <div class="viewportContent {{backgroundCss}}" [ngStyle]="{'height':height}" onscroll="myFunction()">
        <video #videoId src="{{tempUrl}}" muted="muted" poster="" loop="" autoplay="true" webkit-playsinline="true" playsinline="true"></video>
        <div class="viewportBody" [ngStyle]="{'overflow-y': internalScroll ? 'scroll' : 'hidden',
    'background-color':backgroundColor, 'height':height}">
            <ng-content select="amexio-viewport-content-body"></ng-content>

        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
ViewportContentComponent.ctorParameters = () => [];
ViewportContentComponent.propDecorators = {
    videoId: [{ type: ViewChild, args: ['videoId',] }],
    bgImageTemplate: [{ type: ContentChild, args: [ViewportBackgroundComponent,] }],
    contentTemplate: [{ type: ContentChild, args: [ViewportContentBodyComponent,] }],
    scrollable: [{ type: Input, args: ['scrollable',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ViewportComponent {
    constructor() {
        this.scrollable = true;
        this.type = '1';
        this.pageColor = 'black';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onWindowScroll($event) {
        if ((this.type === '2') && (this.scrollable && window.scrollY > 0)) {
            this.contentCollection.forEach((element) => {
                if (element.contentTemplate.navTemplate) {
                    element.contentTemplate.navTemplate.transparent = false;
                    element.contentTemplate.navTemplate.top = 0;
                }
            });
        }
        if (window.scrollY === 0) {
            this.contentCollection.forEach((element) => {
                if (element.contentTemplate.navTemplate) {
                    element.contentTemplate.navTemplate.transparent = true;
                    element.contentTemplate.navTemplate.top = 'unset';
                }
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        document.body.style.backgroundColor = this.pageColor;
        if (this.scrollable) {
            this.overflow = 'auto';
        }
        else {
            this.overflow = 'hidden';
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.contentCollection = this.queryContent.toArray();
        if (this.type === '2') {
            this.contentCollection.forEach((element) => {
                if (element.contentTemplate.navTemplate) {
                    element.contentTemplate.navTemplate.opacity = 0.8;
                    element.contentTemplate.navTemplate.top = 'unset';
                }
            });
        }
        if (this.scrollable) {
            this.contentCollection.forEach((element) => {
                element.internalScroll = false;
                this.getType(element);
            });
        }
        else {
            this.contentCollection.forEach((element) => {
                this.getType(element);
                if (element.scrollable) {
                    element.internalScroll = true;
                    element.height = 100 / this.contentCollection.length + '%';
                }
                else {
                    element.internalScroll = false;
                }
            });
        }
        this.insertStyleSheetRule('body' + '{ overflow-y:' + this.overflow + '}');
    }
    /**
     * @param {?} ruleText
     * @return {?}
     */
    insertStyleSheetRule(ruleText) {
        const /** @type {?} */ sheets = document.styleSheets;
        if (sheets.length === 0) {
            const /** @type {?} */ style = document.createElement('style');
            style.appendChild(document.createTextNode(''));
            document.head.appendChild(style);
        }
        const /** @type {?} */ sheet = sheets[sheets.length - 1];
        sheet.insertRule(ruleText, sheet.rules ? sheet.rules.length : sheet.cssRules.length);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getType(element) {
        if (this.type === '1' && element.contentTemplate.navTemplate) {
            element.contentTemplate.navTemplate.transparent = true;
        }
        if (this.type === '2' && element.contentTemplate.navTemplate) {
            element.contentTemplate.navTemplate.transparent = true;
        }
        if (this.type === '3' && element.contentTemplate.navTemplate) {
            element.contentTemplate.navTemplate.transparent = false;
        }
    }
}
ViewportComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-viewport',
                template: `
        <ng-content select="amexio-viewport-content"></ng-content>
  `,
            },] },
];
/** @nocollapse */
ViewportComponent.ctorParameters = () => [];
ViewportComponent.propDecorators = {
    queryContent: [{ type: ContentChildren, args: [ViewportContentComponent,] }],
    scrollable: [{ type: Input, args: ['scrollable',] }],
    type: [{ type: Input, args: ['type',] }],
    pageColor: [{ type: Input, args: ['page-color',] }],
    onWindowScroll: [{ type: HostListener, args: ['window:scroll', [],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by kedarkokil on 26/09/18.
*/
class AmexioBreadcrumbComponent {
    /**
     * @param {?} element
     * @param {?} dataService
     */
    constructor(element, dataService) {
        this.element = element;
        this.dataService = dataService;
        /*
           Events
           name : onListItemClick
           datatype : any
           version : none
           default :
           description : On click event
           */
        this.onListItemClick = new EventEmitter();
        /*
           Events
           name : onClick
           datatype : any
           version : none
           default :
           description : On click event
           */
        this.onClick = new EventEmitter();
        this.buttonAngleRightCss = 'button_angle-right';
        this.displaykey = 'text';
        this.childarraykey = 'children';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.arrowKey = this.buttonAngleRightCss;
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
        }
    }
    /**
     * @param {?} nodeArray
     * @return {?}
     */
    iconAddedMethod(nodeArray) {
        if (nodeArray && nodeArray.length > 0) {
            nodeArray.forEach((node) => {
                if (node[this.childarraykey]) {
                    node[this.childarraykey].forEach((element, index) => {
                        element['id'] = Math.floor(Math.random() * 90000) + 10000 + '_id';
                        if (node[this.childarraykey]) {
                            this.iconAddedMethod(node[this.childarraykey]);
                        }
                        this.setTabindex(index, element);
                        this.childIconCheckMethod(element);
                    });
                }
            });
        }
    }
    /**
     * @param {?} index
     * @param {?} element
     * @return {?}
     */
    setTabindex(index, element) {
        if (index === 0) {
            element['tabindex'] = 1;
        }
        else {
            element['tabindex'] = -1;
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    childIconCheckMethod(element) {
        if (element.hasOwnProperty([this.childarraykey])) {
            element[this.childarraykey].forEach((childIcon) => {
                if (childIcon.icon == null || childIcon.icon === '') {
                    childIcon.icon = 'fa fa-file-o';
                }
            });
            if (element.icon == null || element.icon === '') {
                element.icon = 'fa fa-folder-o';
            }
            this.iconAddedMethod(element);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getSelectedItem(event) {
        const /** @type {?} */ arrayOnly = [event.data];
        this.childItem = arrayOnly;
        event.parentRef.show = true;
        event.parentRef.expand = false;
        this.arrowKey = this.buttonAngleRightCss;
        this.onListItemClick.emit(event.data);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getEventEmitClick(event) {
        this.onListItemClick.emit(event);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onArrowClick(item) {
        item.expand = !item.expand;
        if (item.expand) {
            this.arrowKey = 'button_angle-down';
        }
        else {
            this.arrowKey = this.buttonAngleRightCss;
        }
    }
    /**
     * @param {?} nodeArray
     * @param {?} node
     * @param {?} index
     * @return {?}
     */
    onArrowDown(nodeArray, node, index) {
        let /** @type {?} */ currentindex;
        if (index < nodeArray[this.childarraykey].length - 1) {
            nodeArray[this.childarraykey].forEach((element) => {
                if (node['id'] === element['id']) {
                    currentindex = index + 1;
                }
            });
        }
        else if (index === nodeArray[this.childarraykey].length - 1) {
            currentindex = 0;
        }
        const /** @type {?} */ itemid = nodeArray[this.childarraykey][currentindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} nodeArray
     * @param {?} node
     * @param {?} index
     * @return {?}
     */
    onArrowUp(nodeArray, node, index) {
        let /** @type {?} */ currentindex;
        if (index !== 0) {
            nodeArray[this.childarraykey].forEach((element) => {
                if (node['id'] === element['id']) {
                    currentindex = index - 1;
                }
            });
        }
        else if (index === 0) {
            currentindex = nodeArray[this.childarraykey].length - 1;
        }
        const /** @type {?} */ itemid = nodeArray[this.childarraykey][currentindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onButtonClick(event) {
        event.show = false;
        event.expand = false;
        this.onClick.emit(event);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        // Check if key is added?
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.iconAddedMethod(this.data);
    }
    /**
     * @param {?} targetElement
     * @return {?}
     */
    onElementOutClick(targetElement) {
        let /** @type {?} */ parentFound = false;
        while (targetElement !== null && !parentFound) {
            if (targetElement === this.element.nativeElement) {
                parentFound = true;
            }
            targetElement = targetElement.parentElement;
        }
        if (!parentFound) {
            let /** @type {?} */ expandData;
            this.data.forEach((dataObject) => {
                if (dataObject) {
                    expandData = dataObject;
                }
                if (expandData && expandData.expand != null) {
                    expandData.expand = false;
                }
            });
        }
    }
}
AmexioBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-breadcrumb',
                template: `
    <ng-container *ngIf="data">

        <div *ngFor="let nodeObject of data">

            <div   class="breadcrum-rightshift-css">
                <div class="breadcrumb-group" tabindex="1" aria-label="breadcrum">
                    <label tabindex="1" (click)="onButtonClick(nodeObject)" (keyup.enter)="onButtonClick(nodeObject)" class="label-icon-css">
                        <ng-container *ngIf="nodeObject && nodeObject.icon">
                            <span [ngClass]="nodeObject.icon"></span>
                        </ng-container>&nbsp;
                        <span>{{nodeObject[displaykey]}}&nbsp;&nbsp;</span>
                    </label>
                    <ng-container *ngIf="nodeObject[childarraykey]">
                        <amexio-c-icon tabindex="1" aria-label="button clickable" (click)="onArrowClick(nodeObject)"
                            (keyup.enter)="onArrowClick(nodeObject)" class="arrow-group-css" [key]="arrowKey"></amexio-c-icon>
                    </ng-container>
                    <div class="context-menu-list1" [@breadCrumbStateState]="nodeObject.expand ? 'visible':'hidden'">
                        <ng-container *ngFor="let node of nodeObject[childarraykey] let rowindex = index">
                            <div tabindex="{{node.tabindex}}" id="{{node.id}}" class="context-menu-list-items1" [ngStyle]="{'cursor': node.disabled ? 'not-allowed':'pointer'}"
                                (click)="getSelectedItem({data:node,parentRef:nodeObject})" (keyup.arrowdown)="onArrowDown(nodeObject,node,rowindex)"
                                (keyup.arrowup)="onArrowUp(nodeObject,node,rowindex)" (keyup.enter)="getSelectedItem({data:node,parentRef:nodeObject})">
                                <div class="dropdown-icon-css">
                                    <ng-container *ngIf="node.icon">
                                        <amexio-c-icon [ngClass]="node.icon"></amexio-c-icon>
                                    </ng-container>&nbsp;
                                </div>
                                <div class="dropdown-label-css">
                                    <span>{{node[displaykey]}}&nbsp;</span>
                                </div>
                            </div>
                        </ng-container>
                    </div>
                </div>
                <ng-container *ngIf="nodeObject.show">
                    <amexio-breadcrumb [data]="childItem" [display-key]="displaykey" [childarray-key]="childarraykey"
                        (onListItemClick)="getEventEmitClick($event)" (onClick)="onButtonClick($event)">
                    </amexio-breadcrumb>
                </ng-container>
            </div>
        </div>
    </ng-container>
  `,
                animations: [
                    trigger('breadCrumbStateState', [
                        state('hidden', style({
                            'transform': 'scale(0)',
                            'transform-origin': 'left top 0px',
                        })),
                        state('visible', style({
                            'transform-origin': 'left top 0px',
                            'transform': 'scale(1)',
                        })),
                        transition('*=>hidden', animate('0ms')),
                        transition('*=>visible', animate('200ms')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioBreadcrumbComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CommonDataService }
];
AmexioBreadcrumbComponent.propDecorators = {
    data: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    displaykey: [{ type: Input, args: ['display-key',] }],
    childarraykey: [{ type: Input, args: ['childarray-key',] }],
    onListItemClick: [{ type: Output }],
    onClick: [{ type: Output }],
    onElementOutClick: [{ type: HostListener, args: ['document:click', ['$event.target'],] }, { type: HostListener, args: ['document: touchstart', ['$event.target'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by sagar on 6/9/17.
*/
class DockbarComponent {
    constructor() {
        this.elementId = 'dockbar-item-id' + Math.floor(Math.random() * 90000) + 10000;
    }
    /**
     * @return {?}
     */
    onBarIconClick() {
        this.active = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
DockbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dockbar-item', template: `
    <div *ngIf="active"  [style.width]="width"
    class="dockbar-active-content dockbar-height"
    [style.min-height]="height"  [style.max-height]="height">
      <ng-container *ngIf="active && title">
        <div class="dockbar-title">
          {{title}}
          <span class="dockbar-item-close-bar" (click)="onBarIconClick()">
            <amexio-c-icon key="dockbar_close"></amexio-c-icon>
            <!--
                        <i class="fa fa-times" aria-hidden="true"></i>
            -->
          </span>
        </div>
      </ng-container>
      <ng-content>
      </ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
DockbarComponent.ctorParameters = () => [];
DockbarComponent.propDecorators = {
    active: [{ type: Input }],
    label: [{ type: Input }],
    icon: [{ type: Input }],
    mda: [{ type: Input }],
    width: [{ type: Input }],
    title: [{ type: Input }],
    path: [{ type: Input }],
    height: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by Ketan Gote on 8/21/17.
*/
class DockedBarToolComponent {
    constructor() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        const /** @type {?} */ tabs = this.dockbarArray;
        tabs.forEach((tab) => {
            tab.active = false;
            if (tab.elementId === event.elementId) {
                tab.active = true;
            }
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.dockbarArray = this.dockbars.toArray();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
DockedBarToolComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dockbar', template: `
    <div class="dockbar" [style.min-height]="height">
      <ng-container *ngFor="let dockbar of dockbarArray">
        <button [ngClass]="{'active':dockbar.active}" (click)="onClick(dockbar)">

          <!--Normal image-->
          <ng-container *ngIf="dockbar.path">
            <img [src]="dockbar.path">
          </ng-container>

          <!--this is for fontawesome-->
          <ng-container *ngIf="(!(dockbar.icon && dockbar.mda) && dockbar.icon)">
            <amexio-image [icon-class]="dockbar.icon" [c-class]=""></amexio-image>
            <!--<i [ngClass]="dockbar.icon"></i>-->
          </ng-container>

          <!--if dockbar have label instead of icon -->
          <ng-container *ngIf="dockbar.label && dockbar.active">
            <p><strong class="dockbar-label-highlight">{{dockbar.label}}</strong></p>
          </ng-container>

          <ng-container *ngIf="dockbar.label && !dockbar.active">
            <p>{{dockbar.label}}</p>
          </ng-container>

        </button>
      </ng-container>
    </div>
    <div class="dockbar-content" [style.min-height]="height">
      <ng-content></ng-content>
    </div>

  `,
            },] },
];
/** @nocollapse */
DockedBarToolComponent.ctorParameters = () => [];
DockedBarToolComponent.propDecorators = {
    dockbars: [{ type: ContentChildren, args: [DockbarComponent,] }],
    height: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/8/17.
*/
class AmexioMenuBarComponent {
    /**
     * @param {?} matchMediaService
     * @param {?} dataService
     */
    constructor(matchMediaService, dataService) {
        this.matchMediaService = matchMediaService;
        this.dataService = dataService;
        /*
        Events
        name : nodeClick
        datatype : any
        version : none
        default : none
        description : Fire when menubar bar click.
        */
        this.nodeClick = new EventEmitter();
        this.xposition = false;
        this.expand = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onClick(node) {
        node['expandflag'] = !node['expandflag'];
        if (this.matchMediaService.IsPhone() || this.matchMediaService.IsTablet()) {
            for (const /** @type {?} */ i of 'length') {
                if (this.data[i] === node) {
                    this.data[i].expand = !this.data[i].expand;
                }
                else {
                    this.data[i].expand = false;
                }
            }
        }
        this.nodeClick.emit(node);
    }
    /**
     * @param {?} subinnernode
     * @param {?} mainnode
     * @return {?}
     */
    onSubInnerNodeClick(subinnernode, mainnode) {
        if (mainnode['expandflag']) {
            mainnode['expandflag'] = false;
        }
        this.nodeClick.emit(subinnernode);
    }
    /**
     * @param {?} subnode
     * @param {?} mainnode
     * @return {?}
     */
    onInnerNodeClick(subnode, mainnode) {
        if (mainnode['expandflag']) {
            mainnode['expandflag'] = false;
        }
        this.nodeClick.emit(subnode);
    }
    /**
     * @param {?} event
     * @param {?} flag
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @return {?}
     */
    onMenubarKeyup(event, flag, rowindex, node, data) {
        if (event.keyCode === 37) {
            this.NavigateMenubarLeft(event, flag, rowindex, node, data);
        }
        else if (event.keyCode === 39) {
            this.NavigateMenubarRight(event, flag, rowindex, node, data);
        }
        else if (event.keyCode === 13) {
            this.onEnterClick(rowindex, node);
        }
    }
    /**
     * @param {?} event
     * @param {?} flag
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @return {?}
     */
    NavigateMenubarLeft(event, flag, rowindex, node, data) {
        if (node['expand']) {
            node['expand'] = false;
        }
        if (rowindex !== 0) {
            const /** @type {?} */ currentindex = rowindex - 1;
            const /** @type {?} */ itemid = currentindex;
            document.getElementById(itemid).focus();
            const /** @type {?} */ currentnode = data[itemid];
            if (currentnode) {
                currentnode['expand'] = true;
                currentnode['expandflag'] = true;
                this.currentnode = currentnode;
            }
        }
        else if (rowindex === 0) {
            const /** @type {?} */ currentindex = this.data.length - 1;
            const /** @type {?} */ itemid = currentindex;
            document.getElementById(itemid).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} flag
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @return {?}
     */
    NavigateMenubarRight(event, flag, rowindex, node, data) {
        if (node['expand']) {
            node['expand'] = false;
        }
        if (rowindex < data.length - 1) {
            const /** @type {?} */ currentindex = rowindex + 1;
            const /** @type {?} */ itemid = currentindex;
            document.getElementById(itemid).focus();
            const /** @type {?} */ currentnode = data[itemid];
            if (currentnode) {
                currentnode['expand'] = true;
                currentnode['expandflag'] = true;
                this.currentnode = currentnode;
            }
        }
        else if (rowindex === data.length - 1) {
            const /** @type {?} */ currentindex = 0;
            const /** @type {?} */ itemid = currentindex;
            document.getElementById(itemid).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} flag
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @param {?} nodedata
     * @return {?}
     */
    navigateChild(event, flag, rowindex, node, data, nodedata) {
        if (event.keyCode === 37) {
            this.navigateChildMenuitemLeft(event, rowindex, node, data);
        }
        else if (event.keyCode === 39) {
            this.navigateChildMenuitemRight(event, rowindex, node, data);
        }
        else if (event.keyCode === 13) {
            this.onnavigateChildEnterClick(event, rowindex, node, data, nodedata);
        }
    }
    /**
     * @param {?} event
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @return {?}
     */
    navigateChildMenuitemLeft(event, rowindex, node, data) {
        event.stopImmediatePropagation();
        if (rowindex === 0) {
            const /** @type {?} */ currentindex = data.length - 1;
            const /** @type {?} */ itemid = currentindex;
            const /** @type {?} */ childindex = data[itemid]['text'] + itemid;
            document.getElementById(childindex).focus();
        }
        else {
            const /** @type {?} */ currentindex = rowindex - 1;
            const /** @type {?} */ itemid = currentindex;
            const /** @type {?} */ childindex = data[itemid]['text'] + itemid;
            document.getElementById(childindex).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @return {?}
     */
    navigateChildMenuitemRight(event, rowindex, node, data) {
        event.stopImmediatePropagation();
        if (rowindex < data.length - 1) {
            const /** @type {?} */ currentindex = rowindex + 1;
            const /** @type {?} */ itemid = currentindex;
            const /** @type {?} */ childindex = data[itemid]['text'] + itemid;
            document.getElementById(childindex).focus();
        }
        else if (rowindex === data.length - 1) {
            const /** @type {?} */ itemid = 0;
            const /** @type {?} */ childindex = data[itemid]['text'] + itemid;
            document.getElementById(childindex).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} rowindex
     * @param {?} node
     * @param {?} data
     * @param {?} nodedata
     * @return {?}
     */
    onnavigateChildEnterClick(event, rowindex, node, data, nodedata) {
        event.stopImmediatePropagation();
        if (nodedata['expandflag']) {
            nodedata['expandflag'] = false;
        }
        this.nodeClick.emit(node);
    }
    /**
     * @param {?} rowindex
     * @param {?} node
     * @return {?}
     */
    onEnterClick(rowindex, node) {
        if (node['expandflag']) {
            node['expandflag'] = false;
        }
        this.nodeClick.emit(node);
    }
    /**
     * @param {?} event
     * @param {?} subinnerindex
     * @param {?} data
     * @param {?} subinnernode
     * @param {?} mainnode
     * @return {?}
     */
    updownInnerChildNavigation(event, subinnerindex, data, subinnernode, mainnode) {
        if (event.keyCode === 38) {
            this.onUpInnerChildNavigate(event, subinnerindex, data);
        }
        else if (event.keyCode === 40) {
            this.onDownInnerChildNavigate(event, subinnerindex, data);
        }
        else if (event.keyCode === 13) {
            this.onInnerChildEnterClick(subinnernode, mainnode);
        }
    }
    /**
     * @param {?} event
     * @param {?} subinnerindex
     * @param {?} data
     * @return {?}
     */
    onUpInnerChildNavigate(event, subinnerindex, data) {
        event.stopImmediatePropagation();
        if (subinnerindex === 0) {
            const /** @type {?} */ currentindex = data.length - 1;
            const /** @type {?} */ itemid = currentindex;
            const /** @type {?} */ innerchild = data[itemid]['text'] + itemid;
            document.getElementById(innerchild).focus();
        }
        else {
            const /** @type {?} */ currentindex = subinnerindex - 1;
            const /** @type {?} */ itemid = currentindex;
            const /** @type {?} */ innerchild = data[itemid]['text'] + itemid;
            document.getElementById(innerchild).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} subinnerindex
     * @param {?} data
     * @return {?}
     */
    onDownInnerChildNavigate(event, subinnerindex, data) {
        event.stopImmediatePropagation();
        if (subinnerindex < data.length - 1) {
            const /** @type {?} */ currentindex = subinnerindex + 1;
            const /** @type {?} */ itemid = currentindex;
            const /** @type {?} */ innerchild = data[itemid]['text'] + itemid;
            document.getElementById(innerchild).focus();
        }
        else if (subinnerindex === data.length - 1) {
            const /** @type {?} */ itemid = 0;
            const /** @type {?} */ innerchild = data[itemid]['text'] + itemid;
            document.getElementById(innerchild).focus();
        }
    }
    /**
     * @param {?} subinnernode
     * @param {?} mainnode
     * @return {?}
     */
    onInnerChildEnterClick(subinnernode, mainnode) {
        event.stopImmediatePropagation();
        mainnode['expandflag'] = false;
        this.nodeClick.emit(subinnernode);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    generateIndex(data) {
        if (data) {
            data.forEach((element, index) => {
                if (index === 0) {
                    element['tabindex'] = '0';
                    element['expandflag'] = true;
                }
                else {
                    element['tabindex'] = '-1';
                    element['expandflag'] = true;
                }
                if (element.children) {
                    element.children.forEach((innerelement, innerindex) => {
                        this.generateInnerIndex(innerindex, innerelement);
                        if (innerelement.children) {
                            innerelement.children.forEach((subinnerelement, subinnerindex) => {
                                this.generateSunInnerIndex(subinnerindex, subinnerelement);
                            });
                        }
                    });
                }
            });
        }
    }
    /**
     * @param {?} innerindex
     * @param {?} innerelement
     * @return {?}
     */
    generateInnerIndex(innerindex, innerelement) {
        if (innerindex === 0) {
            innerelement['tabindex'] = '0';
            innerelement['index'] = innerelement['text'] + innerindex;
        }
        else {
            innerelement['tabindex'] = '-1';
            innerelement['index'] = innerelement['text'] + innerindex;
        }
    }
    /**
     * @param {?} subinnerindex
     * @param {?} subinnerelement
     * @return {?}
     */
    generateSunInnerIndex(subinnerindex, subinnerelement) {
        if (subinnerindex === 0) {
            subinnerelement['tabindex'] = '0';
            subinnerelement['index'] = subinnerelement['text'] + subinnerindex;
        }
        else {
            subinnerelement['tabindex'] = '-1';
            subinnerelement['index'] = subinnerelement['text'] + subinnerindex;
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        // Check if key is added?
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            
        }
        this.data = httpResponse;
        this.generateIndex(this.data);
    }
    /**
     * @param {?} event
     * @param {?} node
     * @return {?}
     */
    onMouseOver(event, node) {
        if (!(this.matchMediaService.IsPhone() || this.matchMediaService.IsTablet())) {
            if ((this.matchMediaService.browserWindow().innerWidth - event.clientX) < 200) {
                this.xposition = true;
            }
            else {
                this.xposition = false;
            }
        }
        else {
            this.xposition = false;
        }
        node['expandflag'] = true;
    }
}
AmexioMenuBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-menu',
                template: `
    <div class="menu-container">
        <div class="menubar">
            <ul role="menubar" class="menuheader">
                <li class="menulink">{{label}}</li>
                <div>
                    <li role="menuitem" tabindex="{{node.tabindex}}" id="{{rowindex}}" *ngFor="let node of data let rowindex = index "
                        (keyup)="onMenubarKeyup($event,false,rowindex,node,data)" class="menulink">
                        <a (click)="onClick(node)" (mouseover)="onMouseOver($event, node)">
                            <amexio-c-icon *ngIf="node.icon" [customclass]="node.icon"></amexio-c-icon>&nbsp;&nbsp;{{node.text}}
                        </a>
                        <!--<i *ngIf="node.icon" [ngClass]="node.icon" aria-hidden="true"></i>-->
                        <span *ngIf="(node.children && node.children[0].children)">
                            <div *ngIf="(node.children && node.children.length>0)" class="menu-content" [ngClass]="{'menu-content-display':node.expand,'menu-content-hide':!node.expandflag,
                      ' menu-content-left': (node.children && node.children.length>3),'menu-right':xposition}">
                                <ul class="menu-content-cols">
                                    <li class="col-menu-nodes" [ngClass]="{'col-menu-nodes-fixed': (node.children && node.children.length<4),
                        'col-menu-nodes-percentage': (node.children && node.children.length>3)}"
                                        *ngFor="let subnode of node.children let rowindex = index">
                                        <div class="content">
                                            <div *ngIf="(subnode.text && subnode.text.length>0)" id="{{subnode.index}}"
                                                tabindex="{{subnode.tabindex}}" (click)="onInnerNodeClick(subnode,node)"
                                                (keyup)="navigateChild($event,true,rowindex,subnode,node.children,node)"
                                                class="menu-links-header">
                                                <amexio-c-icon *ngIf="subnode.icon" [customclass]="subnode.icon"></amexio-c-icon>&nbsp;&nbsp;{{subnode.text}}
                                                <!--<i *ngIf="subnode.icon" [ngClass]="subnode.icon" aria-hidden="true"></i>-->
                                            </div>
                                            <div *ngIf="subnode.image" style="padding: 10px;">
                                                <img [attr.src]="subnode.image">
                                            </div>
                                            <ul class="menu-content-cols">
                                                <li *ngFor="let subinnernode of subnode.children let subinnerindex = index"
                                                    tabindex="{{subinnernode.tabindex}}" (click)="onSubInnerNodeClick(subinnernode,node)"
                                                    id={{subinnernode.index}} (keyup)="updownInnerChildNavigation($event,subinnerindex,subnode.children,subinnernode,node)"
                                                    class="menulinks">
                                                    <div *ngIf="subinnernode.image" style="padding: 10px;">
                                                        <img [attr.src]="subinnernode.image">
                                                    </div>
                                                    <!--<i *ngIf="subinnernode.icon" class="fa fa-ravelry"
                              aria-hidden="true"></i>-->
                                                    <amexio-c-icon *ngIf="subinnernode.icon" key="menubar_ravelry">
                                                    </amexio-c-icon>
                                                    &nbsp;&nbsp;{{subinnernode.text}}{{subinnernode.template}}
                                                </li>
                                            </ul>
                                        </div>
                                    </li>

                                </ul>
                            </div>

                        </span>
                        <ng-container *ngIf="(node.children && !node.children[0].children)">
                            <div class="menu-content" [ngClass]="{'menu-content-display':node.expand}">
                                <ul class="menu-content-cols">
                                    <li class="col-menu-nodes col-menu-nodes-fixed">
                                        <div class="content">
                                            <ul class="menu-content-cols">
                                                <li *ngFor="let subnode of node.children" class="menulinks">
                                                    <div *ngIf="subnode.image" style="padding: 10px;">
                                                        <img [attr.src]="subnode.image">
                                                    </div>
                                                    <!--<i *ngIf="subnode.icon" class="fa fa-ravelry" aria-hidden="true"></i>-->
                                                    <amexio-c-icon *ngIf="subnode.icon" key="menubar_ravelry"></amexio-c-icon>&nbsp;&nbsp;{{subnode.text}}
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </ng-container>


                    </li>
                </div>

            </ul>
        </div>
    </div>
  `,
                providers: [CommonDataService],
            },] },
];
/** @nocollapse */
AmexioMenuBarComponent.ctorParameters = () => [
    { type: DeviceQueryService },
    { type: CommonDataService }
];
AmexioMenuBarComponent.propDecorators = {
    data: [{ type: Input }],
    label: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    nodeClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by manisha on 1/4/18.
*/
class AmexioInnerNavMenuComponent {
    constructor() {
        this.submenuposition = 'right';
        /*
          Events
          name : navLinkClick
          datatype : any
          version : none
          default : none
          description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
          */
        this.navLinkClick = new EventEmitter();
        this.mobilemode = false;
        this.issubmenu = false;
        this.ishovered = true;
        this.divid = Math.floor(Math.random() * 90000) + 10000 + '_menuid';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} flag
     * @return {?}
     */
    setMobileMode(flag) {
        this.mobilemode = flag;
    }
    /**
     * @param {?} _node
     * @param {?} _event
     * @return {?}
     */
    onClick(_node, _event) {
        const /** @type {?} */ n = {
            title: this.title,
            data: this.data,
            icon: this.icon,
            node: _node,
            mobilemode: this.mobilemode,
        };
        this.navLinkClick.emit(this.dataObject(n, _event));
    }
    /**
     * @param {?} n
     * @param {?} _event
     * @return {?}
     */
    dataObject(n, _event) {
        return { data: n, event: _event };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onHeaderClick(event) {
        const /** @type {?} */ node = {
            header: true,
            title: this.title,
            icon: this.icon,
        };
        this.onClick(node, event);
    }
    /**
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    onNodehover(node, event) {
        this.ishovered = false;
        // clear hover flag;
        this.data.forEach((element) => {
            this.clearNodeHover(element);
        });
        if (node.submenus && (node.submenus.length > 0)) {
            node.ishover = true;
        }
        event.stopPropagation();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    setNodeHover(node) {
        node.ishover = true;
        if (node.submenus && (node.submenus.length > 0)) {
            this.setNodeHover(node.submenus);
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    clearNodeHover(node) {
        // clear flags
        node.ishover = false;
        if (node.submenus && (node.submenus.length > 0)) {
            node.submenus.forEach((element) => {
                this.clearNodeHover(element);
            });
        }
    }
}
AmexioInnerNavMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-nav-innermenu',
                template: `
      <ng-container *ngFor="let node of data">
          <div class="nav-dropdown-content-subnode">

              <div style="padding: 10px; padding-left: 20px;">
                  <span *ngIf="submenuposition == 'left' && node.submenus">
                      <i class="fa fa-angle-left" style="padding-bottom:5px" aria-hidden="true"></i>
                      <!-- {{node.text}} -->
                  </span>
                  <span (click)="onClick(node, $event)" >{{node.text}}</span>
              </div>

              <div style="padding: 10px">
                  <span *ngIf="submenuposition == 'right' && node.submenus">
                      <!-- {{node.text}} -->
                      <i class="fa fa-angle-right" aria-hidden="true"></i>
                  </span>
                  <!-- <span>{{node.text}}</span> -->
              </div>

              <div [ngClass]="{'innersubmenunodes':submenuposition == 'right', 'innersubmenunodesright':submenuposition == 'left' }" *ngIf="node.submenus">
                  <amexio-nav-innermenu [color]="itemcolor" [submenuposition]="submenuposition" [data]="node.submenus" (navLinkClick)="navItemClick($event)">
                  </amexio-nav-innermenu>
              </div>

          </div>
          <br/>
      </ng-container>
    `,
            },] },
];
/** @nocollapse */
AmexioInnerNavMenuComponent.ctorParameters = () => [];
AmexioInnerNavMenuComponent.propDecorators = {
    type: [{ type: Input }],
    title: [{ type: Input }],
    data: [{ type: Input }],
    icon: [{ type: Input }],
    submenuposition: [{ type: Input }],
    navLinkClick: [{ type: Output }],
    color: [{ type: Input, args: ['color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioNavActionComponent {
    constructor() {
        /*
        Events
        name : navLinkClick
        datatype : any
        version : none
        default : none
        description : Fire when nav item is clicked, This event is fired when nav item type is defined as 'link/button/menu'
        
        */
        this.navLinkClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        const /** @type {?} */ node = {};
        this.navLinkClick.emit({ node, event });
    }
}
AmexioNavActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-nav-action',
                template: `
    <a *ngIf="(type=='link')" [ngStyle]="{'color':color}" class="top-nav-link"
    (click)="onClick($event)"><i *ngIf="icon" [ngClass]="icon"></i>{{title}}</a>

    <button *ngIf="(type=='button')" class="top-nav-button" (click)="onClick($event)">
    <i *ngIf="icon" style="padding-right:10px" [ngClass]="icon"></i>{{title}}</button>
    <div  *ngIf="(type=='toggle')" class="top-nav-button">
    <amexio-darkmode [size]="'small'"></amexio-darkmode>
    </div>
    `,
            },] },
];
/** @nocollapse */
AmexioNavActionComponent.ctorParameters = () => [];
AmexioNavActionComponent.propDecorators = {
    type: [{ type: Input }],
    title: [{ type: Input }],
    icon: [{ type: Input }],
    navLinkClick: [{ type: Output }],
    color: [{ type: Input, args: ['color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const noop$11 = () => {
};
class AmexioNavTextFieldComponent {
    constructor() {
        this.innerValue = '';
        this.onTouchedCallback = noop$11;
        this.onChangeCallback = noop$11;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.onChangeCallback(v);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
AmexioNavTextFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-nav-textfield',
                template: `
  <input  [ngStyle]="{'color':color}" type="text" class="top-nav-input-control" [(ngModel)]="value"/>

  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AmexioNavTextFieldComponent), multi: true,
                    }],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/** @nocollapse */
AmexioNavTextFieldComponent.ctorParameters = () => [];
AmexioNavTextFieldComponent.propDecorators = {
    color: [{ type: Input, args: ['color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 12/18/17.
*/
/** @enum {number} */
const KEY_CODE_notify = {
    esc: 27,
};
KEY_CODE_notify[KEY_CODE_notify.esc] = "esc";
class AmexioNotificationComponent {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        /*
         Properties
         name : data
         datatype : any
         version : 4.2 onwards
         default : none
         description :  what you want to display on notification window by using data.
         */
        this.messageData = [];
        /*
        Properties
        name : closable
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : User can close the window.
        */
        this.closable = true;
        this.notificationVertialCss = 'notification-vertical-';
        this.notificationHorizontalCss = ' notification-horizontal-';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    keyEvent(event) {
        if (this.closeonescape === true) {
            this.messageData.length = 0;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentID = Math.floor(Math.random() * 1000 + 999);
        if (this.autodismissmsg) {
            if (!this.autodismissmsginterval) {
                this.autodismissmsginterval = 1500;
            }
            if (this.messageData !== null) {
                setInterval(() => {
                    if (this.messageData.length > 0) {
                        this.messageData.shift();
                        this.ref.markForCheck();
                    }
                }, this.autodismissmsginterval);
            }
        }
        if (this.verticalposition === null) {
            this.verticalposition = 'top';
        }
        else if (this.horizontalposition === null) {
            this.horizontalposition = 'right';
        }
        this.positionclass = this.notificationVertialCss + this.verticalposition + this.notificationHorizontalCss + this.horizontalposition;
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    closeNotification(msg) {
        const /** @type {?} */ count = this.messageData.length;
        for (let /** @type {?} */ i = 0; i < count; i++) {
            if (this.messageData[i] === msg) {
                this.messageData.splice(msg, 1);
            }
        }
    }
}
AmexioNotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-notification', template: `
    <div class="notification-content" [ngClass]="positionclass">

        <ng-container *ngIf="!notificationTemplate">
            <div id="{{componentID}}" role="alert" [attr.aria-label]="'notification is'+ messageData" class="notification" *ngFor="let msg of messageData" [style.color]="foregroundColor" [style.background-color]="backgroundColor">
                <span class="float-right" (click)="closeNotification(msg)">
            <ng-container *ngIf="closable">
              <amexio-c-icon style="cursor: pointer" key="notify_close"></amexio-c-icon>
            </ng-container>
          </span>

                <table>
                    <ng-container *ngIf="icon">
                        <th>
                            <amexio-c-icon style=" padding-right: 18px;" [ngClass]="icon">
                            </amexio-c-icon>
                        </th>
                    </ng-container>

                    <th style=" text-align: left;">

                        <span>{{msg}}</span>&nbsp;&nbsp;&nbsp;&nbsp;
                    </th>

                </table>

            </div>
        </ng-container>

        <ng-container *ngIf="notificationTemplate">
            <div id="{{componentID}}" role="alert" [attr.aria-label]="'notification is'+ messageData" class="notification" *ngFor="let msg of messageData" [style.color]="foregroundColor" [style.background-color]="backgroundColor">

                <span class="float-right" (click)="closeNotification(msg)">
            <ng-container *ngIf="closable">
              <amexio-c-icon style="cursor: pointer" key="notify_close"></amexio-c-icon>
            </ng-container>
          </span>

                <table>
                    <ng-container *ngIf="icon">
                        <th>
                            <amexio-c-icon style=" padding-right: 18px;" [ngClass]="icon">
                            </amexio-c-icon>
                        </th>
                    </ng-container>
                    <th style=" text-align: left;">
                        <ng-template [ngTemplateOutlet]="notificationTemplate" [ngTemplateOutletContext]="{data:msg}">
                        </ng-template>
                    </th>
                </table>
            </div>
        </ng-container>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioNotificationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
AmexioNotificationComponent.propDecorators = {
    messageData: [{ type: Input, args: ['data',] }],
    icon: [{ type: Input, args: ['icon',] }],
    closable: [{ type: Input }],
    verticalposition: [{ type: Input, args: ['vertical-position',] }],
    horizontalposition: [{ type: Input, args: ['horizontal-position',] }],
    autodismissmsg: [{ type: Input, args: ['auto-dismiss-msg',] }],
    autodismissmsginterval: [{ type: Input, args: ['auto-dismiss-msg-interval',] }],
    closeonescape: [{ type: Input, args: ['close-on-escape',] }],
    backgroundColor: [{ type: Input, args: ['background-color',] }],
    foregroundColor: [{ type: Input, args: ['foreground-color',] }],
    notificationTemplate: [{ type: ContentChild, args: ['amexioNotificationTemp',] }],
    keyEvent: [{ type: HostListener, args: ['window:keyup.esc', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioSideNavInnerNodeComponent {
    constructor() {
        this.onClick = new EventEmitter();
        this.onDrag = new EventEmitter();
        this.emitNode = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onNodeClick(node) {
        node.expand = !node.expand;
        if (node.children && node.expand === false) {
            node.children.forEach((element) => {
                element['tabindex'] = '-1';
            });
        }
        else if (node.children && node.expand === true) {
            node.children.forEach((element) => {
                element['tabindex'] = '1';
            });
        }
        this.getOnClick(node);
        this.emitNode.emit(this.data);
    }
    /**
     * @param {?} event
     * @param {?} node
     * @return {?}
     */
    onenterNodeClick(event, node) {
        event.stopImmediatePropagation();
        node.expand = !node.expand;
        if (node.children && node.expand === true) {
            node.children.forEach((element, index) => {
                element['tabindex'] = '1';
            });
        }
        this.getOnClick(node);
        this.emitNode.emit(this.data);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getOnClick(node) {
        this.onClick.emit(node);
        this.activateNode(this.data, node);
    }
    /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    activateNode(data, node) {
        for (const /** @type {?} */ i of data) {
            if (node === i && !i[this.childarraykey]) {
                i['active'] = true;
            }
            else {
                i['active'] = false;
            }
            if (i[this.childarraykey]) {
                this.activateNode(i[this.childarraykey], node);
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragStartEvent(event) {
        if (this.enabledrag) {
            event.event.dataTransfer.setData('dragData', JSON.stringify(event.data));
            this.onDrag.emit(event);
        }
    }
}
AmexioSideNavInnerNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-sidenav-innernode',
                template: `
    <ul>
        <li  role="option" *ngFor="let node of data">
             <div [attr.tabindex]= "node.tabindex" (keyup.enter)="onenterNodeClick($event,node)" [attr.draggable]="enabledrag" (dragstart)="dragStartEvent({event:$event,data:node})" class="defaultnode" [ngClass]="{'activenode':node.active}"
                (click)="onNodeClick(node)">
            
                <span *ngIf="node.icon">
                    <amexio-c-icon class="node-icon" [customclass]="node.icon" [color]="node.iconcolor"></amexio-c-icon>
                    <span>{{node[displaykey]}}</span>
                    </span>
                
                
                    <span *ngIf="!node.icon">
                    <amexio-c-icon class="node-icon" [customclass]="node.icon" [color]="node.iconcolor"></amexio-c-icon>
                    <span style="padding-left:40px;">{{node[displaykey]}}</span>
                    </span>


                <ng-container *ngIf="node.badge">
                    <span class="nav-badge">{{node.badge}}</span>
                </ng-container>
                <ng-container *ngIf="node[childarraykey] && (node[childarraykey].length>0)">
                    <span style="padding-right: 10px; float: right" *ngIf="node.expand">
                        <amexio-c-icon key="sidenav-angle-up"></amexio-c-icon>
                    </span>
                    <span style="padding-right: 10px;float: right;" *ngIf="!node.expand">
                        <amexio-c-icon key="sidenav-angle-down"></amexio-c-icon>
                    </span>
                </ng-container>
            </div>
            <div class="submenu-details" [ngClass]="{'sidenav-submenu-expanded':node.expand}">
                <amexio-sidenav-innernode *ngIf="node[childarraykey] && (node[childarraykey].length>0)" [enable-drag]="enabledrag" (onDrag)="dragStartEvent($event)"
                    [display-key]="displaykey" [child-array-key]="childarraykey" [data]="node[childarraykey]" (onDrag)="dragStartEvent($event)"
                    (onClick)="getOnClick($event)">
                </amexio-sidenav-innernode>
            </div>
        </li>
    </ul>
  `,
            },] },
];
AmexioSideNavInnerNodeComponent.propDecorators = {
    displaykey: [{ type: Input, args: ['display-key',] }],
    icon: [{ type: Input, args: ['icon',] }],
    childarraykey: [{ type: Input, args: ['child-array-key',] }],
    data: [{ type: Input, args: ['data',] }],
    onClick: [{ type: Output }],
    enabledrag: [{ type: Input, args: ['enable-drag',] }],
    onDrag: [{ type: Output }],
    emitNode: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const NAV_COMPONENTS = [
    AmexioSideNavComponent,
    SideNavNodeComponent,
    AmexioNavBarComponent,
    AmexioNavItemComponent,
    AmexioNotificationComponent,
    AmexioNavActionComponent,
    AmexioNavTextFieldComponent,
    AmexioNavMenuComponent,
    AmexioNavItemComponent,
    AmexioInnerNavMenuComponent,
    DockbarComponent,
    DockedBarToolComponent,
    AmexioMenuBarComponent,
    AmexioBreadcrumbComponent,
    AmexioSideNavInnerNodeComponent,
];
class AmexioNavModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioNavModule,
            providers: [CommonDataService, DeviceQueryService],
        };
    }
}
AmexioNavModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    AmexioMediaModule,
                    AmexioLayoutModule,
                    AmexioFormsModule,
                    HttpClientModule,
                    AmexioCommonModule.forRoot(),
                ],
                exports: NAV_COMPONENTS,
                declarations: NAV_COMPONENTS,
                providers: [CommonDataService, DeviceQueryService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright [2019] [Metamagic]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by Ashwini Agre on 06/03/19.
 */
class AmexioWindowCEComponent extends LifeCycleBaseComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.verticalposition = 'center';
        this.closeonescape = true;
        this.showChange = new EventEmitter();
        this.maximize = false;
        this.closable = true;
        this.window = ' window-';
        this.width = '90%';
        this.close = new EventEmitter();
        this.windowFlag = true;
    }
    /**
     * @return {?}
     */
    onCloseClick() {
        if (this.closable) {
            this.showWindow = false;
            this.show = false;
            this.showChange.emit(false);
            this.close.emit(this.showWindow);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.color) {
            this.cclass = 'card-container-ce-color';
        }
        if (!this.background) {
            this.cclass = this.cclass + ' card-container-ce-bg-color';
        }
        this.setVerticlePosition();
        this.setHorizontalPosition();
        if (this.maximize) {
            this.dummyWidth = this.width;
            this.isFullWindow = true;
            this.maximumWindowStyle = this.setMaximizeClass(this.isFullWindow);
        }
        if (this.showWindow) {
            this.show = this.showWindow;
        }
        super.ngOnInit();
    }
    /**
     * @param {?} isFullWindow
     * @return {?}
     */
    setMaximizeClass(isFullWindow) {
        this.isFullWindow = isFullWindow;
        if (isFullWindow) {
            this.width = '100%';
            return {
                'margin-top': '0', 'height': '100%',
            };
        }
        else {
            this.width = this.dummyWidth;
            return {
                'margin-top': '1%', 'height': '96%',
            };
        }
    }
    /**
     * @return {?}
     */
    setVerticlePosition() {
        switch (this.verticalposition) {
            case 'top': {
                this.verticalposition = 'flex-start';
                break;
            }
            case 'center': {
                this.verticalposition = 'center';
                break;
            }
            case 'bottom': {
                this.verticalposition = 'flex-end';
                break;
            }
            default: {
                this.verticalposition = 'center';
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    setHorizontalPosition() {
        switch (this.horizontalposition) {
            case 'left': {
                this.horizontalposition = 'flex-start';
                break;
            }
            case 'center': {
                this.horizontalposition = 'center';
                break;
            }
            case 'right': {
                this.horizontalposition = 'flex-end';
                break;
            }
            default: {
                this.horizontalposition = 'center';
                break;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.amexioHeader && this.amexioHeader.toArray().length > 0) {
            setTimeout(() => {
                this.amexioHeader.toArray()[0].closeable = this.closable;
                this.amexioHeader.toArray()[0].windowFlag = true;
            }, 3000);
            if (this.maximize) {
                this.amexioHeader.toArray()[0].setMaximizeData(this.maximize, this.isFullWindow);
                this.amexioHeader.toArray()[0].maximizeBehaiour.subscribe((max) => {
                    this.maximumWindowStyle = this.setMaximizeClass(max);
                });
            }
            this.amexioHeader.toArray()[0].closeableBehaiour.subscribe((close) => {
                this.onCloseClick();
            });
        }
        this.setCardAligementForAllInnerComponent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['show']) {
            this.setShowFlag(changes["show"].currentValue);
        }
        if (changes['showWindow']) {
            this.setShowFlag(changes["showWindow"].currentValue);
        }
    }
    /**
     * @param {?} changedValue
     * @return {?}
     */
    setShowFlag(changedValue) {
        this.show = changedValue;
        if (this.closeonescape) {
            this.globalListenFunc = this.renderer.listen('document', 'keyup.esc', (e) => {
                this.showWindow = false;
                this.show = false;
                this.showChange.emit(false);
                this.close.emit(this.showWindow);
            });
        }
        else if (this.globalListenFunc) {
            this.globalListenFunc();
        }
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    /**
     * @return {?}
     */
    setCardAligementForAllInnerComponent() {
        this.amexioCardHeaderList = this.amexioHeader.toArray();
        if (this.amexioCardHeaderList[0] !== undefined && !this.amexioCardHeaderList[0].align &&
            this.amexioCardHeaderList[0].align.length > 0) {
            this.amexioCardHeaderList[0].align = this.align;
        }
        this.amexioCardBodyList = this.amexioBody.toArray();
        if (this.amexioCardBodyList[0] !== undefined && !this.amexioCardBodyList[0].align && this.amexioCardBodyList[0].align.length > 0) {
            this.amexioCardBodyList[0].align = this.align;
        }
        this.amexioCardActionList = this.amexioFooter.toArray();
        if (this.amexioCardActionList[0] !== undefined && !this.amexioCardActionList[0].align &&
            this.amexioCardActionList[0].align.length > 0) {
            this.amexioCardActionList[0].align = this.align;
        }
        else if (this.amexioCardActionList[0] !== undefined &&
            this.amexioCardActionList[0].align === '') {
            this.amexioCardActionList[0].align = 'end';
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
    }
}
AmexioWindowCEComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-window-ce',
                template: `
    <div *ngIf="show" class="amexio-root-window-ce" [style.justify-content]="horizontalposition">
      <div class="amexio-root-window-content-ce" [@animation]="{value: 'visible', params: {transitionParams: transitionOptions}}"
        [style.width]="width" [style.justify-content]="verticalposition" [ngStyle]="maximumWindowStyle" [ngClass]="{'content-max-height': (maximize && isFullWindow)}">
        <div [ngStyle]="{'background': bgimage ? 'url(' + bgimage + ') center/cover no-repeat' : null}" [ngClass]="cclass">
          <div [ngStyle]="{'justify-content': (align === 'start' || align === 'end') ? 'flex-'+align:align , 'color':color, 'background': background}">
            <ng-content></ng-content>
          </div>
        </div>
      </div>
    </div>
  `,
                animations: [
                    trigger('animation', [
                        state('void', style({
                            transform: 'translate3d(0, 25%, 0) scale(0.9)',
                            opacity: 0,
                        })),
                        state('visible', style({
                            transform: 'none',
                            opacity: 1,
                        })),
                        transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
                    ]),
                ],
            },] },
];
/** @nocollapse */
AmexioWindowCEComponent.ctorParameters = () => [
    { type: Renderer2 }
];
AmexioWindowCEComponent.propDecorators = {
    bgimage: [{ type: Input, args: ['bg-image',] }],
    color: [{ type: Input, args: ['color',] }],
    background: [{ type: Input, args: ['background',] }],
    height: [{ type: Input, args: ['height',] }],
    align: [{ type: Input, args: ['align',] }],
    verticalposition: [{ type: Input, args: ['vertical-position',] }],
    horizontalposition: [{ type: Input, args: ['horizontal-position',] }],
    closeonescape: [{ type: Input, args: ['close-on-escape',] }],
    top: [{ type: Input, args: ['position-top',] }],
    showWindow: [{ type: Input, args: ['show-window',] }],
    show: [{ type: Input }],
    showChange: [{ type: Output }],
    maximize: [{ type: Input }],
    closable: [{ type: Input }],
    width: [{ type: Input, args: ['width',] }],
    amexioHeader: [{ type: ContentChildren, args: [AmexioCardCEHeaderComponent,] }],
    amexioFooter: [{ type: ContentChildren, args: [AmexioCardCEActionComponent,] }],
    amexioBody: [{ type: ContentChildren, args: [AmexioCardCEBodyComponent,] }],
    close: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const CREATIVE_COMPONENTS = [
    AmexioCardCEHeaderComponent,
    AmexioCardCEBodyComponent,
    AmexioCardCEActionComponent,
    AmexioCardCEComponent,
    AmexioFormActionCEComponent,
    AmexioFormCEComponent,
    AmexioProgressCEComponent,
    AmexioHomePageComponent,
    AmexioHomePageCenterPanelComponent,
    AmexioHomePageEastPanelComponent,
    AmexioHomePageNorthPanelComponent,
    AmexioHomePageWestPanelComponent,
    AmexioWindowCEComponent,
    ViewportComponent,
    ViewportBackgroundComponent,
    ViewportContentComponent,
    ViewportContentBodyComponent,
    AmexioCarouselCEComponent,
];
class AmexioCreativeModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioCreativeModule,
            providers: [IconLoaderService],
        };
    }
}
AmexioCreativeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    AmexioFormsModule,
                    AmexioNavModule,
                    AmexioLayoutModule,
                    AmexioPaneModule,
                    AmexioMediaModule,
                    AmexioCommonModule.forRoot(),
                ],
                exports: CREATIVE_COMPONENTS,
                declarations: CREATIVE_COMPONENTS,
                providers: [IconLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 10/1/18.
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Ketan Gote, Pratik Kelwalkar, Dattaram Gawas, Rashmi Thakkar
 *
 */
class AmexioGridColumnComponent {
    constructor() {
        /*
           Properties
           name : sort
           datatype : boolean
           version : 4.2.6 onwards
           default : true
           description : Set column Sortable.
           */
        this.sort = true;
        /*
        Properties
        name : hidden
        datatype : boolean
        version : 4.0 onwards
        default : none
        description : Hide column
        */
        this.hidden = false;
    }
}
AmexioGridColumnComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-data-table-column', template: ``,
            },] },
];
AmexioGridColumnComponent.propDecorators = {
    text: [{ type: Input }],
    sort: [{ type: Input }],
    dataindex: [{ type: Input, args: ['data-index',] }],
    hidden: [{ type: Input }],
    datatype: [{ type: Input, args: ['data-type',] }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    summarytype: [{ type: Input, args: ['summary-type',] }],
    summarycaption: [{ type: Input, args: ['summary-caption',] }],
    width: [{ type: Input }],
    headerTemplate: [{ type: ContentChild, args: ['amexioHeaderTmpl',] }],
    bodyTemplate: [{ type: ContentChild, args: ['amexioBodyTmpl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by Pratik on 2/01/18.
*/
class DataGridFilterComponent {
    /**
     * @param {?} dataTableService
     * @param {?} renderer
     */
    constructor(dataTableService, renderer) {
        this.dataTableService = dataTableService;
        this.renderer = renderer;
        /*
          for internal use
          */
        this.filterObject = new EventEmitter();
        this.onFilterClick = new EventEmitter();
        this.showToolTip = false;
        this.checkIcon = 'fa fa-check';
        this.numberFilterArray = [];
        this.stringFilterArray = [];
        this.filterOptions = [{
                key: 'Is Equal To', value: '==', type: 'string', checkedStatus: '',
            }, {
                key: 'Is Not Equal To', value: '!=', type: 'string', checkedStatus: '',
            }, {
                key: 'Start With', value: '1', type: 'string', checkedStatus: this.checkIcon,
            },
            {
                key: 'Ends With', value: '2', type: 'string', checkedStatus: '',
            }, {
                key: 'Contains', value: '3', type: 'string', checkedStatus: '',
            }, {
                key: 'Is Equal To', value: '==', type: 'number', checkedStatus: '',
            }, {
                key: 'Is Not Equal To', value: '!=', type: 'number', checkedStatus: '',
            }, {
                key: 'Is greater Than', value: '<', type: 'number', checkedStatus: '',
            }, {
                key: 'Is less Than', value: '>', type: 'number', checkedStatus: '',
            }, {
                key: 'Is less Than or equal to', value: '>=', type: 'number', checkedStatus: '',
            }, {
                key: 'Is greater Than or equal to', value: '=<', type: 'number', checkedStatus: this.checkIcon,
            }];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.sortFilterData();
    }
    /**
     * @param {?} col
     * @param {?} opt
     * @return {?}
     */
    selectedOption(col, opt) {
        this.checkStatus();
        const /** @type {?} */ filter = {
            key: col.dataindex,
            value: this.filterValue,
            filter: opt.value,
            type: col.datatype,
        };
        opt.checkedStatus = this.checkIcon;
        if (this.filterValue) {
            col.filterIcon = true;
            this.filterDataObject(filter, col);
        }
        this.showToolTip = false;
    }
    /**
     * @param {?} col
     * @return {?}
     */
    keyUpSearch(col) {
        this.showToolTip = false;
        if (this.filterValue == null || this.filterValue === '') {
            this.removeFilter(col);
        }
        else {
            col.filterIcon = true;
            const /** @type {?} */ filter = {
                key: col.dataindex,
                value: this.filterValue,
                type: col.datatype,
            };
            this.filterOptions.forEach((opt) => {
                if (opt.checkedStatus === this.checkIcon && col.datatype === opt.type) {
                    filter['filter'] = opt.value;
                }
            });
            this.filterDataObject(filter, col);
        }
    }
    /**
     * @param {?} column
     * @return {?}
     */
    removeFilter(column) {
        this.filterValue = '';
        column.filterIcon = false;
        this.dataTableService.filteredObject.forEach((option, index) => {
            if (option.key === column.dataindex) {
                this.dataTableService.filteredObject.splice(index, 1);
            }
        });
        this.filterObject.emit(this.dataTableService.filteredObject);
    }
    /**
     * @return {?}
     */
    checkStatus() {
        this.filterOptions.forEach((opt) => {
            opt.checkedStatus = '';
        });
    }
    /**
     * @param {?} filter
     * @param {?} col
     * @return {?}
     */
    filterDataObject(filter, col) {
        this.dataTableService.filteredObject.forEach((option, index) => {
            if (option.key === col.dataindex) {
                this.dataTableService.filteredObject.splice(index, 1);
            }
        });
        this.dataTableService.filteredObject.push(filter);
        this.filterObject.emit(this.dataTableService.filteredObject);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDataFilterIconClick(event) {
        event.stopImmediatePropagation();
        this.onFilterClick.emit();
        this.addListner();
        this.showToolTip = !this.showToolTip;
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.showToolTip = false;
            if (!this.showToolTip) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @param {?} listId
     * @param {?} datatype
     * @return {?}
     */
    onArrowUpList(listId, datatype) {
        const /** @type {?} */ unitId = parseInt(listId, 10);
        const /** @type {?} */ previousId = unitId - 1;
        let /** @type {?} */ nextId;
        if (previousId >= 0) {
            document.getElementById(previousId.toString()).focus();
        }
        else {
            if (datatype === 'string') {
                nextId = this.stringFilterArray.length;
            }
            else {
                nextId = this.numberFilterArray.length;
            }
            listId = nextId.toString();
            this.onArrowUpList(listId, datatype);
        }
    }
    /**
     * @param {?} listId
     * @param {?} datatype
     * @return {?}
     */
    onArrowdownList(listId, datatype) {
        const /** @type {?} */ unitId = parseInt(listId, 10);
        const /** @type {?} */ nextId = unitId + 1;
        let /** @type {?} */ datatypeLength;
        if (datatype === 'string') {
            datatypeLength = this.stringFilterArray.length;
        }
        else if (datatype === 'number') {
            datatypeLength = this.numberFilterArray.length;
        }
        if (nextId < datatypeLength) {
            document.getElementById(nextId.toString()).focus();
        }
        else {
            listId = '-1';
            this.onArrowdownList(listId, datatype);
        }
    }
    /**
     * @return {?}
     */
    sortFilterData() {
        this.stringFilterArray = [];
        this.numberFilterArray = [];
        this.filterOptions.forEach((element) => {
            if (element.type === 'string') {
                this.stringFilterArray.push(element);
            }
            else {
                this.numberFilterArray.push(element);
            }
        });
    }
}
DataGridFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'data-grid-filter',
                template: `
    <ng-container *ngIf="column.datatype==='string'">
        <div class="inputgroup">
            <input  tabindex = "1" type="text" [(ngModel)]="filterValue" [attr.placeholder]="column.text" (keyup)="keyUpSearch(column)" type="text" class="input-control" aria-label="Text input with dropdown button">
            <!--<i class="fa fa-filter" aria-hidden="true" (click)="showToolTip = !showToolTip"></i>-->
            <span tabindex = "1" (keyup.enter)="onDataFilterIconClick($event)" class="datatable-filter-icon">
                <amexio-c-icon key="datagrid_filter" (click)="onDataFilterIconClick($event)"></amexio-c-icon>
            </span>
            <span *ngIf="showToolTip" class="dropdown" style="width: 250px; right:0">
                <ul class="dropdown-list" *ngFor="let opt of stringFilterArray; let i = index">
                    <ng-container *ngIf="opt.type===column.datatype">
                        <li #listId id = {{i}} tabindex="1" (keyup.enter)="selectedOption(column,opt)" (keyup.arrowup)="onArrowUpList(listId.id, column.datatype)" (keyup.arrowdown)="onArrowdownList(listId.id, column.datatype)" role="option" class="list-items">
                            <div (click)="selectedOption(column,opt)">
                                {{opt.key}}&nbsp;
                                <i [class]="opt.checkedStatus" aria-hidden="true"></i>
                            </div>
                        </li>
                    </ng-container>
                </ul>
            </span>
        </div>
    </ng-container>

    <ng-container *ngIf="column.datatype==='number'">
        <div class="inputgroup">
            <input tabindex = "1" type="text" [(ngModel)]="filterValue" [attr.placeholder]="column.text" (keyup)="keyUpSearch(column)" type="number" class="input-control" aria-label="Text input with dropdown button">
            <!--<i class="fa fa-filter" aria-hidden="true" (click)="showToolTip = !showToolTip"></i>-->
            <span tabindex = "1"  (keyup.enter)="onDataFilterIconClick($event)" class="datatable-filter-icon">
                <amexio-c-icon key="datagrid_filter" (click)="onDataFilterIconClick($event)"></amexio-c-icon>
            </span>
            <span *ngIf="showToolTip" class="dropdown" style="width: 250px; right:0">
                <ul class="dropdown-list" *ngFor="let opt of numberFilterArray; let i = index">
                    <ng-container *ngIf="opt.type===column.datatype">
                        <li #listId id = {{i}} tabindex="1" (keyup.enter)="selectedOption(column,opt)" (keyup.arrowup)="onArrowUpList(listId.id, column.datatype)" (keyup.arrowdown)="onArrowdownList(listId.id, column.datatype)" role="option" class="list-items">                        <div (click)="selectedOption(column,opt)">
                                {{opt.key}}&nbsp;
                                <i [class]="opt.checkedStatus" aria-hidden="true"></i>
                            </div>
                        </li>
                    </ng-container>
                </ul>
            </span>
        </div>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
DataGridFilterComponent.ctorParameters = () => [
    { type: CommonDataService },
    { type: Renderer2 }
];
DataGridFilterComponent.propDecorators = {
    column: [{ type: Input }],
    filterObject: [{ type: Output }],
    onFilterClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioDatagridComponent {
    /**
     * @param {?} element
     * @param {?} dataTableService
     * @param {?} cd
     * @param {?} renderer
     */
    constructor(element, dataTableService, cd, renderer) {
        this.element = element;
        this.dataTableService = dataTableService;
        this.cd = cd;
        this.renderer = renderer;
        /*
           Events
           name : rowSelect
           datatype : none
           version : none
           default : none
           description : It will gives you row clicked data.
           */
        this.rowSelect = new EventEmitter();
        /*
           Events
           name : selectedRowData
           datatype : none
           version : none
           default : none
           description : It will fire only on selection of checkbox and gives you selected record data.
           */
        this.selectedRowData = new EventEmitter();
        /*
           Events
           name : onHeaderClick
           datatype : none
           version : none
           default : none
           description : It will gives you click event and column info.
           */
        this.onHeaderClick = new EventEmitter();
        /*
           Properties
           name : groupby
           datatype :
           version : 4.0 onwards
           default : none
           description : Set True for Enable group by functionality.
           */
        this.groupby = false;
        this.serverSidePaging = false;
        this.rightClick = new EventEmitter();
        /*
           Events
           name : onPageChange
           datatype : none
           version : none
           default : none
           description : It will gives you current and next page info
           */
        this.onPageChange = new EventEmitter();
        this.columns = [];
        this.viewRows = [];
        this.selectAll = false;
        this.globalFilterOptions = [];
        this.tempContextMenu = [];
        this.mouseLocation = { left: 0, top: 0 };
        this.isExpanded = false;
        this.mask = true;
        this.checkIcon = 'fa fa-check';
        this.plusIcon = 'fa fa-plus';
        this.checkDefaultIcon = 'checkbox default';
        this.checkBoxSelectClass = '';
        this.showEnableColumnFilter = false;
        this.filterComRef = [];
        this.columnCountArray = [];
        this.arrayTabIndex = [];
        this.tabindex = '-1';
        this.columnHiddenIndexArray = [];
        this.prevlistindex = -1;
        this.listindex = -1;
        this.stringFilterArray = [];
        this.numberFilterArray = [];
        this.selectedRows = [];
        this.sortBy = -1;
        this.globalFilterOptions = [{
                key: 'Start With', value: '1', checkedStatus: this.checkIcon, type: 'string',
            }, {
                key: 'Ends With', value: '2', checkedStatus: '', type: 'string',
            }, {
                key: 'Contains', value: '3', checkedStatus: '', type: 'string',
            }];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set columndefintion(value) {
        this._columndefintion = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get columndefintion() {
        return this._columndefintion;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.enablecolumnfiter) {
            this.enablecolumnfilter = this.enablecolumnfiter;
        }
        this.isExpanded = true;
        this.iconclassKey = this.plusIcon;
        if (this.enabledatafilter === true) {
            this.globalfilter = false;
        }
        if (this.selectedrowcolor == null || this.selectedrowcolor === '') {
            this.selectedrowcolor = '#dcecf7';
        }
        if (this.httpmethod && this.httpurl) {
            this.dataTableService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
            this.previousData = JSON.parse(JSON.stringify(this.data));
        }
        this.componentLoaded = true;
        this.checkBoxSelectClass = this.setCheckBoxSelectClass();
        this.componentId = 'gridcolumn' + Math.floor(Math.random() * 1000 + 999);
        this.gridId = 'grid' + Math.floor(Math.random() * 1000 + 999);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.enabledatafilter) {
            this.filterComRef = this.filterRef.toArray();
        }
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (this.previousData != null && JSON.stringify(this.previousData) !== JSON.stringify(this.data)) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setChangeData(this.data);
        }
        if (this.columnPreviewData != null && this.columndefintion != null &&
            JSON.stringify(this.columnPreviewData) !== JSON.stringify(this.columndefintion)) {
            this.columnPreviewData = JSON.parse(JSON.stringify(this.columndefintion));
            this.columns = this.columndefintion;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.columndefintion) {
            this.columns = this.columndefintion;
            this.columnPreviewData = JSON.parse(JSON.stringify(this.columndefintion));
        }
        else {
            this.createConfig();
        }
        this.getColumnCount();
        this.checkFirstTabIndex(1);
    }
    /**
     * @return {?}
     */
    createConfig() {
        this.columns = [];
        let /** @type {?} */ columnRefArray = [];
        columnRefArray = this.columnRef.toArray();
        for (const /** @type {?} */ cr of columnRefArray) {
            const /** @type {?} */ columnConfig = cr;
            let /** @type {?} */ columnData;
            if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate != null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    headerTemplate: columnConfig.headerTemplate,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    bodyTemplate: columnConfig.bodyTemplate,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            else if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    headerTemplate: columnConfig.headerTemplate,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            else if (columnConfig.bodyTemplate != null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    bodyTemplate: columnConfig.bodyTemplate,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            else if (columnConfig.bodyTemplate == null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    width: columnConfig.width,
                    sort: columnConfig.sort,
                    datatype: columnConfig.datatype,
                    contextmenu: columnConfig.contextmenu,
                };
            }
            if (columnConfig.summarytype) {
                columnData['summarytype'] = columnConfig.summarytype;
            }
            if (columnConfig.summarycaption) {
                columnData['summarycaption'] = columnConfig.summarycaption;
            }
            this.columns.push(columnData);
            this.enableHeaderMethod();
        }
    }
    /**
     * @return {?}
     */
    enableHeaderMethod() {
        this.columns.forEach((element) => {
            if (element.text) {
                this.enableHeader = true;
            }
        });
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setChangeData(httpResponse) {
        this.setSelectedFlag(httpResponse);
        if (this.groupby) {
            this.cloneData = JSON.parse(JSON.stringify(this.data));
            const /** @type {?} */ groups = {};
            this.commonMethod(this.cloneData, groups);
        }
        if (this.enabledatafilter) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.globalfilter) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (!this.groupby) {
            this.renderData();
        }
        this.setPaginatorData();
        this.mask = false;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        this.viewRows = this.getResponseData(httpResponse);
        this.setSelectedFlag(this.viewRows);
        this.data = this.viewRows;
        if (this.groupby) {
            this.cloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.enabledatafilter) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        if (this.globalfilter) {
            this.filterCloneData = JSON.parse(JSON.stringify(this.data));
        }
        this.renderData();
        if (this.groupby) {
            this.setColumnData();
        }
        this.setPaginatorData();
        this.mask = false;
    }
    /**
     * @return {?}
     */
    setPaginatorData() {
        if (this.serverSidePaging && this.totalDataCount && this.viewRows.length > 0) {
            if (!this.pagesize && !this.totalPages) {
                this.pagesize = this.viewRows.length;
                this.totalPages = Math.ceil(this.totalDataCount / this.pagesize);
            }
        }
        else {
            this.totalPages = this.pageNumbers.length;
        }
    }
    /**
     * @param {?} viewRows
     * @return {?}
     */
    setSelectedFlag(viewRows) {
        viewRows.forEach((row) => {
            if (!row.hasOwnProperty('isSelected')) {
                row['isSelected'] = false;
            }
        });
    }
    /**
     * @param {?} col
     * @return {?}
     */
    setGroupByColumn(col) {
        this.groupbydataindex = col.dataindex;
        this.selectAll = false;
        this.setColumnData();
    }
    /**
     * @return {?}
     */
    keyUpSearch() {
        if (this.filterValue == null || this.filterValue === '') {
            this.removeGlobalFilter();
        }
        const /** @type {?} */ filter = {
            value: this.filterValue,
        };
        this.globalFilterOptions.forEach((opt) => {
            if (opt.checkedStatus === this.checkIcon) {
                filter['filter'] = opt.value;
            }
        });
        this.getGlobalFilteredData(filter);
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    checkStatus(opt) {
        this.globalFilterOptions.forEach((item) => {
            item.checkedStatus = '';
        });
        opt.checkedStatus = this.checkIcon;
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    selectedOption(opt) {
        this.checkStatus(opt);
        const /** @type {?} */ filter = {
            value: this.filterValue,
            filter: opt.value,
            type: opt.type,
        };
        if (this.filterValue) {
            this.getGlobalFilteredData(filter);
        }
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    removeGlobalFilter() {
        this.filterValue = '';
    }
    /**
     * @param {?} filteredObj
     * @return {?}
     */
    getGlobalFilteredData(filteredObj) {
        const /** @type {?} */ resultData = [];
        if (filteredObj) {
            this.filterCloneData.forEach((row) => {
                if (this.checkValueInColumn(row, filteredObj)) {
                    resultData.push(row);
                }
            });
            if (resultData.length > (1 * this.pagesize)) {
                this.pagingRegenration();
                this.renderData();
            }
            else {
                this.viewRows = resultData;
                this.currentPage = 1;
                this.maxPage = 1;
            }
        }
        else {
            this.data = this.filterCloneData;
            this.pagingRegenration();
            this.renderData();
        }
    }
    /**
     * @param {?} row
     * @param {?} filteredObj
     * @return {?}
     */
    checkValueInColumn(row, filteredObj) {
        let /** @type {?} */ searchStatus = false;
        const /** @type {?} */ statusCollection = [];
        this.columns.forEach((opt) => {
            let /** @type {?} */ optvalue = '';
            let /** @type {?} */ filtervalue = '';
            if (typeof row[opt.dataindex] === 'string') {
                optvalue = row[opt.dataindex].toLowerCase();
            }
            if (typeof filteredObj.value === 'string') {
                filtervalue = filteredObj.value.toLowerCase();
            }
            if (filteredObj.filter === '1') {
                statusCollection.push(optvalue.startsWith(filtervalue));
            }
            else if (filteredObj.filter === '2') {
                statusCollection.push(optvalue.endsWith(filtervalue));
            }
            else if (filteredObj.filter === '3') {
                statusCollection.push(optvalue.includes(filtervalue));
            }
        });
        if (statusCollection.filter((status) => status === true).length > 0) {
            searchStatus = true;
        }
        return searchStatus;
    }
    /**
     * @param {?} filteredObj
     * @param {?} option
     * @param {?} opt
     * @return {?}
     */
    filterConditionMethod(filteredObj, option, opt) {
        this.data = [];
        let /** @type {?} */ condition;
        if (filteredObj.filter === '1') {
            condition = option[opt.dataindex].toLowerCase().startsWith(filteredObj.value.toLowerCase());
            this.setstatus(condition);
        }
        if (filteredObj.filter === '2') {
            condition = option[opt.dataindex].toLowerCase().endsWith(filteredObj.value.toLowerCase());
            this.setstatus(condition);
        }
        if (filteredObj.filter === '3') {
            condition = option[opt.dataindex].toLowerCase().includes(filteredObj.value.toLowerCase());
            this.setstatus(condition);
        }
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    setstatus(condition) {
        if (condition) {
            status = condition;
        }
    }
    /**
     * @return {?}
     */
    setColumnData() {
        this.data = this.cloneData;
        const /** @type {?} */ groups = {};
        this.commonMethod(this.data, groups);
    }
    /**
     * @param {?} data
     * @param {?} groups
     * @return {?}
     */
    commonMethod(data, groups) {
        data.forEach((option) => {
            const /** @type {?} */ groupName = option[this.groupbydataindex];
            if (!groups[groupName]) {
                groups[groupName] = [];
            }
            groups[groupName].push(option);
        });
        data = [];
        for (const /** @type {?} */ groupName in groups) {
            if (groups.hasOwnProperty(groupName)) {
                data.push({ expanded: false, isSelected: false, group: groupName, groupData: groups[groupName] });
            }
        }
        /*-------Aggregation---------*/
        this.renderData();
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    renderData() {
        // calculate page no for pagination
        if (this.data) {
            this.maxPage = 0;
            this.pageNumbers = [];
            if (this.data.length > (1 * this.pagesize)) {
                this.maxPage = Math.floor((this.data.length / this.pagesize));
                if ((this.data.length % this.pagesize) > 0) {
                    this.maxPage++;
                }
            }
            for (let /** @type {?} */ pageNo = 1; pageNo <= this.maxPage; pageNo++) {
                this.pageNumbers.push(pageNo);
            }
        }
        if (this.pagesize >= 1) {
            this.getPageSize();
        }
        else {
            this.viewRows = this.data;
        }
        this.selectedRowNo = -1;
    }
    /**
     * @return {?}
     */
    getPageSize() {
        const /** @type {?} */ rowsTemp = this.data;
        const /** @type {?} */ newRows = [];
        let /** @type {?} */ startIndex = 0;
        let /** @type {?} */ endIndex = this.pagesize;
        if (this.currentPage > 1) {
            startIndex = (this.currentPage - 1) * this.pagesize;
            endIndex = startIndex + this.pagesize;
        }
        while (startIndex <= endIndex - 1) {
            if (rowsTemp[startIndex]) {
                newRows.push(rowsTemp[startIndex]);
            }
            startIndex++;
        }
        this.viewRows = newRows;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    selectAllRecord() {
        this.selectAll = !this.selectAll;
        if (this.selectAll) {
            for (const /** @type {?} */ vr of this.viewRows) {
                this.selectedRows.push(vr);
            }
        }
        else {
            this.selectedRows = [];
        }
        this.emitSelectedRows();
        if (this.groupby) {
            if (!this.selectAll) {
                this.viewRows.forEach((row) => {
                    row.isSelected = false;
                    row.groupData.forEach((node) => {
                        node.isSelected = false;
                    });
                });
            }
            else {
                this.viewRows.forEach((row) => {
                    row.isSelected = true;
                    row.groupData.forEach((node) => {
                        node.isSelected = true;
                    });
                });
            }
        }
    }
    /**
     * @param {?} column
     * @return {?}
     */
    onColumnCheck(column) {
        column.hidden = !column.hidden;
        this.getColumnCount();
        this.checkFirstTabIndex(1);
    }
    /**
     * @param {?} rowData
     * @param {?} rowIndex
     * @return {?}
     */
    onRowClick(rowData, rowIndex) {
        this.data.forEach((opt) => {
            opt.isSelected = false;
            if (opt.hasOwnProperty('groupData')) {
                opt.groupData.forEach((optChild) => {
                    optChild.isSelected = false;
                });
            }
        });
        rowData.isSelected = !rowData.isSelected;
        rowIndex = 'row' + rowIndex;
        this.rowId = rowIndex;
        this.rowSelect.emit(rowData);
        this.selectedRowNo = rowIndex;
    }
    /**
     * @param {?} pageInfo
     * @return {?}
     */
    loadPageData(pageInfo) {
        if (this.serverSidePaging) {
            this.onPageChange.emit(pageInfo);
        }
        else {
            this.currentPage = pageInfo.pageNumber;
            this.renderData();
        }
    }
    /**
     * @param {?} filteredObj
     * @return {?}
     */
    getFilteredData(filteredObj) {
        const /** @type {?} */ resultData = [];
        if (filteredObj.length > 0) {
            this.filterCloneData.forEach((option) => {
                if (this.filterOpertion(option, filteredObj)) {
                    resultData.push(option);
                }
            });
            if (resultData.length > (1 * this.pagesize)) {
                this.pagingRegenration();
                this.renderData();
            }
            else {
                this.viewRows = resultData;
                this.currentPage = 1;
                this.maxPage = 1;
            }
        }
        else {
            this.data = this.filterCloneData;
            this.pagingRegenration();
            this.renderData();
        }
    }
    /**
     * @param {?} data
     * @param {?} filteredObj
     * @return {?}
     */
    filterOpertion(data, filteredObj) {
        const /** @type {?} */ statusCollection = [];
        let /** @type {?} */ condition = false;
        filteredObj.forEach((filterOpt) => {
            if (filterOpt.type === 'string') {
                if (filterOpt.value && data[filterOpt.key] && typeof data[filterOpt.key] === 'string') {
                    statusCollection.push(this.checkStringFilter(filterOpt.filter, data[filterOpt.key].toLowerCase(), filterOpt.value.toLowerCase()));
                }
            }
            else if (filterOpt.type === 'number') {
                statusCollection.push(this.checkNumberFilter(filterOpt.filter, data[filterOpt.key], filterOpt.value));
            }
        });
        if (statusCollection.filter((status) => status === true).length > 0) {
            condition = true;
        }
        return condition;
    }
    /**
     * @param {?} filter
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    checkNumberFilter(filter, key, value) {
        if (filter === '<') {
            return key > value;
        }
        else if (filter === '>') {
            return key < value;
        }
        else if (filter === '>=') {
            return key <= value;
        }
        else if (filter === '=<') {
            return key >= value;
        }
        else if (filter === '==') {
            return key === value;
        }
        else if (filter === '!=') {
            return key !== value;
        }
        else {
            return key !== value;
        }
    }
    /**
     * @param {?} filter
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    checkStringFilter(filter, key, value) {
        if (filter === '3') {
            return key.includes(value);
        }
        else if (filter === '1') {
            return key.startsWith(value);
        }
        else if (filter === '2') {
            return key.endsWith(value);
        }
        else {
            return key !== value;
        }
    }
    /**
     * @return {?}
     */
    pagingRegenration() {
        this.maxPage = Math.floor((this.data.length / this.pagesize));
        if ((this.data.length % this.pagesize) > 0) {
            this.maxPage++;
        }
        for (let /** @type {?} */ pageNo = 1; pageNo <= this.maxPage; pageNo++) {
            this.pageNumbers.push(pageNo);
        }
    }
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    setSelectedRow(rowData, event) {
        if (event.classList.value === this.checkDefaultIcon) {
            this.selectedRows.push(rowData);
            event.classList.value = 'checkbox active';
        }
        else {
            const /** @type {?} */ indexOf = this.selectedRows.indexOf(rowData);
            this.selectedRows.splice(indexOf, 0);
            event.classList.value = this.checkDefaultIcon;
        }
        this.emitSelectedRows();
    }
    /**
     * @return {?}
     */
    emitSelectedRows() {
        const /** @type {?} */ sRows = [];
        for (const /** @type {?} */ sr of this.selectedRows) {
            if (sr) {
                sRows.push(sr);
            }
        }
        this.selectedRowData.emit(sRows);
    }
    /**
     * @return {?}
     */
    setCheckBoxSelectClass() {
        if (this.selectAll) {
            return 'checkbox active';
        }
        else if (!this.selectAll) {
            return this.checkDefaultIcon;
        }
    }
    /**
     * @param {?} sortCol
     * @param {?} clickEvent
     * @return {?}
     */
    sortOnColHeaderClick(sortCol, clickEvent) {
        this.onHeaderClick.emit({ event: clickEvent, data: sortCol });
        if (sortCol.sort) {
            if (this.sortBy === -1) {
                this.sortBy = 1;
            }
            else if (this.sortBy === 1) {
                this.sortBy = 2;
            }
            else if (this.sortBy === 2) {
                this.sortBy = 1;
            }
            this.setSortColumn(sortCol, this.sortBy);
        }
    }
    /**
     * @param {?} sortCol
     * @param {?} _sortBy
     * @return {?}
     */
    setSortColumn(sortCol, _sortBy) {
        /*------set column sort false for other column--------*/
        this.columns.forEach((opt) => {
            opt['isColumnSort'] = false;
        });
        this.sortBy = _sortBy;
        this.sortColumn = sortCol;
        this.sortColumn.sort = true;
        this.sortColumn.isColumnSort = true;
        this.sortData();
    }
    /**
     * @return {?}
     */
    sortData() {
        if (this.sortColumn) {
            let /** @type {?} */ sortColDataIndex;
            const /** @type {?} */ sortOrder = this.sortBy;
            if (this.sortColumn.dataindex && this.sortColumn.datatype) {
                const /** @type {?} */ dataindex = this.sortColumn.dataindex;
                sortColDataIndex = dataindex;
                if (this.sortColumn.datatype === 'string') {
                    if (this.groupby) {
                        this.sortOrderGrpBy(sortOrder);
                    }
                    else {
                        this.data.sort((a, b) => {
                            const /** @type {?} */ x = a[sortColDataIndex].toLowerCase();
                            const /** @type {?} */ y = b[sortColDataIndex].toLowerCase();
                            return this.noGrpBySortOrder(sortOrder, x, y);
                        });
                    }
                }
                else if (this.sortColumn.datatype === 'number') {
                    this.sortOrderByNumber(sortOrder, sortColDataIndex);
                }
                else if (this.sortColumn.datatype === 'boolean') {
                    this.sortOrderByBoolean(sortOrder, sortColDataIndex);
                }
            }
        }
        this.renderData();
    }
    /**
     * @param {?} sortOrder
     * @param {?} sortColDataIndex
     * @return {?}
     */
    sortOrderByBoolean(sortOrder, sortColDataIndex) {
        this.data.sort((a, b) => {
            const /** @type {?} */ x = a[sortColDataIndex];
            const /** @type {?} */ y = b[sortColDataIndex];
            if (sortOrder === 1) {
                return (x === y) ? 0 : x ? -1 : 1;
            }
        });
        if (sortOrder === 2) {
            this.data.reverse();
        }
    }
    /**
     * @param {?} sortOrder
     * @param {?} sortColDataIndex
     * @return {?}
     */
    sortOrderByNumber(sortOrder, sortColDataIndex) {
        if (this.groupby) {
            this.data.sort((a, b) => {
                const /** @type {?} */ x = a.group;
                const /** @type {?} */ y = b.group;
                if (sortOrder === 2) {
                    return y - x;
                }
                else {
                    return x - y;
                }
            });
        }
        else {
            this.data.sort((a, b) => {
                const /** @type {?} */ x = a[sortColDataIndex];
                const /** @type {?} */ y = b[sortColDataIndex];
                if (sortOrder === 2) {
                    return y - x;
                }
                else {
                    return x - y;
                }
            });
        }
    }
    /**
     * @param {?} sortOrder
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    noGrpBySortOrder(sortOrder, x, y) {
        if (sortOrder === 2) {
            if (x < y) {
                return 1;
            }
            if (x > y) {
                return -1;
            }
        }
        else {
            if (x < y) {
                return -1;
            }
            if (x > y) {
                return 1;
            }
        }
        return 0;
    }
    /**
     * @param {?} sortOrder
     * @return {?}
     */
    sortOrderGrpBy(sortOrder) {
        this.data.sort((a, b) => {
            const /** @type {?} */ x = a.group.toLowerCase();
            const /** @type {?} */ y = b.group.toLowerCase();
            if (sortOrder === 2) {
                if (x < y) {
                    return 1;
                }
                if (x > y) {
                    return -1;
                }
            }
            else {
                if (x < y) {
                    return -1;
                }
                if (x > y) {
                    return 1;
                }
            }
            return 0;
        });
    }
    /**
     * @param {?} btn
     * @return {?}
     */
    onTabClick(btn) {
        btn.classList.toggle('active-accordion');
        const /** @type {?} */ panel = btn.nextElementSibling;
        if (this.iconclassKey === this.plusIcon) {
            this.iconclassKey = 'fa fa-minus';
        }
        else if (this.iconclassKey === 'fa fa-minus') {
            this.iconclassKey = this.plusIcon;
        }
        if (panel.style.maxHeight) {
            panel.style.maxHeight = null;
        }
        else {
            panel.style.maxHeight = panel.scrollHeight + 'px';
        }
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    toogle(row, index) {
        row.expanded = !row.expanded;
        if (row.expanded) {
            if (row.hasOwnProperty('groupData')) {
                this.addRows(row, index);
            }
        }
        else {
            if (row.hasOwnProperty('groupData')) {
                this.removeRows(row);
            }
        }
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    addRows(row, index) {
        row.level = Math.floor(Math.random() * 900) + 100;
        row.groupData.forEach((node, index1) => {
            node.level = row.level;
            this.viewRows.splice(index + (index1 + 1), 0, node);
        });
    }
    /**
     * @param {?} row
     * @return {?}
     */
    removeRows(row) {
        let /** @type {?} */ count = 0;
        this.viewRows.forEach((node) => {
            if (!node.hasOwnProperty('group') && node.level === row.level) {
                count++;
            }
        });
        this.viewRows.forEach((node, index) => {
            if (!node.hasOwnProperty('group') && node.level === row.level) {
                this.viewRows.splice(index, count);
            }
        });
    }
    /**
     * @param {?} row
     * @return {?}
     */
    isGroupChecking(row) {
        if (row.hasOwnProperty('group')) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectParent(row) {
        if (this.groupby) {
            row.isSelected = !row.isSelected;
            row.groupData.forEach((node) => {
                node.isSelected = !node.isSelected;
            });
            this.selectedRows = [];
            this.viewRows.forEach((rows) => {
                if (rows.isSelected) {
                    this.selectedRows.push(rows);
                }
            });
            this.emitSelectedRows();
        }
    }
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} ref
     * @return {?}
     */
    loadContextMenu(event, row, col, ref) {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.tempContextMenu = [];
            this.tempSelectedFlag(this.viewRows);
            this.mouseLocation.left = event.clientX;
            this.mouseLocation.top = event.clientY;
            row.isSelected = true;
            if (col.contextmenu && col.contextmenu.length > 0) {
                this.flag = true;
                this.tempContextMenu = col.contextmenu;
                this.addListner();
            }
            else if (this.contextmenu && this.contextmenu.length > 0) {
                this.tempContextMenu = this.contextmenu;
                this.flag = true;
                this.addListner();
            }
            this.posixUp = this.getListPosition(ref);
            event.preventDefault();
            event.stopPropagation();
            this.rightClickRowData = row;
        }
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        this.rightClick.emit(Data);
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} viewRows
     * @return {?}
     */
    tempSelectedFlag(viewRows) {
        viewRows.forEach((row) => {
            if (row.isSelected) {
                row.isSelected = false;
            }
        });
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.flag = false;
            this.showToolTip = false;
            this.showEnableColumnFilter = false;
            if (!this.flag || !this.showToolTip || !this.showEnableColumnFilter) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListner();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onFilterIconClick(event) {
        event.stopImmediatePropagation();
        this.addListner();
        this.showEnableColumnFilter = false;
        this.showToolTip = !this.showToolTip;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEnableColumnClick(event) {
        event.stopImmediatePropagation();
        this.addListner();
        this.showToolTip = false;
        this.showEnableColumnFilter = !this.showEnableColumnFilter;
    }
    /**
     * @return {?}
     */
    getFilterClick() {
        this.filterComRef.forEach((com) => {
            com.showToolTip = false;
        });
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowLeft(ref) {
        const /** @type {?} */ intId = (ref.id).substring(ref.id.search('-') + 1, (ref.id).length);
        const /** @type {?} */ unitId = parseInt(intId, 10) % 10;
        const /** @type {?} */ firstId = intId.slice(0, -1);
        this.findPreviousColumn(unitId, firstId);
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowRight(ref) {
        const /** @type {?} */ intId = (ref.id).substring(ref.id.search('-') + 1, (ref.id).length);
        const /** @type {?} */ unitId = parseInt(intId, 10) % 10;
        const /** @type {?} */ firstId = intId.slice(0, -1);
        this.findNextColumn(unitId, firstId);
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowUp(ref) {
        const /** @type {?} */ intId = (ref.id).substring(ref.id.search('-') + 1, (ref.id).length);
        const /** @type {?} */ unitId = intId.slice(0, -1);
        if (unitId > 1 && document.getElementById(this.title + '-' + (parseInt(intId, 10) - 10).toString())) {
            document.getElementById(this.title + '-' + (parseInt(intId, 10) - 10).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowDown(ref) {
        const /** @type {?} */ intId = (ref.id).substring(ref.id.search('-') + 1, (ref.id).length);
        const /** @type {?} */ firstId = parseInt(intId.slice(0, -1), 10);
        if ((this.pagesize && firstId < this.pagesize && firstId < this.viewRows.length || (firstId <= this.viewRows.length - 1))
            && document.getElementById(this.title + '-' + (parseInt(intId, 10) + 10).toString())) {
            document.getElementById(this.title + '-' + (parseInt(intId, 10) + 10).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    keyEnd(ref) {
        const /** @type {?} */ intId = (ref.id).substring(ref.id.search('-') + 1, (ref.id).length);
        const /** @type {?} */ unitId = parseInt(intId, 10) % 10;
        const /** @type {?} */ firstId = intId.slice(0, -1);
        const /** @type {?} */ newLastId = this.columns.length;
        this.findHomeColumn(unitId, firstId, newLastId);
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @param {?} newLastId
     * @return {?}
     */
    findLastColumn(unitId, firstId, newLastId) {
        if (this.columnHiddenIndexArray.length >= 1 && this.columnHiddenIndexArray.includes(newLastId)) {
            this.findHomeColumn(unitId, firstId, newLastId - 1);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + newLastId;
            document.getElementById(this.title + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    keyHome(ref) {
        const /** @type {?} */ intId = (ref.id).substring(ref.id.search('-') + 1, (ref.id).length);
        const /** @type {?} */ unitId = parseInt(intId, 10) % 10;
        this.findHomeColumn(unitId, intId.slice(0, -1), 1);
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @param {?} newFirstId
     * @return {?}
     */
    findHomeColumn(unitId, firstId, newFirstId) {
        if (this.columnHiddenIndexArray.length >= 1 && this.columnHiddenIndexArray.includes(newFirstId)) {
            this.findHomeColumn(unitId, firstId, newFirstId + 1);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + newFirstId;
            document.getElementById(this.title + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
    /**
     * @return {?}
     */
    keyControlHome() {
        const /** @type {?} */ unitId = 1;
        const /** @type {?} */ firstId = 1;
        this.findControlHomeColumn(unitId, firstId);
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @return {?}
     */
    findControlHomeColumn(unitId, firstId) {
        if (this.columnHiddenIndexArray.length >= 1 && this.columnHiddenIndexArray.includes(unitId)) {
            this.findControlHomeColumn(unitId + 1, firstId);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + unitId;
            document.getElementById(this.title + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
    /**
     * @return {?}
     */
    keyControlEnd() {
        const /** @type {?} */ unitId = this.columns.length;
        if (this.pagesize && this.viewRows.length >= this.pagesize) {
            const /** @type {?} */ firstId = this.pagesize;
            this.findControlEndColumn(unitId, firstId);
        }
        else {
            const /** @type {?} */ firstId = this.viewRows.length;
            this.findControlEndColumn(unitId, firstId);
        }
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @return {?}
     */
    findControlEndColumn(unitId, firstId) {
        if (this.columnHiddenIndexArray.length >= 1 && this.columnHiddenIndexArray.includes(unitId)) {
            this.findControlHomeColumn(unitId - 1, firstId);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + unitId;
            document.getElementById(this.title + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
    /**
     * @return {?}
     */
    getColumnCount() {
        if (this.columns) {
            this.columnHiddenIndexArray = [];
            this.columns.forEach((element, index) => {
                if (!element.hidden) {
                    this.columnCountArray.push(element);
                }
                else {
                    this.columnHiddenIndexArray.push(index + 1);
                }
            });
        }
    }
    /**
     * @param {?} index
     * @param {?} firstId
     * @return {?}
     */
    findNextColumn(index, firstId) {
        if (index < this.columns.length) {
            if (this.columnHiddenIndexArray.length >= 1 && this.columnHiddenIndexArray.includes(index + 1)) {
                index = index + 1;
                this.findNextColumn(index, firstId);
            }
            else {
                const /** @type {?} */ generatedId = firstId + '' + (index + 1);
                document.getElementById(this.title + '-' + (parseInt(generatedId, 10)).toString()).focus();
            }
        }
    }
    /**
     * @param {?} index
     * @param {?} firstId
     * @return {?}
     */
    findPreviousColumn(index, firstId) {
        if (index > 1) {
            if (this.columnHiddenIndexArray.length >= 1 && this.columnHiddenIndexArray.includes(index - 1)) {
                index = index - 1;
                this.findPreviousColumn(index, firstId);
            }
            else {
                const /** @type {?} */ generatedId = firstId + '' + (index - 1);
                document.getElementById(this.title + '-' + (parseInt(generatedId, 10)).toString()).focus();
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    checkFirstTabIndex(index) {
        if (this.columnHiddenIndexArray.length >= 1) {
            if (this.columnHiddenIndexArray.includes(index)) {
                this.firstIndex = index + 1;
                this.checkFirstTabIndex(this.firstIndex);
            }
        }
        else {
            this.firstIndex = 1;
        }
    }
    /**
     * @param {?} listId
     * @return {?}
     */
    onArrowdownList(listId) {
        const /** @type {?} */ unitId = parseInt(listId, 10);
        const /** @type {?} */ nextId = unitId + 1;
        if (nextId < this.columns.length) {
            document.getElementById(nextId.toString()).focus();
        }
        else {
            listId = '-1';
            this.onArrowdownList(listId);
        }
    }
    /**
     * @param {?} listId
     * @return {?}
     */
    onArrowUpList(listId) {
        const /** @type {?} */ unitId = parseInt(listId, 10);
        const /** @type {?} */ previousId = unitId - 1;
        if (previousId >= 0) {
            document.getElementById(previousId.toString()).focus();
        }
        else {
            const /** @type {?} */ nextId = this.columns.length;
            listId = nextId.toString();
            this.onArrowUpList(listId);
        }
    }
    /**
     * @param {?} listId
     * @return {?}
     */
    onArrowUpGlobalList(listId) {
        const /** @type {?} */ unitId = parseInt(listId, 10);
        const /** @type {?} */ previousId = unitId - 1;
        if (previousId >= 0) {
            document.getElementById(previousId.toString()).focus();
        }
        else {
            const /** @type {?} */ nextId = this.globalFilterOptions.length;
            listId = nextId.toString();
            this.onArrowUpGlobalList(listId);
        }
    }
    /**
     * @param {?} listId
     * @return {?}
     */
    onArrowdownGlobalList(listId) {
        const /** @type {?} */ unitId = parseInt(listId, 10);
        const /** @type {?} */ nextId = unitId + 1;
        if (nextId < this.globalFilterOptions.length) {
            document.getElementById(nextId.toString()).focus();
        }
        else {
            listId = '-1';
            this.onArrowdownGlobalList(listId);
        }
    }
    /**
     * @return {?}
     */
    onPageDownClick() {
        if (this.pageId.activePage < this.pagesize) {
            this.pageId.onPageClick(this.pageId.activePage + 1, this.pageId.activePage);
            const /** @type {?} */ pageInfo = { pageNumber: this.pageId.activePage, current: this.pageId.activePage, next: this.pageId.activePage + 1 };
            this.loadPageData(pageInfo);
            this.checkFirstTabIndex(1);
            setTimeout(() => {
                this.keyControlHome();
            }, 100);
        }
    }
    /**
     * @return {?}
     */
    onPageUpClick() {
        if (this.pageId.activePage > 1) {
            this.pageId.onPageClick(this.pageId.activePage - 1, this.pageId.activePage - 2);
            const /** @type {?} */ pageInfo = { pageNumber: this.pageId.activePage - 1, current: this.pageId.activePage, next: this.pageId.activePage + 1 };
            this.loadPageData(pageInfo);
            setTimeout(() => {
                this.keyControlEnd();
            }, 100);
        }
    }
    /**
     * @return {?}
     */
    showGroupCol() {
        this.showGroupByColumn = !this.showGroupByColumn;
    }
    /**
     * @return {?}
     */
    findContolEndGrpBy() {
        if (this.viewRows && this.viewRows.length > 0) {
            const /** @type {?} */ firstLevelGrid = [];
            const /** @type {?} */ unitId = this.columns.length;
            const /** @type {?} */ firstId = this.viewRows.length;
            this.viewRows.forEach((element, index) => {
                if (element.hasOwnProperty('expanded')) {
                    firstLevelGrid.push(element);
                }
            });
            if (!firstLevelGrid[firstLevelGrid.length - 1].expanded) {
                this.findControlEndColumn(1, firstId);
            }
            else {
                this.findControlEndColumn(unitId, firstId);
            }
        }
    }
}
AmexioDatagridComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-datagrid',
                template: `
    <div class="datagrid">
      <div class="datatabletitle">
        <span *ngIf="title" id="{{gridId}}"> {{title}} </span>
        <span class="dataheaderFilter" class="float-right" style="padding-bottom:1.1%">
          <ng-content select="amexio-datagrid-header"></ng-content>
          <span tabindex='1' *ngIf="enablecolumnfilter ? true:false" (keyup.enter)="onEnableColumnClick($event)" class="float-right enablecolumnfilter"
            (click)="onEnableColumnClick($event)" style=" cursor: pointer;">
            &nbsp;
            <span *ngIf="!show">&#9776;</span>
            <span *ngIf="show">&#9747;</span>
          </span>
        </span>
        <span *ngIf="groupby ? true : false" class="float-right-datagridlist" tabindex="1" (keyup.enter)="showGroupCol()"
          (click)="showGroupByColumn = !showGroupByColumn; showToolTip = false" style=" cursor: pointer;">
          <!--<span class="fa fa-th-list"></span>-->
          <amexio-c-icon key="datagrid_list"></amexio-c-icon>
        </span>
      </div>
      <!--Filter with Checkbox datagrid start-->

      <ng-container *ngIf="enabledatafilter ? true : false">
        <div class="datatable datatable-row">
          <ng-container *ngIf="enablecheckbox">
            <div class="datatable-col col-group datatable-checkbox-width">
              <div class="inputgroup">
                <div class="input-box">
                  <div *ngIf="!selectAll" (click)="selectAllRecord()" class="checkbox default"></div>
                  <div *ngIf="selectAll" (click)="selectAllRecord()" class="checkbox active">&#10004;</div>
                </div>
              </div>
            </div>
          </ng-container>

          <!--Filter datagrid start-->

          <ng-container *ngIf="enabledatafilter ? true : false">
            <ng-container *ngFor="let cols of columns">
              <ng-container *ngIf="!cols.hidden">
                <div class="datatable-col col-group" [style.width.%]="cols.width">
                  <data-grid-filter (onFilterClick)="getFilterClick($event)" [column]="cols" (filterObject)="getFilteredData($event)">
                  </data-grid-filter>
                </div>
              </ng-container>
            </ng-container>
          </ng-container>

        </div>
      </ng-container>

      <!--Filter datagrid start-->
      <ng-container *ngIf="globalfilter ? true : false">
        <div class="datatable datatable-row">
          <ng-container class="datatable datatable-column">
            <div class="inputgroup" style="padding-left: 1%; padding-right: 1%">
              <input type="text" tabindex="1" [(ngModel)]="filterValue" (keyup)="keyUpSearch($event)" type="text" class="input-control"
                aria-label="Text input with dropdown button">
              <span tabindex="1" (keyup.enter)="onFilterIconClick($event)" class="datatable-filter-icon">
                <amexio-c-icon key="datagrid_filter" (click)="onFilterIconClick($event)"></amexio-c-icon>
              </span>
              <span *ngIf="showToolTip" class="dropdown" style="width: 250px; right: 0">
                <ul class="dropdown-list" *ngFor="let opt of globalFilterOptions;  let i = index">
                  <li #listId id={{i}} (keyup.enter)="selectedOption(opt)" (keyup.arrowup)="onArrowUpGlobalList(listId.id)"
                    (keyup.arrowdown)="onArrowdownGlobalList(listId.id)" role="option" tabindex="1" class="list-items">
                    <div (click)="selectedOption(opt)">
                      {{opt.key}}&nbsp;
                      <i [class]="opt.checkedStatus" aria-hidden="true"></i>
                    </div>
                  </li>
                </ul>
              </span>
            </div>
          </ng-container>
        </div>
      </ng-container>

      <ng-container *ngIf="enablecolumnfilter ? true : false">
        <span *ngIf="showEnableColumnFilter" class="dropdown dropdown-right" [ngStyle]="{'top': globalfilter || enabledatafilter ? '10%':''}"
          style="width: 250px;">
          <ul role="listbox" class="dropdown-list">
            <li #listId id={{i}} (keyup.arrowup)="onArrowUpList(listId.id)" (keyup.arrowdown)="onArrowdownList(listId.id)"
              role="option" tabindex="1" class="list-items" *ngFor="let cols of columns;let i = index;">
              <div [attr.aria-checked]="!cols.hidden">
                <input tabindex="1" role="checkbox" id="{{componentId}}" type="checkbox" [attr.checked]="!cols.hidden ? true: null"
                  (click)="onColumnCheck(cols)" (keyup.enter)="onColumnCheck(cols)" />
                <label>{{cols.text}}</label>
              </div>
            </li>
          </ul>
        </span>
      </ng-container>

      <ng-container *ngIf="groupby ? true : false">
        <span *ngIf="showGroupByColumn" class="dropdown dropdown-right" style="width: 250px;">
          <ul class="dropdown-list">
            <li #listId id={{i}} (keyup.arrowup)="onArrowUpList(listId.id)" (keyup.arrowdown)="onArrowdownList(listId.id)"
              role="option" tabindex="1" class="list-items" *ngFor="let cols of columns;let i = index;" (click)="showGroupByColumn = !showGroupByColumn">
              <div (click)="setGroupByColumn(cols)">
                <label>{{cols.text}}</label>
              </div>
            </li>
          </ul>
        </span>
      </ng-container>
    </div>

    <!--Checkbox datagrid with datatypes condition start-->
    <ng-container *ngIf="enableHeader">
      <div class="datatable" role="grid" attr.aria-labelledby="{{gridId}}">
        <div class="datatable-header">
          <ng-container *ngIf="enablecheckbox">
            <div class="datatable-col datatable-checkbox-width checkbox-col">
              <div class="inputgroup">
                <div class="input-box">
                  <div *ngIf="!selectAll" (click)="selectAllRecord()" class="checkbox default"></div>
                  <div *ngIf="selectAll" (click)="selectAllRecord()" class="checkbox active">&#10004;</div>
                </div>
              </div>
            </div>
          </ng-container>
          <!--datagrid start unhidden-->
          <ng-container *ngFor="let cols of columns">
            <ng-container *ngIf="!cols.hidden">
              <ng-container *ngIf="(cols.datatype=='string' || cols.datatype == 'boolean')">
                <!-- -------------------- -->
                <div class="datatable-col" tabindex="1" [style.width.%]="cols.width" (click)="sortOnColHeaderClick(cols, $event)"
                  (keyup.enter)="sortOnColHeaderClick(cols, $event)">

                  <ng-container *ngIf="cols.headerTemplate">
                    <ng-template [ngTemplateOutlet]="cols.headerTemplate" [ngTemplateOutletContext]="{column:cols ,index: i}"></ng-template>
                  </ng-container>
                  <ng-container *ngIf="!cols.headerTemplate">
                    {{cols.text}} &nbsp;

                  </ng-container>
                  <ng-container *ngIf="this.sortBy==1   && cols.isColumnSort">
                    <amexio-c-icon key="datagrid_arrowup"></amexio-c-icon>
                    <!--&nbsp; <i class="fa fa-arrow-up"></i>-->
                  </ng-container>
                  <ng-container *ngIf="this.sortBy==2  && cols.isColumnSort">
                    <!--&nbsp;<i class="fa fa-arrow-down"></i>-->
                    <amexio-c-icon key="datagrid_arrowdown"></amexio-c-icon>
                  </ng-container>
                </div>
              </ng-container>
              <ng-container *ngIf="cols.datatype=='number'">
                <div class="datatable-col" tabindex="1" [style.width.%]="cols.width" (keyup.enter)="sortOnColHeaderClick(cols, $event)"
                  (click)="sortOnColHeaderClick(cols, $event)">
                  <ng-container *ngIf="cols.headerTemplate">
                    <ng-template [ngTemplateOutlet]="cols.headerTemplate" [ngTemplateOutletContext]="{column:cols ,index: i}"></ng-template>
                  </ng-container>
                  <ng-container *ngIf="!cols.headerTemplate">
                    <span class="float-right">
                      {{cols.text}} &nbsp;
                      <ng-container *ngIf="this.sortBy==1 && cols.isColumnSort">
                        <amexio-c-icon key="datagrid_arrowup"></amexio-c-icon>
                        <!--&nbsp; <i class="fa fa-arrow-up"></i>-->
                      </ng-container>
                      <ng-container *ngIf="this.sortBy==2 && cols.isColumnSort">
                        <!--&nbsp;<i class="fa fa-arrow-down"></i>-->
                        <amexio-c-icon key="datagrid_arrowdown"></amexio-c-icon>
                      </ng-container>
                    </span>
                  </ng-container>
                </div>
              </ng-container>
            </ng-container>
          </ng-container>
        </div>
      </div>
    </ng-container>

    <!--Group BY datagrid start-->
    <ng-container *ngIf="!groupby">
      <div class="datatable-height" [style.height.px]="height">
        <div class="datatable" role="grid">
          <div style="height: 300px;" *ngIf="mask">
            <div class="spinner"></div>
          </div>
          <ng-container *ngIf="!mask">
            <div #id class="datatable-row" *ngFor="let row of viewRows;let i=index" id="{{'row'+i}}" [ngClass]="{'datatable-row-active':row.isSelected}"
              (click)="onRowClick(row, i)">

              <ng-container *ngIf="enablecheckbox">
                <div class="datatable-col datatable-checkbox-width checkbox-col">
                  <div class="inputgroup">
                    <div class="input-box">
                      <div (click)="setSelectedRow(row, check)" [class]="checkBoxSelectClass" #check>
                        {{((checkBoxSelectClass == 'checkbox active') && (check.classList.value == 'checkbox active')) ||
                        ((checkBoxSelectClass ==
                        'checkbox default') && (check.classList.value == 'checkbox active')) ? '&#10004;' : ''}}
                      </div>
                    </div>
                  </div>
                </div>
              </ng-container>

              <ng-container *ngFor="let cols of columns;let colIndex = index">
                <ng-container *ngIf="!cols.hidden">
                  <ng-container *ngIf="cols.datatype=='number'">
                    <div #ref id="{{title}}-{{i+1}}{{colIndex+1}}" class="datatable-col" [attr.tabindex]="(((i+1== 1) && (colIndex + 1 == firstIndex))? 1: tabindex)"
                      [style.width.%]="cols.width" scope="row" [attr.data-label]="cols.text" (keyup.arrowright)="arrowRight(ref)"
                      (keyup.arrowleft)="arrowLeft(ref)" (keyup.arrowdown)="arrowDown(ref)" (keyup.arrowup)="arrowUp(ref)"
                      (keyup.end)="keyEnd(ref)" (keyup.home)="keyHome(ref)" (keyup.control.end)="keyControlEnd(ref)"
                      (keyup.control.home)="keyControlHome(ref)" (keyup.pagedown)="onPageDownClick()" (keyup.pageup)="onPageUpClick()"
                      (keyup.enter)="onRowClick(row, i)" [style.width.%]="cols.width" scope="row" [attr.data-label]="cols.text">
                      <span class="float-right">
                        <ng-container *ngIf="row[cols.dataindex]!= '';else elseBlock">
                          <div (contextmenu)="loadContextMenu($event,row, cols, id)">
                            <amexio-display-field [data]="row" [data-index]="cols.dataindex"></amexio-display-field>
                          </div>
                        </ng-container>
                        <ng-template #elseBlock>
                          &nbsp;
                        </ng-template>
                      </span>
                    </div>
                  </ng-container>
                  <ng-container *ngIf="!cols?.bodyTemplate && (cols.datatype == 'string' || cols.datatype == 'boolean')">
                    <div #ref id="{{title}}-{{i+1}}{{colIndex+1}}" class="datatable-col" [attr.tabindex]="(((i+1== 1) && (colIndex + 1 == firstIndex))? 1: tabindex)"
                      [style.width.%]="cols.width" scope="row" [attr.data-label]="cols.text" (keyup.arrowright)="arrowRight(ref)"
                      (keyup.arrowleft)="arrowLeft(ref)" (keyup.enter)="onRowClick(row, i)" (keyup.arrowdown)="arrowDown(ref)"
                      (keyup.arrowup)="arrowUp(ref)" (keyup.end)="keyEnd(ref)" (keyup.home)="keyHome(ref)"
                      (keyup.control.end)="keyControlEnd()" (keyup.control.home)="keyControlHome(ref)" (keyup.pageup)="onPageUpClick()"
                      (keyup.pagedown)="onPageDownClick(ref)">
                      <!-- <ng-container *ngIf="(cols.datatype == 'boolean' ? true : row[cols.dataindex]!= null ? true : false);else elseBlock"> -->
                        <div (contextmenu)="loadContextMenu($event,row, cols, id)">
                          <amexio-display-field [data]="row" [data-index]="cols.dataindex"></amexio-display-field>
                        </div>
                      <!-- </ng-container> -->
                      <ng-template #elseBlock>
                        &nbsp;
                      </ng-template>
                    </div>
                  </ng-container>
                  <ng-container *ngIf="cols.bodyTemplate">
                    <div #ref id="{{title}}-{{i+1}}{{colIndex+1}}" class="datatable-col" [attr.tabindex]="(((i+1== 1) && (colIndex + 1 == firstIndex))? 1: tabindex)"
                      [style.width.%]="cols.width" scope="row" [attr.data-label]="cols.text" (keyup.arrowright)="arrowRight(ref)"
                      (keyup.arrowleft)="arrowLeft(ref)" (keyup.arrowdown)="arrowDown(ref)" (keyup.arrowup)="arrowUp(ref)"
                      (keyup.end)="keyEnd(ref)" (keyup.home)="keyHome(ref)" (keyup.control.end)="keyControlEnd()"
                      (keyup.control.home)="keyControlHome(ref)" (keyup.pagedown)="onPageDownClick(ref)" (keyup.pageup)="onPageUpClick()"
                      class="datatable-col" [style.width.%]="cols.width" scope="row" [attr.data-label]="cols.text">
                      <ng-template [ngTemplateOutlet]="cols.bodyTemplate" [ngTemplateOutletContext]="{ $implicit: { text : row[cols.dataindex] }, row: row }"></ng-template>
                    </div>
                  </ng-container>
                </ng-container>

              </ng-container>
            </div>
          </ng-container>

        </div>
      </div>

    </ng-container>

    <!--Group BY datagrid end-->

    <!--Group BY and Filter Data datagrid start-->
    <ng-container *ngIf="groupby && !enabledatafilter">
      <div class="datatable-height" [style.height.px]="height">
        <div class="datatable" role="grid" style="table-layout: inherit !important;">
          <div style="height: 300px;" *ngIf="mask">
            <div class="spinner"></div>
          </div>
          <ng-container *ngIf="!mask">
            <div class="datatable-row" *ngFor="let row of viewRows;let i=index" id="{{'row'+i}}" [ngClass]="{'datatable-row-active':row.isSelected}"
              (click)="toogle(row, i)">
              <ng-container *ngIf="enablecheckbox">
                <div class="datatable-col datatable-checkbox-width checkbox-col">
                  <div class="inputgroup">
                    <div class="input-box">
                      <div (click)="selectParent(row)" [class]="row.isSelected ?'checkbox active':'checkbox default'">
                        {{row.isSelected ? '&#10004;' : ''}}
                      </div>
                    </div>
                  </div>
                </div>
              </ng-container>
              <ng-container *ngFor="let cols of columns;let colIndex = index">
                <ng-container *ngIf="isGroupChecking(row)">

                  <ng-container *ngIf="colIndex == 0">
                    <div #grpref class="datatable-col col-group" class="datatable-col col-group" id="{{title}}-{{i+1}}{{colIndex+1}}"
                      tabindex="1" (keyup.arrowdown)="arrowDown(grpref)" (keyup.arrowup)="arrowUp(grpref)"
                      (keyup.control.end)="findContolEndGrpBy()" (keyup.control.home)="keyControlHome()" (keyup.enter)="toogle(row, i)">
                      <!--<i *ngIf="!row.expanded" class="fa fa-caret-right" aria-hidden="true" (click)="toogle(row,i)"></i>-->
                      <ng-container *ngIf="!row.expanded">
                        <amexio-c-icon key="datagrid_expand"></amexio-c-icon>
                      </ng-container>
                      <ng-container *ngIf="row.expanded">
                        <amexio-c-icon key="datagrid_collapse"></amexio-c-icon>
                      </ng-container>
                      {{row.group}}
                    </div>
                  </ng-container>

                  <ng-container *ngIf="colIndex != 0">
                    <div class="datatable-col col-hidden">
                    </div>
                  </ng-container>
                </ng-container>
                <ng-container *ngIf="!isGroupChecking(row)">
                  <ng-container *ngIf="cols.datatype=='string' || cols.datatype == 'boolean'">
                    <div #grpref id="{{title}}-{{i+1}}{{colIndex+1}}" (keyup.arrowdown)="arrowDown(grpref)" (keyup.arrowup)="arrowUp(grpref)"
                      (keyup.arrowright)="arrowRight(grpref)" (keyup.arrowleft)="arrowLeft(grpref)" (keyup.end)="keyEnd(grpref)"
                      (keyup.home)="keyHome(grpref)" (keyup.control.end)="findContolEndGrpBy()" (keyup.control.home)="keyControlHome()"
                      class="datatable-col" tabindex="1" [style.width.%]="cols.width" [attr.data-label]="cols.text">
                      <ng-container *ngIf="colIndex == 0">
                        <span style="padding-left: 20px">
                          <amexio-display-field [data]="row" [data-index]="cols.dataindex"></amexio-display-field>
                        </span>
                      </ng-container>
                      <ng-container *ngIf="colIndex != 0">
                        <amexio-display-field [data]="row" [data-index]="cols.dataindex"></amexio-display-field>
                      </ng-container>
                    </div>
                  </ng-container>
                  <ng-container *ngIf="cols.datatype=='number'">

                    <div #grpref id="{{title}}-{{i+1}}{{colIndex+1}}" (keyup.arrowdown)="arrowDown(grpref)" (keyup.arrowup)="arrowUp(grpref)"
                      (keyup.arrowright)="arrowRight(grpref)" (keyup.arrowleft)="arrowLeft(grpref)" (keyup.end)="keyEnd(grpref)"
                      (keyup.home)="keyHome(grpref)" (keyup.control.end)="findContolEndGrpBy()" (keyup.control.home)="keyControlHome()"
                      class="datatable-col" tabindex="1" [style.width.%]="cols.width" [attr.data-label]="cols.text">

                      <ng-container *ngIf="colIndex == 0">
                        <span style="padding-left: 20px">
                          <ng-container *ngIf="row[cols.dataindex]!= '' ;else elseBlock">
                            <amexio-display-field [data]="row" [data-index]="cols.dataindex"></amexio-display-field>
                          </ng-container>
                          <ng-template #elseBlock>
                            &nbsp;
                          </ng-template>

                        </span>
                      </ng-container>
                      <ng-container *ngIf="colIndex != 0">
                        <span class="float-right">
                          <ng-container *ngIf="row[cols.dataindex]!= '' ;else elseBlock">
                            <amexio-display-field [data]="row" [data-index]="cols.dataindex"></amexio-display-field>
                          </ng-container>
                          <ng-template #elseBlock>
                            &nbsp;
                          </ng-template>
                        </span>
                      </ng-container>

                    </div>

                  </ng-container>

                </ng-container>
              </ng-container>
            </div>
          </ng-container>

        </div>
      </div>
    </ng-container>
    <!--Group BY and Filter Data datagrid end-->

    <!-- Context Menu  -->
    <!-- <span [ngStyle]="contextStyle">
        <ul *ngIf="flag" class="context-menu-list" [ngClass]="{'dropdown-up' : posixUp}">
            <li (click)="onContextNodeClick(itemConfig)" class="context-menu-list-items" [ngStyle]="{'cursor': itemConfig.disabled ? 'not-allowed':'pointer'}"
                [ngClass]="{'context-menu-separator':itemConfig.seperator}" *ngFor="let itemConfig of tempContextMenu">
                <i [ngStyle]="{'padding-left': itemConfig.icon ? '5px':'22px'}" [ngClass]="itemConfig.icon"></i>
                <span style="white-space: nowrap;display: inline ; padding-left:10px">
                    {{itemConfig.text}}
                </span>
            </li>
        </ul>
    </span> -->

    <ng-container *ngIf="flag">
      <base-contextmenu [base-context-menu]="contextmenu" [mouse-location-top]="mouseLocation.top" [mouse-location-left]="mouseLocation.left"
        [is-FlagShow]="flag" [right-click-data]="rightClickRowData" (onRightClick)="rightClickDataEmit($event)"
        [position-up]="posixUp">
      </base-contextmenu>
    </ng-container>

    <!-- Footer of the grid -->
    <div class="footer">
      <ng-container *ngIf="(pagesize && (data && data.length > pagesize)) || (serverSidePaging && totalPages)">
        <amexio-paginator #pageId [server-side-paging]="serverSidePaging" [pages]="totalPages" [rows]="pagesize"
          (onPageChange)="loadPageData($event)"></amexio-paginator>
      </ng-container>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioDatagridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CommonDataService },
    { type: ChangeDetectorRef },
    { type: Renderer2 }
];
AmexioDatagridComponent.propDecorators = {
    title: [{ type: Input }],
    pagesize: [{ type: Input, args: ['page-size',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    enablecheckbox: [{ type: Input, args: ['enable-checkbox',] }],
    data: [{ type: Input, args: ['data',] }],
    rowSelect: [{ type: Output }],
    selectedRowData: [{ type: Output }],
    onHeaderClick: [{ type: Output }],
    height: [{ type: Input }],
    groupby: [{ type: Input }],
    groupbydataindex: [{ type: Input, args: ['groupby-data-index',] }],
    enabledatafilter: [{ type: Input, args: ['enable-data-filter',] }],
    cclass: [{ type: Input, args: ['c-class',] }],
    tableHeadercclass: [{ type: Input }],
    tableTitlecclass: [{ type: Input }],
    tableDatacclass: [{ type: Input }],
    selectedrowcolor: [{ type: Input, args: ['selected-row-color',] }],
    totalDataCount: [{ type: Input, args: ['total-data-count',] }],
    serverSidePaging: [{ type: Input, args: ['server-side-paging',] }],
    columndefintion: [{ type: Input, args: ['column-defintion',] }],
    enablecolumnfiter: [{ type: Input, args: ['enable-column-fiter',] }],
    enablecolumnfilter: [{ type: Input, args: ['enable-column-filter',] }],
    globalfilter: [{ type: Input, args: ['global-filter',] }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    rightClick: [{ type: Output }],
    onPageChange: [{ type: Output }],
    filterRef: [{ type: ViewChildren, args: [DataGridFilterComponent,] }],
    columnRef: [{ type: ContentChildren, args: [AmexioGridColumnComponent,] }],
    pageId: [{ type: ViewChild, args: ['pageId',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/
class AmexioDataGridHeaderComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioDataGridHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-datagrid-header', template: `
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
AmexioDataGridHeaderComponent.ctorParameters = () => [];
AmexioDataGridHeaderComponent.propDecorators = {
    padding: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleMapScriptService {
    /**
     * @param {?} id
     * @return {?}
     */
    loadScript(id) {
        const /** @type {?} */ script = document.createElement('script');
        script.innerHTML = '';
        script.src = 'https://maps.google.com/maps/api/js?key=' + id;
        script.async = true;
        script.defer = true;
        return script;
    }
    /**
     * @param {?} script
     * @return {?}
     */
    isScriptAlreadyPresent(script) {
        const /** @type {?} */ scripts = document.getElementsByTagName('script');
        let /** @type {?} */ isScriptLoaded;
        // tslint:disable-next-line:prefer-for-of
        for (let /** @type {?} */ i = 0; i < scripts.length; i++) {
            const /** @type {?} */ scriptData = scripts[i];
            if (scriptData.src === script) {
                isScriptLoaded = true;
            }
        }
        return isScriptLoaded;
    }
}
GoogleMapScriptService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const GOOGLEMAP_CONSTANT = {
    GOOGLE_MAP_URL: 'https://maps.google.com/maps/api/js?key=',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioGoogleMapComponent {
    /**
     * @param {?} el
     * @param {?} differs
     * @param {?} _loadGoogleMapService
     */
    constructor(el, differs, _loadGoogleMapService) {
        this.el = el;
        this._loadGoogleMapService = _loadGoogleMapService;
        this.height = '250px';
        this.minheight = '250px';
        this.width = '100%';
        this.initiallat = 51.507351;
        this.initiallng = -0.127758;
        this.initialzoomlevel = 2;
        this.stockColor = '#FF0000';
        this.fillColor = '#f5f5f5';
        this.fillOpacity = 0.45;
        this.strokeOpacity = 0.6;
        this.onMarkerClick = new EventEmitter();
        this.onReady = new EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set data(v) {
        if (v) {
            this._data = v;
            this.initalize();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set coordinates(v) {
        if (v) {
            this._coordinates = v;
        }
    }
    /**
     * @return {?}
     */
    get coordinates() {
        return this._coordinates;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.componentId = +Math.floor(Math.random() * 90000) + 10000 + 'google';
        if (this.googlemapkey) {
            const /** @type {?} */ fullScriptTag = GOOGLEMAP_CONSTANT.GOOGLE_MAP_URL + this.googlemapkey;
            const /** @type {?} */ isScriptPresent = this._loadGoogleMapService.isScriptAlreadyPresent(fullScriptTag);
            const /** @type {?} */ options = {
                center: { lat: this.initiallat, lng: this.initiallng },
                zoom: this.initialzoomlevel,
            };
            if (!isScriptPresent) {
                const /** @type {?} */ script = this._loadGoogleMapService.loadScript(this.googlemapkey);
                this.loadScriptWithMap(script, options);
            }
            else {
                this.loadMap(options);
            }
        }
    }
    /**
     * @param {?} script
     * @param {?} options
     * @return {?}
     */
    loadScriptWithMap(script, options) {
        if (script != null) {
            const /** @type {?} */ body = /** @type {?} */ (document.body);
            script.onload = () => {
                this.loadMap(options);
            };
            body.appendChild(script);
        }
        else {
            this.loadMap(options);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    loadMap(options) {
        this.map = new google.maps.Map(this.el.nativeElement.children[0], options);
        this.onReady.emit({
            map: this.map,
        });
        if (!this.map && this.el.nativeElement.offsetParent) {
            this.infoWindow = new google.maps.InfoWindow();
        }
        this.initalize();
    }
    /**
     * @return {?}
     */
    initalize() {
        const /** @type {?} */ flightPlanCoordinates = this.getCoordinates();
        if (flightPlanCoordinates && flightPlanCoordinates.length > 0) {
            const /** @type {?} */ flightPath = new google.maps.Polygon({
                paths: flightPlanCoordinates,
                strokeColor: this.stockColor,
                strokeOpacity: this.strokeOpacity,
                strokeWeight: 2,
                fillColor: this.fillColor,
                fillOpacity: this.fillOpacity,
            });
            flightPath.setMap(this.map);
        }
        if (this.data && this.map) {
            this.localoverlays = [];
            for (const /** @type {?} */ overlay of this.data) {
                this.localoverlays.push(new google.maps.Marker({
                    position: { lat: overlay.lat, lng: overlay.lng },
                    icon: overlay.icon,
                    title: overlay.title,
                    data: overlay.data,
                }));
            }
            for (const /** @type {?} */ overlay of this.localoverlays) {
                overlay.setMap(this.map);
                this.bindOverlayEvents(overlay);
            }
        }
        const /** @type {?} */ changes = this.differ.diff(this.localoverlays);
        if (changes && this.map) {
            changes.forEachRemovedItem((record) => {
                google.maps.event.clearInstanceListeners(record.item);
                record.item.setMap(null);
            });
        }
    }
    /**
     * @param {?} overlay
     * @return {?}
     */
    bindOverlayEvents(overlay) {
        overlay.addListener('click', (event) => {
            this.onMarkerClick.emit(overlay.data);
            if (overlay && overlay.title) {
                this.infoWindow.setContent('<div>' + overlay.title + '</div>');
                this.infoWindow.open(this.map, overlay);
            }
        });
    }
    /**
     * @return {?}
     */
    getMap() {
        return this.map;
    }
    /**
     * @return {?}
     */
    getCoordinates() {
        const /** @type {?} */ flightPlanCoordinates = [];
        if (this._coordinates && this._coordinates.length > 0) {
            for (const /** @type {?} */ co of this._coordinates) {
                const /** @type {?} */ str = co.split(' ', 2);
                if (str && str.length === 2) {
                    flightPlanCoordinates.push({
                        lat: parseFloat(str[0]),
                        lng: parseFloat(str[1]),
                    });
                }
                else {
                    console.log('Wrong Lat-Long format ' + co);
                }
            }
        }
        return flightPlanCoordinates;
    }
}
AmexioGoogleMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-google-map',
                template: `
    <div [style.width]="width" [style.height]="height" [style.min-height]="minheight"></div>
  `,
            },] },
];
/** @nocollapse */
AmexioGoogleMapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: IterableDiffers },
    { type: GoogleMapScriptService }
];
AmexioGoogleMapComponent.propDecorators = {
    googlemapkey: [{ type: Input, args: ['google-map-key',] }],
    style: [{ type: Input }],
    height: [{ type: Input }],
    minheight: [{ type: Input, args: ['min-height',] }],
    width: [{ type: Input }],
    initiallat: [{ type: Input, args: ['initial-lat',] }],
    initiallng: [{ type: Input, args: ['initial-lng',] }],
    initialzoomlevel: [{ type: Input, args: ['initial-zoom-level',] }],
    stockColor: [{ type: Input, args: ['stroke-color',] }],
    fillColor: [{ type: Input, args: ['fill-color',] }],
    fillOpacity: [{ type: Input, args: ['fill-opacity',] }],
    strokeOpacity: [{ type: Input, args: ['stroke-opacity',] }],
    onMarkerClick: [{ type: Output }],
    onReady: [{ type: Output }],
    data: [{ type: Input, args: ['data',] }],
    coordinates: [{ type: Input, args: ['co-ordinates',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioItemSelectorComponent {
    /**
     * @param {?} itemSelectorService
     */
    constructor(itemSelectorService) {
        this.itemSelectorService = itemSelectorService;
        this.mask = true;
        /*
           Properties
           name : enable-drop
           datatype : boolean
           version : 5.0.0 onwards
           default : false
           description : any node can be dropped in the selector structure
           */
        this.enabledrop = false;
        /*
           Properties
           name : across-itemselector
           datatype : boolean
           version : 5.0.0 onwards
           default : false
           description : Dragging and dropping is possible across list.
           */
        this.acrossitemselector = false;
        /*
           Events
           name : availableRecords
           datatype : none
           version : none
           default : none
           description :  Get available values objects.
           */
        this.availableRecords = new EventEmitter();
        /*
           Events
           name : selectedRecords
           datatype : none
           version : none
           default : none
           description :  Get selected value Object.
           */
        this.selectedRecords = new EventEmitter();
        this.onDrag = new EventEmitter();
        this.dragover = new EventEmitter();
        this.selectedData = [];
        this.leftactive = true;
        this.rightactive = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.itemSelectorService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.response = response;
            }, (error) => {
            }, () => {
                this.setData(this.response);
            });
        }
        else if (this.data) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.previousValue) !== JSON.stringify(this.data)) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
            responsedata.forEach((option, index) => {
                if (!option['isSelected']) {
                    option['isSelected'] = false;
                }
            });
        }
        else {
            responsedata = httpResponse;
        }
        this.availableData = responsedata;
        this.generateIndex(this.availableData);
        this.mask = false;
    }
    /**
     * @param {?} getAvailableData
     * @return {?}
     */
    generateIndex(getAvailableData) {
        if (getAvailableData) {
            getAvailableData.forEach((element, index) => {
                element['id'] = 'itemselector' + Math.floor(Math.random() * 10000 + 99999);
            });
        }
    }
    /**
     * @param {?} data
     * @param {?} index
     * @param {?} left
     * @param {?} right
     * @return {?}
     */
    itemClick(data, index, left, right) {
        this.leftactive = left;
        this.rightactive = right;
        this.switchingObject = data;
        this.objectIndex = index;
        for (const /** @type {?} */ ir of this.availableData) {
            if ((ir)[this.valuefield] === data[this.valuefield]) {
                ir['isSelected'] = true;
            }
            else {
                ir['isSelected'] = false;
            }
        }
        if (right) {
            for (const /** @type {?} */ ir of this.selectedData) {
                if ((ir)[this.valuefield] === data[this.valuefield]) {
                    ir['selectedClick'] = true;
                }
                else {
                    ir['selectedClick'] = false;
                }
            }
        }
    }
    /**
     * @param {?} dragData
     * @return {?}
     */
    dataFormLeftToRightMove(dragData) {
        this.itemClick(dragData.data, dragData.index, true, false);
        let /** @type {?} */ currentNode;
        if (this.availableData && this.availableData.length !== 1) {
            this.availableData.forEach((element, index) => {
                if (element.id && dragData.data.id) {
                    if (element.id === dragData.data.id) {
                        currentNode = index - 1;
                    }
                    if (index === 0) {
                        currentNode = index + 1;
                    }
                }
            });
            const /** @type {?} */ focusId = (this.availableData[currentNode]);
            document.getElementById(focusId['id']).focus();
        }
        this.rightSwitch();
    }
    /**
     * @param {?} focus
     * @return {?}
     */
    enterFocus(focus) {
        this.itemClick(focus.data, focus.index, false, true);
    }
    /**
     * @param {?} dragData
     * @return {?}
     */
    shiftFocusMethod(dragData) {
        let /** @type {?} */ currentIndex;
        if (this.selectedData && this.selectedData.length > 0) {
            this.selectedData.forEach((element, index) => {
                if (element.id === dragData.data.id) {
                    currentIndex = index - 1;
                }
                if (index === 0) {
                    currentIndex = index + 1;
                }
            });
        }
        const /** @type {?} */ focusId = (this.selectedData[currentIndex]);
        document.getElementById(focusId['id']).focus();
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    downArrowPress(event, index) {
        if (this.availableData[index] === 0) {
            this.focusDetectionOnAvailableData(event, index);
        }
        else {
            const /** @type {?} */ nextitem = this.availableData[index + 1];
            document.getElementById(nextitem['id']).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    upArrowPress(event, index) {
        if (this.availableData[index] === 0) {
            this.focusDetectionOnAvailableData(event, index);
        }
        else {
            const /** @type {?} */ nextitem = this.availableData[index - 1];
            document.getElementById(nextitem['id']).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    downSwitchOnTab(event, index) {
        if (this.selectedData[index] === 0) {
            this.focusDetectionOnSelected(event, index);
        }
        else {
            const /** @type {?} */ nextitem = this.selectedData[index + 1];
            document.getElementById(nextitem['id']).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    upSwitchOnTab(event, index) {
        if (this.selectedData[index] === 0) {
            this.focusDetectionOnSelected(event, index);
        }
        else {
            const /** @type {?} */ nextitem = this.selectedData[index - 1];
            document.getElementById(nextitem['id']).focus();
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    focusDetectionOnAvailableData(event, index) {
        const /** @type {?} */ nextitem = this.availableData[0];
        document.getElementById(nextitem['id']).focus();
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    focusDetectionOnSelected(event, index) {
        const /** @type {?} */ nextitem = this.selectedData[0];
        document.getElementById(nextitem['id']).focus();
    }
    /**
     * @return {?}
     */
    rightSwitch() {
        this.selectedData.forEach((element) => {
            this.dragDropValidation(element);
        });
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.selectedData.push(this.switchingObject);
            this.selectedData[0]['selectedClick'] = true;
            this.switchingObject['isSelected'] = true;
            this.availableData.forEach((option, index) => {
                if (option['isSelected']) {
                    this.availableData.splice(index, 1);
                    option['selectedClick'] = false;
                }
            });
            this.switchingObject = null;
            this.dataEmitter();
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    dragDropValidation(element) {
        if (this.switchingObject === element) {
            this.switchingObject.isSelected = false;
        }
    }
    /**
     * @return {?}
     */
    leftSwitch() {
        this.setLeftSwitch();
    }
    /**
     * @return {?}
     */
    setLeftSwitch() {
        const /** @type {?} */ flag = false;
        this.availableData.forEach((element) => {
            this.dragDropValidation(element);
        });
        if (!flag && this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.availableData.push(this.switchingObject);
            this.switchingObject['isSelected'] = false;
            this.selectedData.forEach((option, index) => {
                if (!option['isSelected']) {
                    this.selectedData.splice(index, 1);
                }
            });
            this.switchingObject = null;
            this.dataEmitter();
        }
    }
    /**
     * @return {?}
     */
    upSwitch() {
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.selectedData.forEach((opt, i) => {
                this.getIndexObject(opt, i);
            });
            if (this.objectIndex !== 0) {
                const /** @type {?} */ index = this.selectedData[this.objectIndex];
                this.selectedData[this.objectIndex] = this.selectedData[this.objectIndex - 1];
                this.selectedData[this.objectIndex - 1] = index;
                this.dataEmitter();
            }
        }
    }
    /**
     * @return {?}
     */
    downSwitch() {
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected') && this.switchingObject['isSelected']) {
            this.selectedData.forEach((opt, i) => {
                this.getIndexObject(opt, i);
            });
            if (this.selectedData.length - 1 !== this.objectIndex) {
                const /** @type {?} */ index = this.selectedData[this.objectIndex];
                this.selectedData[this.objectIndex] = this.selectedData[this.objectIndex + 1];
                this.selectedData[this.objectIndex + 1] = index;
                this.dataEmitter();
            }
        }
    }
    /**
     * @return {?}
     */
    moveTop() {
        const /** @type {?} */ tempArray = [];
        if (this.switchingObject != null && this.switchingObject['isSelected']) {
            this.selectedData.forEach((opt, i) => {
                this.getIndexObject(opt, i);
            });
            if (this.selectedData.length > 1) {
                tempArray[0] = this.selectedData[this.objectIndex];
                this.selectedData.splice(this.objectIndex, 1);
                this.selectedData.forEach((option) => {
                    tempArray.push(option);
                });
                this.selectedData = tempArray;
                this.dataEmitter();
            }
        }
    }
    /**
     * @return {?}
     */
    moveBottom() {
        if (this.switchingObject != null && this.switchingObject.hasOwnProperty('isSelected')) {
            this.selectedData.forEach((opt, i) => {
                this.getIndexObject(opt, i);
            });
            if (this.switchingObject['isSelected'] && this.selectedData.length > 1) {
                this.selectedData.splice(this.objectIndex, 1);
                this.selectedData[this.selectedData.length] = this.switchingObject;
            }
        }
        this.dataEmitter();
    }
    /**
     * @return {?}
     */
    dataEmitter() {
        this.availableRecords.emit(this.availableData);
        this.selectedRecords.emit(this.selectedData);
    }
    /**
     * @param {?} opt
     * @param {?} i
     * @return {?}
     */
    getIndexObject(opt, i) {
        if (opt[this.valuefield] === this.switchingObject[this.valuefield]) {
            this.objectIndex = i;
        }
    }
    /**
     * @param {?} dragData
     * @return {?}
     */
    onDragStartLeft(dragData) {
        if (!this.acrossitemselector) {
            this.itemClick(dragData.data, dragData.index, true, false);
        }
        else {
            dragData.event.dataTransfer.setData('itemnodedata', JSON.stringify(dragData.data));
            this.onDrag.emit(dragData);
        }
    }
    /**
     * @param {?} dragData
     * @return {?}
     */
    onDragStartRight(dragData) {
        if (!this.acrossitemselector) {
            this.itemClick(dragData.data, dragData.index, false, true);
        }
        else {
            dragData.event.dataTransfer.setData('itemnodedata', JSON.stringify(dragData.data));
            this.onDrag.emit(dragData);
        }
    }
    /**
     * @param {?} dragOverData
     * @return {?}
     */
    allowDrop(dragOverData) {
        dragOverData.event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropRight(event) {
        if (this.enabledrop) {
            this.rightSwitch();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropLeft(event) {
        if (this.enabledrop) {
            this.leftSwitch();
        }
    }
}
AmexioItemSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-item-selector', template: `
    <amexio-row>
        <amexio-column [size]="'45pt'">
            <amexio-card [header]="true">
                <amexio-header>Available</amexio-header>
                <amexio-body>
                    <div style="height: 220px;" *ngIf="mask">
                        <div class="spinner"></div>
                    </div>
                    <div tabindex="1" role="listbox" [style.height.px]="height" (dragover)="allowDrop({event:$event,data:data})" (drop)="dropLeft($event)"
                        *ngIf="!mask" style="overflow: auto;outline: none;">
                        <div id="{{data.id}}" tabindex="1" role="option"
                         (keyup.enter)="dataFormLeftToRightMove({event:$event,data:data,index:i})"
                         (keyup.arrowdown)="downArrowPress($event,i)" 
                        (keyup.arrowup)="upArrowPress($event,i)"
                            class="itemselector-list" [ngClass]="data['isSelected'] ? 'itemselector-list-active':''" *ngFor="let data of availableData; let i = index"
                            (click)="itemClick(data,i, true,false)" [attr.draggable]="enabledrag" (dragstart)="onDragStartLeft({event:$event,data:data,index:i})">
                            {{data[displayfield]}}
                        </div>
                    </div>
                </amexio-body>
            </amexio-card>
        </amexio-column>


        <amexio-column [size]="'10pt'">

            <div class="item-selector-action-panel">

                <amexio-card [header]="true">
                    <amexio-header>&nbsp;</amexio-header>
                    <amexio-body>

                        <div class="actionbar">
                            <div [style.height.px]="height" class="actionbarinner">
                                <div tabindex="1" (keyup.enter)="moveTop()" [ngClass]="{'actiondisable':!rightactive}"
                                    (click)="moveTop()" class="action movetop ">
                                    <amexio-c-icon key="itemselector_caretup"></amexio-c-icon>
                                </div>
                                <div tabindex="1" (keyup.enter)="upSwitch()" [ngClass]="{'actiondisable':!rightactive}"
                                    (click)="upSwitch()" class="action moveup">
                                    <amexio-c-icon key="itemselector_arrowup"></amexio-c-icon>
                                </div>
                                <div tabindex="1" (keyup.enter)="leftSwitch()" [ngClass]="{'actiondisable':!rightactive}"
                                    (click)="leftSwitch()" class="action moveleft">
                                    <amexio-c-icon key="itemselector_arrowleft"></amexio-c-icon>
                                </div>
                                <div tabindex="1" (keyup.enter)="rightSwitch()" [ngClass]="{'actiondisable':!leftactive}"
                                    (click)="rightSwitch()" class="action moveright">
                                    <amexio-c-icon key="itemselector_arrowright"></amexio-c-icon>
                                </div>
                                <div tabindex="1" (keyup.enter)="downSwitch()" [ngClass]="{'actiondisable':!rightactive}"
                                    (click)="downSwitch()" class="action movedown">
                                    <amexio-c-icon key="itemselector_arrowdown"></amexio-c-icon>
                                </div>
                                <div tabindex="1" (keyup.enter)="moveBottom()" [ngClass]="{'actiondisable':!rightactive}"
                                    (click)="moveBottom()" class="action movebottom">
                                    <amexio-c-icon key="itemselector_caretdown"></amexio-c-icon>
                                </div>
                            </div>
                        </div>
                    </amexio-body>
                </amexio-card>
            </div>

        </amexio-column>

        <amexio-column [size]="'45pt'">
            <amexio-card [header]="true">
                <amexio-header>Selected</amexio-header>
                <amexio-body>
                    <div role="listbox" [style.height.px]="height" style="overflow: auto" (dragover)="allowDrop({event:$event,data:data})"
                        (drop)="dropRight($event)">
                        <div [attr.tabindex]="data['selectedClick'] ? 2 : -1" role="option" contenteditable="false"
                            (keyup.enter)="enterFocus({event:$event,data:data,index:i})" id="{{data.id}}" [attr.draggable]="enabledrag"
                            (keyup.arrowdown)="downSwitchOnTab($event,i)" (keyup.arrowup)="upSwitchOnTab( $event,i)" class="itemselector-list"
                            *ngFor="let data of selectedData; let i = index" (click)="itemClick(data,i, false,true)"
                            [ngClass]="data['selectedClick'] ? 'itemselector-list-active':''" (dragstart)="onDragStartRight({event:$event,data:data,index:i})">
                            <label>
                                {{data[displayfield]}}

                            </label>
                        </div>
                    </div>
                </amexio-body>
            </amexio-card>
        </amexio-column>
    </amexio-row>
  `,
            },] },
];
/** @nocollapse */
AmexioItemSelectorComponent.ctorParameters = () => [
    { type: CommonDataService }
];
AmexioItemSelectorComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    height: [{ type: Input }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    enabledrag: [{ type: Input, args: ['enable-drag',] }],
    enabledrop: [{ type: Input, args: ['enable-drop',] }],
    acrossitemselector: [{ type: Input, args: ['across-itemselector',] }],
    availableRecords: [{ type: Output }],
    selectedRecords: [{ type: Output }],
    onDrag: [{ type: Output }],
    dragover: [{ type: Output }],
    dragData: [{ type: Input }],
    parentRef: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/22/17.
 */
class AmexioListBoxComponent {
    /**
     * @param {?} dataService
     * @param {?} renderer
     */
    constructor(dataService, renderer) {
        this.dataService = dataService;
        this.renderer = renderer;
        /*
        Properties
        name : enable-header
        datatype : boolean
        version : 4.2.4 onwards
        default : true
        description : User can disabled header of listbox to false..
        */
        this.enableHeader = true;
        /*
        Events
        name : selectedRows
        datatype : none
        version : none
        default : none
        description : It will fire only on selection of checkbox and gives you selected record data.
        */
        this.selectedRows = new EventEmitter();
        /*
        Events
        name : onRowClick
        datatype : none
        version : none
        default : none
        description : It will gives you row clicked data.
        */
        this.onRowClick = new EventEmitter();
        /*
          Events
          name : rightClick
          datatype : none
          version : 5.0.1
          default : none
          description : It will gives you row clicked data.
          */
        this.rightClick = new EventEmitter();
        this.filterText = '';
        this.selectAll = false;
        this.maskloader = true;
        this.ishoverselected = true;
        this.mouseLocation = { left: 0, top: 0 };
        this.activedescendant = 'aria-activedescendant';
        this.flag = false;
        this.prevlistindex = -1;
        this.listindex = -1;
        this.filter = false;
        this.enablecheckbox = false;
        this.selectedData = [];
        this.searchplaceholder = 'Search';
        this.flag = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.response = response;
            }, (error) => {
            }, () => {
                this.setData(this.response);
            });
        }
        else if (this.data) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
        this.componentId = 'listbox' + Math.floor(Math.random() * 1000 + 999);
        this.listenListboxOutClick();
    }
    /**
     * @return {?}
     */
    listenListboxOutClick() {
        this.documentClickListener = this.renderer
            .listen('document', 'click', (event) => {
            if (this.viewData.length > 0) {
                this.viewData.forEach((element, index) => {
                    if (this.prevlistindex !== -1 && this.viewData[this.prevlistindex].hasOwnProperty('ishoverselected')
                        && this.viewData[this.prevlistindex]['ishoverselected'] === true) {
                        this.viewData[this.prevlistindex]['ishoverselected'] = false;
                        this.prevlistindex = -1;
                        this.listindex = -1;
                    }
                });
            }
        });
    }
    /**
     * @return {?}
     */
    onArrowdown() {
        if (this.prevlistindex > -1) {
            this.viewData[this.prevlistindex]['ishoverselected'] = false;
        }
        this.listindex++;
        this.prevlistindex = this.listindex;
        if (this.listindex >= this.viewData.length) {
            this.listindex = 0;
            this.prevlistindex = 0;
        }
        this.viewData[this.listindex]['ishoverselected'] = true;
        if (this.viewData[this.listindex]['ishoverselected']) {
            const /** @type {?} */ divid = document.getElementById(this.componentId);
            divid.setAttribute(this.activedescendant, this.viewData[this.listindex].index);
        }
    }
    /**
     * @return {?}
     */
    onArrowUp() {
        if (this.prevlistindex > -1) {
            this.viewData[this.prevlistindex]['ishoverselected'] = false;
        }
        this.prevlistindex--;
        if (this.prevlistindex === -1) {
            this.prevlistindex = this.viewData.length - 1;
            this.listindex = -1;
        }
        this.viewData[this.prevlistindex]['ishoverselected'] = true;
        if (this.viewData[this.prevlistindex]['ishoverselected']) {
            const /** @type {?} */ divid = document.getElementById(this.componentId);
            divid.setAttribute(this.activedescendant, this.viewData[this.prevlistindex].index);
        }
        if (this.prevlistindex === 0) {
            this.listindex = 0;
        }
    }
    /**
     * @return {?}
     */
    onEnterPress() {
        this.viewData.forEach((element, index) => {
            if (element.ishoverselected === true) {
                if (element.isSelected === true) {
                    element.isSelected = false;
                }
                else {
                    element.isSelected = true;
                }
            }
        });
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.previousData) !== JSON.stringify(this.data)) {
            this.previousData = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.viewData = responsedata;
        this.setSelectedFlag(this.viewData);
        this.orgData = JSON.parse(JSON.stringify(this.viewData));
    }
    /**
     * @param {?} viewRows
     * @return {?}
     */
    setSelectedFlag(viewRows) {
        viewRows.forEach((row, index) => {
            if (!row.hasOwnProperty('isSelected')) {
                row['isSelected'] = false;
            }
            row['index'] = 'listbox' + Math.floor(Math.random() * 1000 + 999) + index;
        });
        this.maskloader = false;
    }
    /**
     * @return {?}
     */
    filterData() {
        const /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgData));
        const /** @type {?} */ nodes = this.searchTree(tData, this.filterText);
        this.viewData = nodes;
    }
    /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    searchTree(data, matchingTitle) {
        const /** @type {?} */ disp = this.displayfield;
        return data.filter(function f(node) {
            if (node[disp] && node[disp].toLowerCase().startsWith(matchingTitle.toLowerCase())) {
                return true;
            }
            if (node.children) {
                return (node.children = node.children.filter(f)).length;
            }
        });
        // return res;
    }
    /**
     * @param {?} rowData
     * @return {?}
     */
    selectedCheckBox(rowData) {
        rowData.isSelected = !rowData.isSelected;
        this.selectedData = [];
        this.viewData.forEach((node) => {
            if (node.isSelected) {
                this.selectedData.push(node);
            }
        });
        this.selectedRows.emit(this.selectedData);
    }
    /**
     * @return {?}
     */
    selectAllRecord() {
        this.selectedData = [];
        this.selectAll = !this.selectAll;
        if (this.selectAll) {
            this.viewData.forEach((node) => {
                node.isSelected = true;
            });
            this.selectedData = this.viewData;
        }
        else {
            this.viewData.forEach((node) => {
                node.isSelected = false;
            });
        }
        this.selectedRows.emit(this.selectedData);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onClick(data) {
        this.onRowClick.emit(data);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} id
     * @return {?}
     */
    loadContextMenu(event, row, id) {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.tempSelectedFlag(this.viewData);
            this.mouseLocation.left = event.clientX;
            this.mouseLocation.top = event.clientY;
            row.isSelected = true;
            this.getContextMenu();
            this.posixUp = this.getListPosition(id);
            event.preventDefault();
            event.stopPropagation();
            this.rightClickRowData = row;
        }
    }
    /**
     * @return {?}
     */
    getContextMenu() {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.contextMenuFlag = true;
            this.addListner();
        }
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    tempSelectedFlag(rows) {
        rows.forEach((row) => {
            if (row.isSelected) {
                row.isSelected = false;
            }
        });
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240;
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        this.rightClick.emit(Data);
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.contextMenuFlag = false;
            if (!this.contextMenuFlag) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListner();
    }
}
AmexioListBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-listbox', template: `
    <div class="listbox" [style.border]="border">
      <div *ngIf="enableHeader" class="header" style="display: flex; justify-content: space-between">
        <div style="display: flex;justify-content: flex-start;">
          <div role="checkbox" tabindex="0" *ngIf="enablecheckbox" (keyup.enter)="selectAllRecord()" class="input-box">
            <div *ngIf="!selectAll" (click)="selectAllRecord()" class="checkbox default"></div>
            <div *ngIf="selectAll" (click)="selectAllRecord()" class="checkbox active">&#10004;</div>
          </div>
          <div tabindex="0" attr.aria-label="{{header}} list" class="title">&nbsp;&nbsp;{{header}}</div>
        </div>

        <div *ngIf="(filter == true)">
          <input type="text" [(ngModel)]="filterText" [placeholder]="searchplaceholder" (keyup)="filterData()" class="search " />
        </div>
      </div>
      <div class="listbox-height" tabindex="0" (keyup.arrowdown)="onArrowdown()" (keyup.arrowup)="onArrowUp()"
        (keyup.enter)="onEnterPress()" [style.height.px]="height">
        <ul id="{{componentId}}" tabindex="0" role="listbox" class="list" [ngClass]="{'loading-mask' : maskloader}">
          <li #id role="option" [attr.aria-selected]="row.isSelected"
           class="list-items" *ngFor="let row of viewData let rowno = index "
            [ngClass]="{'tree-node-label-selected':row.isSelected ,
            'list-box-items':row.ishoverselected,
            'tree-node-label-not-selected':row.isSelected=='false'}"
            id="{{row.index}}">
            <div (click)="onClick(row)" (contextmenu)="loadContextMenu($event,row, id)">
              <ng-container *ngIf="enablecheckbox">
                <div class="inputgroup" style="float: left; height: 100%;">
                  <div class="input-box">
                    <div role="checkbox" [attr.checked]="row.isSelected" (click)="selectedCheckBox(row)" [class]="row.isSelected ?'checkbox active':'checkbox default'">
                      {{row.isSelected ? '&#10004;' : ''}}
                    </div>
                  </div>
                </div>&nbsp;
              </ng-container>
              <ng-container *ngIf="!bodyTemplate"> {{row[displayfield]}}</ng-container>
              <ng-template *ngIf="bodyTemplate" [ngTemplateOutlet]="bodyTemplate" [ngTemplateOutletContext]="{ row: row }"></ng-template>
            </div>
          </li>
        </ul>
      </div>
    </div>
    <ng-container *ngIf="contextMenuFlag">
      <base-contextmenu [base-context-menu]="contextmenu" [mouse-location-top]="mouseLocation.top" [mouse-location-left]="mouseLocation.left"
        [is-FlagShow]="contextMenuFlag" [right-click-data]="rightClickRowData" (onRightClick)="rightClickDataEmit($event)"
        [position-up]="posixUp">
      </base-contextmenu>
    </ng-container>
  `,
            },] },
];
/** @nocollapse */
AmexioListBoxComponent.ctorParameters = () => [
    { type: CommonDataService },
    { type: Renderer2 }
];
AmexioListBoxComponent.propDecorators = {
    enablecheckbox: [{ type: Input, args: ['enable-checkbox',] }],
    header: [{ type: Input }],
    enableHeader: [{ type: Input, args: ['enable-header',] }],
    searchplaceholder: [{ type: Input, args: ['search-placeholder',] }],
    filter: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    height: [{ type: Input }],
    selectedRows: [{ type: Output }],
    onRowClick: [{ type: Output }],
    border: [{ type: Input }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    rightClick: [{ type: Output }],
    bodyTemplate: [{ type: ContentChild, args: ['amexioBodyTmpl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by dattaram on 13/2/19.
 */
class PageInfo {
    /**
     * @param {?} pN
     * @param {?} eI
     * @param {?} rows
     */
    constructor(pN, eI, rows) {
        this.pageNumber = pN;
        this.endIndex = eI;
        this.startIndex = (this.endIndex - rows + 1);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/23/17.
 */
class AmexioPaginatorComponent {
    constructor() {
        this.serverSidePaging = false;
        /*
           Properties
           name : rows
           datatype : any
           version : 4.0 onwards
           default : none
           description : number of records on one page
           */
        this.rows = 10;
        /*
           Events
           name : onRowChange
           datatype : none
           version : none
           default : none
           description : if you click on '<<' will get 1st record and if you click on '>>' will get last record.
           */
        this.onRowChange = new EventEmitter();
        /*
           Events
           name : onPageChange
           datatype : none
           version : none
           default : none
           description : It will gives you current page number
           */
        this.onPageChange = new EventEmitter();
        this.fullPageSet = [];
        this.activePages = [];
        this.pageIndex = [];
        this.cloneRow = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.size == null || this.size === '') {
            this.size = 'medium';
        }
        this.initializePages();
        this.componentId = this.createCompId('paginator', this.pages);
    }
    /**
     * @param {?} inputType
     * @param {?} name
     * @return {?}
     */
    createCompId(inputType, name) {
        return inputType + '_' + name + '_' + Math.floor(Math.random() * 1000 + 999);
    }
    /**
     * @param {?} change
     * @return {?}
     */
    ngOnChanges(change) {
        if (change["pages"] && !change["pages"].isFirstChange()) {
            this.initializePages();
        }
        if (change["rows"] && !change["rows"].isFirstChange()) {
            this.initializePages();
        }
    }
    /**
     * @return {?}
     */
    initializePages() {
        this.resetData();
        if (this.rows > 10 && this.serverSidePaging) {
            this.isCustomLogic = true;
            this.cloneRow = this.rows;
            this.rows = 10;
        }
        if (this.rows && this.rows != null) {
            if (this.rows > this.pages) {
                this.rows = this.pages;
            }
            for (let /** @type {?} */ i = 0; i < this.pages; i++) {
                this.fullPageSet.push(i + 1);
            }
            for (let /** @type {?} */ i = 0; i < this.rows; i++) {
                this.activePages.push(i + 1);
            }
            this.calculateRows();
            this.setRows(this.rows);
        }
        else {
            for (let /** @type {?} */ i = 0; i < this.pages; i++) {
                this.fullPageSet.push(i + 1);
                this.activePages.push(i + 1);
            }
        }
        this.activePageIndex = 0;
        this.currentRowIndex = 0;
        this.activePage = this.activePageIndex + 1;
    }
    /**
     * @return {?}
     */
    onFirstClick() {
        this.setAndEmitPageState(this.activePage, 1);
        this.activePageIndex = 0;
        this.changeRows(this.pageIndex[0], 0, null);
    }
    /**
     * @return {?}
     */
    onLastClick() {
        this.changeRows(this.pageIndex[this.pageIndex.length - 1], this.pageIndex.length - 1, null);
        this.activePageIndex = this.activePages.length - 1;
        this.activePage = this.activePages[this.activePages.length - 1];
        this.setAndEmitPageState(this.activePage, this.pageIndex[this.pageIndex.length - 1]);
    }
    /**
     * @return {?}
     */
    onPrevious() {
        if (this.activePageIndex !== 0) {
            // within row bounds
            this.setNextOrPreviewsPage(this.activePageIndex -= 1);
        }
        else {
            // load prev rows
            let /** @type {?} */ sIndx;
            if (this.fullPageSet.indexOf(this.activePage) === 1) {
                sIndx = this.fullPageSet.indexOf(this.activePage);
            }
            else {
                sIndx = this.fullPageSet.indexOf(this.activePage) - 1;
            }
            if (sIndx > 0) {
                this.changeRows(this.pageIndex[this.currentRowIndex - 1], this.currentRowIndex - 1, null);
                this.setNextOrPreviewsPage(this.activePages.length - 2);
            }
        }
    }
    /**
     * @return {?}
     */
    onNext() {
        if (this.activePageIndex !== this.activePages.length - 1) {
            // within row bounds
            this.setNextOrPreviewsPage(this.activePageIndex += 1);
        }
        else {
            // load next rows
            const /** @type {?} */ sIndx = this.fullPageSet.indexOf(this.activePage) + 1;
            if (sIndx <= this.fullPageSet.length - 1) {
                this.changeRows(this.pageIndex[this.currentRowIndex + 1], this.currentRowIndex + 1, null);
                this.setNextOrPreviewsPage(1);
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setNextOrPreviewsPage(index) {
        this.activePageIndex = index;
        this.activePage = this.activePages[index];
        this.setAndEmitPageState(index, this.activePage);
    }
    /**
     * @param {?} rowNumber
     * @param {?} inDx
     * @param {?} event
     * @return {?}
     */
    changeRows(rowNumber, inDx, event) {
        if (rowNumber != null) {
            this.activePages = [];
            if (this.pages <= rowNumber) {
                this.currentRow = this.pages;
                for (let /** @type {?} */ i = this.currentRow - this.rows + 1; i <= this.currentRow; i++) {
                    if (i !== 0) {
                        this.activePages.push(i);
                    }
                }
            }
            else {
                this.getCurrentRow(rowNumber);
            }
            this.onPageChangeMethod(inDx);
            if (event) {
                this.show = !this.show;
            }
        }
    }
    /**
     * @param {?} rowNumber
     * @return {?}
     */
    getCurrentRow(rowNumber) {
        this.currentRow = rowNumber;
        for (let /** @type {?} */ i = this.currentRow - this.rows; i <= this.currentRow; i++) {
            if (i !== 0) {
                this.activePages.push(i);
            }
        }
    }
    /**
     * @param {?} inDx
     * @return {?}
     */
    onPageChangeMethod(inDx) {
        this.currentRowIndex = inDx;
        this.onRowChange.emit(this.currentRow);
        this.activePageIndex = 0;
        this.activePage = this.activePages[0];
    }
    /**
     * @param {?} page
     * @param {?} index
     * @return {?}
     */
    onPageClick(page, index) {
        this.setAndEmitPageState(this.activePageIndex + 1, page);
        this.activePageIndex = index;
        this.activePage = page;
    }
    /**
     * @return {?}
     */
    calculateRows() {
        this.currentRow = this.rows;
        const /** @type {?} */ loopI = Math.ceil(this.pages / this.rows);
        for (let /** @type {?} */ i = 1; i <= loopI; i++) {
            if ((this.rows * i) > this.pages) {
                this.pageIndex.push(this.pages);
            }
            else {
                this.pageIndex.push(this.rows * i);
            }
        }
    }
    /**
     * @param {?} rowNumber
     * @return {?}
     */
    setRows(rowNumber) {
        this.activePages = [];
        if (rowNumber > this.pages) {
            this.currentRow = this.pages;
        }
        else {
            this.currentRow = rowNumber;
        }
        for (let /** @type {?} */ i = 0; i < this.currentRow; i++) {
            this.activePages.push(i + 1);
        }
    }
    /**
     * @return {?}
     */
    showColumnOptions() {
        this.show = !this.show;
    }
    /**
     * @param {?} currentPageIndex
     * @param {?} futurePageIndex
     * @return {?}
     */
    setAndEmitPageState(currentPageIndex, futurePageIndex) {
        if (this.isCustomLogic) {
            this.currentState = new PageInfo(currentPageIndex, (this.cloneRow * currentPageIndex), this.cloneRow);
            this.futureState = new PageInfo(futurePageIndex, (this.cloneRow * futurePageIndex), this.cloneRow);
        }
        else {
            this.currentState = new PageInfo(currentPageIndex, (this.rows * currentPageIndex), this.rows);
            this.futureState = new PageInfo(futurePageIndex, (this.rows * futurePageIndex), this.rows);
        }
        this.onPageChange.emit(this.createOnPageEmitObject(this.futureState.pageNumber));
    }
    /**
     * @param {?} activePage
     * @return {?}
     */
    createOnPageEmitObject(activePage) {
        return {
            pageNumber: activePage,
            current: this.currentState,
            next: this.futureState,
        };
    }
    /**
     * @return {?}
     */
    resetData() {
        this.fullPageSet.length = 0;
        this.activePages.length = 0;
        this.pageIndex.length = 0;
    }
}
AmexioPaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-paginator', template: `
    <div role="navigation" attr.aria-labelledby="componentId" aria-label="pagination" class="paginator">
      <span class="paginator-pages">
        <a role="radiogroup" id="{{componentId}}" aria-label="previous page" tabindex="1" class="paginator-page" (click)="onPrevious()">&lt;</a>
        <a role="radiogroup" id="{{componentId}}" aria-label="previous set page" tabindex="1" class="paginator-page" (click)="onFirstClick()">&lt;&lt;</a>
      </span>
      <span id="{{componentId}}" tabindex="1" attr.aria-label="Page{{i+1}}" role="link" (keyup.enter)="onPageClick(page,i)" class="paginator-pages" *ngFor="let page of activePages;let i = index">
        <a class="paginator-page" [ngClass]="{'active' : activePageIndex == i  }"  (click)="onPageClick(page,i)">{{page}}</a>
      </span>
      <span role="presentation" class="paginator-pages">
        <a role="radiogroup" id="{{componentId}}" aria-label="next set page" tabindex="1" class="paginator-page" (click)="onLastClick()">&gt;&gt;</a>
        <a role="radiogroup" id="{{componentId}}" aria-label="next page" tabindex="1" class="paginator-page" (click)="onNext()">&gt;</a>
      </span>
      <ng-container *ngIf="!serverSidePaging">
        <ng-container *ngIf="pages > rows">
        <span class="paginator-pages">
          <a class="paginator-page" (click)="showColumnOptions()" style=" cursor: pointer;">{{currentRow}} &nbsp; &#9660;</a>
          <span *ngIf="show" class="dropdown" style="width: 50px;">
            <ul class="dropdown-list">
              <li class="list-items" *ngFor="let row of pageIndex;let i = index" (click)="changeRows(row,i, $event)">
                <div>{{row}}</div>
              </li>
            </ul>
          </span>
        </span>
        </ng-container>
      </ng-container>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioPaginatorComponent.ctorParameters = () => [];
AmexioPaginatorComponent.propDecorators = {
    serverSidePaging: [{ type: Input, args: ['server-side-paging',] }],
    pages: [{ type: Input }],
    rows: [{ type: Input }],
    size: [{ type: Input }],
    onRowChange: [{ type: Output }],
    onPageChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioProgressMultiBarComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AmexioProgressMultiBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-multi-bar', template: `

  `,
            },] },
];
/** @nocollapse */
AmexioProgressMultiBarComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 27/12/17.
 */
class AmexioProgressBarComponent {
    constructor() {
        /*
          Properties
          name : show
          datatype : boolean
          version : 4.0 onwards
          default : true
          description :  Shows / Hides the progress bar.
          */
        this.showProgress = true;
        this.progressclass = '';
        this.strippedCss = 'stripped ';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.height) {
            this.height = this.height + 'px';
        }
        else {
            this.height = '20px';
        }
        if (this.stripped) {
            this.progressclass = this.progressclass + this.strippedCss;
        }
        if (this.type && !this.amexiocolor) {
            this.progressclass = this.progressclass + this.type.toLocaleLowerCase();
        }
        else if (this.amexiocolor && !this.type) {
            this.progressclass = this.progressclass + this.amexiocolor.toLocaleLowerCase();
        }
    }
}
AmexioProgressBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-progress-bar',
                template: `
    <div *ngIf="showProgress" class="progress" [ngStyle]="{'height':height}">

      <span [ngClass]="progressclass" *ngIf="infinite" style="width: 100%;" tabindex="1" role="progressbar" aria-readonly="true"
        attr.aria-label="'inprogress {{label}}'">
        {{label != null ? label : 'Loading...'}}
      </span>
      <span tabindex="1" attr.aria-label="'progressbar {{tooltip}}'" role="progressbar" attr.aria-valuenow="{{currentvalue}}"
        aria-valuemin="0" aria-valuemax="100" [ngClass]="progressclass" *ngIf="!infinite" [ngStyle]="{'width.%' : currentvalue}">
      </span>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioProgressBarComponent.ctorParameters = () => [];
AmexioProgressBarComponent.propDecorators = {
    showProgress: [{ type: Input, args: ['show',] }],
    infinite: [{ type: Input }],
    type: [{ type: Input }],
    amexiocolor: [{ type: Input, args: ['amexio-color',] }],
    currentvalue: [{ type: Input, args: ['current-value',] }],
    label: [{ type: Input }],
    height: [{ type: Input }],
    stripped: [{ type: Input }],
    multi: [{ type: Input }],
    tooltip: [{ type: Input, args: ['tooltip',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PropertyGridComponent {
    constructor() {
        this.hasBorder = false;
        this.hasColon = false;
        this.enableKeyBold = false;
        this.enableValueClick = false;
        this.onValueClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (event.link && event.link.length > 0) {
            this.onValueClick.emit(event);
        }
    }
}
PropertyGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-property-grid',
                template: `
      <ng-container *ngIf="data && data.length > 0">
        <table [ngClass]="{'borderStyle': hasBorder}" style="width: 100%">
          <tr *ngFor="let item of data">
            <td class="field-name-align" [ngClass]="{'borderStyle': hasBorder}">
              <span *ngIf="item.fieldIcon" style="padding-right: 5px">
                <amexio-c-icon class="fa + {{item.fieldIcon}}"></amexio-c-icon>
              </span>
              <span *ngIf="!item.onlyIcon"
                [ngStyle]="{'font-weight': enableKeyBold ? 'bold': 'normal'}">{{item.fieldName}}</span>
              <span *ngIf="hasColon"> :</span>
            </td>
            <td class="field-name-align"
              [ngClass]="{'borderStyle': hasBorder, 'isclickenabled':(item.link && item.link.length>0)}"
              (click)="onClick(item)">
              {{item.fieldValue}}
            </td>
          </tr>
        </table>
      </ng-container>
    `,
                styles: [`
      .isclickenabled{cursor:pointer;color:#0366d6;text-decoration:underline}
    `],
            },] },
];
/** @nocollapse */
PropertyGridComponent.ctorParameters = () => [];
PropertyGridComponent.propDecorators = {
    data: [{ type: Input, args: ['key-value-data',] }],
    hasBorder: [{ type: Input, args: ['has-border',] }],
    hasColon: [{ type: Input, args: ['has-colon',] }],
    enableKeyBold: [{ type: Input, args: ['enable-key-bold',] }],
    enableValueClick: [{ type: Input, args: ['enable-value-click',] }],
    onValueClick: [{ type: Output, args: ['onValueClick',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 11/12/17.
 */
class AmexioFilterTreeComponent {
    /**
     * @param {?} _http
     * @param {?} cdf
     * @param {?} treeViewFilterService
     */
    constructor(_http, cdf, treeViewFilterService) {
        this._http = _http;
        this.cdf = cdf;
        this.treeViewFilterService = treeViewFilterService;
        /*
        Properties
        name : enable-checkbox
        datatype : false
        version : 4.0 onwards
        default : false
        description : Enables checkbox for each row, this allows user for multi selection.
        */
        this.enablecheckbox = false;
        /*
        Events
        name : nodeClick
        datatype : none
        version : none
        default : none
        description : It will gives you clicked node data.
        */
        this.nodeClick = new EventEmitter();
        /*
        Events
        name : onTreeNodeChecked
        datatype : none
        version : none
        default : none
        description : It will gives whole tree data with checked flag status.
        */
        this.onTreeNodeChecked = new EventEmitter();
        this.isDataFound = true;
        this.onClickSearch = false;
        this.mask = true;
        this.filterIndex = 3;
        this.triggerchar = 1;
        this.childarraykey = 'children';
        this.filterOptionData = [{
                key: 'Is Equal To', value: 1, type: 'string', checkedStatus: '',
            }, {
                key: 'Is Not Equal To', value: 2, type: 'string', checkedStatus: '',
            }, {
                key: 'Start With', value: 3, type: 'string', checkedStatus: 'fa fa-check',
            }, {
                key: 'Ends With', value: 4, type: 'string', checkedStatus: '',
            }, {
                key: 'Contains', value: 5, type: 'string', checkedStatus: '',
            }];
        this.generatefilterOptionDataIndex(this.filterOptionData);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.parentTmp != null) {
            this.templates = { treeNodeTemplate: this.parentTmp };
        }
        else if (this.templates != null) {
            this.parentTmp = this.templates.treeNodeTemplate;
        }
        if (this.httpmethod && this.httpurl) {
            this.callService();
        }
        else if (this.data) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.previousValue) !== JSON.stringify(this.data)) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    }
    /**
     * @return {?}
     */
    filterData() {
        this.showToolTip = false;
        if (this.filterText && this.filterText.length >= this.triggerchar) {
            const /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgTreeData));
            const /** @type {?} */ treeNodes = this.searchTree(tData, this.filterText);
            this.treeData = treeNodes;
            if (this.treeData && this.treeData.length === 0) {
                this.isDataFound = false;
            }
            else {
                this.isDataFound = true;
            }
        }
        else if (this.onClickSearch) {
            const /** @type {?} */ tData = JSON.parse(JSON.stringify(this.orgTreeData));
            const /** @type {?} */ treeNodes = this.searchTree(tData, this.filterText);
            this.treeData = treeNodes;
            this.onClickSearch = false;
            if (this.treeData && this.treeData.length === 0) {
                this.isDataFound = true;
            }
            else {
                this.isDataFound = false;
            }
        }
        else {
            this.isDataFound = true;
            this.treeData = this.orgTreeData;
        }
        if (this.treeData) {
            this.generatefilterIndex(this.treeData, 1, Math.floor(Math.random() * 1000 + 999 + 1));
        }
    }
    /**
     * @param {?} data
     * @param {?} matchingTitle
     * @return {?}
     */
    searchTree(data, matchingTitle) {
        const /** @type {?} */ fi = this.filterIndex;
        if (matchingTitle) {
            return this.filterActualData(data, fi, matchingTitle);
        }
    }
    /**
     * @param {?} data
     * @param {?} fi
     * @param {?} matchingTitle
     * @return {?}
     */
    filterActualData(data, fi, matchingTitle) {
        return data.filter(function f(node) {
            if ((fi === 5 && node.text.toLowerCase().includes(matchingTitle.toLowerCase())) ||
                (fi === 3 && node.text.toLowerCase().startsWith(matchingTitle.toLowerCase())) ||
                (fi === 1 && node.text.toLowerCase() === matchingTitle.toLowerCase()) ||
                (fi === 2 && node.text.toLowerCase() !== matchingTitle.toLowerCase()) ||
                (fi === 4 && node.text.toLowerCase().endsWith(matchingTitle.toLowerCase()))) {
                return true;
            }
            if (node.children) {
                return (node.children = node.children.filter(f)).length;
            }
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    filterOption(data) {
        this.onClickSearch = true;
        this.filterIndex = data.value;
        this.filterOptionData.forEach((opt) => {
            if (opt.value !== data.value) {
                opt.checkedStatus = '';
            }
            else {
                opt.checkedStatus = 'fa fa-check';
            }
        });
        this.filterData();
        this.showToolTip = false;
    }
    /**
     * @return {?}
     */
    renderServiceData() {
        this.setData(this.data);
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        const /** @type {?} */ tdata = this.getData(httpResponse);
        if (tdata) {
            this.orgTreeData = JSON.parse(JSON.stringify(tdata));
            this.treeData = tdata;
            this.generatefilterIndex(this.treeData, 1, Math.floor(Math.random() * 1000 + 999 + 1));
        }
        this.mask = false;
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    callService() {
        this.treeViewFilterService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
            this.data = response;
        }, () => {
            this.renderServiceData();
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onRowSelect(data) {
        this.nodeClick.emit(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onCheckSelect(data) {
        this.onTreeNodeChecked.emit(data);
    }
    /**
     * @param {?} data
     * @param {?} parentId
     * @param {?} rannumber
     * @return {?}
     */
    generatefilterIndex(data, parentId, rannumber) {
        data.forEach((element, index) => {
            element['index'] = '' + rannumber + '-' + parentId + (index + 1);
            if (element[this.childarraykey]) {
                this.generatefilterIndex(element[this.childarraykey], element.index.split('-')[1], rannumber);
            }
        });
    }
    /**
     * @param {?} filteroptions
     * @return {?}
     */
    generatefilterOptionDataIndex(filteroptions) {
        filteroptions.forEach((element, index) => {
            element['index'] = Math.floor(Math.random() * 1000 + 999 + 1) + '-' + index;
        });
    }
    /**
     * @param {?} data
     * @param {?} opt
     * @param {?} rowindex
     * @return {?}
     */
    onArrowFilterUp(data, opt, rowindex) {
        if (rowindex > 0) {
            const /** @type {?} */ nextindex = rowindex - 1;
            const /** @type {?} */ focusdata = data[nextindex];
            if (document.getElementById(focusdata.index)) {
                document.getElementById(focusdata.index).focus();
            }
        }
    }
    /**
     * @param {?} data
     * @param {?} opt
     * @param {?} rowindex
     * @return {?}
     */
    onArrowFilterDown(data, opt, rowindex) {
        if (rowindex < data.length - 1) {
            const /** @type {?} */ nextindex = rowindex + 1;
            const /** @type {?} */ focusdata = data[nextindex];
            if (document.getElementById(focusdata.index)) {
                document.getElementById(focusdata.index).focus();
            }
        }
    }
}
AmexioFilterTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tree-filter-view', template: `
    <div>
      <div>
        <div class="inputgroup">
          <input  tabindex="1" type="text" class="input-control text-input-width" aria-label="Filter Tree Search" [(ngModel)]="filterText"
                 placeholder="Search" (keyup)="filterData()">
          <!--<i class="fa fa-filter" aria-hidden="true" (click)="showToolTip = !showToolTip"></i>-->
          <span tabindex="1" (keyup.enter)="showToolTip = !showToolTip" attr.aria-expanded="showToolTip" class="datatable-filter-icon">
          <amexio-c-icon key="tree_filter" (click)="showToolTip = !showToolTip"></amexio-c-icon>
          </span>
          <!--  <div class="input-group-btn">-->
          <!-- <button type="button"
          class="btn" data-toggle="dropdown"
          (click)="showToolTip = !showToolTip"
          aria-haspopup="true" aria-expanded="false">
           </button>-->
          <span *ngIf="showToolTip" class="dropdown">
              <ul class="dropdown-list">
                <li tabindex="1" id={{opt.index}} role="option" class="list-items"
                *ngFor="let opt of filterOptionData let rowindex = index"
                 (click)="filterOption(opt)"
                  (keyup.enter)="filterOption(opt)"
                   (keyup.arrowup)="onArrowFilterUp(filterOptionData,opt,rowindex)"
                   (keyup.arrowdown)="onArrowFilterDown(filterOptionData,opt,rowindex)">
                 {{opt.key}}&nbsp;
                 <!--<i [class]="opt.checkedStatus" aria-hidden="true"></i>-->
                  <amexio-c-icon key="opt.checkedStatus"></amexio-c-icon>
                </li>
              </ul>
            </span>
          <!-- </div>-->
        </div>
        <ng-container *ngIf="isDataFound">
          <amexio-treeview
            [data]="treeData"
            [filter-tree-flag]="true"
            [enable-checkbox]="enablecheckbox"
            (onTreeNodeChecked)="onCheckSelect($event)"
            (nodeClick)="onRowSelect($event)" [templates]="templates">
          </amexio-treeview>
        </ng-container>
        <ng-container *ngIf="!isDataFound">
          <p>No Data Found.</p>
        </ng-container>

      </div>
    </div>


  `,
            },] },
];
/** @nocollapse */
AmexioFilterTreeComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: ChangeDetectorRef },
    { type: CommonDataService }
];
AmexioFilterTreeComponent.propDecorators = {
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    data: [{ type: Input, args: ['data',] }],
    enablecheckbox: [{ type: Input, args: ['enable-checkbox',] }],
    nodeClick: [{ type: Output }],
    onTreeNodeChecked: [{ type: Output }],
    triggerchar: [{ type: Input, args: ['trigger-char',] }],
    childarraykey: [{ type: Input, args: ['child-array-key',] }],
    parentTmp: [{ type: ContentChild, args: ['amexioTreeTemplate',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
class HorizontalTreeViewNodeComponent {
    constructor() {
        /*
        Events
        name : onNodeClick
        datatype : none
        version : none
        default : none
        description : It will gives you clicked node data.
        */
        this.onNodeClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onClick(node) {
        node.expand = !node.expand;
        this.onNodeClick.emit(node);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onInnerClick(node) {
        this.onNodeClick.emit(node);
    }
    /**
     * @param {?} data
     * @param {?} node
     * @param {?} index
     * @return {?}
     */
    onArrowUp(data, node, index) {
        const /** @type {?} */ newindex = index - 1;
        if (newindex >= 0) {
            const /** @type {?} */ previousindex = data[newindex];
            this.setFocus(previousindex);
            this.focusToInnerLastItem(previousindex);
        }
        else {
            const /** @type {?} */ id = node.id;
            const /** @type {?} */ spiltID = this.splitID(id);
            const /** @type {?} */ randomnumber = spiltID[0];
            const /** @type {?} */ currentid = spiltID[1];
            const /** @type {?} */ newid = parseInt(currentid.slice(0, -1), 10);
            const /** @type {?} */ id2 = newid;
            const /** @type {?} */ focusid1 = randomnumber + '-' + id2;
            if (document.getElementById(focusid1)) {
                document.getElementById(focusid1).focus();
            }
        }
    }
    /**
     * @param {?} focuselement
     * @return {?}
     */
    setFocus(focuselement) {
        if (document.getElementById(focuselement.id)) {
            document.getElementById(focuselement.id).focus();
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    focusToInnerLastItem(node) {
        if (node.hasOwnProperty('expand') && node.expand && node['children']) {
            node['children'].forEach((innernode) => {
                this.focusToInnerLastItem(innernode);
            });
        }
        else {
            this.setFocus(node);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    splitID(id) {
        return id.split('-');
    }
    /**
     * @param {?} event
     * @param {?} data
     * @param {?} node
     * @param {?} index
     * @return {?}
     */
    onArrowDown(event, data, node, index) {
        const /** @type {?} */ incrementindex = index + 1;
        const /** @type {?} */ itemid = data[incrementindex];
        if (node.expand === true && node['children']) {
            const /** @type {?} */ data1 = node['children'][0];
            this.setFocus(data1);
        }
        else {
            if (incrementindex < data.length) {
                this.setFocus(itemid);
            }
            else {
                this.focusTONextParent(node);
            }
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    focusTONextParent(node) {
        const /** @type {?} */ sliceId = this.splitID(node.id);
        const /** @type {?} */ randomnumber = sliceId[0];
        const /** @type {?} */ currentid = sliceId[1];
        const /** @type {?} */ newid = parseInt(currentid.slice(0, -1), 10);
        const /** @type {?} */ currentitem = newid + 1;
        const /** @type {?} */ focusid1 = randomnumber + '-' + currentitem;
        if (document.getElementById(focusid1)) {
            document.getElementById(focusid1).focus();
        }
        else {
            const /** @type {?} */ nextnewid = parseInt(currentitem.toString().slice(0, -1), 10);
            const /** @type {?} */ id3 = nextnewid + 1;
            const /** @type {?} */ focusid2 = randomnumber + '-' + id3;
            if (document.getElementById(focusid2)) {
                document.getElementById(focusid2).focus();
            }
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onEnterClick(node) {
        this.onClick(node);
        if (node.hasOwnProperty('expand') && node.expand && node['children']) {
            const /** @type {?} */ sliceId = this.splitID(node.id);
            const /** @type {?} */ randomnumber = sliceId[0];
            const /** @type {?} */ currentid = sliceId[1];
            const /** @type {?} */ nextId = currentid + 1;
            const /** @type {?} */ focusid = randomnumber + '-' + nextId;
            if (document.getElementById(focusid)) {
                document.getElementById(focusid).focus();
            }
        }
    }
}
HorizontalTreeViewNodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-horizontal-treeviewnode', template: `
  <div #id class="horizontaltreeview-node">
  <div class="horizontaltreeview-node-entry" [ngClass]="{'sole':data.length==1}" *ngFor="let node of data; let i = index">
    <span id={{node.id}} tabindex="1" [attr.aria-expanded]="node.expand"
    class="horizontaltreeview-node-label" (click)="onClick(node)" (keyup.enter)="onEnterClick(node)"
    (keyup.arrowup)="onArrowUp(data,node,i)"
    (keyup.arrowdown)="onArrowDown($event,data,node,i)">
      {{node.text}}
      <span  *ngIf="node.children && (node.children.length>0)" class="float-right" (click)="onClick(node)" (keyup.enter)="onClick(node)">
        <amexio-c-icon *ngIf="node.expand" key="horizontal-tree-collapse"></amexio-c-icon>
        <amexio-c-icon *ngIf="!node.expand" key="horizontal-tree-expanded"></amexio-c-icon>
      </span>
    </span>
    <amexio-horizontal-treeviewnode *ngIf="node.expand && node.children && (node.children.length>0)"
                                    [data]="node.children"
                                    (onNodeClick)="onInnerClick($event)"></amexio-horizontal-treeviewnode>
  </div>
</div>
  `,
            },] },
];
/** @nocollapse */
HorizontalTreeViewNodeComponent.ctorParameters = () => [];
HorizontalTreeViewNodeComponent.propDecorators = {
    data: [{ type: Input }],
    onNodeClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 12/1/17.
 */
class HorizontalTreeViewComponent {
    /**
     * @param {?} dataService
     */
    constructor(dataService) {
        this.dataService = dataService;
        /*
        Events
        name : nodeClick
        datatype : none
        version : none
        default : none
        description : It will gives you clicked node data.
        */
        this.nodeClick = new EventEmitter();
        this.mask = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        // Check if key is added?
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.mask = false;
        this.generateIndex(this.data, 1, Math.floor(Math.random() * 1000 + 999 + 1));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    nodeclick(node) {
        this.nodeClick.emit(node);
    }
    /**
     * @param {?} data
     * @param {?} parentId
     * @param {?} rannumber
     * @return {?}
     */
    generateIndex(data, parentId, rannumber) {
        data.forEach((element, index) => {
            element['id'] = '' + rannumber + '-' + parentId + (index + 1);
            if (element['children']) {
                this.generateIndex(element['children'], element.id.split('-')[1], rannumber);
            }
        });
    }
}
HorizontalTreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-horizontal-treeview', template: `

    <div class="horizontaltreeview">
      <span tabindex="1" class="horizontaltreeview-node-label">{{label}}</span>
      <div style="height: 300px;" *ngIf="mask">
        <div class="spinner"></div>
      </div>
      <amexio-horizontal-treeviewnode *ngIf="!mask" [data]="data" (onNodeClick)="nodeclick($event)"></amexio-horizontal-treeviewnode>
    </div>
  `,
            },] },
];
/** @nocollapse */
HorizontalTreeViewComponent.ctorParameters = () => [
    { type: CommonDataService }
];
HorizontalTreeViewComponent.propDecorators = {
    label: [{ type: Input }],
    data: [{ type: Input }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    nodeClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by ketangote on 11/23/17.
 */
class AmexioTreeViewComponent {
    /**
     * @param {?} element
     * @param {?} dataService
     * @param {?} cdf
     * @param {?} renderer
     */
    constructor(element, dataService, cdf, renderer) {
        this.element = element;
        this.dataService = dataService;
        this.cdf = cdf;
        this.renderer = renderer;
        /*
            Events
            name : nodeClick
            datatype : none
            version : none
            default : none
            description : It will gives you clicked node data.
            */
        this.nodeClick = new EventEmitter();
        /*
           Properties
           name : enable-checkbox
           datatype : false
           version : 4.0 onwards
           default : none
           description : Enables checkbox for each row, this allows user for multi selection.
           */
        this.enablecheckbox = false;
        /*
            Properties
            name : enable-drop
            datatype : boolean
            version : 5.0.0 onwards
            default : false
            description : any node can be dropped in the tree structure
            */
        this.enabledrop = false;
        /*
           Properties
           name : across-tree
           datatype : boolean
           version : 5.0.0 onwards
           default : false
           description : Dragging and dropping is possible across tree.
           */
        this.acrosstree = false;
        this.filtertreeflag = false;
        /*
            Events
            name : onTreeNodeChecked
            datatype : any
            version : 4.0 onwards
            default : none
            description : It will gives whole tree data with checked flag status.
            */
        this.onTreeNodeChecked = new EventEmitter();
        this.onDrag = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.dragover = new EventEmitter();
        this.nodeRightClick = new EventEmitter();
        this.rightClick = new EventEmitter();
        this.mouseLocation = { left: 0, top: 0 };
        this.globalTreeData = [];
        this.isNode = true;
        this.acrosstree = false;
        this.displaykey = 'text';
        this.childarraykey = 'children';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.dataService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.setData(this.data);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            if (this.parentTmp != null) {
                this.templates = { treeNodeTemplate: this.parentTmp };
            }
            else if (this.templates != null) {
                this.parentTmp = this.templates.treeNodeTemplate;
            }
        });
        this.cdf.detectChanges();
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (JSON.stringify(this.previousValue) !== JSON.stringify(this.data) && this.previousValue != null && this.data != null) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    expandAll(node) {
        this.expandAllCall(this.parentRef);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    expandAllCall(node) {
        node.forEach((childCheck) => {
            if (!childCheck.expand) {
                childCheck.expand = true;
            }
            if (childCheck.hasOwnProperty(this.childarraykey)) {
                this.expandAllCall(childCheck[this.childarraykey]);
            }
        });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    collapseAll(node) {
        this.collapseAllCall(this.parentRef);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    collapseAllCall(node) {
        node.forEach((childCheck) => {
            if (childCheck.expand) {
                childCheck.expand = false;
            }
            if (childCheck.hasOwnProperty(this.childarraykey)) {
                this.collapseAllCall(childCheck[this.childarraykey]);
            }
        });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onClick(node) {
        node.expand = !node.expand;
    }
    /**
     * @param {?} event
     * @param {?} data
     * @param {?} node
     * @param {?} index
     * @return {?}
     */
    onArrowDown(event, data, node, index) {
        const /** @type {?} */ incrementindex = index + 1;
        const /** @type {?} */ itemid = data[incrementindex];
        if (node.expand === true && node[this.childarraykey]) {
            const /** @type {?} */ data1 = node[this.childarraykey][0];
            this.setFocus(data1);
        }
        else {
            if (incrementindex < data.length) {
                this.setFocus(itemid);
            }
            else {
                this.focusTONextParent(node);
            }
        }
    }
    /**
     * @param {?} data
     * @param {?} node
     * @param {?} index
     * @return {?}
     */
    onArrowUp(data, node, index) {
        const /** @type {?} */ newindex = index - 1;
        if (newindex >= 0) {
            const /** @type {?} */ previousindex = data[newindex];
            this.setFocus(previousindex);
            this.focusToInnerLastItem(previousindex);
        }
        else {
            const /** @type {?} */ id = node.elementId;
            const /** @type {?} */ spiltID = this.splitID(id);
            const /** @type {?} */ randomnumber = spiltID[0];
            const /** @type {?} */ currentid = spiltID[1];
            const /** @type {?} */ newid = parseInt(currentid.slice(0, -1), 10);
            const /** @type {?} */ id2 = newid;
            const /** @type {?} */ focusid1 = randomnumber + '-' + id2;
            if (document.getElementById(focusid1)) {
                document.getElementById(focusid1).focus();
            }
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    focusToInnerLastItem(node) {
        if (node.hasOwnProperty('expand') && node.expand && node[this.childarraykey]) {
            node[this.childarraykey].forEach((innernode) => {
                this.focusToInnerLastItem(innernode);
            });
        }
        else {
            this.setFocus(node);
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    focusTONextParent(node) {
        const /** @type {?} */ sliceId = this.splitID(node.elementId);
        const /** @type {?} */ randomnumber = sliceId[0];
        const /** @type {?} */ currentid = sliceId[1];
        const /** @type {?} */ newid = parseInt(currentid.slice(0, -1), 10);
        const /** @type {?} */ currentitem = newid + 1;
        const /** @type {?} */ focusid1 = randomnumber + '-' + currentitem;
        if (document.getElementById(focusid1)) {
            document.getElementById(focusid1).focus();
        }
        else {
            const /** @type {?} */ nextnewid = parseInt(currentitem.toString().slice(0, -1), 10);
            const /** @type {?} */ id3 = nextnewid + 1;
            const /** @type {?} */ focusid2 = randomnumber + '-' + id3;
            if (document.getElementById(focusid2)) {
                document.getElementById(focusid2).focus();
            }
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    splitID(id) {
        return id.split('-');
    }
    /**
     * @param {?} focuselement
     * @return {?}
     */
    setFocus(focuselement) {
        if (document.getElementById(focuselement.elementId)) {
            document.getElementById(focuselement.elementId).focus();
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    onNodeClick(node) {
        const /** @type {?} */ cloneNode = JSON.parse(JSON.stringify(node));
        this.cloneMethod(cloneNode);
        this.nodeClick.emit(cloneNode);
        this.activateNode(this.data, node);
    }
    /**
     * @param {?} cloneNode
     * @return {?}
     */
    cloneMethod(cloneNode) {
        delete cloneNode['elementId'];
        if (cloneNode.children) {
            cloneNode.children.forEach((element) => {
                this.cloneMethod(element);
            });
        }
    }
    /**
     * @param {?} data
     * @param {?} parentId
     * @param {?} rannumber
     * @return {?}
     */
    generateIndex(data, parentId, rannumber) {
        data.forEach((element, index) => {
            element['elementId'] = '' + rannumber + '-' + parentId + (index + 1);
            if (element[this.childarraykey]) {
                this.generateIndex(element[this.childarraykey], element.elementId.split('-')[1], rannumber);
            }
        });
    }
    /**
     * @param {?} data
     * @param {?} node
     * @return {?}
     */
    activateNode(data, node) {
        for (const /** @type {?} */ i of data) {
            if (node === data[i] && !i[this.childarraykey]) {
                i['active'] = true;
            }
            else {
                i['active'] = false;
            }
            if (i[this.childarraykey]) {
                this.activateNode(i[this.childarraykey], node);
            }
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        // Check if key is added?
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        this.data = responsedata;
        this.parentRef = this.data;
        if (this.globalTreeData.length === 0 && !this.filtertreeflag) {
            this.globalTreeData = this.data;
            this.generateIndex(this.globalTreeData, 1, Math.floor(Math.random() * 1000 + 999 + 1));
        }
        this.setSelectedFlag();
        this.activateNode(this.data, null);
    }
    /**
     * @return {?}
     */
    setSelectedFlag() {
        if (this.parentRef && this.parentRef.length > 0) {
            this.parentRef.forEach((node) => {
                if (node) {
                    if (node.hasOwnProperty('isSelected')) {
                        node.isSelected = false;
                    }
                    else {
                        node['isSelected'] = false;
                    }
                    if (node.hasOwnProperty(this.childarraykey) && node[this.childarraykey] && node[this.childarraykey].length > 0) {
                        this.setSelectedFlagInChild(node);
                    }
                }
            });
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    setSelectedFlagInChild(node) {
        if (node[this.childarraykey] && node[this.childarraykey].length > 0) {
            node[this.childarraykey].forEach((childcom) => {
                if (childcom.hasOwnProperty('isSelected')) {
                    childcom.isSelected = false;
                }
                else {
                    childcom['isSelected'] = false;
                }
                if (childcom.hasOwnProperty(this.childarraykey)
                    && childcom[this.childarraykey] && childcom[this.childarraykey].length > 0) {
                    this.setSelectedFlagInChild(childcom);
                }
            });
        }
    }
    /**
     * @param {?} checkedData
     * @return {?}
     */
    emitCheckedData(checkedData) {
        checkedData.checked = !checkedData.checked;
        if (checkedData.checked) {
            if (checkedData.hasOwnProperty(this.childarraykey)) {
                checkedData[this.childarraykey].forEach((option) => {
                    option.checked = true;
                    if (option.hasOwnProperty(this.childarraykey)) {
                        this.setCheckedStatusFromParent(option);
                    }
                });
            }
            this.emitData(checkedData);
        }
        else {
            if (checkedData.hasOwnProperty(this.childarraykey)) {
                checkedData[this.childarraykey].forEach((option) => {
                    option.checked = false;
                    if (option.hasOwnProperty(this.childarraykey)) {
                        this.searchObject(option);
                    }
                });
            }
            this.emitData(checkedData);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    emitData(data) {
        const /** @type {?} */ obj = {};
        for (const [key, value] of Object.entries(data)) {
            if (key !== 'id') {
                obj[key] = value;
            }
        }
        this.onTreeNodeChecked.emit(obj);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    searchObject(object) {
        object[this.childarraykey].forEach((childOption) => {
            childOption.checked = false;
            if (childOption.hasOwnProperty(this.childarraykey)) {
                this.searchObject(childOption);
            }
        });
    }
    /**
     * @param {?} object
     * @return {?}
     */
    setCheckedStatusFromParent(object) {
        object[this.childarraykey].forEach((childOption) => {
            childOption.checked = true;
            if (childOption.hasOwnProperty(this.childarraykey)) {
                this.setCheckedStatusFromParent(childOption);
            }
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onTreeNodeCheck(data) {
        this.onTreeNodeChecked.emit(data);
    }
    /**
     * @param {?} dragData
     * @return {?}
     */
    onDragStart(dragData) {
        dragData.event.dataTransfer.setData('treenodedata', JSON.stringify(dragData.data));
        dragData.event.dataTransfer.effectAllowed = 'copy';
        this.dragData = dragData;
        this.onDrag.emit(dragData);
    }
    /**
     * @param {?} dragOverData
     * @return {?}
     */
    allowDrop(dragOverData) {
        dragOverData.event.preventDefault();
        if (!this.enabledrop) {
            dragOverData.event.dataTransfer.dropEffect = 'none';
        }
        this.noDragMethod(this.dragData, dragOverData.data, dragOverData.event);
        this.dragover.emit(dragOverData);
    }
    /**
     * @param {?} dragData
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    noDragMethod(dragData, node, event) {
        if (!this.acrosstree) {
            if (dragData.data === node || node.leaf === true) {
                event.dataTransfer.dropEffect = 'none';
            }
            else {
                event.target.style.border = '3px dotted green';
            }
        }
        else {
            if (node.leaf === true) {
                event.dataTransfer.dropEffect = 'none';
            }
            else {
                event.target.style.border = '3px dotted green';
            }
        }
        if (dragData.data.hasOwnProperty(this.childarraykey)) {
            this.getDropNode(dragData, node, event);
        }
    }
    /**
     * @param {?} dragData
     * @param {?} node
     * @param {?} event
     * @return {?}
     */
    getDropNode(dragData, node, event) {
        if (JSON.stringify(dragData.data) === JSON.stringify(node)) {
            event.dataTransfer.dropEffect = 'none';
        }
        else if (dragData.data[this.childarraykey] && dragData.data[this.childarraykey].length > 0) {
            dragData.data[this.childarraykey].forEach((child) => {
                if (JSON.stringify(child) === JSON.stringify(node) || node.leaf === true) {
                    event.dataTransfer.dropEffect = 'none';
                }
                else if (child.hasOwnProperty(this.childarraykey)) {
                    this.getDropNode({ data: child, event1: event }, node, event);
                }
            });
        }
    }
    /**
     * @param {?} dropData
     * @return {?}
     */
    drop(dropData) {
        if (this.enabledrop) {
            dropData.event.target.style.border = '';
            dropData.event.preventDefault();
            if (this.acrosstree === false) {
                this.setDropAcrosstree(dropData);
                if (this.isNode === true) {
                    this.setDropNodeTree(dropData);
                }
            }
            else {
                if (dropData.data.hasOwnProperty(this.childarraykey)) {
                    this.removeNode(dropData);
                    dropData.data[this.childarraykey].push(JSON.parse(dropData.event.dataTransfer.getData('treenodedata')));
                    this.onDrop.emit(dropData);
                }
            }
        }
    }
    /**
     * @param {?} dropData
     * @return {?}
     */
    setDropAcrosstree(dropData) {
        if (this.dragData.data === dropData.data) {
            this.isNode = false;
        }
        else if (this.dragData.data.hasOwnProperty(this.childarraykey)) {
            this.checkNode(this.dragData, dropData);
        }
    }
    /**
     * @param {?} dropData
     * @return {?}
     */
    setDropNodeTree(dropData) {
        if (dropData.data.hasOwnProperty(this.childarraykey)) {
            this.removeNode(dropData);
            dropData.data[this.childarraykey].push(JSON.parse(dropData.event.dataTransfer.getData('treenodedata')));
            this.onDrop.emit(dropData);
        }
    }
    /**
     * @param {?} dragData
     * @param {?} dropData
     * @return {?}
     */
    checkNode(dragData, dropData) {
        this.dragData.data[this.childarraykey].forEach((child) => {
            if (JSON.stringify(child) === JSON.stringify(dropData.data)) {
                this.isNode = false;
            }
            else if (child.hasOwnProperty(this.childarraykey)) {
                this.checkNode(child, dropData);
            }
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    removeNode(data) {
        this.removeDragNode(this.parentRef, JSON.parse(data.event.dataTransfer.getData('treenodedata')));
    }
    /**
     * @param {?} treeData
     * @param {?} dragNode
     * @return {?}
     */
    removeDragNode(treeData, dragNode) {
        treeData.forEach((childNode, index) => {
            if (JSON.stringify(childNode) === JSON.stringify(dragNode)) {
                treeData.splice(index, 1);
            }
            else if (childNode.hasOwnProperty(this.childarraykey)) {
                this.removeDragNode(childNode[this.childarraykey], dragNode);
            }
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragleave(event) {
        event.target.style.border = '';
    }
    /**
     * @return {?}
     */
    getContextMenu() {
        if (this.contextmenu && this.contextmenu.length > 0) {
            this.flag = true;
            this.addListner();
        }
    }
    /**
     * @return {?}
     */
    resetFlag() {
        if (this.flag) {
            this.flag = false;
            this.setSelectedFlag();
        }
    }
    /**
     * @param {?} rightClickData
     * @return {?}
     */
    loadContextMenu(rightClickData) {
        this.setSelectedFlag();
        this.mouseLocation.left = rightClickData.event.clientX;
        this.mouseLocation.top = rightClickData.event.clientY;
        rightClickData.data['isSelected'] = true;
        this.getContextMenu();
        this.posixUp = this.getListPosition(rightClickData.ref);
        if (this.contextmenu && this.contextmenu.length > 0) {
            rightClickData.event.preventDefault();
            rightClickData.event.stopPropagation();
        }
        this.rightClickNodeData = rightClickData.data;
        this.nodeRightClick.emit(rightClickData);
    }
    /**
     * @param {?} elementRef
     * @return {?}
     */
    getListPosition(elementRef) {
        const /** @type {?} */ height = 240; // must be same in dropdown.scss
        if ((window.screen.height - elementRef.getBoundingClientRect().bottom) < height) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} Data
     * @return {?}
     */
    rightClickDataEmit(Data) {
        this.rightClick.emit(Data);
    }
    /**
     * @return {?}
     */
    addListner() {
        this.globalClickListenFunc = this.renderer.listen('document', 'click', (e) => {
            this.resetFlag();
            if (!this.flag) {
                this.removeListner();
            }
        });
    }
    /**
     * @return {?}
     */
    removeListner() {
        if (this.globalClickListenFunc) {
            this.globalClickListenFunc();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListner();
    }
}
AmexioTreeViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-treeview', template: `
      <div *ngIf="data == null" style="height: 300px;width: 300px;">
        <div class="spinner"></div>
      </div>

      <div class="treenode" *ngFor="let node of data let rowindex = index">
        <div #id class="treenode-content" (click)="onClick(node)" (keyup.enter)="onClick(node)">
          <div style="white-space:nowrap">
            <div  aria-label="Dropdown button clickable" class="tree-node-label" *ngIf="node[childarraykey] && (node[childarraykey].length>0)">
              <em class="fa" [ngClass]="{'fa-angle-down':node.expand,'fa-angle-right':!node.expand}"></em>
            </div> &nbsp;
            <div tabindex="1" id={{node.elementId}} role="treeitem" (keyup.arrowup)="onArrowUp(data,node,rowindex)"
              (keyup.arrowdown)="onArrowDown($event,data,node,rowindex)" class="tree-node-label tree-node-label-hover"
              [attr.aria-expanded]="node.expand" [ngClass]="{'tree-node-label-selected':node.isSelected ,'tree-node-label-not-selected':node.isSelected=='false'}"
              [attr.draggable]="enabledrag" (dragleave)="dragleave($event)" (drop)="drop({event:$event,data:node})"
              (dragover)="allowDrop({event:$event,data:node})" (dragstart)="onDragStart({event:$event,data:node})"
              (contextmenu)="loadContextMenu({event:$event,data:node,ref:id})">
              <div class="tree-node-label" *ngIf="enablecheckbox">
                <input type="checkbox" [checked]="'checked'?node.checked:null" (click)="emitCheckedData(node)" />
              </div>
              <div class="tree-node-label" (click)="onNodeClick(node)">
                <div class="tree-node-label" *ngIf="templates == null">
                  <div class="tree-node-label" *ngIf="node.icon" [ngClass]="node.icon" aria-hidden="true" style="padding-right: 5px;">
                  </div>
                  <div class="tree-node-label">
                    {{node[displaykey]}}
                    <ng-container *ngIf="badge && node.badge">
                      <span class="tree-badge">{{node.badge}}</span>
                    </ng-container>
                  </div>
                </div>
                <div class="tree-node-label" *ngIf="templates != null">
                  <ng-template [ngTemplateOutlet]="templates.treeNodeTemplate" [ngTemplateOutletContext]="{ $implicit: { text: node.text } , icon: node.icon,node : node }">
                  </ng-template>
                </div>
              </div>

            </div>
          </div>
        </div>
        <div class="treenode-children" style="display: block;" *ngIf="node.expand && node[childarraykey] && (node[childarraykey].length>0)">
          <amexio-treeview [child-array-key]="childarraykey" [display-key]="displaykey" [enable-drag]="enabledrag"
            [enable-drop]="enabledrop" [data]="node[childarraykey]"  [dragData]="dragData" [parentRef]="parentRef" (onDrag)=onDragStart($event)
            (onDrop)=drop($event) (nodeClick)="onNodeClick($event)" (dragleave)="($event)" (nodeRightClick)="loadContextMenu($event)"
            [across-tree]="acrosstree" [templates]="templates"
             [global-tree-data]="globalTreeData"
             [filter-tree-flag]="filtertreeflag"
             [enable-checkbox]="enablecheckbox" [badge]="badge"
            (onTreeNodeChecked)="this.onTreeNodeCheck($event)">
          </amexio-treeview>
        </div>
      </div>
      <ng-container *ngIf="flag">
        <base-contextmenu [base-context-menu]="contextmenu" [mouse-location-top]="mouseLocation.top" [mouse-location-left]="mouseLocation.left"
          [is-FlagShow]="flag" [right-click-data]="rightClickNodeData" (onRightClick)="rightClickDataEmit($event)"
          [position-up]="posixUp">
        </base-contextmenu>
      </ng-container>
    `,
            },] },
];
/** @nocollapse */
AmexioTreeViewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CommonDataService },
    { type: ChangeDetectorRef },
    { type: Renderer2 }
];
AmexioTreeViewComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    displaykey: [{ type: Input, args: ['display-key',] }],
    childarraykey: [{ type: Input, args: ['child-array-key',] }],
    nodeClick: [{ type: Output }],
    enablecheckbox: [{ type: Input, args: ['enable-checkbox',] }],
    templates: [{ type: Input }],
    enabledrag: [{ type: Input, args: ['enable-drag',] }],
    enabledrop: [{ type: Input, args: ['enable-drop',] }],
    acrosstree: [{ type: Input, args: ['across-tree',] }],
    badge: [{ type: Input, args: ['badge',] }],
    contextmenu: [{ type: Input, args: ['context-menu',] }],
    parentRef: [{ type: Input }],
    filtertreeflag: [{ type: Input, args: ['filter-tree-flag',] }],
    parentTmp: [{ type: ContentChild, args: ['amexioTreeTemplate',] }],
    onTreeNodeChecked: [{ type: Output }],
    onDrag: [{ type: Output }],
    onDrop: [{ type: Output }],
    dragover: [{ type: Output }],
    dragData: [{ type: Input }],
    nodeRightClick: [{ type: Output }],
    rightClick: [{ type: Output }],
    globalTreeData: [{ type: Input, args: ['global-tree-data',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TreeDataTableComponent {
    /**
     * @param {?} treeDataTableService
     */
    constructor(treeDataTableService) {
        this.treeDataTableService = treeDataTableService;
        /*
           Events
           name : selectedRecord
           datatype : none
           version : none
           default : none
           description : Get selected value Object.
           */
        this.selectedRecord = new EventEmitter();
        this.rowSelect = new EventEmitter();
        this.columns = [];
        this.mask = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value;
        if (this.componentLoaded) {
            this.updateComponent();
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.httpmethod && this.httpurl) {
            this.treeDataTableService.fetchData(this.httpurl, this.httpmethod).subscribe((response) => {
                this.responseData = response;
            }, (error) => {
            }, () => {
                this.setData(this.responseData);
            });
        }
        else if (this.data) {
            this.previousValue = JSON.parse(JSON.stringify(this.data));
            this.setData(this.data);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.onResize();
        this.componentLoaded = true;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.createConfig();
    }
    /**
     * @return {?}
     */
    createConfig() {
        const /** @type {?} */ columnRefArray = this.columnRef.toArray();
        for (const /** @type {?} */ cr of columnRefArray) {
            const /** @type {?} */ columnConfig = cr;
            let /** @type {?} */ columnData;
            if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate != null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    headerTemplate: columnConfig.headerTemplate,
                    width: columnConfig.width,
                    bodyTemplate: columnConfig.bodyTemplate,
                };
            }
            else if (columnConfig.headerTemplate != null && columnConfig.bodyTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    headerTemplate: columnConfig.headerTemplate,
                };
            }
            else if (columnConfig.bodyTemplate != null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    datatype: columnConfig.datatype,
                    width: columnConfig.width,
                    bodyTemplate: columnConfig.bodyTemplate,
                };
            }
            else if (columnConfig.bodyTemplate == null && columnConfig.headerTemplate == null) {
                columnData = {
                    text: columnConfig.text,
                    dataindex: columnConfig.dataindex,
                    hidden: columnConfig.hidden,
                    width: columnConfig.width,
                    datatype: columnConfig.datatype,
                };
            }
            this.columns.push(columnData);
        }
    }
    /**
     * @return {?}
     */
    updateComponent() {
        if (this.data) {
            this.viewRows = this.getResponseData(this.data);
        }
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    setData(httpResponse) {
        if (httpResponse) {
            const /** @type {?} */ treedata = this.getResponseData(httpResponse);
            this.viewRows = treedata;
            this.viewRows.forEach((row, index) => {
                this.viewRows[index].level = 1;
                this.viewRows[index].expanded = false;
            });
            this.mask = false;
        }
        else {
            this.viewRows = [];
        }
        this.generateIndex(this.viewRows, 1, Math.floor(Math.random() * 1000 + 999 + 1));
    }
    /**
     * @param {?} httpResponse
     * @return {?}
     */
    getResponseData(httpResponse) {
        let /** @type {?} */ responsedata = httpResponse;
        if (this.datareader != null) {
            const /** @type {?} */ dr = this.datareader.split('.');
            for (const /** @type {?} */ ir of dr) {
                responsedata = responsedata[ir];
            }
        }
        else {
            responsedata = httpResponse;
        }
        return responsedata;
    }
    /**
     * @return {?}
     */
    removeAll() {
        this.viewRows.forEach((node) => {
            node.expanded = false;
            this.removeRows(node);
        });
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.viewRows.forEach((node, index) => {
            node.expanded = true;
            this.addRows(node, index);
        });
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    toogle(row, index) {
        row.expanded = !row.expanded;
        if (row.expanded) {
            this.addRows(row, index);
        }
        else {
            this.removeRows(row);
        }
    }
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    addRows(row, index) {
        if (row.children) {
            for (let /** @type {?} */ i = 0; i < row.children.length; i++) {
                const /** @type {?} */ node = row.children[i];
                if (!row.level) {
                    row.level = 1;
                }
                if (node.children) {
                    node.expanded = false;
                }
                node.level = (row.level + 1);
                this.viewRows.splice(index + (i + 1), 0, node);
            }
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    removeRows(node) {
        if (node.children) {
            for (const /** @type {?} */ nc of node.children) {
                if (this.viewRows) {
                    this.setRemovedRows(nc);
                }
            }
        }
    }
    /**
     * @param {?} nc
     * @return {?}
     */
    setRemovedRows(nc) {
        for (const /** @type {?} */ vr of this.viewRows) {
            if (vr === nc) {
                if (nc.children) {
                    this.removeRows(nc);
                }
                this.viewRows.splice(this.viewRows.indexOf(nc), 1);
            }
        }
    }
    /**
     * @param {?} rowData
     * @param {?} event
     * @return {?}
     */
    setSelectedRow(rowData, event) {
        this.selectedRecord.emit(rowData);
        this.rowSelect.emit(rowData);
    }
    /**
     * @return {?}
     */
    onResize() {
        if (this.height) {
            let /** @type {?} */ h = (window.innerHeight / 100) * this.height;
            if (this.gridHeader && this.gridHeader.nativeElement && this.gridHeader.nativeElement.offsetHeight) {
                h = h - this.gridHeader.nativeElement.offsetHeight;
            }
            if (this.height === 100) {
                h = h - 40;
            }
            this.height = h;
        }
    }
    /**
     * @param {?} data
     * @param {?} parentId
     * @param {?} rannumber
     * @return {?}
     */
    generateIndex(data, parentId, rannumber) {
        data.forEach((element, index) => {
            element['id'] = '' + rannumber + '-';
            if (element['children']) {
                this.generateIndex(element['children'], element.id.split('-')[1], rannumber);
            }
        });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    splitID(id) {
        return id.split('-');
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowUp(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ currentId = spiltID[1];
        const /** @type {?} */ unitId = currentId.slice(0, -1);
        if (unitId > 1 && document.getElementById(randomNo + '-' + (parseInt(currentId, 10) - 10).toString())) {
            document.getElementById(randomNo + '-' + (parseInt(currentId, 10) - 10).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowDown(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ currentId = spiltID[1];
        const /** @type {?} */ firstId = parseInt(currentId.slice(0, -1), 10);
        if ((firstId < this.viewRows.length || (firstId <= this.viewRows.length - 1))
            && document.getElementById(randomNo + '-' + (parseInt(currentId, 10) + 10).toString())) {
            document.getElementById(randomNo + '-' + (parseInt(currentId, 10) + 10).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowRight(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ currentId = spiltID[1];
        const /** @type {?} */ unitId = parseInt(currentId, 10) % 10;
        const /** @type {?} */ firstId = currentId.slice(0, -1);
        this.findNextColumn(unitId, firstId, randomNo);
    }
    /**
     * @param {?} index
     * @param {?} firstId
     * @param {?} randomNo
     * @return {?}
     */
    findNextColumn(index, firstId, randomNo) {
        if (index < this.columns.length) {
            if (this.columns.length >= 1 && this.columns.includes(index + 1)) {
                index = index + 1;
                this.findNextColumn(index, firstId, randomNo);
            }
            else {
                const /** @type {?} */ generatedId = firstId + '' + (index + 1);
                document.getElementById(randomNo + '-' + (parseInt(generatedId, 10)).toString()).focus();
            }
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    arrowLeft(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ currentId = spiltID[1];
        const /** @type {?} */ unitId = parseInt(currentId, 10) % 10;
        const /** @type {?} */ firstId = currentId.slice(0, -1);
        this.findPreviousColumn(unitId, firstId, randomNo);
    }
    /**
     * @param {?} index
     * @param {?} firstId
     * @param {?} randomNo
     * @return {?}
     */
    findPreviousColumn(index, firstId, randomNo) {
        if (index > 1) {
            if (this.columns.length >= 1 && this.columns.includes(index - 1)) {
                index = index - 1;
                this.findPreviousColumn(index, firstId, randomNo);
            }
            else {
                const /** @type {?} */ generatedId = firstId + '' + (index - 1);
                document.getElementById(randomNo + '-' + (parseInt(generatedId, 10)).toString()).focus();
            }
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    keyHome(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ currentId = spiltID[1];
        const /** @type {?} */ unitId = parseInt(currentId, 10) % 10;
        this.findHomeColumn(unitId, currentId.slice(0, -1), 1, randomNo);
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @param {?} newFirstId
     * @param {?} randomNo
     * @return {?}
     */
    findHomeColumn(unitId, firstId, newFirstId, randomNo) {
        if (this.columns.length >= 1 && this.columns.includes(newFirstId)) {
            this.findHomeColumn(unitId, firstId, newFirstId + 1, randomNo);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + newFirstId;
            document.getElementById(randomNo + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    keyEnd(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ currentId = spiltID[1];
        const /** @type {?} */ unitId = parseInt(currentId, 10) % 10;
        const /** @type {?} */ firstId = currentId.slice(0, -1);
        const /** @type {?} */ newLastId = this.columns.length;
        this.findHomeColumn(unitId, firstId, newLastId, randomNo);
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    keyControlHome(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        this.findControlHomeColumn(1, 1, randomNo);
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @param {?} randomNo
     * @return {?}
     */
    findControlHomeColumn(unitId, firstId, randomNo) {
        if (this.columns.length >= 1 && this.columns.includes(unitId)) {
            this.findControlHomeColumn(unitId + 1, firstId, randomNo);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + unitId;
            document.getElementById(randomNo + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
    /**
     * @param {?} ref
     * @return {?}
     */
    keyControlEnd(ref) {
        const /** @type {?} */ id = ref.id;
        const /** @type {?} */ spiltID = this.splitID(id);
        const /** @type {?} */ randomNo = spiltID[0];
        const /** @type {?} */ unitId = this.columns.length;
        const /** @type {?} */ firstId = this.viewRows.length;
        this.findControlEndColumn(unitId, firstId, randomNo);
    }
    /**
     * @param {?} unitId
     * @param {?} firstId
     * @param {?} randomNo
     * @return {?}
     */
    findControlEndColumn(unitId, firstId, randomNo) {
        if (this.columns.length >= 1 && this.columns.includes(unitId)) {
            this.findControlHomeColumn(unitId - 1, firstId, randomNo);
        }
        else {
            const /** @type {?} */ generatedId = firstId + '' + unitId;
            document.getElementById(randomNo + '-' + (parseInt(generatedId, 10)).toString()).focus();
        }
    }
}
TreeDataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-tree-data-table',
                template: `
    <div (window:resize)="onResize()">
        <div #header class="datatable">
            <div class="datatable-header">
                <ng-container *ngFor="let cols of columns;let i = index">
                    <ng-container *ngIf="cols.datatype=='string'">
                        <div class="datatable-col" tabindex = "1" [ngClass]="{'header' : i == 0}" [style.width.%]="cols.width">
                            <ng-container *ngIf="cols.headerTemplate">
                                <ng-template [ngTemplateOutlet]="cols.headerTemplate" [ngTemplateOutletContext]="{column:cols ,index: i}"></ng-template>
                            </ng-container>
                            <ng-container *ngIf="!cols.headerTemplate">
                                {{cols.text}}
                            </ng-container>
                        </div>
                    </ng-container>
                    <ng-container *ngIf="cols.datatype=='number'">
                        <ng-container *ngIf="cols.headerTemplate">
                            <ng-template [ngTemplateOutlet]="cols.headerTemplate" [ngTemplateOutletContext]="{column:cols ,index: i}"></ng-template>
                        </ng-container>
                        <ng-container *ngIf="!cols.headerTemplate">
                            <span class="float-right">
                                <div class="datatable-col" tabindex = "1" [style.width.%]="cols.width" [ngClass]="{'header' : i == 0}"> {{cols.text}}</div>
                            </span>
                        </ng-container>

                    </ng-container>
                </ng-container>
            </div>
        </div>

        <div class="datatable-height" [style.height.px]="height">
            <div class="datatable">
                <div style="height: 300px;" *ngIf="mask">
                    <div class="spinner"></div>
                </div>
                <ng-container *ngIf="!mask">
                    <div class="datatable-row" (click)="toogle(row,i)" *ngFor="let row of viewRows;let i=index"  (click)="setSelectedRow(row, $event)">
                        <ng-container *ngFor="let cols of columns;let colIndex = index">
                            <ng-container *ngIf="cols.datatype=='string' && !cols?.bodyTemplate">
                                <div #ref id="{{row.id}}{{i+1}}{{colIndex+1}}" [attr.tabindex] = "(((i+1== 1) && (colIndex + 1 == 1))? 1: -1)" (keyup.enter)="toogle(row,i)" (keyup.enter)="setSelectedRow(row, $event)" 
                                class="datatable-col" (keyup.arrowright)="arrowRight(ref)" (keyup.arrowleft)="arrowLeft(ref)" (keyup.arrowup)="arrowUp(ref)" (keyup.arrowdown)="arrowDown(ref)" 
                                (keyup.end)="keyEnd(ref)" (keyup.home)="keyHome(ref)" (keyup.control.end)="keyControlEnd(ref)" (keyup.control.home)="keyControlHome(ref)"
                                [attr.data-label]="cols.text" [style.width.%]="cols.width">
                                    <ng-container *ngIf="colIndex == 0">
                                        <span [style.padding-left.px]="(!row.level || row.level <= 1? 10 : (10+(10*row.level)) )">
                                            <ng-container *ngIf="!row.expanded && row.children">
                                                <amexio-c-icon class="iconPaddingStyle" key="tree_collapse"></amexio-c-icon>
                                            </ng-container>
                                            <ng-container *ngIf="row.expanded && row.children">
                                                <amexio-c-icon class="iconPaddingStyle" key="tree_expand"></amexio-c-icon>
                                            </ng-container>
                                            <ng-container *ngIf="row[cols.dataindex]!= null && row[cols.dataindex]!= '' ;else elseBlock">
                                                {{row[cols.dataindex]}} 
                                            </ng-container>
                                            <ng-template #elseBlock>
                                                &nbsp;
                                            </ng-template>
                                        </span>
                                    </ng-container>

                                    <ng-container *ngIf="colIndex > 0">
                                        <ng-container *ngIf="row[cols.dataindex]!= null && row[cols.dataindex]!= '' ;else elseBlock">
                                            {{row[cols.dataindex]}}
                                        </ng-container>
                                        <ng-template #elseBlock>
                                            &nbsp;
                                        </ng-template>
                                    </ng-container>
                                </div>
                            </ng-container>
                            <ng-container *ngIf="cols.datatype=='number' && !cols?.bodyTemplate">
                                <div #ref class="datatable-col" id="{{row.id}}{{i+1}}{{colIndex+1}}" 
                                (keyup.end)="keyEnd(ref)" (keyup.home)="keyHome(ref)" (keyup.control.end)="keyControlEnd(ref)" (keyup.control.home)="keyControlHome(ref)"
                                (keyup.arrowright)="arrowRight(ref)" (keyup.arrowleft)="arrowLeft(ref)" (keyup.arrowup)="arrowUp(ref)" (keyup.arrowdown)="arrowDown(ref)"
                                 [attr.tabindex] = "(((i+1== 1) && (colIndex + 1 == 1))? 1: -1)" (keyup.enter)="toogle(row,i)" (keyup.enter)="setSelectedRow(row, $event)" [attr.data-label]="cols.text" [style.width.%]="cols.width">
                                    <ng-container *ngIf="colIndex == 0">
                                        <span  [style.padding-left.px]="(!row.level || row.level <= 1? 10 : (10+(10*row.level)) )">
                                            <ng-container *ngIf="!row.expanded && row.children">
                                                <amexio-c-icon class="iconPaddingStyle" key="tree_collapse"></amexio-c-icon>
                                            </ng-container>
                                            <ng-container *ngIf="row.expanded && row.children">
                                                <amexio-c-icon class="iconPaddingStyle" key="tree_expand"></amexio-c-icon>
                                            </ng-container>
                                            <span class="float-right">
                                                <ng-container *ngIf="row[cols.dataindex]!= null;else elseBlock">
                                                    {{row[cols.dataindex]}}
                                                </ng-container>
                                                <ng-template #elseBlock>
                                                    &nbsp;
                                                </ng-template>
                                            </span>
                                        </span>
                                    </ng-container>

                                    <ng-container *ngIf="colIndex > 0">
                                        <span class="float-right">
                                            <ng-container *ngIf="row[cols.dataindex]!= null;else elseBlock">
                                                {{row[cols.dataindex]}}
                                            </ng-container>
                                            <ng-template #elseBlock>
                                                &nbsp;
                                            </ng-template>
                                        </span>
                                    </ng-container>
                                </div>

                            </ng-container>

                            <ng-container *ngIf="cols.bodyTemplate">

                                <div #ref class="datatable-col"  id="{{row.id}}{{i+1}}{{colIndex+1}}" 
                                (keyup.end)="keyEnd(ref)" (keyup.home)="keyHome(ref)" (keyup.control.end)="keyControlEnd(ref)" (keyup.control.home)="keyControlHome(ref)"
                                (keyup.arrowright)="arrowRight(ref)" (keyup.arrowleft)="arrowLeft(ref)" (keyup.arrowup)="arrowUp(ref)" (keyup.arrowdown)="arrowDown(ref)"
                                [attr.tabindex] = "(((i+1== 1) && (colIndex + 1 == 1))? 1: -1)" (keyup.enter)="toogle(row,i)" (keyup.enter)="setSelectedRow(row, $event)"
                                 [attr.data-label]="cols.text" [style.width.%]="cols.width">
                                    <ng-container *ngIf="colIndex == 0">
                                        <span  [style.padding-left.px]="(!row.level || row.level <= 1? 10 : (10+(10*row.level)) )">
                                            <ng-container *ngIf="!row.expanded && row.children">
                                                <amexio-c-icon class="iconPaddingStyle" key="tree_collapse"></amexio-c-icon>
                                            </ng-container>
                                            <ng-container *ngIf="row.expanded && row.children">
                                                <amexio-c-icon class="iconPaddingStyle" key="tree_expand"></amexio-c-icon>
                                            </ng-container>
                                            <ng-template [ngTemplateOutlet]="cols.bodyTemplate" [ngTemplateOutletContext]="{ $implicit: { text : row[cols.dataindex] }, row: row }"></ng-template>
                                        </span>
                                    </ng-container>

                                    <ng-container *ngIf="colIndex > 0">
                                        <ng-template [ngTemplateOutlet]="cols.bodyTemplate" [ngTemplateOutletContext]="{ $implicit: { text : row[cols.dataindex] }, row: row }"></ng-template>
                                    </ng-container>

                                </div>
                            </ng-container>

                        </ng-container>

                    </div>
                </ng-container>

            </div>
        </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
TreeDataTableComponent.ctorParameters = () => [
    { type: CommonDataService }
];
TreeDataTableComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    datareader: [{ type: Input, args: ['data-reader',] }],
    httpmethod: [{ type: Input, args: ['http-method',] }],
    httpurl: [{ type: Input, args: ['http-url',] }],
    displayfield: [{ type: Input, args: ['display-field',] }],
    valuefield: [{ type: Input, args: ['value-field',] }],
    selectedRecord: [{ type: Output }],
    height: [{ type: Input }],
    gridHeader: [{ type: ViewChild, args: ['header', { read: ElementRef },] }],
    rowSelect: [{ type: Output }],
    columnRef: [{ type: ContentChildren, args: [AmexioGridColumnComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const DATA_COMPONENTS = [
    AmexioTreeViewComponent,
    AmexioListBoxComponent,
    AmexioDatagridComponent,
    AmexioDataGridHeaderComponent,
    AmexioGoogleMapComponent,
    DataGridFilterComponent,
    AmexioPaginatorComponent,
    AmexioGridColumnComponent,
    PropertyGridComponent,
    AmexioProgressMultiBarComponent,
    AmexioProgressBarComponent,
    HorizontalTreeViewNodeComponent,
    HorizontalTreeViewComponent,
    AmexioFilterTreeComponent,
    TreeDataTableComponent,
    AmexioItemSelectorComponent,
];
class AmexioDataModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioDataModule,
            providers: [CommonDataService, GoogleMapScriptService],
        };
    }
}
AmexioDataModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    AmexioPaneModule,
                    AmexioLayoutModule,
                    HttpClientModule,
                    AmexioBaseContextMenuModule,
                    AmexioCommonModule.forRoot(),
                ],
                exports: DATA_COMPONENTS,
                declarations: DATA_COMPONENTS,
                providers: [CommonDataService, GoogleMapScriptService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
const Icon = {
    fontawesome: 'fa',
    material: 'mat',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioGridModel {
    constructor() {
        this.name = '';
        this.desktop = [];
        this.mobile = [];
        this.tab = [];
        this.layoutType = '';
        this.count = 0;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridConfig {
    /**
     * @param {?} layoutName
     * @param {?} layoutType
     */
    constructor(layoutName, layoutType) {
        this.amexiogridmodel = new AmexioGridModel();
        this.amexiogridmodel.layoutType = layoutType;
        this.amexiogridmodel.name = layoutName;
        return this;
    }
    /**
     * @param {?} layout
     * @return {?}
     */
    addlayout(layout) {
        this.count = layout.length;
        if (this.amexiogridmodel.layoutType === '') {
            this.amexiogridmodel.layoutType = GridConstants.Desktop;
        }
        this.amexiogridmodel[this.amexiogridmodel.layoutType].push(layout);
        return this;
    }
    /**
     * @return {?}
     */
    getLayout() {
        return this.amexiogridmodel;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GoogleMapOverlays {
    /**
     * @param {?} _lat
     * @param {?} _lng
     * @param {?} _title
     * @param {?} _showtitle
     * @param {?} _icon
     * @param {?} _data
     */
    constructor(_lat, _lng, _title, _showtitle, _icon, _data) {
        this.lat = _lat;
        this.lng = _lng;
        this.title = _title;
        this.showtitle = _showtitle;
        this.icon = _icon;
        this.data = (_data) ? _data : {};
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AvailableSlotsModel {
    /**
     * @param {?} datetime
     * @param {?} data
     */
    constructor(datetime, data) {
        this.datetime = datetime;
        this.data = data;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DayModel {
    /**
     * @param {?} date
     * @param {?} twentyfourformat
     * @param {?} availableSlots
     */
    constructor(date, twentyfourformat, availableSlots) {
        this.date = date;
        this.twentyfourformat = twentyfourformat;
        this.availableSlots = availableSlots;
    }
    /**
     * @param {?} timeslots
     * @return {?}
     */
    setTimeSlots(timeslots) {
        this.timeslots = timeslots;
        this.markTimeSlots();
    }
    /**
     * @return {?}
     */
    markTimeSlots() {
        if (this.availableSlots) {
            this.availableSlots.forEach((slot) => {
                if (slot.datetime.getDate() === this.date.getDate()
                    && slot.datetime.getMonth() === this.date.getMonth()
                    && slot.datetime.getFullYear() === this.date.getFullYear()) {
                    slot.data.forEach((time) => {
                        this.checkTimeSlots(time);
                    });
                }
            });
        }
    }
    /**
     * @param {?} time
     * @return {?}
     */
    checkTimeSlots(time) {
        this.timeslots.forEach((timeModel) => {
            if (time === timeModel.timeId) {
                timeModel.available = true;
                return true;
            }
        });
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TimeModel {
    /**
     * @param {?} _id
     * @param {?} _time
     */
    constructor(_id, _time) {
        this.available = false;
        this.selected = false;
        this.selectedStyleClass = '';
        this.availableStyleClass = '';
        this.timeId = _id;
        this.time = _time;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TimeUtil {
    /**
     * @param {?} twentfourhourformatdata
     * @return {?}
     */
    timeData(twentfourhourformatdata) {
        if (twentfourhourformatdata) {
            return this.twentfourhourformatdata();
        }
        else {
            return this.ampmdata();
        }
    }
    /**
     * @return {?}
     */
    twentfourhourformatdata() {
        return this.data(':00');
    }
    /**
     * @return {?}
     */
    ampmdata() {
        return this.data(' am');
    }
    /**
     * @param {?} appender
     * @return {?}
     */
    data(appender) {
        const /** @type {?} */ timemodels = [];
        for (let /** @type {?} */ i = 0; i < 10; i++) {
            timemodels.push(new TimeModel(i, '0' + i + appender));
        }
        for (let /** @type {?} */ i = 10; i < 25; i++) {
            timemodels.push(new TimeModel(i, i + appender));
        }
        return timemodels;
    }
    /**
     * @return {?}
     */
    workingslot1() {
        const /** @type {?} */ timemodels = [];
        timemodels.push(new TimeModel(10, '10 am'));
        timemodels.push(new TimeModel(11, '11 am'));
        timemodels.push(new TimeModel(12, '12 pm'));
        timemodels.push(new TimeModel(13, '01 pm'));
        timemodels.push(new TimeModel(14, '02 pm'));
        timemodels.push(new TimeModel(15, '03 pm'));
        timemodels.push(new TimeModel(16, '04 pm'));
        timemodels.push(new TimeModel(17, '05 pm'));
        timemodels.push(new TimeModel(18, '06 pm'));
        return timemodels;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PropertyGridModel {
    /**
     * @param {?} _fieldName
     * @param {?} _fieldValue
     * @param {?} _fieldIcon
     * @param {?} _onlyIcon
     * @param {?=} _link
     * @param {?=} _data
     */
    constructor(_fieldName, _fieldValue, _fieldIcon, _onlyIcon, _link, _data) {
        this.fieldName = _fieldName;
        this.fieldValue = _fieldValue;
        this.fieldIcon = _fieldIcon;
        this.onlyIcon = _onlyIcon;
        this.link = _link;
        this.data = _data;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioWidgetModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioWidgetModule,
            providers: [CommonDataService, DeviceQueryService, IconLoaderService],
        };
    }
}
AmexioWidgetModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    AmexioFormsModule,
                    AmexioNavModule,
                    AmexioDataModule,
                    AmexioLayoutModule,
                    AmexioMediaModule,
                    AmexioPaneModule,
                    HttpClientModule,
                    AmexioCreativeModule,
                    AmexioBaseContextMenuModule,
                ],
                entryComponents: [AmexioTabPillComponent],
                exports: [
                    AmexioFormsModule,
                    AmexioNavModule,
                    AmexioDataModule,
                    AmexioLayoutModule,
                    AmexioMediaModule,
                    AmexioPaneModule,
                    AmexioBaseContextMenuModule,
                    AmexioCreativeModule,
                    AmexioRuntimeModule,
                ],
                declarations: [],
                providers: [CommonDataService, DeviceQueryService, IconLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class DashBoardTitleComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
DashBoardTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dashboard-title', template: ` `,
            },] },
];
/** @nocollapse */
DashBoardTitleComponent.ctorParameters = () => [];
DashBoardTitleComponent.propDecorators = {
    title: [{ type: Input }],
    position: [{ type: Input }],
    color: [{ type: Input }],
    fontname: [{ type: Input, args: ['font-name',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    bold: [{ type: Input }],
    italic: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 7/25/17.
*/
class DataPointCenterComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
DataPointCenterComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-center', template: `

    <div [ngClass]="cclass" [attr.align]="contentalign" [style.background-color]="backgroundcolor"
         [style.color]="fontcolor" [style.width]="width" [style.height]="height">
      <ng-content></ng-content>
    </div>`,
            },] },
];
/** @nocollapse */
DataPointCenterComponent.ctorParameters = () => [];
DataPointCenterComponent.propDecorators = {
    contentalign: [{ type: Input, args: ['content-align',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    cclass: [{ type: Input, args: ['c-class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 8/16/17.
*/
class DataPointsComponent {
    constructor() {
        this.colspan = 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.amexiocolor !== '') {
            this.dpClass = this.amexiocolor;
        }
        if (this.west) {
            this.colspan++;
        }
        if (this.east) {
            this.colspan++;
        }
    }
}
DataPointsComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-datapoints', template: `

  <div class="datapoints" [ngClass]="dpClass">
      <table width="100%" [style.background-color]="backgroundcolor" [style.color]="fontcolor">
        <tr *ngIf="north">
          <td [attr.colspan]="colspan">
            <ng-content select="amexio-north"></ng-content>
          </td>
        </tr>
        <tr>
          <td *ngIf="west">
            <ng-content select="amexio-west"></ng-content>
          </td>
          <td *ngIf="center">
            <ng-content select="amexio-center"></ng-content>
          </td>
          <td *ngIf="east">
            <ng-content select="amexio-east"></ng-content>
          </td>
        </tr>
        <tr *ngIf="south">
          <td [attr.colspan]="colspan">
            <ng-content select="amexio-south"></ng-content>
          </td>
        </tr>
      </table>
    </div>


  `, styles: [`
    .amexio-datapoints {

    }
  `],
            },] },
];
/** @nocollapse */
DataPointsComponent.ctorParameters = () => [];
DataPointsComponent.propDecorators = {
    north: [{ type: Input }],
    south: [{ type: Input }],
    west: [{ type: Input }],
    center: [{ type: Input }],
    east: [{ type: Input }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    amexiocolor: [{ type: Input, args: ['amexio-color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 7/25/17.
*/
class DataPointEastComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cclass == null) {
            this.cclass = 'datapoint-east';
        }
    }
}
DataPointEastComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-east', template: `

    <div [ngClass]="cclass" class="datapoint-east" [attr.align]="contentalign" [style.background-color]="backgroundcolor"
         [style.color]="fontcolor" [style.width]="width" [style.height]="height">
      <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
DataPointEastComponent.ctorParameters = () => [];
DataPointEastComponent.propDecorators = {
    contentalign: [{ type: Input, args: ['content-align',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    cclass: [{ type: Input, args: ['c-class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 7/25/17.
*/
class DataPointNorthComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cclass == null) {
            this.cclass = 'datapoints-north';
        }
    }
}
DataPointNorthComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-north', template: `

    <div [ngClass]="cclass" [attr.align]="contentalign" [style.background-color]="backgroundcolor"
         [style.color]="fontcolor" [style.width]="width" [style.height]="height">
      <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
DataPointNorthComponent.ctorParameters = () => [];
DataPointNorthComponent.propDecorators = {
    contentalign: [{ type: Input, args: ['content-align',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    cclass: [{ type: Input, args: ['c-class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 7/25/17.
*/
class DataPointSouthComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cclass == null) {
            this.cclass = 'datapoint-south';
        }
    }
}
DataPointSouthComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-south', template: `

    <div [ngClass]="cclass" [attr.align]="contentalign" [style.background-color]="backgroundcolor"
         [style.color]="fontcolor" [style.width]="width" [style.height]="height">
      <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
DataPointSouthComponent.ctorParameters = () => [];
DataPointSouthComponent.propDecorators = {
    contentalign: [{ type: Input, args: ['content-align',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    cclass: [{ type: Input, args: ['c-class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by ketangote on 7/25/17.
*/
class DataPointWestComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.cclass == null) {
            this.cclass = 'datapoint-west';
        }
    }
}
DataPointWestComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-west', template: `

    <div [ngClass]="cclass" [attr.align]="contentalign" [style.background-color]="backgroundcolor"
         [style.color]="fontcolor" [style.width]="width" [style.height]="height">
      <ng-content></ng-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
DataPointWestComponent.ctorParameters = () => [];
DataPointWestComponent.propDecorators = {
    contentalign: [{ type: Input, args: ['content-align',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    fontcolor: [{ type: Input, args: ['font-color',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    cclass: [{ type: Input, args: ['c-class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by Pratik on 07/08/17.
*/
class DashboardLoaderService {
    constructor() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap',
        };
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    loadCharts(chartName) {
        return new rxjs_1((observer) => {
            this.loadScript().subscribe((val) => console.log(), (error) => console.error(error), () => {
                this.loadRequiredChart(observer, chartName);
            });
        });
    }
    /**
     * @return {?}
     */
    loadScript() {
        return new rxjs_1((observer) => {
            if (!this.isScriptLoading) {
                // check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    // check if chart package has been loaded using chartPackagename ?
                    this.loadBaseChart(observer);
                }
                else {
                    this.isScriptLoading = true;
                    const /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = () => {
                        this.isScriptLoading = false;
                        this.googleScriptLoadingNotifier.emit(true);
                        this.loadBaseChart(observer);
                    };
                    script.onerror = () => {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        this.loadBaseChart(observer);
                    }
                });
            }
        });
    }
    /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    loadBaseChart(observer) {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(() => {
            observer.complete();
        });
    }
    /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    loadRequiredChart(observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { packages: [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(() => {
                observer.complete();
            });
        }
    }
}
DashboardLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DashboardLoaderService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Created by Sagar.
*/
class GaugeChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.gaugeData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                width: this.width,
                height: this.height,
                redFrom: this.redcolorfrom,
                redTo: this.redcolorto,
                yellowFrom: this.yellowcolorfrom,
                yellowTo: this.yellowcolorto,
                scalevalue: this.scalevalue,
            };
            if (this.gaugeData) {
                this.chart = new google.visualization.Gauge(this.gaugedashboard.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.gaugeData, this.options);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartTitleArray = this.chartTitleComp.toArray();
        // take first component
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('Gauge').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
GaugeChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-dashboard-gauge', template: `
    <div *ngIf="showChart" #gaugedashboard
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
GaugeChartComponent.ctorParameters = () => [
    { type: DashboardLoaderService }
];
GaugeChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    redcolorfrom: [{ type: Input, args: ['red-color-from',] }],
    redcolorto: [{ type: Input, args: ['red-color-to',] }],
    yellowcolorfrom: [{ type: Input, args: ['yellow-color-from',] }],
    yellowcolorto: [{ type: Input, args: ['yellow-color-to',] }],
    scalevalue: [{ type: Input, args: ['scale-value',] }],
    chartTitleComp: [{ type: ContentChildren, args: [DashBoardTitleComponent,] }],
    gaugedashboard: [{ type: ViewChild, args: ['gaugedashboard',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const DASHBOARD = [
    DashBoardTitleComponent,
    DataPointCenterComponent,
    DataPointsComponent,
    DataPointEastComponent,
    DataPointNorthComponent,
    DataPointSouthComponent,
    DataPointWestComponent,
    GaugeChartComponent,
];
class AmexioDashBoardModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioDashBoardModule,
            providers: [CommonDataService, DashboardLoaderService],
        };
    }
}
AmexioDashBoardModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    AmexioCommonModule,
                ],
                exports: DASHBOARD,
                declarations: DASHBOARD,
                providers: [CommonDataService, DashboardLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class ChartAreaComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ChartAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-area-properties', template: ``,
            },] },
];
/** @nocollapse */
ChartAreaComponent.ctorParameters = () => [];
ChartAreaComponent.propDecorators = {
    chartbackgroundcolor: [{ type: Input, args: ['chart-background-color',] }],
    leftposition: [{ type: Input, args: ['left-position',] }],
    topposition: [{ type: Input, args: ['top-position',] }],
    chartwidth: [{ type: Input, args: ['chart-width',] }],
    chartheight: [{ type: Input, args: ['chart-height',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class ChartLegendComponent {
    constructor() {
        /*
        Properties
        name : bold
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : Set true for Legend text in bold
        */
        this.bold = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ChartLegendComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-legend', template: ` `,
            },] },
];
/** @nocollapse */
ChartLegendComponent.ctorParameters = () => [];
ChartLegendComponent.propDecorators = {
    position: [{ type: Input }],
    alignment: [{ type: Input }],
    color: [{ type: Input }],
    fontname: [{ type: Input, args: ['font-name',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    bold: [{ type: Input }],
    maxlines: [{ type: Input, args: ['max-lines',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class ChartTitleComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ChartTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-title', template: ` `,
            },] },
];
/** @nocollapse */
ChartTitleComponent.ctorParameters = () => [];
ChartTitleComponent.propDecorators = {
    title: [{ type: Input }],
    position: [{ type: Input }],
    color: [{ type: Input }],
    fontname: [{ type: Input, args: ['font-name',] }],
    fontsize: [{ type: Input, args: ['font-size',] }],
    bold: [{ type: Input }],
    italic: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ChartLoaderService {
    constructor() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap',
        };
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    loadCharts(chartName) {
        return new rxjs_1((observer) => {
            this.loadScript().subscribe((val) => console.log(), (error) => console.error(error), () => {
                this.loadRequiredChart(observer, chartName);
            });
        });
    }
    /**
     * @return {?}
     */
    loadScript() {
        return new rxjs_1((observer) => {
            if (!this.isScriptLoading) {
                // check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    // check if chart package has been loaded using chartPackagename ?
                    this.loadBaseChart(observer);
                }
                else {
                    this.isScriptLoading = true;
                    const /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = () => {
                        this.isScriptLoading = false;
                        this.googleScriptLoadingNotifier.emit(true);
                        this.loadBaseChart(observer);
                    };
                    script.onerror = () => {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        this.loadBaseChart(observer);
                    }
                });
            }
        });
    }
    /**
     * Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    loadBaseChart(observer) {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(() => {
            observer.complete();
        });
    }
    /**
     * Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    loadRequiredChart(observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { packages: [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(() => {
                observer.complete();
            });
        }
    }
}
ChartLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ChartLoaderService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* Author: Sagar
*/
class AreaChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.areaData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.createTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.createChartLegend() : 'none',
                chartArea: this.chartAreaComponent ? this.createChartArea() : null,
            };
            if (this.areaData) {
                this.chart = new google.visualization.AreaChart(this.areachart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.areaData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @return {?}
     */
    createTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    createChartLegend() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    createChartArea() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('AreaChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
AreaChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-area', template: `
    <div *ngIf="showChart" #areachart
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
AreaChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
AreaChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    areachart: [{ type: ViewChild, args: ['areachart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class BarChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        // showing stack chart
        /*
        Properties
        name : stacked
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : If set to true, stacks the elements for all series at each domain value.default value is false
        */
        this.stacked = false;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this.showChart = true;
            this._data = data;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            // bind the data
            this.barData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                isStacked: this.stacked,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.createChartLegend() : 'none',
                chartArea: this.chartAreaComponent ? this.createChartBar() : null,
                hAxis: {
                    title: this.xaxistitle, minvalue: 0,
                },
                vAxis: {
                    title: this.yaxistitle,
                },
            };
            if (this.barData) {
                this.chart = new google.visualization.BarChart(this.barchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.barData, this.options);
            }
        }
    }
    /**
     * @return {?}
     */
    chartTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    createChartLegend() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    createChartBar() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('BarChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
BarChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-bar', template: `
    <div *ngIf="showChart" #barchart
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
BarChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
BarChartComponent.propDecorators = {
    data: [{ type: Input, args: ['data',] }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    stacked: [{ type: Input }],
    xaxistitle: [{ type: Input, args: ['x-axis-title',] }],
    yaxistitle: [{ type: Input, args: ['y-axis-title',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    barchart: [{ type: ViewChild, args: ['barchart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class HorizontalAxisComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
HorizontalAxisComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-horizontal-axis', template: ` `,
            },] },
];
/** @nocollapse */
HorizontalAxisComponent.ctorParameters = () => [];
HorizontalAxisComponent.propDecorators = {
    title: [{ type: Input }],
    titlecolor: [{ type: Input, args: ['title-color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class VerticalAxisComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
VerticalAxisComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-vertical-axis', template: ` `,
            },] },
];
/** @nocollapse */
VerticalAxisComponent.ctorParameters = () => [];
VerticalAxisComponent.propDecorators = {
    title: [{ type: Input }],
    titlecolor: [{ type: Input, args: ['title-color',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class BubbleChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        /*
        Properties
        name : axis-color
        datatype : any
        version : 4.0 onwards
        default : none
        description : An object that specifies a mapping between color column values and
        colors or a gradient scale.example:['#FF0000', '#00FF00'] or ['yellow', 'red']
        */
        this.axiscolor = [];
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.bubbleData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.createTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.createChartLegend() : 'none',
                chartArea: this.chartAreaComponent ? this.createChartBackground() : null,
                vAxis: this.verticalComponent ? this.createChartVertical() : null,
                hAxis: this.horizontalComponent ? this.createchartHorizontal() : null,
                bubble: { textStyle: { fontsize: 11 } },
                axiscolor: { colors: this.axiscolor },
            };
            if (this.bubbleData) {
                this.chart = new google.visualization.BubbleChart(this.bubblechart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.bubbleData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @return {?}
     */
    createTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    createChartLegend() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    createChartBackground() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    createChartVertical() {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    createchartHorizontal() {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('BubbleChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
BubbleChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-bubble',
                template: `
      <div *ngIf="showChart" #bubblechart
           [style.width]="width"
           [style.height]="height" (window:resize)="onResize($event)">
        <div *ngIf="!hasLoaded" class="lmask">
        </div>
      </div>
  `,
                styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }
  .lmask.fixed {
    position: fixed;
  }
  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }
  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }
  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }
  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }
  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
BubbleChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
BubbleChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    axiscolor: [{ type: Input, args: ['axis-color',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    horizontalComp: [{ type: ContentChildren, args: [HorizontalAxisComponent,] }],
    verticalComp: [{ type: ContentChildren, args: [VerticalAxisComponent,] }],
    bubblechart: [{ type: ViewChild, args: ['bubblechart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class CandlestickChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.candlestickData = google.visualization.arrayToDataTable(this._data, true);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTileTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: 'none',
                chartArea: this.chartAreaComponent ? this.chartLegendStyle() : null,
                vAxis: this.verticalComponent ? this.chartVerticalStyle() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalStyle() : null,
            };
            if (this.candlestickData) {
                this.chart = new google.visualization.CandlestickChart(this.candlestick.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.candlestickData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @return {?}
     */
    chartTileTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    chartVerticalStyle() {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    chartHorizontalStyle() {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        // take first component
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('CandlestickChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
CandlestickChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-candlestick', template: `
    <div *ngIf="showChart" #candlestick
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
CandlestickChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
CandlestickChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    horizontalComp: [{ type: ContentChildren, args: [HorizontalAxisComponent,] }],
    verticalComp: [{ type: ContentChildren, args: [VerticalAxisComponent,] }],
    candlestick: [{ type: ViewChild, args: ['candlestick',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class CandlestickWaterfallChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.candlestickData = google.visualization.arrayToDataTable(this._data, true);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: 'none',
                chartArea: this.chartAreaComponent ? this.chartLegendStyle() : null,
                vAxis: this.verticalComponent ? this.chartVerticalComponent() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalComponent() : null,
                bar: { groupWidth: this.barwidth ? this.barwidth : null },
                // Remove space between bars.
                candlestick: this.chartColorStyle(),
            };
            if (this.candlestickData) {
                this.chart = new google.visualization.CandlestickChart(this.candlestickwaterfall.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.candlestickData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @return {?}
     */
    chartTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    chartVerticalComponent() {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    chartHorizontalComponent() {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    chartColorStyle() {
        return {
            fallingColor: this.fallingcolor ? { strokeWidth: 0, fill: this.fallingcolor ? this.fallingcolor : null } : null,
            // red
            risingColor: this.risingcolor ? { strokeWidth: 0, fill: this.risingcolor ? this.risingcolor : null } : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        // take first component
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('CandlestickChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
CandlestickWaterfallChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-candlestick-waterfall', template: `
    <div *ngIf="showChart" #candlestickwaterfall
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
CandlestickWaterfallChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
CandlestickWaterfallChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    barwidth: [{ type: Input, args: ['bar-width',] }],
    fallingcolor: [{ type: Input, args: ['falling-color',] }],
    risingcolor: [{ type: Input, args: ['rising-color',] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    horizontalComp: [{ type: ContentChildren, args: [HorizontalAxisComponent,] }],
    verticalComp: [{ type: ContentChildren, args: [VerticalAxisComponent,] }],
    candlestickwaterfall: [{ type: ViewChild, args: ['candlestickwaterfall',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class ColumnChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        // showing stack chart
        /*
        Properties
        name : stacked
        datatype : boolean
        version : 4.0 onwards
        default : false
        description : If set to true, stacks the elements for all series at each domain value.default value is false
        */
        this.stacked = false;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.columnData = this.createTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                isStacked: this.stacked,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackGroundColor() : null,
            };
            if (this.columnData) {
                this.chart = new google.visualization.ColumnChart(this.columnchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.columnData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    }
    /**
     * @return {?}
     */
    chartTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackGroundColor() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @param {?} array
     * @return {?}
     */
    createTable(array) {
        // create Duplicate Array for data arrangement
        const /** @type {?} */ dupArray = array.slice();
        const /** @type {?} */ data = new google.visualization.DataTable();
        const /** @type {?} */ labelObject = dupArray[0];
        // remove first object of array
        dupArray.shift();
        labelObject.forEach((datatypeObject) => {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        const /** @type {?} */ finalArray = [];
        dupArray.forEach((rowObject) => {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('ColumnChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
ColumnChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-column', template: `
    <div  *ngIf="showChart" #columnchart
         [style.width]="width"
         [style.height]="height"
         (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
ColumnChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
ColumnChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    stacked: [{ type: Input }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    columnchart: [{ type: ViewChild, args: ['columnchart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class ComboChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.comboData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackground() : null,
                vAxis: this.verticalComponent ? this.chartVerticalStyle() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalStyle() : null,
                seriesType: 'bars',
                series: { 4: { type: 'line' } },
            };
            if (this.comboData) {
                this.chart = new google.visualization.ComboChart(this.combochart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.comboData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    chartTitleStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackground() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    chartVerticalStyle() {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    chartHorizontalStyle() {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('ComboChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
ComboChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-combo', template: `
    <div *ngIf="showChart" #combochart
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
ComboChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
ComboChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    horizontalComp: [{ type: ContentChildren, args: [HorizontalAxisComponent,] }],
    verticalComp: [{ type: ContentChildren, args: [VerticalAxisComponent,] }],
    combochart: [{ type: ViewChild, args: ['combochart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class DonutChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.donutData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chariTitleTextStyle() : null,
                pieHole: 0.4,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundColor() : null,
            };
            if (this.donutData) {
                this.chart = new google.visualization.PieChart(this.donutchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.donutData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    }
    /**
     * @return {?}
     */
    chariTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackgroundColor() {
        return { backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('PieChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
DonutChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-donut', template: `
    <div *ngIf="showChart" #donutchart
         [style.width]="width"
         [style.height]="height"
         (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
DonutChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
DonutChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    donutchart: [{ type: ViewChild, args: ['donutchart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2017-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class GanttChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        /*
        Properties
        name : critical-path-enabled
        datatype : boolean
        version : 4.3 onwards
        default : false
        description : If you set the criticalPathEnabled option to true, it show critical path line
        */
        this.criticalPathEnabled = false;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.data && this.showChart) {
            this.hasLoaded = true;
            this.options = { gantt: { criticalPathEnabled: this.criticalPathEnabled,
                    criticalPathStyle: { stroke: '#e64a19',
                        strokeWidth: 5 } },
                innerGridTrack: { fill: this.innerGridTrackColor ? this.innerGridTrackColor : '' },
                innerGridDarkTrack: { fill: this.innerGridDarkTrack ? this.innerGridDarkTrack : '' },
            };
            if (google && google.visualization) {
                this.chart = new google.visualization.Gantt(this.ganttchart.nativeElement);
                this.chart.draw(this.createTable(this._data), this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
            else {
                this.hasLoaded = false;
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @param {?} array
     * @return {?}
     */
    createTable(array) {
        const /** @type {?} */ copyOfArray = array.slice();
        const /** @type {?} */ data = new google.visualization.DataTable();
        const /** @type {?} */ labelObject = copyOfArray[0];
        copyOfArray.shift();
        labelObject.forEach((datatypeObject) => {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        const /** @type {?} */ newArray = [];
        copyOfArray.forEach((rowObject) => {
            newArray.push(rowObject);
        });
        data.addRows(newArray);
        return data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('Gantt').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
}
GanttChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-gantt', template: `
    <div *ngIf='showChart' #gantt
         [style.width]='width'
    >
      <div *ngIf='!hasLoaded' class='lmask'>
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
GanttChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
GanttChartComponent.propDecorators = {
    width: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    criticalPathEnabled: [{ type: Input, args: ['critical-path-enabled',] }],
    innerGridTrackColor: [{ type: Input, args: ['inner-grid-track-color',] }],
    innerGridDarkTrack: [{ type: Input, args: ['inner-grid-dark-track-color',] }],
    ganttchart: [{ type: ViewChild, args: ['gantt',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class HistogramChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.histogramData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.charttitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackground() : null,
            };
            if (this.histogramData) {
                this.chart = new google.visualization.Histogram(this.histogramchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.histogramData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @return {?}
     */
    charttitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartegendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackground() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('Histogram').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
}
HistogramChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-histogram',
                template: `
      <div *ngIf="showChart" #histogramchart
           [style.width]="width"
           [style.height]="height"
      >
        <div *ngIf="!hasLoaded" class="lmask">
        </div>
      </div>
  `,
                styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }
  .lmask.fixed {
    position: fixed;
  }
  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }
  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }
  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }
  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }
  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
HistogramChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
HistogramChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    histogramchart: [{ type: ViewChild, args: ['histogramchart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class LineChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.lineData = this.createTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundStyle() : null,
            };
            if (this.lineData) {
                this.chart = new google.visualization.LineChart(this.linechart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.lineData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    }
    /**
     * @return {?}
     */
    chartTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackgroundStyle() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @param {?} array
     * @return {?}
     */
    createTable(array) {
        // create Duplicate Array for data arrangement
        const /** @type {?} */ dupArray = array.slice();
        const /** @type {?} */ data = new google.visualization.DataTable();
        const /** @type {?} */ labelObject = dupArray[0];
        // remove first object of array
        dupArray.shift();
        labelObject.forEach((datatypeObject) => {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        const /** @type {?} */ finalArray = [];
        dupArray.forEach((rowObject) => {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('LineChart').subscribe((value) => console.log(), (error) => console.error(error), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
LineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-line', template: `
    <div *ngIf="showChart" #linechart
         [style.width]="width"
         [style.height]="height"
         (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>

  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
LineChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
LineChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    linechart: [{ type: ViewChild, args: ['linechart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PieChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.pieData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.charttitleTextStyle() : null,
                is3D: this.is3d,
                pieHole: this.piehole,
                startangle: this.startangle,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLengendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundStyle() : null,
            };
            if (this.pieData) {
                this.chart = new google.visualization.PieChart(this.piechart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.pieData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.onClick);
            }
        }
    }
    /**
     * @return {?}
     */
    charttitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLengendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null,
            textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackgroundStyle() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('PieChart').subscribe((value) => console.log(), (error) => console.error(error), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
PieChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-pie', template: `

        <div *ngIf="showChart" #piechart
             [style.width]="width"
             [style.height]="height"
             (window:resize)="onResize($event)">
          <div *ngIf="!hasLoaded" class="lmask">
          </div>
        </div>
  `,
                styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }
  .lmask.fixed {
    position: fixed;
  }
  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }
  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }
  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }
  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }
  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
PieChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
PieChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    is3d: [{ type: Input }],
    piehole: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    startangle: [{ type: Input, args: ['start-angle',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    piechart: [{ type: ViewChild, args: ['piechart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class ScatterChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.scatterData = google.visualization.arrayToDataTable(this._data);
            this.options = {
                title: this.chartTitleComponent ? this.chartTitleComponent.title : null,
                titleTextStyle: this.chartTitleComponent ? this.chartTitleTextStyle() : null,
                backgroundcolor: this.backgroundcolor,
                legend: this.chartLengendComponent ? this.chartLegendStyle() : 'none',
                chartArea: this.chartAreaComponent ? this.chartBackgroundColor() : null,
                vAxis: this.verticalComponent ? this.chartVerticalStyle() : null,
                hAxis: this.horizontalComponent ? this.chartHorizontalStyle() : null,
            };
            if (this.scatterData) {
                this.chart = new google.visualization.ScatterChart(this.scatterchart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.scatterData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @return {?}
     */
    chartTitleTextStyle() {
        return {
            color: this.chartTitleComponent.color ? this.chartTitleComponent.color : null,
            fontName: this.chartTitleComponent.fontname ? this.chartTitleComponent.fontname : null,
            fontsize: this.chartTitleComponent.fontsize ? this.chartTitleComponent.fontsize : null,
            bold: this.chartTitleComponent.bold ? this.chartTitleComponent.bold : null,
            italic: this.chartTitleComponent.italic ? this.chartTitleComponent.italic : null,
        };
    }
    /**
     * @return {?}
     */
    chartLegendStyle() {
        return {
            position: this.chartLengendComponent.position ? this.chartLengendComponent.position : null,
            // this work only in chart position is top
            maxLines: this.chartLengendComponent.maxlines ? this.chartLengendComponent.maxlines : null, textStyle: {
                color: this.chartLengendComponent.color ? this.chartLengendComponent.color : null,
                fontsize: this.chartLengendComponent.fontsize ? this.chartLengendComponent.fontsize : null,
                fontName: this.chartLengendComponent.fontname ? this.chartLengendComponent.fontname : null,
                bold: this.chartLengendComponent.bold ? this.chartLengendComponent.bold : null,
                alignment: this.chartLengendComponent.alignment ? this.chartLengendComponent.alignment : null,
            },
        };
    }
    /**
     * @return {?}
     */
    chartBackgroundColor() {
        return {
            backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
            left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
            top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
            height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
            width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
        };
    }
    /**
     * @return {?}
     */
    chartVerticalStyle() {
        return {
            title: this.verticalComponent.title ? this.verticalComponent.title : null,
            titleTextStyle: { color: this.verticalComponent.titlecolor ? this.verticalComponent.titlecolor : null },
        };
    }
    /**
     * @return {?}
     */
    chartHorizontalStyle() {
        return {
            title: this.horizontalComponent.title ? this.horizontalComponent.title : null,
            titleTextStyle: { color: this.horizontalComponent.titlecolor ? this.horizontalComponent.titlecolor : null },
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        this.horizontalArray = this.horizontalComp.toArray();
        this.verticalArray = this.verticalComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
        if (this.horizontalArray.length === 1) {
            this.horizontalComponent = this.horizontalArray.pop();
        }
        if (this.verticalArray.length === 1) {
            this.verticalComponent = this.verticalArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('ScatterChart').subscribe((value) => console.log(), (error) => console.error(error), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
ScatterChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-scatter', template: `
    <div *ngIf="showChart" #scatterchart
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)">
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
ScatterChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
ScatterChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    horizontalComp: [{ type: ContentChildren, args: [HorizontalAxisComponent,] }],
    verticalComp: [{ type: ContentChildren, args: [VerticalAxisComponent,] }],
    scatterchart: [{ type: ViewChild, args: ['scatterchart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Sagar Jadhav
 *
 */
class TimeLineChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.data && this.showChart) {
            this.chart = new google.visualization.Timeline(this.timelinechart.nativeElement);
            this.hasLoaded = true;
            this.chart.draw(this.createTable(this._data));
            google.visualization.events.addListener(this.chart, 'click', this.onClick);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartLegendArray = this.chartLegendComp.toArray();
        this.chartTitleArray = this.chartTitleComp.toArray();
        this.chartAreaArray = this.chartAreaComp.toArray();
        // take first component
        if (this.chartLegendArray.length === 1) {
            this.chartLengendComponent = this.chartLegendArray.pop();
        }
        if (this.chartTitleArray.length === 1) {
            this.chartTitleComponent = this.chartTitleArray.pop();
        }
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @param {?} array
     * @return {?}
     */
    createTable(array) {
        // create Duplicate Array for data arrangement
        const /** @type {?} */ dupArray = array.slice();
        const /** @type {?} */ data = new google.visualization.DataTable();
        const /** @type {?} */ labelObject = dupArray[0];
        // remove first object of array
        dupArray.shift();
        labelObject.forEach((datatypeObject) => {
            data.addColumn(datatypeObject.datatype, datatypeObject.label);
        });
        const /** @type {?} */ finalArray = [];
        dupArray.forEach((rowObject) => {
            finalArray.push(rowObject);
        });
        data.addRows(finalArray);
        return data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('Timeline').subscribe((value) => console.log(), (error) => console.error(error), () => {
            this.drawChart();
        });
    }
}
TimeLineChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-chart-timeline', template: `
    <div *ngIf="showChart" #timelinechart
         [style.width]="width"
    >
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
TimeLineChartComponent.ctorParameters = () => [
    { type: ChartLoaderService }
];
TimeLineChartComponent.propDecorators = {
    width: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    chartLegendComp: [{ type: ContentChildren, args: [ChartLegendComponent,] }],
    chartTitleComp: [{ type: ContentChildren, args: [ChartTitleComponent,] }],
    chartAreaComp: [{ type: ContentChildren, args: [ChartAreaComponent,] }],
    timelinechart: [{ type: ViewChild, args: ['timelinechart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const CHART_COMPONENTS = [
    AreaChartComponent, BarChartComponent, ChartAreaComponent,
    ChartLegendComponent, ChartTitleComponent, ColumnChartComponent,
    DonutChartComponent, GanttChartComponent, HistogramChartComponent, LineChartComponent,
    PieChartComponent, TimeLineChartComponent, ComboChartComponent,
    VerticalAxisComponent,
    HorizontalAxisComponent,
    BubbleChartComponent,
    ScatterChartComponent, CandlestickChartComponent, CandlestickWaterfallChartComponent,
];
class AmexioChartsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioChartsModule,
            providers: [CommonDataService, ChartLoaderService],
        };
    }
}
AmexioChartsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    AmexioCommonModule,
                ],
                exports: CHART_COMPONENTS,
                declarations: CHART_COMPONENTS,
                providers: [CommonDataService, ChartLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
* Copyright [2019] [Metamagic]
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*  Created by pratik on 17/8/17.
*/
class MapLoaderService {
    constructor() {
        this.chartPackage = {
            AreaChart: 'corechart',
            Bar: 'bar',
            BarChart: 'corechart',
            ColumnChart: 'corechart',
            PieChart: 'corechart',
            Gantt: 'gantt',
            Gauge: 'gauge',
            GeoChart: 'geochart',
            Histogram: 'corechart',
            Line: 'line',
            LineChart: 'corechart',
            Map: 'map',
            Timeline: 'timeline',
            BubbleChart: 'corechart',
            CandlestickChart: 'corechart',
            ComboChart: 'corechart',
            TreeMap: 'treemap',
        };
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.isScriptLoading = false;
    }
    /**
     * @param {?} chartName
     * @return {?}
     */
    loadCharts(chartName) {
        return new rxjs_1((observer) => {
            this.loadScript().subscribe((val) => console.log(), (error) => console.error(error), () => {
                this.loadRequiredChart(observer, chartName);
            });
        });
    }
    /**
     * @return {?}
     */
    loadScript() {
        return new rxjs_1((observer) => {
            if (!this.isScriptLoading) {
                // check if previously its loaded
                if (typeof google !== 'undefined' && google.charts) {
                    // check if chart package has been loaded using chartPackagename ?
                    this.loadBaseChart(observer);
                }
                else {
                    this.isScriptLoading = true;
                    const /** @type {?} */ script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = () => {
                        this.isScriptLoading = false;
                        this.googleScriptLoadingNotifier.emit(true);
                        this.loadBaseChart(observer);
                    };
                    script.onerror = () => {
                        observer.error('Could Not Load google Script');
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        this.loadBaseChart(observer);
                    }
                });
            }
        });
    }
    /**
     *  Load Base Chart
     * @param {?} observer
     * @return {?}
     */
    loadBaseChart(observer) {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(() => {
            observer.complete();
        });
    }
    /**
     *  Load the required charts
     * @param {?} observer
     * @param {?} chartName
     * @return {?}
     */
    loadRequiredChart(observer, chartName) {
        if (google.visualization.hasOwnProperty(chartName)) {
            observer.complete();
        }
        else {
            google.charts.load('current', { packages: [this.chartPackage[chartName]] });
            google.charts.setOnLoadCallback(() => {
                observer.complete();
            });
        }
    }
}
MapLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MapLoaderService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MapPropertiesComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
MapPropertiesComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-map-properties', template: ``,
            },] },
];
/** @nocollapse */
MapPropertiesComponent.ctorParameters = () => [];
MapPropertiesComponent.propDecorators = {
    chartbackgroundcolor: [{ type: Input, args: ['chart-background-color',] }],
    leftposition: [{ type: Input, args: ['left-position',] }],
    topposition: [{ type: Input, args: ['top-position',] }],
    chartwidth: [{ type: Input, args: ['chart-width',] }],
    chartheight: [{ type: Input, args: ['chart-height',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GeoChartComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        /*
          not in use
        */
        this.countryname = false;
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        if (this.showChart) {
            this.geomapData = google.visualization.arrayToDataTable(this._data);
            this.showChartExist();
            if (this.geomapData) {
                this.chart = new google.visualization.GeoChart(this.geochart.nativeElement);
                this.hasLoaded = true;
                this.chart.draw(this.geomapData, this.options);
                google.visualization.events.addListener(this.chart, 'click', this.click);
            }
        }
    }
    /**
     * @return {?}
     */
    showChartExist() {
        this.options = {
            displayMode: this.countryname ? 'text' : null,
            region: this.regioncode ? this.regioncode : null,
            backgroundcolor: this.backgroundcolor ? this.backgroundcolor : null,
            unusedregioncolor: this.unusedregioncolor ? this.unusedregioncolor : null,
            chartArea: this.chartAreaComponent ? {
                backgroundcolor: this.chartAreaComponent.chartbackgroundcolor ? this.chartAreaComponent.chartbackgroundcolor : null,
                left: this.chartAreaComponent.leftposition ? this.chartAreaComponent.leftposition : null,
                top: this.chartAreaComponent.topposition ? this.chartAreaComponent.topposition : null,
                height: this.chartAreaComponent.chartheight ? this.chartAreaComponent.chartheight : null,
                width: this.chartAreaComponent.chartwidth ? this.chartAreaComponent.chartwidth : null,
            } : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.chartAreaArray = this.chartAreaComp.toArray();
        if (this.chartAreaArray.length === 1) {
            this.chartAreaComponent = this.chartAreaArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('GeoChart').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
}
GeoChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-map-geo-chart', template: `
    <div *ngIf="showChart" #geochart
         [style.width]="width"
         [style.height]="height"
    >
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }
`],
            },] },
];
/** @nocollapse */
GeoChartComponent.ctorParameters = () => [
    { type: MapLoaderService }
];
GeoChartComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    countryname: [{ type: Input, args: ['country-name',] }],
    regioncode: [{ type: Input, args: ['region-code',] }],
    backgroundcolor: [{ type: Input, args: ['background-color',] }],
    unusedregioncolor: [{ type: Input, args: ['unused-region-color',] }],
    chartAreaComp: [{ type: ContentChildren, args: [MapPropertiesComponent,] }],
    geochart: [{ type: ViewChild, args: ['geochart',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MapTitleComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
MapTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-map-title', template: ` `,
            },] },
];
/** @nocollapse */
MapTitleComponent.ctorParameters = () => [];
MapTitleComponent.propDecorators = {
    title: [{ type: Input }],
    position: [{ type: Input }],
    color: [{ type: Input }],
    fontname: [{ type: Input, args: ['font-name',] }],
    bold: [{ type: Input }],
    italic: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TreeMapComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.onClick = new EventEmitter();
        this.width = '100%';
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.showChart = true;
        }
        else {
            this.showChart = false;
        }
    }
    /**
     * @return {?}
     */
    drawChart() {
        let /** @type {?} */ chart;
        const /** @type {?} */ localData = this._data;
        if (this.showChart) {
            this.treemapData = google.visualization.arrayToDataTable(this._data);
            this.initializeOptions();
            if (this.treemapData) {
                chart = new google.visualization.TreeMap(this.treemapmap.nativeElement);
                this.hasLoaded = true;
                chart.draw(this.treemapData, this.options);
                google.visualization.events.addListener(chart, 'select', (eve, event) => {
                    localData.forEach((element, index) => {
                        if ((chart.getSelection())[0].row + 1 === index) {
                            this.onClick.emit(element);
                        }
                    });
                });
            }
        }
    }
    /**
     * @return {?}
     */
    initializeOptions() {
        this.options = {
            title: this.mapTitleComponent ? this.mapTitleComponent.title : null,
            titleTextStyle: this.mapTitleComponent ? this.mapTitleTextStyle() : null,
            mincolor: this.mincolor ? this.mincolor : null, midcolor: this.midcolor ? this.midcolor : null,
            maxcolor: this.maxcolor ? this.maxcolor : null, headerHeight: 15, fontcolor: 'black',
            showscale: this.showscale ? this.showscale : false,
            maxpostdepth: this.maxpostdepth ? this.maxpostdepth : 1,
        };
    }
    /**
     * @return {?}
     */
    mapTitleTextStyle() {
        return {
            color: this.mapTitleComponent.color ? this.mapTitleComponent.color : null,
            fontName: this.mapTitleComponent.fontname ? this.mapTitleComponent.fontname : null,
            bold: this.mapTitleComponent.bold ? this.mapTitleComponent.bold : null,
            italic: this.mapTitleComponent.italic ? this.mapTitleComponent.italic : null,
        };
    }
    /**
     * @param {?} e
     * @return {?}
     */
    click(e) {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.mapTitleArray = this.maptleComp.toArray();
        if (this.mapTitleArray.length === 1) {
            this.mapTitleComponent = this.mapTitleArray.pop();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.hasLoaded = false;
        this.loader.loadCharts('TreeMap').subscribe((value) => console.log(), (errror) => console.error(errror), () => {
            this.drawChart();
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.drawChart();
    }
}
TreeMapComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-map-treemap', template: `
    <div *ngIf="showChart" #treemapmap
         [style.width]="width"
         [style.height]="height" (window:resize)="onResize($event)"
    >
      <div *ngIf="!hasLoaded" class="lmask">
      </div>
    </div>
  `, styles: [`.lmask {
    position: absolute;
    height: 100%;
    width: 100%;
    background-color: #000;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    z-index: 9999;
    opacity: 0.4;
  }

  .lmask.fixed {
    position: fixed;
  }

  .lmask:before {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 35px #2187e7;
    width: 50px;
    height: 50px;
    -moz-animation: spinPulse 1s infinite ease-in-out;
    -webkit-animation: spinPulse 1s infinite linear;
    margin: -25px 0 0 -25px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  .lmask:after {
    content: '';
    background-color: transparent;
    border: 5px solid rgba(0, 183, 229, 0.9);
    opacity: .9;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-radius: 50px;
    box-shadow: 0 0 15px #2187e7;
    width: 30px;
    height: 30px;
    -moz-animation: spinoffPulse 1s infinite linear;
    -webkit-animation: spinoffPulse 1s infinite linear;
    margin: -15px 0 0 -15px;
    position: absolute;
    top: 50%;
    left: 50%;
  }

  @-moz-keyframes spinPulse {
    0% {
      -moz-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -moz-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -moz-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-moz-keyframes spinoffPulse {
    0% {
      -moz-transform: rotate(0deg);
    }
    100% {
      -moz-transform: rotate(360deg);
    }
  }

  @-webkit-keyframes spinPulse {
    0% {
      -webkit-transform: rotate(160deg);
      opacity: 0;
      box-shadow: 0 0 1px #2187e7;
    }
    50% {
      -webkit-transform: rotate(145deg);
      opacity: 1;
    }
    100% {
      -webkit-transform: rotate(-320deg);
      opacity: 0;
    }
  }

  @-webkit-keyframes spinoffPulse {
    0% {
      -webkit-transform: rotate(0deg);
    }
    100% {
      -webkit-transform: rotate(360deg);
    }
  }

  `],
            },] },
];
/** @nocollapse */
TreeMapComponent.ctorParameters = () => [
    { type: MapLoaderService }
];
TreeMapComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    data: [{ type: Input, args: ['data',] }],
    mincolor: [{ type: Input, args: ['min-color',] }],
    midcolor: [{ type: Input, args: ['mid-color',] }],
    maxcolor: [{ type: Input, args: ['max-color',] }],
    showscale: [{ type: Input, args: ['show-scale',] }],
    maxpostdepth: [{ type: Input, args: ['max-post-depth',] }],
    onClick: [{ type: Output }],
    maptleComp: [{ type: ContentChildren, args: [MapTitleComponent,] }],
    treemapmap: [{ type: ViewChild, args: ['treemapmap',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const MAP_COMPONENTS = [
    MapPropertiesComponent,
    GeoChartComponent,
    TreeMapComponent,
    MapTitleComponent,
];
class AmexioMapModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioMapModule,
            providers: [CommonDataService, MapLoaderService],
        };
    }
}
AmexioMapModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    AmexioCommonModule,
                ],
                exports: MAP_COMPONENTS,
                declarations: MAP_COMPONENTS,
                providers: [CommonDataService, MapLoaderService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 18/1/18.
 */
/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Author - Pratik Kelwalkar
 *
 */
class MultiMediaCarouselComponent {
    constructor() {
        /*
        Properties
        name : has-details
        datatype :  boolean
        version : 4.0 onwards
        default : none
        description : Provide a embedded view for more information on the media
        
        */
        this.hasDetail = true;
        /*
        Events
        name : onVideoLoad
        datatype : none
        version : none
        default : none
        description :
        */
        this.onVideoLoad = new EventEmitter();
        this.right = false;
        this.left = false;
        this.elementId = 'multi-media-ee-carousel-' + Math.floor(Math.random() * 90000) + 10000;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.carouselStyle == null) {
            this.carouselStyle = 'horizontal';
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['data'] != null) {
            this.data = changes['data'].currentValue;
        }
    }
    /**
     * @return {?}
     */
    leftClick() {
        const /** @type {?} */ ts = document.getElementById(this.elementId);
        ts.scrollLeft -= 350;
        if (ts.scrollLeft === 0) {
            document.getElementById(this.elementId + 'leftarrow').style.visibility = 'hidden';
        }
        document.getElementById(this.elementId + 'rightarrow').style.visibility = 'visible';
    }
    /**
     * @return {?}
     */
    rightClick() {
        const /** @type {?} */ ts = document.getElementById(this.elementId);
        ts.scrollLeft += 350;
        if ((ts.scrollWidth - ts.offsetWidth - ts.scrollLeft) <= 0) {
            document.getElementById(this.elementId + 'rightarrow').style.visibility = 'hidden';
        }
        document.getElementById(this.elementId + 'leftarrow').style.visibility = 'visible';
    }
    /**
     * @return {?}
     */
    closeDetailPage() {
        this.data.forEach((item) => {
            item.selected = null;
        });
        this.displayDetail = false;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    openDetailsSection(item) {
        this.videoUrl = item.video;
        this.currentDetailsImagePath = item.details_img;
        this.currentDetailsTitle = item.title;
        this.currentDetailsDesc = item.desc;
        this.currentContent = item.content;
        this.seasonNo = item.seasonNo;
        this.matchPercentage = item.matchPercentage;
        this.ageLimit = item.ageLimit;
        this.releaseYear = item.releaseYear;
        this.data.forEach((item1) => {
            item1.selected = null;
        });
        item.selected = 'selected';
        this.displayDetail = true;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    loadVideo(item) {
        this.onVideoLoad.emit(item.video);
    }
    /**
     * @param {?} video
     * @return {?}
     */
    playVideo(video) {
        this.onVideoLoad.emit(video);
    }
}
MultiMediaCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-media-ee-carousel',
                template: `
    <div class="section-header" style="z-index: 1;">{{title}}</div>
    <div class="contain row">

      <div class="left-arrow" [attr.id]="elementId+'leftarrow'" style="cursor: pointer"> <div [ngClass]="{'controls' : carouselStyle=='horizontal','controls-v' : carouselStyle=='vertical'}" (click)="leftClick();"><em class="fa fa-chevron-left fa-2x" aria-hidden="true"></em></div> </div>

      <div class="row1" [attr.id]="elementId">
        <div class="row__inner">
          <ng-container *ngIf="data">
            <div class="tile" *ngFor="let item of data;let i = index">
              <div class="tile__media" (click)="loadVideo(item)">
                <img alt="title" class="tile__img" [attr.src]="item.img" />
              </div>
              <div class="{{item.selected}}">
                <em [ngStyle]="{'visibility':item.selected ? 'visible':'hidden'}" class="fa fa-caret-down" aria-hidden="false"></em>
              </div>
              <div [ngClass]="{'tile__details' : carouselStyle=='horizontal','tile__details_v' : carouselStyle=='vertical'}">
                <div class="textonly">

                  <div class="playpanel">
                    <div style="cursor: pointer" (click)="loadVideo(item)" class="playbutton"><em class="fa fa-play" aria-hidden="true"></em></div>
                  </div>

                  <span class="carousel-title" *ngIf="item.title">{{item.title}}</span><br>
                  <span class="match">{{item.matchPercentage}} Match</span> {{item.releaseYear}} <span class="age mini">{{item.ageLimit}}</span> {{item.seasonNo}}<br>
                  <div class="subtitle">{{item.desc}}</div>

                </div>
                <div class="actionpanel"   *ngIf="item.content">
                  <div style="cursor: pointer;" (click)="openDetailsSection(item)"><em class="fa fa-chevron-down fa-2x" aria-hidden="true"></em></div>
                </div>


              </div>
            </div>
          </ng-container>
        </div>
      </div>

      <ng-container *ngIf="carouselStyle=='horizontal'">
        <div class="right-arrow" [attr.id]="elementId+'rightarrow'" style="cursor: pointer"> <div [ngClass]="{'controls' : carouselStyle=='horizontal','controls-v' : carouselStyle=='vertical'}" (click)="rightClick();"><em class="fa fa-chevron-right fa-2x" aria-hidden="true"></em></div></div>
      </ng-container>

      <ng-container *ngIf="carouselStyle=='vertical'">
        <div class="right-arrow-tall" [attr.id]="elementId+'rightarrow'" style="cursor: pointer"> <div [ngClass]="{'controls' : carouselStyle=='horizontal','controls-v' : carouselStyle=='vertical'}" (click)="rightClick();"><em class="fa fa-chevron-right fa-2x" aria-hidden="true"></em></div></div>
      </ng-container>

    </div>

    <div [attr.id]="elementId+'carousel-detail-content'" class="collapse" *ngIf="hasDetail && displayDetail">
      <amexio-ee-content [bg-image-url]="currentDetailsImagePath"
                         [title]="currentDetailsTitle" [description]="currentDetailsDesc"
                         [contents]="currentContent" [link]="videoUrl"
                         (onWatchClick)="playVideo(videoUrl)" (onCloseClick)="closeDetailPage()"
                         [rate]="rate" [watch]="true" [my-list]="true"
                         [close]="true" [season-no]="seasonNo" [release-year]="releaseYear" [age-limit]="ageLimit" [match-percentage]="matchPercentage"
      ></amexio-ee-content>
    </div>
  `,
            },] },
];
/** @nocollapse */
MultiMediaCarouselComponent.ctorParameters = () => [];
MultiMediaCarouselComponent.propDecorators = {
    data: [{ type: Input }],
    carouselStyle: [{ type: Input, args: ['carousel-type',] }],
    hasDetail: [{ type: Input, args: ['has-details',] }],
    title: [{ type: Input }],
    onVideoLoad: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ContentComponent {
    constructor() {
        /*
        Properties
        name : watch
        datatype :  any
        version : 4.0 onwards
        default : false
        description : Enable watch button.*/
        this.enableWatch = false;
        /*
        Properties
        name : my-list
        datatype : none
        version : 4.0 onwards
        default : false
        description : Enable MyList button.
        */
        this.enableMyList = false;
        /*
        Events
        name :  onWatchClick
        datatype :  none
        version : none
        default : none
        description : Get watch button click.
        */
        this.onWatchClick = new EventEmitter();
        /*
        Properties
        name : onAddListClick
        datatype :  none
        version : none
        default : none
        description : Get add list button click.
        
        */
        this.onAddListClick = new EventEmitter();
        /*
        Properties
        name : onLikeClick
        datatype :  none
        version : none
        default : none
        description : Get like click.
        
        */
        this.onLikeClick = new EventEmitter();
        /*
        Properties
        name : onUnlikeLikeClick
        datatype :  none
        version : none
        default : none
        description : Get unlike click.
        
        */
        this.onUnlikeLikeClick = new EventEmitter();
        /*
        Properties
        name : onCloseClick
        datatype :  any
        version :none
        default : none
        description : Get close content click.
        
        */
        this.onCloseClick = new EventEmitter();
        this.closeEnable = false;
        this.smallScreen = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (window.innerWidth < 768) {
            this.smallScreen = true;
            this.size = 'small';
        }
        else {
            this.smallScreen = false;
            this.size = 'default';
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["videoLink"] && !changes["videoLink"].isFirstChange()) {
            this.videoLink = changes["videoLink"].currentValue;
        }
    }
    /**
     * @return {?}
     */
    playVideo() {
        this.onWatchClick.emit(this.videoLink);
    }
    /**
     * @return {?}
     */
    addToList() {
        this.overviewData = {
            'title': this.title, 'description': this.description, 'Video Link': this.videoLink, 'rate': this.rate,
        };
        this.onAddListClick.emit(this.overviewData);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        if (event.target.innerWidth < 995) {
            this.size = 'small';
            this.smallScreen = true;
        }
        else {
            this.size = 'default';
            this.smallScreen = false;
        }
    }
    /**
     * @return {?}
     */
    getClassName() {
        if (this.smallScreen) {
            return 'button-small';
        }
        else {
            return 'button';
        }
    }
    /**
     * @return {?}
     */
    unlikeClick() {
        this.overviewData = {
            title: this.title, rate: this.rate,
        };
        this.onUnlikeLikeClick.emit(this.overviewData);
    }
    /**
     * @return {?}
     */
    likeClick() {
        this.overviewData = {
            title: this.title, rate: this.rate,
        };
        this.onLikeClick.emit(this.overviewData);
    }
    /**
     * @return {?}
     */
    closeDetailPage() {
        this.onCloseClick.emit(this.title);
    }
}
ContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-ee-content', template: `
    <div class="main-content" [ngStyle]="{'background-image':'url('+bgImgUrl+')'}" (window:resize)="onResize($event)">
       <span *ngIf="closeEnable" class="close-button">
        <i class="fa fa-times fa-lg" (click)="closeDetailPage()" aria-hidden="true"></i>
      </span>
      <div class="content-area" >
        <span class="content-title">{{title}}</span><br>
        <span><span class="match" *ngIf="matchPercentage">{{matchPercentage}} Match</span> {{releaseYear}} <span
          class="age" *ngIf="ageLimit">{{ageLimit}}</span> {{seasonNo}}</span><br>
        <p style="word-wrap: break-word;">{{description}}<br>

        <ng-container *ngIf="contents">
              <span>
                <li *ngFor="let data of contents"><strong
                  style="color: #999;">{{data.key}}: </strong> <strong>  {{data.value}}</strong></li><br>
          </span>
        </ng-container>
        <ul class="inline-list">
          <li *ngIf="enableWatch">
            <span class="content-button" (click)="playVideo()">
            <i class="fa fa-play"></i> &nbsp;&nbsp; Play</span>
            <!-- <amexio-ee-btn [cClass]="'buttoncustom'"
            [label]="'Play'" [type]="'danger'" [icon]="'fa fa-play'"
            [tooltipMessage]="'play'" [size]="size" (onClick)="playVideo()">
            </amexio-ee-btn> -->
          </li>
          <li *ngIf="enableMyList">
            <span class="content-button" (click)="addToList()">
            <i class="fa fa-plus"></i>&nbsp;&nbsp; MY LIST</span>
            <!-- <amexio-ee-btn [cClass]="'secondarybutton'" [label]="'MY LIST'"
            [icon]="'fa fa-plus'" [type]="'secondary'" [tooltipMessage]="'My List'"
            [size]="size" (onClick)="addToList()"></amexio-ee-btn> -->
          </li>
          <li>
            <a style="color: white!important;" [ngClass]="getClassName()" (click)="likeClick()"><i class="fa fa-thumbs-o-up fa-lg"
                                                                   aria-hidden="true"></i>
            </a>
          </li>
          <li><a style="color: white!important;" [ngClass]="getClassName()" (click)="unlikeClick()"><i class="fa fa-thumbs-o-down fa-lg "
                                                                       aria-hidden="true"></i></a></li>

        </ul>
        <ng-container *ngIf="rate && max">
          <amexio-rating-input [(ngModel)]="rate"
                               [max]="max" name="rate"
                               [read-only]="isReadonly">
          </amexio-rating-input>
        </ng-container>
      </div>
    </div>`,
            },] },
];
/** @nocollapse */
ContentComponent.ctorParameters = () => [];
ContentComponent.propDecorators = {
    bgImgUrl: [{ type: Input, args: ['bg-image-url',] }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    contents: [{ type: Input }],
    videoLink: [{ type: Input, args: ['link',] }],
    rate: [{ type: Input }],
    max: [{ type: Input }],
    isReadonly: [{ type: Input }],
    enableWatch: [{ type: Input, args: ['watch',] }],
    enableMyList: [{ type: Input, args: ['my-list',] }],
    ageLimit: [{ type: Input, args: ['age-limit',] }],
    releaseYear: [{ type: Input, args: ['release-year',] }],
    seasonNo: [{ type: Input, args: ['season-no',] }],
    matchPercentage: [{ type: Input, args: ['match-percentage',] }],
    closeEnable: [{ type: Input, args: ['close',] }],
    onWatchClick: [{ type: Output }],
    onAddListClick: [{ type: Output }],
    onLikeClick: [{ type: Output }],
    onUnlikeLikeClick: [{ type: Output }],
    onCloseClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioWeekDayAvailiblityComponent {
    constructor() {
        this.ariadateavailable = [];
        this.noOfDaysArray = [];
        this.selectedDays = [];
        this.data1 = [];
        this.month = ['January', 'Feburary', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        this.day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        this.height = 'auto';
        this.noOfDays = 7;
        this.multiSelect = false;
        this.availableSlotsBgColor = '';
        this.availableSlotsColor = '';
        this.selectedSlotColor = '';
        this.selectedSlotBgColor = '';
        this.onSingleSelect = new EventEmitter();
        this.onMultiSelect = new EventEmitter();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set date(v) {
        if (v != null && v) {
            this.currentDate = new Date(v.getTime());
            this.initComponent();
        }
    }
    /**
     * @return {?}
     */
    get date() {
        return this.currentDate;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set availableslots(v) {
        if (v != null && v) {
            this.datesavailable = v;
            this.initComponent();
        }
    }
    /**
     * @return {?}
     */
    get availableslots() {
        return this.datesavailable;
    }
    /**
     * @param {?} event1
     * @param {?} dayModel1
     * @param {?} time1
     * @return {?}
     */
    onTimeClick(event1, dayModel1, time1) {
        if (time1 && time1.available && this.multiSelect) {
            this.onMultiSelection(dayModel1, time1);
        }
        else if (time1 && time1.available && !this.multiSelect) {
            this.viewData.forEach((object) => {
                object.timeslots.forEach((element) => {
                    if (element === time1) {
                        element.selected = true;
                    }
                    else {
                        element.selected = false;
                    }
                });
            });
            this.onSingleSelect.emit({ date: dayModel1.date, time: time1.time, timeId: time1.timeId });
        }
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    onArrowDown(data1) {
        this.actualtime = '';
        const /** @type {?} */ tempid = data1.ariaId;
        let /** @type {?} */ slicedid = tempid.slice(6);
        slicedid++;
        const /** @type {?} */ newid = this.randomid + '-' + slicedid;
        document.getElementById(newid).focus();
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    readtime(data1) {
        const /** @type {?} */ t = parseInt(data1.time, 10);
        const /** @type {?} */ t1 = t % 12;
        if (t1 <= 12) {
            if (t1 === 0) {
                this.actualtime = 12 + ' ' + 'am';
            }
            else {
                this.actualtime = t1 + ' ' + 'am';
            }
        }
        else {
            this.actualtime = t1 + ' ' + 'pm';
        }
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    onArrowUp(data1) {
        const /** @type {?} */ tempid = data1.ariaId;
        let /** @type {?} */ slicedid = tempid.slice(6);
        slicedid--;
        const /** @type {?} */ newid = this.randomid + '-' + slicedid;
        document.getElementById(newid).focus();
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    onArrowRight(data1) {
        this.onArrowDown(data1);
    }
    /**
     * @param {?} data1
     * @return {?}
     */
    onArrowLeft(data1) {
        this.onArrowUp(data1);
    }
    /**
     * @param {?} dayModel1
     * @return {?}
     */
    getFullMonthName(dayModel1) {
        const /** @type {?} */ months = ['January', 'Febuary', 'March', 'April', 'May',
            'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        const /** @type {?} */ datemonth = dayModel1.date.getMonth();
        let /** @type {?} */ monthString = '';
        months.forEach((element, index) => {
            if (datemonth === index) {
                monthString = element;
            }
        });
        return monthString;
    }
    /**
     * @param {?} dayModel1
     * @return {?}
     */
    getFullDayName(dayModel1) {
        const /** @type {?} */ weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday',
            'Thursday', 'Friday', 'Saturday'];
        const /** @type {?} */ day = dayModel1.date.getDay();
        let /** @type {?} */ dayname = '';
        weekdays.forEach((element, index) => {
            if (day === index) {
                dayname = element;
            }
        });
        return dayname;
    }
    /**
     * @return {?}
     */
    gettime() {
    }
    /**
     * @return {?}
     */
    initComponent() {
        if (this.currentDate) {
            this.viewData = [];
            this.randomid = Math.floor(Math.random() * 90000) + 10000;
            const /** @type {?} */ clonedDate = new Date(this.currentDate.getTime());
            let /** @type {?} */ startDate = clonedDate;
            const /** @type {?} */ d1 = new DayModel(new Date(startDate.getTime()), true, this.availableslots);
            d1.setTimeSlots(this.setStyle(new TimeUtil().timeData(true)));
            d1['fulldate'] = this.getFullDayName(d1) + ' ' + d1.date.getDate() + ' ' + this.getFullMonthName(d1)
                + ' ' + d1.date.getFullYear() + ' ' + d1.date.getUTCHours();
            this.viewData.push(d1);
            this.noOfDaysArray = [];
            for (let /** @type {?} */ i = 0; i < this.noOfDays; i++) {
                this.noOfDaysArray.push(i);
            }
            for (let /** @type {?} */ i = 1; i < this.noOfDays; i++) {
                const /** @type {?} */ wdate = this.createWeekDays(startDate, i);
                const /** @type {?} */ d2 = new DayModel(new Date(wdate.getTime()), true, this.availableslots);
                d2.setTimeSlots(this.setStyle(new TimeUtil().timeData(true)));
                d2['fulldate'] = this.getFullDayName(d2) + ' ' + d2.date.getDate()
                    + ' ' + this.getFullMonthName(d2) + ' ' + d2.date.getFullYear() + ' ' + d2.date.getUTCHours();
                this.viewData.push(d2);
                startDate = wdate;
            }
            let /** @type {?} */ inc = 0;
            this.viewData.forEach((element) => {
                if (element.availableSlots) {
                    element.timeslots.forEach((data) => {
                        if (data.available) {
                            data['ariaId'] = this.randomid + '-' + inc;
                            inc++;
                        }
                    });
                }
            });
        }
    }
    /**
     * @param {?} date
     * @param {?} count
     * @return {?}
     */
    createWeekDays(date, count) {
        date.setHours(date.getHours() + 24);
        return date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMonday(date) {
        if (date) {
            const /** @type {?} */ day = date.getDay() || 7;
            if (day !== 1) {
                date.setHours(-24 * (day - 1));
            }
        }
        return date;
    }
    /**
     * @param {?} dayModel1
     * @param {?} time1
     * @return {?}
     */
    onMultiSelection(dayModel1, time1) {
        dayModel1.timeslots.forEach((obj) => {
            if (obj === time1) {
                const /** @type {?} */ selectedAppointDate = {
                    date: dayModel1.date,
                    time: obj.time,
                    timeId: obj.timeId,
                };
                obj.selected = true;
                if (this.selectedDays.length > 0) {
                    this.selectedDays.forEach((item, index) => {
                        if (item.date === selectedAppointDate.date) {
                            this.selectedDays.splice(index, 1);
                        }
                    });
                    this.selectedDays.push(selectedAppointDate);
                }
                else {
                    this.selectedDays.push(selectedAppointDate);
                }
            }
            else {
                obj.selected = false;
            }
        });
        this.onSingleSelect.emit({ date: dayModel1.date, time: time1.time, timeId: time1.timeId });
        this.onMultiSelect.emit(this.selectedDays);
    }
    /**
     * @return {?}
     */
    getAvailableStyle() {
        return {
            'background-color': this.availableSlotsBgColor,
            'color': this.availableSlotsColor,
        };
    }
    /**
     * @return {?}
     */
    getSelectedStyle() {
        return {
            'background-color': this.selectedSlotBgColor,
            'color': this.selectedSlotColor,
        };
    }
    /**
     * @param {?} timeModelData
     * @return {?}
     */
    setStyle(timeModelData) {
        timeModelData.forEach((time) => {
            time.selectedStyleClass = this.getSelectedStyle();
            time.availableStyleClass = this.getAvailableStyle();
        });
        return timeModelData;
    }
}
AmexioWeekDayAvailiblityComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-ee-appointment',
                template: `
      <div class="weekdaycomponent">
          <div class="datetimepicker1" style="width: 100%;">
              <ul *ngIf="viewData && (viewData.length == noOfDays)" class="weekdays" style="padding: 5px 0!important">
                  <li *ngFor="let day of noOfDaysArray" style="width: 14.28%;">
                      <label>{{viewData[day].date| date:'E'}} </label><br />
                      <label style="font-size: 10px;">{{viewData[day].date| date:'dd/MM/yy'}}</label>
                  </li>
              </ul>
              <ul *ngIf="viewData && (viewData.length == noOfDays)" class="weekdays" [style.height]="height" style="overflow: auto;padding: 5px 0!important">
                  <li *ngFor="let day of noOfDaysArray" style="width: 14.28%;">
                      <ng-container *ngIf="viewData[day] && viewData[day].timeslots &&  viewData[day].timeslots.length>0">
                          <ng-container *ngFor="let time of  viewData[day].timeslots">
                              <div (focus)="readtime(time,viewData[day])" id={{time.ariaId}} [tabindex]="time.available ? 0 : -1"
                                  attr.aria-label="{{viewData[day].fulldate | date : 'EEEE, MMMM d, y'}} {{actualtime}}"
                                  *ngIf="(time.timeId >= startTime && time.timeId <= endTime)" style="padding:5px;" [ngStyle]="time.selected ? time.selectedStyleClass: (time.available ? time.availableStyleClass : '')"
                                  [ngClass]="{'availableweekday': time.available,'notavailableweekday': !time.available,'selectedDay':time.selected}"
                                  (click)="onTimeClick($event,viewData[day],time)" (keyup.arrowdown)="onArrowDown(time)"
                                  (keyup.arrowup)="onArrowUp(time)" (keyup.arrowright)="onArrowRight(time)" (keyup.arrowleft)="onArrowLeft(time)" (keyup.enter)="onTimeClick($event,viewData[day],time)">
                                  {{time.time}}
                              </div>
                          </ng-container>
                      </ng-container>
                  </li>
              </ul>
          </div>
      </div>
    `,
            },] },
];
/** @nocollapse */
AmexioWeekDayAvailiblityComponent.ctorParameters = () => [];
AmexioWeekDayAvailiblityComponent.propDecorators = {
    height: [{ type: Input, args: ['height',] }],
    startTime: [{ type: Input, args: ['start-time',] }],
    endTime: [{ type: Input, args: ['end-time',] }],
    noOfDays: [{ type: Input, args: ['no-of-days',] }],
    multiSelect: [{ type: Input, args: ['multi-select',] }],
    availableSlotsBgColor: [{ type: Input, args: ['available-slots-bg-color',] }],
    availableSlotsColor: [{ type: Input, args: ['available-slots-color',] }],
    selectedSlotColor: [{ type: Input, args: ['selected-slot-color',] }],
    selectedSlotBgColor: [{ type: Input, args: ['selected-slot-bg-color',] }],
    date: [{ type: Input, args: ['date',] }],
    availableslots: [{ type: Input, args: ['available-slots',] }],
    onSingleSelect: [{ type: Output }],
    onMultiSelect: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Created by pratik on 18/1/18.
 */
class AmexioYoutubePlayerComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        /*
        Events
        name :onCloseVideoPlayer
        datatype : none
        version : none
        default : none
        description : it is fired on video player close event
        
        */
        this.onCloseVideoPlayer = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.height == null) {
            this.height = 450;
        }
        if (this.width == null) {
            this.width = 98;
            this.closePadding = 97;
        }
        else {
            this.closePadding = this.width - 1;
        }
        if (this.url != null) {
            this.sanitizedUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.url);
        }
    }
    /**
     * @return {?}
     */
    routeBackToApp() {
        this.onCloseVideoPlayer.emit(this.url);
    }
}
AmexioYoutubePlayerComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-ee-youtube-player', template: `
    <div>
      <span class="close-button" [ngStyle]="{'padding-left':closePadding+'%'}">
        <i class="fa fa-times fa-lg" (click)="routeBackToApp()" aria-hidden="true"></i>
      </span>
      <div class="text-center">
        <iframe [height]="height+'px'" [width]="width+'%'"
                [src]="sanitizedUrl" frameborder="0"
                allowfullscreen>
        </iframe>
      </div>
    </div>
  `,
            },] },
];
/** @nocollapse */
AmexioYoutubePlayerComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
AmexioYoutubePlayerComponent.propDecorators = {
    url: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    onCloseVideoPlayer: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const CALENDAR = {
    ALL_DAY_TEXT: 'all-day',
    YEAR: 'year',
    MONTH: 'month',
    WEEK: 'week',
    DAY: 'day',
    FULL: 'full',
    SHORT: 'short',
    MIN: 'min',
    DAY_NAME: {
        full: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
        short: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        min: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
    },
    MONTH_NAME: {
        full: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
            'November', 'December'],
        short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        min: ['Ja', 'Fe', 'Ma', 'Ap', 'Ma', 'Jun', 'Jul', 'Au', 'Se', 'Oc', 'No', 'De'],
    },
    DAY_TIME_SERIES_WITH_30: [{ hr: 0, min: 0 }, { hr: 0, min: 30 }, { hr: 1, min: 0 }, { hr: 1, min: 30 },
        { hr: 2, min: 0 }, { hr: 2, min: 30 }, { hr: 3, min: 0 }, { hr: 3, min: 30 }, { hr: 4, min: 0 },
        { hr: 4, min: 30 }, { hr: 5, min: 0 }, { hr: 5, min: 30 }, { hr: 6, min: 0 }, { hr: 6, min: 30 },
        { hr: 7, min: 0 }, { hr: 7, min: 30 }, { hr: 8, min: 0 }, { hr: 8, min: 30 }, { hr: 9, min: 0 },
        { hr: 9, min: 30 }, { hr: 10, min: 0 }, { hr: 10, min: 30 }, { hr: 11, min: 0 }, { hr: 11, min: 30 },
        { hr: 12, min: 0 }, { hr: 12, min: 30 }, { hr: 13, min: 0 }, { hr: 13, min: 30 }, { hr: 14, min: 0 },
        { hr: 14, min: 30 }, { hr: 15, min: 0 }, { hr: 15, min: 30 }, { hr: 16, min: 0 }, { hr: 16, min: 30 },
        { hr: 17, min: 0 }, { hr: 17, min: 30 }, { hr: 18, min: 0 }, { hr: 18, min: 30 }, { hr: 19, min: 0 },
        { hr: 19, min: 30 }, { hr: 20, min: 0 }, { hr: 20, min: 30 }, { hr: 21, min: 0 }, { hr: 21, min: 30 },
        { hr: 22, min: 0 }, { hr: 22, min: 30 }, { hr: 23, min: 0 }, { hr: 23, min: 30 }, { hr: 24, min: 0 }],
    DAY_TIME_SERIES: [{ hr: 0, min: 0 }, { hr: 1, min: 0 }, { hr: 2, min: 0 }, { hr: 3, min: 0 },
        { hr: 4, min: 0 }, { hr: 5, min: 0 }, { hr: 6, min: 0 }, { hr: 7, min: 0 }, { hr: 8, min: 0 },
        { hr: 9, min: 0 }, { hr: 10, min: 0 }, { hr: 11, min: 0 }, { hr: 12, min: 0 }, { hr: 13, min: 0 },
        { hr: 14, min: 0 }, { hr: 15, min: 0 }, { hr: 16, min: 0 }, { hr: 17, min: 0 }, { hr: 18, min: 0 },
        { hr: 19, min: 0 }, { hr: 20, min: 0 }, { hr: 21, min: 0 }, { hr: 22, min: 0 }, { hr: 23, min: 0 },
        { hr: 24, min: 0 }],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CalendarEventModel {
    /**
     * @param {?} isEvent
     * @param {?} details
     * @param {?} title
     * @param {?} hasTimeSlot
     * @param {?} eventDateTime
     * @param {?=} events
     */
    constructor(isEvent, details, title, hasTimeSlot, eventDateTime, events) {
        this.isEvent = isEvent;
        this.details = details;
        this.title = title;
        this.hasTimeSlot = hasTimeSlot;
        this.eventDateTime = eventDateTime;
        this.events = events;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioDateUtils {
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    isDateEqual(d1, d2) {
        const /** @type {?} */ date1 = new Date(d1.getTime());
        const /** @type {?} */ date2 = new Date(d2.getTime());
        if (date1.getTime() === date2.getTime()) {
            return true;
        }
        else if ((date1.getUTCFullYear() === date2.getUTCFullYear()) && (date1.getMonth() === date2.getMonth())
            && (date1.getDate() === date2.getDate())) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} d1
     * @param {?} d2
     * @return {?}
     */
    isDateGreaterThenEqualTO(d1, d2) {
        const /** @type {?} */ date1 = new Date(d1.getTime());
        const /** @type {?} */ date2 = new Date(d2.getTime());
        if (date1.getTime() >= date2.getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} selectedPeriod
     * @param {?} currrentDate
     * @return {?}
     */
    createDaysForMonths(selectedPeriod, currrentDate) {
        const /** @type {?} */ calendaryData = [];
        const /** @type {?} */ date = new Date(selectedPeriod.getFullYear(), selectedPeriod.getMonth(), 1, 0, 0, 0, 0); // Starting at the 1st of the month
        const /** @type {?} */ extras = (date.getDay() + 6) % 7; // How many days of the last month do we need to include?
        date.setDate(date.getDate() - extras); // Skip back to the previous monday
        while (calendaryData.length < 6) {
            const /** @type {?} */ rowDays = [];
            for (let /** @type {?} */ i = 0; i < 7; i++) {
                const /** @type {?} */ day = {
                    date: null, selected: false, isActivePeriod: null, isDisabled: false,
                    isActive: false, isEvent: false, eventDetails: null,
                };
                day['id'] = Math.floor(Math.random() * 90000) + 10000 + '_monthid';
                day.date = new Date(date.getTime());
                day.isActivePeriod = (date.getMonth() === selectedPeriod.getMonth());
                day.isActive = this.isDateEqual(day.date, new Date());
                rowDays.push(day);
                date.setDate(date.getDate() + 1);
            }
            calendaryData.push(rowDays);
        }
        return calendaryData;
    }
    /**
     * @param {?} selectedPeriod
     * @param {?} currrentDate
     * @return {?}
     */
    createDaysForWeek(selectedPeriod, currrentDate) {
        const /** @type {?} */ calendaryData = [];
        const /** @type {?} */ date = this.getMonday(selectedPeriod);
        for (let /** @type {?} */ i = 0; i < 7; i++) {
            const /** @type {?} */ day = {
                date: null, selected: false, isActivePeriod: null, isDisabled: false, isActive: false, isEvent: false, eventDetails: null,
            };
            day.date = new Date(date.getTime());
            day.isActivePeriod = (date.getMonth() === selectedPeriod.getMonth());
            day.isActive = this.isDateEqual(day.date, currrentDate);
            calendaryData.push(day.date);
            date.setDate(date.getDate() + 1);
        }
        return calendaryData;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getMonday(date) {
        if (date) {
            const /** @type {?} */ day = date.getDay() || 7;
            if (day !== 1) {
                date.setHours(-24 * (day - 1));
            }
        }
        return date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getWeekSunday(date) {
        if (date.getDay() === 0) {
            return date;
        }
        else {
            const /** @type {?} */ diff = date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1);
            const /** @type {?} */ monday = new Date(date.setDate(diff));
            return new Date(monday.setDate(monday.getDate() - 1));
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getNextSunday(date) {
        const /** @type {?} */ currentSunday = this.getWeekSunday(date);
        currentSunday.setDate(currentSunday.getDate() + 7);
        return new Date(currentSunday.getTime());
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getPrevSunday(date) {
        const /** @type {?} */ currentSunday = this.getWeekSunday(date);
        currentSunday.setDate(currentSunday.getDate() - 7);
        return new Date(currentSunday.getTime());
    }
    /**
     * @param {?} date
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    isBetween(date, startDate, endDate) {
        endDate.setSeconds(0);
        startDate.setSeconds(0);
        date.setSeconds(0);
        startDate.setMilliseconds(0);
        endDate.setMilliseconds(0);
        date.setMilliseconds(0);
        if (date.getTime() > startDate.getTime() && date.getTime() < endDate.getTime()) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} longdate
     * @return {?}
     */
    getDateWithSecondsZero(longdate) {
        const /** @type {?} */ date = new Date(longdate);
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCalendarComponent {
    constructor() {
        this.displayHeaders = [];
        this.calendarMonthData = [];
        this.calendarWeekData = [];
        this.prevMonthPressed = false;
        this.nextMonthPressed = false;
        this.dayPressed = false;
        this.weekPressed = false;
        this.monthPressed = false;
        this.yearPressed = false;
        this.onEventClicked = new EventEmitter();
        this.currentState = CALENDAR.MONTH;
        this.headertype = CALENDAR.SHORT;
        this.currrentDate = new Date();
        this.events = [];
        this.adu = new AmexioDateUtils();
        this.weekHeaders = { title: CALENDAR.ALL_DAY_TEXT, daywiseevent: null, time: null };
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set calendardate(v) {
        if (v != null) {
            try {
                this._calenadrDate = v;
                this.currrentDate = new Date(v);
            }
            catch (/** @type {?} */ e) {
                this.currrentDate = new Date();
            }
        }
    }
    /**
     * @return {?}
     */
    get calendardate() {
        return this._calenadrDate;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initCalendar();
    }
    /**
     * @return {?}
     */
    initCalendar() {
        this.validateEventData();
        this.createData(this.currrentDate);
        this.prevbtnid = Math.floor(Math.random() * 90000) + 10000 + '_previd';
        this.nextbtnid = Math.floor(Math.random() * 90000) + 10000 + '_nextid';
        this.daybtnid = Math.floor(Math.random() * 90000) + 10000 + '_dayid';
        this.weekbtnid = Math.floor(Math.random() * 90000) + 10000 + '_weekid';
        this.monthbtnid = Math.floor(Math.random() * 90000) + 10000 + '_monthid';
        this.yearbtnid = Math.floor(Math.random() * 90000) + 10000 + '_yearid';
    }
    /**
     * @return {?}
     */
    validateEventData() {
        const /** @type {?} */ newEvents = [];
        let /** @type {?} */ i = 1;
        this.events.forEach((event) => {
            if ((event.start + '').indexOf('T') !== -1) {
                event.hasTimeSlot = true;
            }
            if (i > 9) {
                i = 1;
            }
            if (this.eventColorGrouping) {
                event['eventclass'] = 'calendar-active-' + i;
            }
            if (event.end) {
                const /** @type {?} */ events1 = this.generatEventData(new Date(event.start), new Date(event.end));
                events1.forEach((event1) => {
                    const /** @type {?} */ newobj = Object.assign({}, event);
                    newobj.start = event1;
                    newEvents.push(newobj);
                });
            }
            i++;
        });
        newEvents.forEach((event) => {
            this.events.push(event);
        });
    }
    /**
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    generatEventData(startDate, endDate) {
        const /** @type {?} */ event = [];
        let /** @type {?} */ flag = false;
        while (startDate.getTime() <= endDate.getTime()) {
            if (flag) {
                event.push(new Date(startDate.getTime()));
            }
            flag = true;
            startDate.setDate(startDate.getDate() + 1);
        }
        return event;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    hasEvent(date) {
        const /** @type {?} */ eventsData = [];
        const /** @type {?} */ flag = { isEvent: false };
        if (this.events && this.events.length > 0) {
            this.events.forEach((event) => {
                const /** @type {?} */ eventStartDate = new Date(event.start);
                const /** @type {?} */ isEvent = this.adu.isDateEqual(date, eventStartDate);
                if (isEvent) {
                    eventsData.push(new CalendarEventModel(isEvent, event, event.title, event.hasTimeSlot, date, null));
                    flag.isEvent = isEvent;
                }
            });
        }
        flag['events'] = eventsData;
        return flag;
    }
    /**
     * @param {?} selectedPeriod
     * @return {?}
     */
    createData(selectedPeriod) {
        if (this.currentState === CALENDAR.MONTH) {
            this.displayHeaders = CALENDAR.DAY_NAME[this.headertype];
            this.calendarMonthData = this.createDaysForCurrentMonths(selectedPeriod, this.currrentDate);
        }
        else if (this.currentState === CALENDAR.WEEK || this.currentState === CALENDAR.DAY) {
            let /** @type {?} */ weekDays = [];
            if (this.currentState === CALENDAR.WEEK) {
                weekDays = this.adu.createDaysForWeek(selectedPeriod, this.currrentDate);
            }
            else {
                weekDays = [];
                weekDays.push(new Date(this.currrentDate.getTime()));
            }
            this.displayHeaders = weekDays;
            this.createDaysForCurrentWeek(selectedPeriod);
        }
        else if (this.currentState === CALENDAR.YEAR) {
            this.displayHeaders = CALENDAR.DAY_NAME[CALENDAR.SHORT];
            this.calendarMonthData = this.createYearData();
        }
    }
    /**
     * @return {?}
     */
    createYearData() {
        const /** @type {?} */ yearData = [];
        const /** @type {?} */ year = this.currrentDate.getUTCFullYear();
        const /** @type {?} */ months = CALENDAR.MONTH_NAME[CALENDAR.FULL];
        for (let /** @type {?} */ i = 0; i < months.length; i++) {
            const /** @type {?} */ monthDate = new Date(year, i, 1);
            const /** @type {?} */ monthData1 = this.createDaysForCurrentMonths(monthDate, new Date());
            yearData.push(Object.assign({}, { month: monthDate, title: months[i], data: monthData1 }));
        }
        return yearData;
    }
    /**
     * @param {?} selectedPeriod
     * @param {?} currrentDate
     * @return {?}
     */
    createDaysForCurrentMonths(selectedPeriod, currrentDate) {
        const /** @type {?} */ calendarMonthData = [];
        const /** @type {?} */ monthData = this.adu.createDaysForMonths(selectedPeriod, currrentDate);
        monthData.forEach((week) => {
            const /** @type {?} */ rowDays = [];
            week.forEach((day) => {
                const /** @type {?} */ eventDetails = this.hasEvent(day.date);
                if (eventDetails && eventDetails.isEvent) {
                    day.eventDetails = eventDetails;
                    day.isEvent = eventDetails.isEvent;
                }
                rowDays.push(day);
            });
            calendarMonthData.push(rowDays);
        });
        return calendarMonthData;
    }
    /**
     * @param {?} selectedPeriod
     * @return {?}
     */
    createDaysForCurrentWeek(selectedPeriod) {
        this.calendarWeekData = [];
        const /** @type {?} */ allday = Object.assign({}, this.weekHeaders);
        allday.daywiseevent = [];
        this.displayHeaders.forEach((date) => {
            const /** @type {?} */ eventDetails1 = this.hasWeekEvent(date, true);
            const /** @type {?} */ weekobj = Object.assign({}, this.weekobject);
            weekobj.title = eventDetails1.title;
            weekobj.eventDateTime = date;
            weekobj.isEvent = eventDetails1.isEvent;
            weekobj.eventDetails = eventDetails1;
            allday.daywiseevent.push(weekobj);
        });
        this.calendarWeekData.push(allday);
        CALENDAR.DAY_TIME_SERIES.forEach((time) => {
            const /** @type {?} */ dateTime = new Date();
            dateTime.setHours(time.hr, time.min);
            const /** @type {?} */ daywiseevent = [];
            const /** @type {?} */ timeDataDayWise = { title: time.hr + ':' + time.min, time: dateTime };
            this.displayHeaders.forEach((day) => {
                const /** @type {?} */ dateTime1 = new Date(day.getTime());
                dateTime1.setHours(time.hr, time.min, 0);
                const /** @type {?} */ eventDetails1 = this.hasWeekEvent(dateTime1, false);
                const /** @type {?} */ weekobj = {
                    title: eventDetails1.title, eventdatetime: dateTime1,
                    isEvent: eventDetails1.isEvent, eventDetails: eventDetails1,
                };
                daywiseevent.push(weekobj);
            });
            timeDataDayWise['daywiseevent'] = daywiseevent;
            this.calendarWeekData.push(timeDataDayWise);
        });
    }
    /**
     * @param {?} wsd
     * @param {?} wholeday
     * @return {?}
     */
    hasWeekEvent(wsd, wholeday) {
        const /** @type {?} */ adu = new AmexioDateUtils();
        const /** @type {?} */ weekDateSlotStart = adu.getDateWithSecondsZero(wsd.getTime());
        const /** @type {?} */ weekDateSlotEnd = adu.getDateWithSecondsZero(weekDateSlotStart.getTime());
        weekDateSlotEnd.setHours(weekDateSlotEnd.getHours(), 59);
        const /** @type {?} */ weekEventObject = Object.assign({}, this.weekobject);
        if (this.events && this.events.length > 0) {
            this.events.forEach((event) => {
                const /** @type {?} */ eventStartDate = adu.getDateWithSecondsZero(new Date(event.start).getTime());
                const /** @type {?} */ isEvent = this.isEventPresent(event, wholeday, eventStartDate, weekDateSlotEnd, weekDateSlotStart);
                if (event.hasTimeSlot && !wholeday && event.end && isEvent) {
                    const /** @type {?} */ eventEndDate = adu.getDateWithSecondsZero(new Date(event.end).getTime());
                    weekEventObject.diff = (((eventEndDate.getTime() - eventStartDate.getTime())
                        - (86400000 * Math.floor((eventEndDate - eventStartDate) / 86400000))) / 1000) / 60;
                    weekEventObject.diffwithslot = ((eventStartDate.getTime() - weekDateSlotStart.getTime()) / 1000) / 60;
                }
                if (isEvent && !weekEventObject.isEvent) {
                    weekEventObject.hasTimeSlot = event.hasTimeSlot;
                    weekEventObject.eventDateTime = eventStartDate;
                    weekEventObject.isEvent = isEvent;
                    weekEventObject.details = event;
                    weekEventObject.title = event.title;
                }
            });
        }
        return weekEventObject;
    }
    /**
     * @param {?} event
     * @param {?} wholeday
     * @param {?} eventStartDate
     * @param {?} weekDateSlotEnd
     * @param {?} weekDateSlotStart
     * @return {?}
     */
    isEventPresent(event, wholeday, eventStartDate, weekDateSlotEnd, weekDateSlotStart) {
        let /** @type {?} */ isEvent = false;
        if (event.hasTimeSlot && !wholeday) {
            if (event.end) {
                isEvent = ((weekDateSlotEnd.getTime() > eventStartDate.getTime())
                    && (eventStartDate.getTime() >= weekDateSlotStart.getTime()));
            }
        }
        else if (wholeday && !event.hasTimeSlot) {
            isEvent = new AmexioDateUtils().isDateEqual(eventStartDate, weekDateSlotStart);
        }
        return isEvent;
    }
    /**
     * @param {?} event
     * @param {?} eventDateTime
     * @param {?} isEvent
     * @param {?} diff
     * @param {?} diffwithslot
     * @return {?}
     */
    getWeekObject(event, eventDateTime, isEvent, diff, diffwithslot) {
        const /** @type {?} */ flag = Object.assign({}, this.weekobject);
        flag.hasTimeSlot = event.hasTimeSlot;
        flag.eventDateTime = eventDateTime;
        flag.isEvent = isEvent;
        flag.details = event;
        flag.title = event.title;
        flag.diff = diff;
        flag.diffwithslot = diff;
        return flag;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setState(state) {
        this.dayPressed = false;
        this.weekPressed = false;
        this.yearPressed = false;
        this.monthPressed = false;
        if (state === 'day') {
            this.dayPressed = true;
        }
        else if (state === 'week') {
            this.weekPressed = true;
        }
        else if (state === 'month') {
            this.monthPressed = true;
        }
        else if (state === 'year') {
            this.yearPressed = true;
        }
        this.currentState = state;
        this.currrentDate = new Date();
        this.createData(this.currrentDate);
        this.currrentDate = new Date();
    }
    /**
     * @return {?}
     */
    previous() {
        this.prevMonthPressed = true;
        let /** @type {?} */ newDate = new Date(this.currrentDate.getTime());
        if (this.currentState === CALENDAR.MONTH) {
            newDate.setMonth(newDate.getMonth() - 1);
        }
        else if (this.currentState === CALENDAR.WEEK) {
            newDate = this.adu.getPrevSunday(newDate);
        }
        else if (this.currentState === CALENDAR.DAY) {
            newDate.setDate(newDate.getDate() - 1);
        }
        else if (this.currentState === CALENDAR.YEAR) {
            newDate.setUTCFullYear(newDate.getUTCFullYear() - 1);
        }
        this.currrentDate = new Date(newDate);
        this.createData(this.currrentDate);
    }
    /**
     * @return {?}
     */
    next() {
        this.nextMonthPressed = true;
        let /** @type {?} */ newDate = new Date(this.currrentDate.getTime());
        if (this.currentState === CALENDAR.MONTH) {
            newDate.setMonth(newDate.getMonth() + 1);
        }
        else if (this.currentState === CALENDAR.WEEK) {
            newDate = this.adu.getNextSunday(newDate);
        }
        else if (this.currentState === CALENDAR.DAY) {
            newDate.setDate(newDate.getDate() + 1);
        }
        else if (this.currentState === CALENDAR.YEAR) {
            newDate.setUTCFullYear(newDate.getUTCFullYear() + 1);
        }
        this.currrentDate = new Date(newDate);
        this.createData(this.currrentDate);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMonthEvent(event) {
        this.onEventClicked.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDayTimeWiseEvent(event) {
        this.onEventClicked.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onYearEvent(event) {
        this.navigateToDayMode(event.this.date);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDaytimeHeaderClick(event) {
        if (this.currentState === CALENDAR.WEEK) {
            this.navigateToDayMode(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onYearHeaderClicked(event) {
        this.currrentDate = new Date(event.month);
        this.currentState = CALENDAR.MONTH;
        this.createData(this.currrentDate);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    navigateToDayMode(date) {
        this.currentState = CALENDAR.DAY;
        this.currrentDate = new Date(date);
        this.createData(this.currrentDate);
    }
}
AmexioCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-calendar',
                template: `
      <div class="calendar-header card-header">
          <div style="display: inline-flex;">
              <div *ngIf="(currentState === 'month')"> {{currrentDate | date : 'MMMM, y'}} </div>
              <div *ngIf="(currentState === 'week')"> {{displayHeaders[0] | date : 'd MMM'}} - {{displayHeaders[6] | date : 'd MMM'}} {{displayHeaders[6] | date : 'y'}}
                  </div>
              <div *ngIf="(currentState === 'day')"> {{currrentDate | date : 'd MMMM, y'}} </div>
              <div *ngIf="(currentState === 'year')"> {{currrentDate | date : 'y'}} </div>

              <div class="calendar-navigation">
                  <em id={{prevbtnid}} role="button" [attr.aria-pressed]="prevMonthPressed" (keyup.enter)="previous()" aria-label="previous month"
                      tabindex="1" style="padding-right: 20px;" class="fa fa-chevron-left" aria-hidden="true" (click)="previous()"></em>
                  <em id="{{nextbtnid}}" role="button" [attr.aria-pressed]="nextMonthPressed" (keyup.enter)="next()" aria-label="next month"
                      tabindex="1" style="padding-right: 20px;" class="fa fa-chevron-right" aria-hidden="true" (click)="next()"></em>
              </div>
          </div>
          <div>{{title}}</div>
          <div>
              <button id="{{daybtnid}}" role="button" tabindex="1" [attr.aria-pressed]="dayPressed" (keyup.enter)="setState('day')" (click)="setState('day')">Day</button>
              <button id="{{weekbtnid}}" [attr.aria-pressed]="weekPressed" role="button" aria-label="week" tabindex="1" (keyup.enter)="setState('week')"
                  (click)="setState('week')">Week</button>
              <button id="{{monthbtnid}}" [attr.aria-pressed]="monthPressed" role="button" aria-label="month" tabindex="1" (keyup.enter)="setState('month')"
                  (click)="setState('month')">Month</button>
              <button id="{{yearbtnid}}" [attr.aria-pressed]="yearPressed" role="button" aria-label="year" tabindex="1" (keyup.enter)="setState('year')"
                  (click)="setState('year')">Year</button>
          </div>
      </div>
      <amexio-calendar-month *ngIf="(currentState === 'month')" [headers]="displayHeaders" [calendar-data]="calendarMonthData"
          [calendar-row]="calendarRow" (onEventClicked)="onMonthEvent($event)">
      </amexio-calendar-month>
      <amexio-calendar-day-timewise *ngIf="(currentState === 'week' || currentState === 'day')" [headers]="displayHeaders" [calendar-data]="calendarWeekData"
          (onHeaderClicked)="onDaytimeHeaderClick($event)" (onEventClicked)="onDayTimeWiseEvent($event)"> </amexio-calendar-day-timewise>
      <amexio-calendar-year *ngIf="(currentState === 'year')" [headers]="displayHeaders" [calendar-data]="calendarMonthData" (onLeftNavigate)="previous()"
          (onRightNavigate)="next()" (onTopNavigate)="previous()" (onBottomNavigate)="next()" (onHeaderClicked)="onYearHeaderClicked($event)"
          (onEventClicked)="onYearEvent($event)"> </amexio-calendar-year>
    `,
                styles: [`
      button,em{cursor:pointer}table{width:100%;height:100%;-webkit-box-sizing:border-box;box-sizing:border-box;table-layout:fixed;border-collapse:collapse;border-spacing:0;position:relative;z-index:1}
    `],
            },] },
];
/** @nocollapse */
AmexioCalendarComponent.ctorParameters = () => [];
AmexioCalendarComponent.propDecorators = {
    headertype: [{ type: Input, args: ['header-type',] }],
    events: [{ type: Input, args: ['events',] }],
    title: [{ type: Input, args: ['title',] }],
    calendardate: [{ type: Input, args: ['calendar-date',] }],
    eventColorGrouping: [{ type: Input, args: ['event-color-grouping',] }],
    onEventClicked: [{ type: Output, args: ['onEventClicked',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCalendarDayTimeWiseComponent {
    constructor() {
        this.onEventClicked = new EventEmitter();
        this.onHeaderClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.width = (this.headerRow.nativeElement.offsetWidth - 50) / 7;
        if ((this.width - 50) > 50) {
            this.width = this.width - 50;
        }
    }
    /**
     * @param {?} event1
     * @param {?} eventData
     * @return {?}
     */
    eventClicked(event1, eventData) {
        const /** @type {?} */ eventObject = {
            event: event1,
            this: eventData.details,
        };
        this.onEventClicked.emit(eventObject);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onHeaderClick(event) {
        this.onHeaderClicked.emit(event);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    fulldate(date) {
        const /** @type {?} */ days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
        const /** @type {?} */ months = ['january', 'febuary', 'march', 'april', 'may', 'june', 'july', 'august',
            'september', 'october', 'november', 'december'];
        let /** @type {?} */ ariadate = date.getDate();
        months.forEach((element, index) => {
            if (date.getMonth() === index) {
                ariadate = ariadate + element;
            }
        });
        days.forEach((individualday, index) => {
            if (date.getDay() === index) {
                ariadate = ariadate + individualday;
            }
        });
        return ariadate;
    }
}
AmexioCalendarDayTimeWiseComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-calendar-day-timewise',
                template: `
      <table>

          <thead>
              <tr>
                  <td [attr.colspan]="headers.length">
                      <table>
                          <tr #headerRow>
                              <td class="calendar-header-items calendar-user-active-timeslot" style="width:50px;"> &nbsp;</td>
                              <td class="calendar-header-items" style="cursor: pointer;" (click)="onHeaderClick(header)" *ngFor="let header of headers">
                                  <span tabindex="1" attr.aria-label="{{header | date : 'EEEE, MMMM d, y'}}">
                                      <span>{{header | date : 'EE'}}</span>
                                      <br />
                                      <b style="font-size:20px;">{{header | date : 'd'}}</b>
                                  </span>
                              </td>
                          </tr>
                      </table>
                  </td>
              </tr>
          </thead>

          <tbody>
              <tr>
                  <td class="calendar-mainbox" [attr.colspan]="headers.length">
                      <div class="calendar-scroller">
                          <div style="width: 100%; position: relative;">
                              <div class="calendar-bg">
                                  <table>
                                      <tr *ngFor="let calendarRow of calendaryData">

                                          <td class="calendar-header-items calendar-week-timeslot" style="width:50px;">
                                              <div style="min-height: 50px;" *ngIf="(calendarRow.time==null)">
                                                  {{calendarRow.title}}
                                              </div>
                                              <div class="calendar-week-timeslotseries-div" *ngIf="(calendarRow.time && calendarRow.time!=null)">
                                                  {{ calendarRow.time | date:'hh:mm a' }}
                                              </div>
                                          </td>

                                          <td style="padding-bottom: 0px;" [ngStyle]="{'padding-top': (day.isEvent && day.eventDetails && day.eventDetails.diffwithslot) ? day.eventDetails.diffwithslot+'px' : '0px'}"
                                              class="calendar-box-items" *ngFor="let day of calendarRow.daywiseevent">

                                              <div (click)="eventClicked($event,day)" [class]="'calendar-week-day-timeslot' + '  '+((day.eventDetails.details && day.eventDetails.details.eventclass) ? day.eventDetails.details.eventclass:'') "
                                                  [ngClass]="{'calendar-week-active-timeslot': day.isEvent}" [ngStyle]="{'height': (day.isEvent && day.eventDetails && day.eventDetails.diff) ? day.eventDetails.diff+'px' : null}">

                                                  <span [attr.tabindex]="(day.isEvent ? 1 : -1)" (keyup.enter)="eventClicked($event,day)" attr.aria-label="{{day.eventdatetime | date : 'EEEE, MMMM d, y'}} {{day.eventDetails.details.title}} {{day.eventDetails.details.start |  date: 'shortTime'}} to {{day.eventDetails.details.end |  date: 'shortTime'}}"
                                                      *ngIf="day.isEvent" class="calendar-user-active">
                                                      {{day.eventDetails.details.title}}
                                                      <br />
                                                      <span class="calendar-user-active-timeslot" *ngIf="(day.eventDetails.details && day.eventDetails.details.hasTimeSlot)">
                                                          {{day.eventDetails.details.start | date: "shortTime"}}
                                                          <ng-container *ngIf="(day.eventDetails.details && day.eventDetails.details.end)">
                                                              - {{day.eventDetails.details.end | date: "shortTime"}}
                                                          </ng-container>
                                                      </span>
                                                  </span>

                                              </div>
                                          </td>

                                      </tr>
                                  </table>
                              </div>
                          </div>
                      </div>
                  </td>
              </tr>
          </tbody>
      </table>
    `,
                styles: [`
      table{width:100%;height:100%;-webkit-box-sizing:border-box;box-sizing:border-box;table-layout:fixed;border-collapse:collapse;border-spacing:0;position:relative;z-index:1}
    `],
            },] },
];
/** @nocollapse */
AmexioCalendarDayTimeWiseComponent.ctorParameters = () => [];
AmexioCalendarDayTimeWiseComponent.propDecorators = {
    headers: [{ type: Input, args: ['headers',] }],
    calendaryData: [{ type: Input, args: ['calendar-data',] }],
    headerRow: [{ type: ViewChild, args: ['headerRow',] }],
    onEventClicked: [{ type: Output, args: ['onEventClicked',] }],
    onHeaderClicked: [{ type: Output, args: ['onHeaderClicked',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCalendarMonthComponent {
    constructor() {
        this.onEventClicked = new EventEmitter();
    }
    /**
     * @param {?} event1
     * @param {?} eventData
     * @return {?}
     */
    eventClicked(event1, eventData) {
        const /** @type {?} */ eventObject = {
            event: event1,
            this: eventData.details,
        };
        this.onEventClicked.emit(eventObject);
    }
    /**
     * @param {?} day
     * @return {?}
     */
    nextrightday(day) {
        let /** @type {?} */ focusrowindex;
        let /** @type {?} */ focusinnerindex;
        this.calendaryData.forEach((calendarrow, rowindex) => {
            calendarrow.forEach((calendardata, innerindex) => {
                if (day.id === calendardata.id) {
                    if ((calendarrow.length - 1) === innerindex) {
                        focusinnerindex = 0;
                        focusrowindex = rowindex + 1;
                    }
                    else {
                        focusinnerindex = innerindex + 1;
                        focusrowindex = rowindex;
                    }
                }
            });
        });
        const /** @type {?} */ itemid = this.calendaryData[focusrowindex][focusinnerindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} day
     * @return {?}
     */
    nextleftday(day) {
        this.calendaryData.forEach((calendarrow, rowindex) => {
            calendarrow.forEach((individualday, innerindex) => {
                if (day.id === individualday.id) {
                    this.refactoredleftday(rowindex, innerindex, calendarrow);
                }
            });
        });
        const /** @type {?} */ itemid = this.calendaryData[this.focusrindex][this.focusiindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} rowindex
     * @param {?} innerindex
     * @param {?} calendarrow
     * @return {?}
     */
    refactoredleftday(rowindex, innerindex, calendarrow) {
        if (rowindex === 0) {
            if (innerindex > 0) {
                this.focusrindex = rowindex;
                this.focusiindex = innerindex - 1;
            }
            else {
                this.focusrindex = rowindex;
                this.focusiindex = innerindex;
            }
        }
        else {
            if (innerindex === 0) {
                this.focusrindex = rowindex - 1;
                this.focusiindex = calendarrow.length - 1;
            }
            else {
                this.focusrindex = rowindex;
                this.focusiindex = innerindex - 1;
            }
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    nexttopday(day) {
        let /** @type {?} */ focusrowindex;
        let /** @type {?} */ focusinnerindex;
        this.calendaryData.forEach((calrow, calrowindex) => {
            calrow.forEach((calday, calinnerindex) => {
                if (day.id === calday.id) {
                    if (calrowindex > 0) {
                        focusrowindex = calrowindex - 1;
                        focusinnerindex = calinnerindex;
                    }
                    else {
                        focusrowindex = calrowindex;
                        focusinnerindex = calinnerindex;
                    }
                }
            });
        });
        const /** @type {?} */ itemid = this.calendaryData[focusrowindex][focusinnerindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} day
     * @return {?}
     */
    nextbottomday(day) {
        let /** @type {?} */ focusrowindex;
        let /** @type {?} */ focusinnerindex;
        this.calendaryData.forEach((calrow, calindex) => {
            calrow.forEach((calday, innerindex) => {
                if (day.id === calday.id) {
                    if ((calindex < (calrow.length - 1))) {
                        focusrowindex = calindex + 1;
                        focusinnerindex = innerindex;
                    }
                    else {
                        focusrowindex = calindex;
                        focusinnerindex = innerindex;
                    }
                }
            });
        });
        const /** @type {?} */ itemid = this.calendaryData[focusrowindex][focusinnerindex];
        document.getElementById(itemid['id']).focus();
    }
    /**
     * @param {?} day
     * @return {?}
     */
    ondatefocus(day) {
        this.ariadatalabel = '';
        if (day.eventDetails && day.eventDetails !== null) {
            day.eventDetails.events.forEach((scheduledevent, index) => {
                if (index === 0) {
                    this.ariadatalabel = this.receiveDateFormat(day.date);
                }
                this.ariadatalabel = this.ariadatalabel + scheduledevent.details.title +
                    ' event scheduled ' +
                    this.formatAMPM(new Date(scheduledevent.details.start)) +
                    ' to ' +
                    this.formatAMPM(new Date(scheduledevent.details.end));
            });
        }
        else {
            this.ariadatalabel = this.receiveDateFormat(day.date) + ' no events scheduled';
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    formatAMPM(date) {
        let /** @type {?} */ hours = date.getHours();
        const /** @type {?} */ minutes = date.getMinutes();
        let /** @type {?} */ lmins;
        const /** @type {?} */ ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        lmins = minutes < 10 ? '0' + minutes : minutes;
        return (hours + ':' + lmins + ' ' + ampm);
    }
    /**
     * @param {?} day
     * @return {?}
     */
    receiveDateFormat(day) {
        let /** @type {?} */ datestring = '';
        datestring = (day).getDate() + this.getFullMonthName(new Date(day)) +
            this.getFullDayName(new Date(day));
        return datestring;
    }
    /**
     * @param {?} recevieddate
     * @return {?}
     */
    getFullMonthName(recevieddate) {
        const /** @type {?} */ months = ['January', 'Febuary', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'];
        const /** @type {?} */ datemonth = recevieddate.getMonth();
        let /** @type {?} */ monthString = '';
        months.forEach((element, index) => {
            if (datemonth === index) {
                monthString = element;
            }
        });
        return monthString;
    }
    /**
     * @param {?} receiveddate
     * @return {?}
     */
    getFullDayName(receiveddate) {
        const /** @type {?} */ weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday',
            'Thursday', 'Friday', 'Saturday'];
        const /** @type {?} */ day = receiveddate.getDay();
        let /** @type {?} */ dayname = '';
        weekdays.forEach((element, index) => {
            if (day === index) {
                dayname = element;
            }
        });
        return dayname;
    }
}
AmexioCalendarMonthComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-calendar-month',
                template: `
      <table>
          <thead>
              <tr>
                  <td [attr.colspan]="headers.length">
                      <table>
                          <tr>
                              <td class="calendar-header-items" *ngFor="let header of headers">
                                  <b>{{header}}</b>
                                  <!-- <b *ngIf="(currentState === 'week')">{{header | date : 'EEEE d'}}</b> -->
                              </td>
                          </tr>
                      </table>
                  </td>
              </tr>
          </thead>
          <tbody>
              <tr>
                  <td class="calendar-mainbox" [attr.colspan]="headers.length">
                      <div class="calendar-scroller">
                          <div style="width: 100%; position: relative;">
                              <div style="min-height: 150px; position: relative;" *ngFor="let calendarRow of calendaryData">
                                  <div class="calendar-bg">
                                      <table>
                                          <tr>
                                              <!-- here down -->
                                              <td attr.aria-label="{{ariadatalabel}}" tabindex="1" (focus)="ondatefocus(day)" (keyup.arrowright)="nextrightday(day)" (keyup.arrowleft)="nextleftday(day)"
                                                  (keyup.arrowdown)="nextbottomday(day)" (keyup.arrowup)="nexttopday(day)" attr.id="{{day.id}}"
                                                  [ngClass]="{'calendar-active-box': day.isActive}" 
                                                  class="calendar-box-items" *ngFor="let day of calendarRow">
                                                  <span [ngClass]="{'calendar-inactive': !day.isActivePeriod}">
                                                      {{ day.date | date:'d' }}
                                                  </span>
                                              </td>
                                          </tr>
                                      </table>
                                  </div>
                                  <div class="calendar-user-content">
                                      <table>
                                          <tr>
                                              <td [ngClass]="{'calendar-user-active': (day.eventDetails && day.eventDetails.isEvent)}" *ngFor="let day of calendarRow">
                                                  <ng-container *ngIf="(day.eventDetails && day.eventDetails.events)">
                                                      <ul class="calendar-ul">
                                                          <li (click)="eventClicked($event,dayevent)" class="calendar-li " [attr.class]="'calendar-li '+' '+dayevent.details.eventclass"
                                                              *ngFor="let dayevent of day.eventDetails.events">
                                                              <span tabindex="1" (keyup.enter)="eventClicked($event,dayevent)" attr.aria-label="{{day.date | date : 'EEEE, MMMM d, y'}} {{dayevent.details.title}} {{dayevent.details.start |  date: 'shortTime'}} {{dayevent.details.end |  date: 'shortTime'}}"
                                                                  class="calendar-user-active" *ngIf="dayevent.isEvent">
                                                                  {{dayevent.details.title}}
                                                                  <br/>
                                                                  <span class="calendar-user-active-timeslot" *ngIf="(dayevent.details && dayevent.details.hasTimeSlot)">
                                                                      {{dayevent.details.start | date: "shortTime"}}
                                                                      <ng-container *ngIf="(dayevent.details && dayevent.details.end)">
                                                                          - {{dayevent.details.end | date: "shortTime"}}
                                                                      </ng-container>
                                                                  </span>
                                                              </span>
                                                          </li>
                                                      </ul>
                                                  </ng-container>
                                              </td>
                                          </tr>
                                      </table>
                                  </div>
                              </div>
                          </div>
                      </div>
                  </td>
              </tr>
          </tbody>
      </table>
    `,
                styles: [`
      table{width:100%;height:100%;-webkit-box-sizing:border-box;box-sizing:border-box;table-layout:fixed;border-collapse:collapse;border-spacing:0;position:relative;z-index:1}
    `],
            },] },
];
/** @nocollapse */
AmexioCalendarMonthComponent.ctorParameters = () => [];
AmexioCalendarMonthComponent.propDecorators = {
    headers: [{ type: Input, args: ['headers',] }],
    calendaryData: [{ type: Input, args: ['calendar-data',] }],
    calendarRow: [{ type: Input, args: ['calendar-row',] }],
    onEventClicked: [{ type: Output, args: ['onEventClicked',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AmexioCalendarYearComponent {
    constructor() {
        this.isextremeright = false;
        this.isextremeleft = false;
        this.onEventClicked = new EventEmitter();
        this.onHeaderClicked = new EventEmitter();
        this.onleftnavigate = new EventEmitter();
        this.onrightnavigate = new EventEmitter();
        this.ontopnavigate = new EventEmitter();
        this.onbottomnavigate = new EventEmitter();
        this.isdaypressed = false;
    }
    /**
     * @param {?} event1
     * @param {?} eventData
     * @return {?}
     */
    eventClicked(event1, eventData) {
        this.isdaypressed = true;
        const /** @type {?} */ eventObject = {
            event: event1,
            this: eventData,
        };
        this.onEventClicked.emit(eventObject);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    monthClicked(event) {
        this.onHeaderClicked.emit(event);
    }
    /**
     * @param {?} day
     * @return {?}
     */
    navigateright(day) {
        this.calendaryData.forEach((calendarrow, rowindex) => {
            calendarrow.data.forEach((calendardata, innerindex) => {
                calendardata.forEach((calelement, calindex) => {
                    if (day.id === calelement.id) {
                        this.refactorednavigateright(calindex, calendardata, innerindex, calendarrow, rowindex);
                    }
                });
            });
        });
        if (!this.isextremeright) {
            const /** @type {?} */ itemid = this.calendaryData[this.rightfocusrowindex].data[this.rightfocusinnerindex][this.rightfocuscalindex];
            document.getElementById(itemid['id']).focus();
        }
    }
    /**
     * @param {?} calindex
     * @param {?} calendardata
     * @param {?} innerindex
     * @param {?} calendarrow
     * @param {?} rowindex
     * @return {?}
     */
    refactorednavigateright(calindex, calendardata, innerindex, calendarrow, rowindex) {
        if (calindex === (calendardata.length - 1) &&
            innerindex === (calendarrow.data.length - 1) &&
            rowindex === (this.calendaryData.length - 1)) {
            this.onrightnavigate.emit();
            this.isextremeright = true;
            this.setExtremeFocus();
        }
        else if (calindex === (calendardata.length - 1)) {
            // chk condn for last row
            if ((calendarrow.data.length - 1) === innerindex) {
                this.rightfocusrowindex = rowindex + 1; // by inc:-> next month
                this.rightfocusinnerindex = 0; // by inc:-> next row in same month
                this.rightfocuscalindex = 0; // by inc:-> next day
            }
            else {
                this.rightfocusrowindex = rowindex; // by inc:-> next month
                this.rightfocusinnerindex = innerindex + 1; // by inc:-> next row in same month
                this.rightfocuscalindex = 0; // by inc:-> next day
            }
        }
        else {
            this.rightfocusrowindex = rowindex; // by inc:-> next month
            this.rightfocusinnerindex = innerindex; // by inc:-> next row in same month
            this.rightfocuscalindex = calindex + 1; // by inc:-> next day
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    navigateleft(day) {
        this.calendaryData.forEach((calendarrow, rowindex) => {
            calendarrow.data.forEach((calendardata, innerindex) => {
                calendardata.forEach((calelement, calindex) => {
                    if (day.id === calelement.id) {
                        this.refactoredleftnavigate(rowindex, innerindex, calindex, calendarrow, calendardata);
                    }
                });
            });
        });
        if (!this.isextremeleft) {
            const /** @type {?} */ itemid = this.calendaryData[this.leftfocusrowindex].data[this.leftfocusinnerindex][this.leftfocuscalindex];
            document.getElementById(itemid['id']).focus();
        }
    }
    /**
     * @param {?} rowindex
     * @param {?} innerindex
     * @param {?} calindex
     * @param {?} calendarrow
     * @param {?} calendardata
     * @return {?}
     */
    refactoredleftnavigate(rowindex, innerindex, calindex, calendarrow, calendardata) {
        if (rowindex === 0 && innerindex === 0 && calindex === 0) {
            this.onleftnavigate.emit();
            this.isextremeleft = true;
            this.setExtremeFocus();
        }
        else if (calindex === 0) {
            // chk for first row
            if (innerindex === 0) {
                this.leftfocusrowindex = rowindex - 1;
                this.leftfocusinnerindex = calendarrow.data.length - 1; // row change
                this.leftfocuscalindex = calendardata.length - 1; // last ele of month
            }
            else {
                this.leftfocusrowindex = rowindex;
                this.leftfocusinnerindex = innerindex - 1;
                this.leftfocuscalindex = calendardata.length - 1;
            }
        }
        else {
            this.leftfocusrowindex = rowindex;
            this.leftfocusinnerindex = innerindex;
            this.leftfocuscalindex = calindex - 1;
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    navigatedown(day) {
        let /** @type {?} */ focusrowindex;
        let /** @type {?} */ focusinnerindex;
        let /** @type {?} */ focuscalindex;
        let /** @type {?} */ isextremedown = false;
        this.calendaryData.forEach((calendarrow, rowindex) => {
            calendarrow.data.forEach((calendardata, innerindex) => {
                calendardata.forEach((calelement, calindex) => {
                    if (day.id === calelement.id) {
                        if (rowindex === (this.calendaryData.length - 1) &&
                            innerindex === (calendarrow.data.length - 1)) {
                            this.onbottomnavigate.emit();
                            isextremedown = true;
                            this.setExtremeFocus();
                        }
                        else if (innerindex === (calendarrow.data.length - 1)) {
                            focusrowindex = rowindex + 1;
                            focusinnerindex = 0;
                            focuscalindex = 0;
                        }
                        else {
                            focusrowindex = rowindex;
                            focusinnerindex = innerindex + 1;
                            focuscalindex = calindex;
                        }
                    }
                });
            });
        });
        if (!isextremedown) {
            const /** @type {?} */ itemid = this.calendaryData[focusrowindex].data[focusinnerindex][focuscalindex];
            document.getElementById(itemid['id']).focus();
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    navigateup(day) {
        let /** @type {?} */ focusrowindex;
        let /** @type {?} */ focusinnerindex;
        let /** @type {?} */ focuscalindex;
        let /** @type {?} */ isextremetop = false;
        this.calendaryData.forEach((calendarrow, rowindex) => {
            calendarrow.data.forEach((calendardata, innerindex) => {
                calendardata.forEach((calelement, calindex) => {
                    if (day.id === calelement.id) {
                        if (rowindex === 0 && innerindex === 0) {
                            this.ontopnavigate.emit();
                            isextremetop = true;
                            this.setExtremeFocus();
                        }
                        else if (innerindex === 0) {
                            focusrowindex = rowindex - 1;
                            focusinnerindex = calendarrow.data.length - 1;
                            focuscalindex = calendardata.length - 1;
                        }
                        else {
                            focusrowindex = rowindex;
                            focusinnerindex = innerindex - 1;
                            focuscalindex = calindex;
                        }
                    }
                });
            });
        });
        if (!isextremetop) {
            const /** @type {?} */ itemid = this.calendaryData[focusrowindex].data[focusinnerindex][focuscalindex];
            document.getElementById(itemid['id']).focus();
        }
    }
    /**
     * @return {?}
     */
    setExtremeFocus() {
        setTimeout(() => {
            let /** @type {?} */ itemid;
            this.calendaryData.forEach((calendarrow, rowindex) => {
                calendarrow.data.forEach((calendardata, innerindex) => {
                    calendardata.forEach((calelement, calindex) => {
                        if (rowindex === 0 && innerindex === 0 && calindex === 0) {
                            itemid = this.calendaryData[0].data[0][0];
                            document.getElementById(itemid['id']).focus();
                        }
                    });
                });
            });
        }, 0);
    }
}
AmexioCalendarYearComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-calendar-year',
                template: `
      <div class="calendar-year">
          <div class="calendar-year-box" *ngFor="let month of calendaryData">
              <div class="calendar-year-month">
                  <div style="cursor: pointer;" (click)="monthClicked(month)">
                      <b>{{month.title}}</b>
                  </div>
                  <table>
                      <thead>
                          <tr>
                              <td *ngFor="let header of headers" style="text-align: center;">
                                  {{header}}
                              </td>
                          </tr>
                      </thead>
                      <tbody>
                          <tr *ngFor="let week of month.data" class="calendar-week-timeslot">
                              <td class="focuscls" attr.id="{{day.id}}" tabindex="1" role="button" [attr.aria-pressed]="isdaypressed" (keyup.arrowright)="navigateright(day)"
                                  (keyup.arrowleft)="navigateleft(day)" (keyup.arrowdown)="navigatedown(day)" (keyup.arrowup)="navigateup(day)"
                                  attr.aria-label="{{day.date | date : 'EEEE, MMMM d, y'}} " [ngClass]="{'calendar-inactive': (!day.isActivePeriod),                                         
                                              'calendar-year-month-hasevent': (day.isActivePeriod && day.isEvent)}" (click)="eventClicked($event, day)"
                                  (keyup.enter)="eventClicked($event, day)" *ngFor="let day of week" style="text-align: center;">
                                  <div  [ngClass]="{'calendar-active-box calendar-year-month-today': (day.isActivePeriod && day.isActive)}" style="height:30px; width: 30px;"
                                      style="text-align: center; cursor: pointer;">
                                      {{day.date | date :'dd'}}
                                  </div>
                              </td>
                          </tr>
                          <tr></tr>
                      </tbody>
                  </table>
              </div>

          </div>
      </div>
    `,
                styles: [`
      table{width:100%;height:100%;-webkit-box-sizing:border-box;box-sizing:border-box;table-layout:fixed;border-collapse:collapse;border-spacing:0;position:relative;z-index:1}
    `],
            },] },
];
/** @nocollapse */
AmexioCalendarYearComponent.ctorParameters = () => [];
AmexioCalendarYearComponent.propDecorators = {
    headers: [{ type: Input, args: ['headers',] }],
    calendaryData: [{ type: Input, args: ['calendar-data',] }],
    onEventClicked: [{ type: Output, args: ['onEventClicked',] }],
    onHeaderClicked: [{ type: Output, args: ['onHeaderClicked',] }],
    onleftnavigate: [{ type: Output, args: ['onLeftNavigate',] }],
    onrightnavigate: [{ type: Output, args: ['onRightNavigate',] }],
    ontopnavigate: [{ type: Output, args: ['onTopNavigate',] }],
    onbottomnavigate: [{ type: Output, args: ['onBottomNavigate',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StepWizardItemComponent {
    /**
     * @param {?} formBuilder
     * @param {?} iconService
     */
    constructor(formBuilder, iconService) {
        this.formBuilder = formBuilder;
        this.iconService = iconService;
        this.active = false;
        this.footerAlign = 'space-between';
        this.onNextStep = new EventEmitter();
        this.onPreviousStep = new EventEmitter();
        this.index = 0;
        this.showPreviousButton = true;
        this.showNextButton = true;
        this.nextLabel = 'Next';
        this.previousIcon = 'fa fa-chevron-left';
        this.nextIcon = 'fa fa-chevron-right';
        if (this.iconService.iconToUse !== 'fa') {
            this.previousIcon = 'keyboard_arrow_left';
            this.nextIcon = 'keyboard_arrow_right';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPreviousClick(event) {
        this.onPreviousStep.emit({ title: this.title,
            index: this.index, data: this.form.value, emitData: { currentdata: this.form.value, event } });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNextClick(event) {
        this.onNextStep.emit({ title: this.title, index: this.index, data: this.form.value, emitData: { currentdata: this.form.value, event } });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.registerFormComponent();
        this.validateForm();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.validateForm();
    }
    /**
     * @return {?}
     */
    validateForm() {
        if (this.form && this.form.status === 'INVALID') {
            this.isNextButtonDisable = true;
        }
        else {
            this.isNextButtonDisable = false;
        }
    }
    /**
     * @return {?}
     */
    registerFormComponent() {
        const /** @type {?} */ ngContentModels = this.models.toArray();
        const /** @type {?} */ innerModelArray = [];
        ngContentModels.forEach((model) => {
            if (!this.isFieldPresentInParentAndChildBoth(innerModelArray, model.name)) {
                if (!model.name || model.name === null) {
                    model.name = model.valueAccessor['name'];
                }
                this.form.control.registerControl(model.name, model.control);
            }
        });
    }
    /**
     * @param {?} innerModelArray
     * @param {?} name
     * @return {?}
     */
    isFieldPresentInParentAndChildBoth(innerModelArray, name) {
        let /** @type {?} */ isPresent = false;
        innerModelArray.forEach((innerModel) => {
            if (name === innerModel.name) {
                isPresent = true;
            }
        });
        return isPresent;
    }
}
StepWizardItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-step-wizard-item',
                template: `
   <form [ngStyle]="{'display':active ? 'block':'none'}" class="form-container form-group">
       <div class="form-body formbody" tabindex="1">
           <ng-content></ng-content>
       </div>
       <footer #formFooter class="form-footer" [ngStyle]="{'justify-content': footerAlign}">
           <amexio-button *ngIf="showPreviousButton" [icon]="previousIcon" [label]="'Previous'" [type]="'theme-color'"
               [tooltip]="'Previous'" (onClick)="onPreviousClick($event)">
           </amexio-button>
           <span *ngIf="!showPreviousButton"></span>
           <amexio-button *ngIf="showNextButton" [disabled]="isNextButtonDisable" [icon]="nextIcon" [label]="nextLabel"
               [form-bind]="'validateForm'" [type]="'theme-color'" [tooltip]="'Next'" (onClick)="onNextClick($event)">
           </amexio-button>
       </footer>
   </form>
 `,
            },] },
];
/** @nocollapse */
StepWizardItemComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: IconLoaderService }
];
StepWizardItemComponent.propDecorators = {
    title: [{ type: Input, args: ['title',] }],
    icon: [{ type: Input, args: ['icon',] }],
    active: [{ type: Input, args: ['active',] }],
    footerAlign: [{ type: Input, args: ['footer-align',] }],
    onNextStep: [{ type: Output }],
    onPreviousStep: [{ type: Output }],
    form: [{ type: ViewChild, args: [NgForm,] }],
    models: [{ type: ContentChildren, args: [NgModel, { descendants: true },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StepWizardComponent {
    /**
     * @param {?} matchMediaService
     */
    constructor(matchMediaService) {
        this.matchMediaService = matchMediaService;
        this.showStepNumber = true;
        this.footerAlign = 'space-between';
        this.finalStage = new EventEmitter();
        this.onNextStepClick = new EventEmitter();
        this.onPreviousStepClick = new EventEmitter();
        this.data = {};
        this.isPhone = false;
        if (this.matchMediaService.IsTablet() || this.matchMediaService.IsPhone()) {
            this.isPhone = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        const /** @type {?} */ time = new Date().getTime();
        this.stepItemList = this.stepItemQueryList.toArray();
        if (this.stepItemList && this.stepItemList.length > 0) {
            this.stepItemList[0].active = true;
        }
        this.stepItemList.forEach((node, index) => {
            try {
                this.stepItemList[index].index = time + index;
                node.onNextStep.subscribe((eventdata) => this.onNextStep(eventdata));
                node.onPreviousStep.subscribe((eventdata) => this.onPreviousStep(eventdata));
                this.stepItemList[index].footerAlign = this.footerAlign;
            }
            catch (/** @type {?} */ Error) {
            }
        });
        this.stepItemList[0].showPreviousButton = false;
        this.stepItemList[0].activeClass = 'active';
        this.stepItemList[this.stepItemList.length - 1].nextLabel = 'Done';
        this.stepItemList[this.stepItemList.length - 1].nextIcon = '';
        this.title = this.stepItemList[0].title;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNextStep(event) {
        let /** @type {?} */ activeIndex = 0;
        const /** @type {?} */ updatedTitle = event.title.replace(/\s/g, '').toLowerCase();
        this.data[updatedTitle] = event.data;
        this.stepItemList.forEach((stepItem, index) => {
            if (stepItem.index === event.index) {
                activeIndex = index + 1;
                this.stepItemList[activeIndex].activeClass = 'active';
                this.stepItemList[activeIndex].active = true;
                this.title = this.stepItemList[activeIndex].title;
            }
        });
        this.stepItemList.forEach((stepItem, index) => {
            const /** @type {?} */ ind = index + 1;
            if (ind > activeIndex) {
            }
            else {
                this.stepItemList[ind - 1].activeClass = 'completed';
                this.stepItemList[ind - 1].active = false;
            }
        });
        if (event && event.emitData && event.emitData.currentdata) {
            // tslint:disable-next-line:max-line-length
            this.onNextStepClick.emit({ title: event.title, currentdata: event.emitData.currentdata, data: this.data, event: event.emitData.event });
        }
        this.finalStage.emit(this.data);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPreviousStep(event) {
        if (event && event.emitData && event.emitData.currentdata) {
            // tslint:disable-next-line:max-line-length
            this.onPreviousStepClick.emit({ title: event.title, currentdata: event.emitData.currentdata, data: this.data, event: event.emitData.event });
        }
        let /** @type {?} */ activeIndex = 0;
        this.stepItemList.forEach((stepItem, index) => {
            if (stepItem.index === event.index) {
                activeIndex = index;
            }
        });
        this.stepItemList.forEach((stepItem, index) => {
            if (activeIndex === index) {
                this.stepItemList[index - 1].activeClass = 'active';
                this.stepItemList[index - 1].active = true;
                this.title = this.stepItemList[index - 1].title;
            }
            else if (activeIndex > index) {
                this.stepItemList[index + 1].activeClass = '';
                this.stepItemList[index].activeClass = 'completed';
                this.stepItemList[index + 1].active = false;
            }
        });
        this.stepItemList[0].showPreviousButton = false;
    }
}
StepWizardComponent.decorators = [
    { type: Component, args: [{
                selector: 'amexio-step-wizard',
                template: `
    <amexio-card-ce>
        <amexio-header-ce [background]="headerBackground">
            {{title}}
        </amexio-header-ce>
        <ul class="step-wizard step-wizard-horizontal">
            <li [attr.tabindex]="(item.activeClass === 'active') ? 1: -1" *ngFor="let item of stepItemList; let i = index"
                [ngClass]="item.activeClass">
                <a>
                    <span class="circle ">
                        <ng-container *ngIf="item.icon ">
                            <amexio-image [icon-class]="item.icon "></amexio-image>
                        </ng-container>
                        <ng-container *ngIf="!item.icon && showStepNumber ">{{i+1}}</ng-container>
                    </span>
                    <ng-container *ngIf="item.title ">
                        <ng-container *ngIf="item.icon && showStepNumber ">
                            {{i+1}}
                        </ng-container>
                        <ng-container *ngIf="!isPhone">
                            <span class="stepTitleColor">
                                    {{item.title}}
                            </span>
                        </ng-container>

                    </ng-container>
                </a>
            </li>
        </ul>
        <amexio-body-ce>
            <ng-content select="amexio-step-wizard-item">
            </ng-content>
        </amexio-body-ce>
    </amexio-card-ce>
  `,
            },] },
];
/** @nocollapse */
StepWizardComponent.ctorParameters = () => [
    { type: DeviceQueryService }
];
StepWizardComponent.propDecorators = {
    showStepNumber: [{ type: Input, args: ['show-step-number',] }],
    headerBackground: [{ type: Input, args: ['header-background',] }],
    footerAlign: [{ type: Input, args: ['footer-align',] }],
    finalStage: [{ type: Output }],
    onNextStepClick: [{ type: Output }],
    onPreviousStepClick: [{ type: Output }],
    stepItemQueryList: [{ type: ContentChildren, args: [StepWizardItemComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ENTERPRISE_COMPONENTS = [
    MultiMediaCarouselComponent,
    ContentComponent,
    AmexioYoutubePlayerComponent,
    AmexioWeekDayAvailiblityComponent,
    AmexioCalendarComponent,
    AmexioCalendarDayTimeWiseComponent,
    AmexioCalendarMonthComponent,
    AmexioCalendarYearComponent,
    StepWizardComponent,
    StepWizardItemComponent,
];
class AmexioEnterpriseModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AmexioEnterpriseModule,
            providers: [CommonDataService, DeviceQueryService],
        };
    }
}
AmexioEnterpriseModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    AmexioFormsModule,
                    AmexioPaneModule,
                    AmexioMediaModule,
                    AmexioCreativeModule,
                    AmexioCommonModule,
                    HttpClientModule,
                ],
                exports: ENTERPRISE_COMPONENTS,
                declarations: ENTERPRISE_COMPONENTS,
                providers: [CommonDataService, DeviceQueryService],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { AmexioWidgetModule, CommonDataService, DeviceQueryService, IconLoaderService, Icon, AmexioCreditCardModel, GridConfig, GridConstants, GoogleMapOverlays, AvailableSlotsModel, DayModel, TimeModel, TimeUtil, PropertyGridModel, AmexioFormsModule, LoadRecaptchaService, COMPONENT_CLASS_MAP, AmexioButtonComponent, AmexioButtonGroupComponent, ScriptLoadService, AmexioNavModule, AmexioSideNavComponent, SideNavNodeComponent, AmexioNavBarComponent, KEY_CODE_notify, AmexioNotificationComponent, AmexioLayoutModule, AmexioAccordionHeaderComponent, AmexioAccordionTabComponent, AmexioAccordionComponent, AccordionService, AmexioBorderLayoutItemComponent, AmexioBorderLayoutComponent, AmexioBoxComponent, AmexioCardComponent, AmexioColumnComponent, AmexioGridComponent, AmexioGridItemComponent, AmexioRowComponent, AmexioGridLayoutService, AmexioDataModule, GoogleMapScriptService, AmexioListBoxComponent, AmexioTreeViewComponent, AmexioPaginatorComponent, TreeDataTableComponent, AmexioGoogleMapComponent, AmexioDashBoardModule, DashboardLoaderService, DashBoardTitleComponent, DataPointCenterComponent, DataPointsComponent, DataPointEastComponent, DataPointNorthComponent, DataPointSouthComponent, DataPointWestComponent, GaugeChartComponent, AmexioChartsModule, AreaChartComponent, BarChartComponent, BubbleChartComponent, CandlestickChartComponent, CandlestickWaterfallChartComponent, ChartAreaComponent, ChartLegendComponent, ChartTitleComponent, ColumnChartComponent, ComboChartComponent, DonutChartComponent, GanttChartComponent, HistogramChartComponent, HorizontalAxisComponent, LineChartComponent, PieChartComponent, ScatterChartComponent, TimeLineChartComponent, VerticalAxisComponent, ChartLoaderService, AmexioMapModule, MapPropertiesComponent, GeoChartComponent, TreeMapComponent, MapTitleComponent, MapLoaderService, AmexioPaneModule, AmexioFooterComponent, AmexioBodyComponent, AmexioCarouselComponent, AmexioTemplateDirective, AmexioTemplateWrapperDirective, AmexiodialoguePaneComponent, AmexioFieldSetComponent, AmexioFormActionComponent, AmexioFormBodyComponent, AmexioFormComponent, AmexioFormHeaderComponent, AmexioHeaderComponent, AmexioPanelHeaderComponent, AmexioStepsComponent, StepBlockComponent, AmexioRightVerticalTabComponent, AmexioTabActionComponent, TOP_COMPONENT_CLASS_MAP, BOTTOM_COMPONENT_CLASS_MAP, AmexioTabComponent, AmexioTabPillComponent, AmexioVerticalTabComponent, AmexiotimelineComponent, AmexiotimelineeventComponent, AmexioWindowPaneComponent, AmexioWindowHeaderComponent, OverlayContainerComponent, AmexioFormGroupDirective, AmexioEnterpriseModule, MultiMediaCarouselComponent, ContentComponent, AmexioYoutubePlayerComponent, AmexioWeekDayAvailiblityComponent, AmexioCalendarComponent, AmexioCalendarDayTimeWiseComponent, AmexioCalendarMonthComponent, AmexioCalendarYearComponent, AmexioMediaModule, AmexioVideoPlayerComponent, DisplayFieldService, AmexioRuntimeModule as Éµeb, AmexioRuntimeComponent as Éµec, AmexioCommonModule as Éµc, AmexioContextMenuComponent as Éµb, AmexioBaseContextMenuModule as Éµa, BaseInput as Éµs, BaseFormValidator as Éµbc, CommonIconComponent as Éµg, DisplayFieldComponent as Éµd, DropDownListComponent as Éµe, EventBaseComponent as Éµp, AmexioInputHelperComponent as Éµt, LifeCycleBaseComponent as Éµh, ListBaseComponent as Éµr, ListBaseDatepickerComponent as Éµbl, ValueAccessorBase as Éµl, AmexioCreativeModule as Éµdi, AmexioCardCEComponent as Éµdl, AmexioCarouselCEComponent as Éµea, AmexioCardCEActionComponent as Éµdj, AmexioCardCEBodyComponent as Éµdk, AmexioCardCEHeaderComponent as Éµdm, AmexioFormCEComponent as Éµdo, AmexioFormActionCEComponent as Éµdn, AmexioHomePageCenterPanelComponent as Éµdp, AmexioHomePageComponent as Éµdt, AmexioHomePageEastPanelComponent as Éµdq, AmexioHomePageNorthPanelComponent as Éµdr, AmexioHomePageWestPanelComponent as Éµds, AmexioProgressCEComponent as Éµdv, ViewportBackgroundComponent as Éµdy, ViewportContentBodyComponent as Éµdz, ViewportContentComponent as Éµdx, ViewportComponent as Éµdw, AmexioWindowCEComponent as Éµdu, AmexioGridColumnComponent as Éµcz, AmexioDatagridComponent as Éµcx, DataGridFilterComponent as Éµcy, AmexioDataGridHeaderComponent as Éµda, AmexioItemSelectorComponent as Éµdh, AmexioProgressMultiBarComponent as Éµdc, AmexioProgressBarComponent as Éµdd, PropertyGridComponent as Éµdb, AmexioFilterTreeComponent as Éµdg, HorizontalTreeViewNodeComponent as Éµde, HorizontalTreeViewComponent as Éµdf, StepWizardComponent as Éµed, StepWizardItemComponent as Éµee, AmexioSearchAdvanceComponent as Éµbw, SearchboxtoolComponent as Éµbv, AmexioBadgeComponent as Éµch, AmexioButtonDropdownComponent as Éµbb, AmexioButtonDropDownItemComponent as Éµbd, AmexioSpiltButtonDropdownComponent as Éµbe, CheckboxComponent as Éµbg, AmexioCheckBoxGroupComponent as Éµbf, AmexioCheckBoxComponent as Éµm, AmexioChipComponent as Éµca, AmexioChipsComponent as Éµcb, AmexioCreditcardComponent as Éµbz, DarkmodeComponent as Éµci, AmexioDateTimePickerComponent as Éµbk, AmexioDropDownMenuComponent as Éµbr, AmexioDropDownitemsComponent as Éµbq, AmexioDropDownComponent as Éµo, AmexioEmailInputComponent as Éµv, AmexioFileUploadComponent as Éµbm, AmexioFloatingButtonComponent as Éµbo, AmexioFloatingGroupButtonComponent as Éµbp, AmexioFormValidator as Éµn, AmexioLabelComponent as Éµbn, AmexioMultipleDatePickerComponent as Éµck, AmexioNumberInputComponent as Éµw, AmexioPasswordComponent as Éµx, AmexioRadioGroupComponent as Éµu, AmexioRangeSliderComponent as Éµcj, AmexioRatingComponent as Éµba, RecaptchaComponent as Éµbx, AmexioSliderComponent as Éµbh, DomHandler as Éµbi, FacebookAuthComponent as Éµcf, GoogleAuthComponent as Éµcc, LinkedInAuthComponent as Éµce, SocialBaseComponent as Éµcd, AmexioSocialComponent as Éµcg, AmexioSpinnerComponent as Éµby, AmexioTagsInputComponent as Éµbj, AmexioTextAreaComponent as Éµy, AmexioTextInputComponent as Éµk, AmexioToggleComponent as Éµz, ToolbarComponent as Éµbs, ToolBarActionComponent as Éµbu, ToolbaroneComponent as Éµbt, AmexioTypeAheadComponent as Éµq, AmexioLayoutComponent as Éµi, AmexioLayoutItemComponent as Éµj, AmexioImageComponent as Éµcl, AmexioBreadcrumbComponent as Éµcu, DockbarComponent as Éµcr, DockedBarToolComponent as Éµcs, AmexioMenuBarComponent as Éµct, AmexioInnerNavMenuComponent as Éµcq, AmexioNavActionComponent as Éµco, AmexioNavItemComponent as Éµcm, AmexioNavMenuComponent as Éµcn, AmexioNavTextFieldComponent as Éµcp, AmexioSideNavInnerNodeComponent as Éµcv, AmexioPanelComponent as Éµcw, FilterPipe as Éµf };
//# sourceMappingURL=amexio-ng-extensions.js.map
