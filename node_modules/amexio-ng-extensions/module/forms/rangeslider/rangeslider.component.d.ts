import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class AmexioRangeSliderComponent implements OnDestroy, OnInit, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    private ngZone;
    cd: ChangeDetectorRef;
    value: number;
    values: number[];
    handleValue: number;
    handleValues: number[];
    dragData: boolean;
    dragListener: any;
    mouseupListener: any;
    initX: number;
    initY: number;
    barWidth: number;
    barHeight: number;
    sliderHandleClick: boolean;
    handleIndex: number;
    startHandleValue: any;
    startx: number;
    starty: number;
    animate: boolean;
    disabled: boolean;
    min: number;
    max: number;
    orientation: string;
    step: number;
    range: boolean;
    maxRange: number;
    style: any;
    type: string;
    fullRange: boolean;
    styleClass: string;
    onChange: EventEmitter<any>;
    onSlideEnd: EventEmitter<any>;
    onModelChange: any;
    onModelTouched: any;
    constructor(el: ElementRef, renderer: Renderer2, ngZone: NgZone, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onMouseMove(event: Event, index?: number): void;
    onSlideBarClick(event: any): void;
    handleChange(event: Event): void;
    bindDragListeners(): void;
    checkMouseUpListener(): void;
    unbindDragListeners(): void;
    setValueFromHandle(event: Event, handleValue: any): void;
    handleStepChange(newValue: number, oldValue: number): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(val: boolean): void;
    readonly rangeStartLeft: string;
    readonly rangeStartBottom: string;
    readonly rangeEndLeft: string;
    readonly rangeEndBottom: string;
    isVertical(): boolean;
    updateDomData(): void;
    getWindowScrollTop(): number;
    getWindowScrollLeft(): number;
    calculateHandleValue(event: any): number;
    updateHandleValue(): void;
    updateValue(val: number, event?: Event): void;
    updateValueMethodDivided(val: number, event?: Event): void;
    getValueFromHandle(handleValue: number): number;
    getDecimalsCount(value: number): number;
    getNormalizedValue(val: number): number;
    ngOnDestroy(): void;
}
