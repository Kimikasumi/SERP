import { ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DomHandler } from './slider.handler';
export declare class AmexioSliderComponent implements OnDestroy, ControlValueAccessor {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer2;
    private ngZone;
    animate: boolean;
    disabled: boolean;
    min: number;
    max: number;
    orientation: string;
    step: number;
    range: boolean;
    style: any;
    styleClass: string;
    onChange: EventEmitter<any>;
    onSlideEnd: EventEmitter<any>;
    dragging: boolean;
    dragListener: any;
    mouseupListener: any;
    initX: number;
    initY: number;
    barWidth: number;
    barHeight: number;
    sliderHandleClick: boolean;
    handleIndex: number;
    startHandleValue: any;
    startx: number;
    starty: number;
    value: number;
    values: number;
    handleValue: number;
    handleValues: number[];
    slidevar: any;
    componentId: string;
    sliderFocus: boolean;
    onModelChange: any;
    onModelTouched: any;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer2, ngZone: NgZone);
    onMouseDown(event: Event, index?: number): void;
    onTouchStart(event: any, index?: number): void;
    onTouchMove(event: any, index?: number): void;
    onBarClick(event: any): void;
    handleChange(event: Event): void;
    bindDragListeners(): void;
    mouseUpListMethod(): void;
    unbindDragListeners(): void;
    setValueFromHandle(event: Event, handleValue: any): void;
    handleStepChange(newValue: number, oldValue: number): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(val: boolean): void;
    readonly rangeStartLeft: string;
    readonly rangeStartBottom: string;
    readonly rangeEndLeft: string;
    readonly rangeEndBottom: string;
    isVertical(): boolean;
    updateDomData(): void;
    calculateHandleValue(event: any): number;
    updateHandleValue(): void;
    updateValue(val: number, valueEvent?: Event): void;
    updateValueNoRange(val: number, valueEvent?: Event): void;
    getValueFromHandle(handleValue: number): number;
    ngOnDestroy(): void;
    onKeyLeftDown(event: Event): void;
    onKeyRightUp(event: Event): void;
    onKeyHome(event: Event): void;
    onKeyEnd(event: Event): void;
    onKeyPageUp(event: Event): void;
    onKeyPageDown(event: Event): void;
    onFocus(event: Event): void;
    onBlur(event: Event): void;
}
